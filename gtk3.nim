{.deadCodeElim: on.}

when defined(windows): 
  const LIB_GTK* = "libgtk-win32-3.0-0.dll"
elif defined(gtk_quartz):
  const LIB_GTK* = "libgtk-3.0.dylib"
elif defined(macosx):
  const LIB_GTK* = "libgtk-x11-3.0.dylib"
else: 
  const LIB_GTK* = "libgtk-3.so(|.0)"

{.pragma: libgtk, cdecl, dynlib: LIB_GTK.}

from gdk3 import Window

from glib import gint, guint, gboolean, gpointer, GQuark, guint16, guint32, gint16, GDestroyNotify, gdouble, gfloat, gsize, gssize, gunichar,
  guchar, glong, gulong, GTokenType, guint8, G_PRIORITY_HIGH_IDLE, G_MAXUSHORT, time_t
  
from gobject import GClosure, GObjectClassObj, GObjectObj, GObject, GType, GConnectFlags, GCallback
  
from gdk_pixbuf import GdkPixbuf

from cairo import Pattern, Context, Region

from pango import FontDescription, Layout, AttrList, Context, EllipsizeMode, WrapMode, Direction

from gio import GFile, GMenu, GMenuModel, GActionGroup, GAppInfo, GApplication, GApplicationClass, GMountOperation, GMountOperationClass,
  GEmblemedIcon, GEmblemedIconClass, GIcon, GPermission, GAsyncResult, GCancellable

#from atk import AtkObject, AtkObjectClass, AtkRelationSet, AtkRole, AtkCoordType
from atk import Object, ObjectClass, RelationSet, Role, CoordType

const
  GDK_MULTIHEAD_SAFE = true
  DISABLE_DEPRECATED = false

type 
  GApplicationFlags* {.size: sizeof(cint), pure.} = enum 
    NONE, IS_SERVICE = (1 shl 0), 
    IS_LAUNCHER = (1 shl 1), 
    HANDLES_OPEN = (1 shl 2), 
    HANDLES_COMMAND_LINE = (1 shl 3), 
    SEND_ENVIRONMENT = (1 shl 4), 
    NON_UNIQUE = (1 shl 5)
  GAsyncReadyCallback* = proc (source_obj: GObject; 
                               res: gio.GAsyncResult; user_data: gpointer) {.cdecl.}

type 
  Align* {.size: sizeof(cint), pure.} = enum 
    FILL, START, `END`, CENTER, 
    BASELINE
type 
  ArrowType* {.size: sizeof(cint), pure.} = enum 
    UP, DOWN, LEFT, RIGHT, 
    NONE
type 
  BaselinePosition* {.size: sizeof(cint), pure.} = enum 
    TOP, CENTER, 
    BOTTOM
type 
  DeleteType* {.size: sizeof(cint), pure.} = enum 
    CHARS, WORD_ENDS, WORDS, 
    DISPLAY_LINES, DISPLAY_LINE_ENDS, 
    PARAGRAPH_ENDS, PARAGRAPHS, WHITESPACE
type 
  DirectionType* {.size: sizeof(cint), pure.} = enum 
    TAB_FORWARD, TAB_BACKWARD, UP, DOWN, 
    LEFT, RIGHT
type 
  IconSize* {.size: sizeof(cint), pure.} = enum 
    INVALID, MENU, SMALL_TOOLBAR, 
    LARGE_TOOLBAR, BUTTON, DND, 
    DIALOG
type 
  SensitivityType* {.size: sizeof(cint), pure.} = enum 
    AUTO, ON, OFF
type 
  TextDirection* {.size: sizeof(cint), pure.} = enum 
    NONE, LTR, RTL
type 
  Justification* {.size: sizeof(cint), pure.} = enum 
    LEFT, RIGHT, CENTER, FILL
type 
  MenuDirectionType* {.size: sizeof(cint), pure.} = enum 
    PARENT, CHILD, NEXT, 
    PREV
type 
  MessageType* {.size: sizeof(cint), pure.} = enum 
    INFO, WARNING, QUESTION, 
    ERROR, OTHER
type 
  MovementStep* {.size: sizeof(cint), pure.} = enum 
    LOGICAL_POSITIONS, VISUAL_POSITIONS, 
    WORDS, DISPLAY_LINES, 
    DISPLAY_LINE_ENDS, PARAGRAPHS, 
    PARAGRAPH_ENDS, PAGES, BUFFER_ENDS, 
    HORIZONTAL_PAGES
type 
  ScrollStep* {.size: sizeof(cint), pure.} = enum 
    STEPS, PAGES, ENDS, 
    HORIZONTAL_STEPS, HORIZONTAL_PAGES, 
    HORIZONTAL_ENDS
type 
  Orientation* {.size: sizeof(cint), pure.} = enum 
    HORIZONTAL, VERTICAL
type 
  PackType* {.size: sizeof(cint), pure.} = enum 
    START, `END`
type 
  PositionType* {.size: sizeof(cint), pure.} = enum 
    LEFT, RIGHT, TOP, BOTTOM
type 
  ReliefStyle* {.size: sizeof(cint), pure.} = enum 
    NORMAL, HALF, NONE
type 
  ScrollType* {.size: sizeof(cint), pure.} = enum 
    NONE, JUMP, STEP_BACKWARD, 
    STEP_FORWARD, PAGE_BACKWARD, 
    PAGE_FORWARD, STEP_UP, STEP_DOWN, 
    PAGE_UP, PAGE_DOWN, STEP_LEFT, 
    STEP_RIGHT, PAGE_LEFT, PAGE_RIGHT, 
    START, `END`
type 
  SelectionMode* {.size: sizeof(cint), pure.} = enum 
    NONE, SINGLE, BROWSE, 
    MULTIPLE
type 
  ShadowType* {.size: sizeof(cint), pure.} = enum 
    NONE, `IN`, `OUT`, ETCHED_IN, 
    ETCHED_OUT
type 
  StateType* {.size: sizeof(cint), pure.} = enum 
    NORMAL, ACTIVE, PRELIGHT, 
    SELECTED, INSENSITIVE, INCONSISTENT, 
    FOCUSED
type 
  ToolbarStyle* {.size: sizeof(cint), pure.} = enum 
    ICONS, TEXT, BOTH, 
    BOTH_HORIZ
type 
  WrapMode* {.size: sizeof(cint), pure.} = enum 
    NONE, CHAR, WORD, WORD_CHAR
type 
  SortType* {.size: sizeof(cint), pure.} = enum 
    ASCENDING, DESCENDING
type 
  IMPreeditStyle* {.size: sizeof(cint), pure.} = enum 
    NOTHING, CALLBACK, NONE
type 
  IMStatusStyle* {.size: sizeof(cint), pure.} = enum 
    NOTHING, CALLBACK, NONE
type 
  PackDirection* {.size: sizeof(cint), pure.} = enum 
    LTR, RTL, TTB, 
    BTT
type 
  PrintPages* {.size: sizeof(cint), pure.} = enum 
    ALL, CURRENT, RANGES, 
    SELECTION
type 
  PageSet* {.size: sizeof(cint), pure.} = enum 
    ALL, EVEN, ODD
type 
  NumberUpLayout* {.size: sizeof(cint), pure.} = enum 
    LEFT_TO_RIGHT_TOP_TO_BOTTOM, 
    LEFT_TO_RIGHT_BOTTOM_TO_TOP, 
    RIGHT_TO_LEFT_TOP_TO_BOTTOM, 
    RIGHT_TO_LEFT_BOTTOM_TO_TOP, 
    TOP_TO_BOTTOM_LEFT_TO_RIGHT, 
    TOP_TO_BOTTOM_RIGHT_TO_LEFT, 
    BOTTOM_TO_TOP_LEFT_TO_RIGHT, 
    BOTTOM_TO_TOP_RIGHT_TO_LEFT
type 
  PageOrientation* {.size: sizeof(cint), pure.} = enum 
    PORTRAIT, LANDSCAPE, 
    REVERSE_PORTRAIT, 
    REVERSE_LANDSCAPE
type 
  PrintQuality* {.size: sizeof(cint), pure.} = enum 
    LOW, NORMAL, HIGH, 
    DRAFT
type 
  PrintDuplex* {.size: sizeof(cint), pure.} = enum 
    SIMPLEX, HORIZONTAL, 
    VERTICAL
type 
  Unit* {.size: sizeof(cint), pure.} = enum 
    NONE, POINTS, INCH, MM
const 
  UNIT_PIXEL* = Unit.NONE
type 
  TreeViewGridLines* {.size: sizeof(cint), pure.} = enum 
    NONE, HORIZONTAL, 
    VERTICAL, BOTH
type 
  DragResult* {.size: sizeof(cint), pure.} = enum 
    SUCCESS, NO_TARGET, 
    USER_CANCELLED, TIMEOUT_EXPIRED, 
    GRAB_BROKEN, ERROR
type 
  SizeGroupMode* {.size: sizeof(cint), pure.} = enum 
    NONE, HORIZONTAL, VERTICAL, 
    BOTH
type 
  SizeRequestMode* {.size: sizeof(cint), pure.} = enum 
    HEIGHT_FOR_WIDTH = 0, WIDTH_FOR_HEIGHT, 
    CONSTANT_SIZE
type 
  ScrollablePolicy* {.size: sizeof(cint), pure.} = enum 
    SCROLL_MINIMUM = 0, SCROLL_NATURAL
type 
  StateFlags* {.size: sizeof(cint), pure.} = enum 
    NORMAL = 0, ACTIVE = 1 shl 0, 
    PRELIGHT = 1 shl 1, SELECTED = 1 shl 2, 
    INSENSITIVE = 1 shl 3, 
    INCONSISTENT = 1 shl 4, FOCUSED = 1 shl 5, 
    BACKDROP = 1 shl 6, DIR_LTR = 1 shl 7, 
    DIR_RTL = 1 shl 8, LINK = 1 shl 9, 
    VISITED = 1 shl 10, CHECKED = 1 shl 11
type 
  RegionFlags* {.size: sizeof(cint), pure.} = enum 
    EVEN = 1 shl 0, ODD = 1 shl 1, 
    FIRST = 1 shl 2, LAST = 1 shl 3, 
    ONLY = 1 shl 4, SORTED = 1 shl 5
type 
  JunctionSides* {.size: sizeof(cint), pure.} = enum 
    NONE = 0,
    CORNER_TOPLEFT = 1 shl 0, 
    CORNER_TOPRIGHT = 1 shl 1, 
    TOP = (JunctionSides.CORNER_TOPLEFT.ord or JunctionSides.CORNER_TOPRIGHT.ord),
    CORNER_BOTTOMLEFT = 1 shl 2, 
    LEFT = (JunctionSides.CORNER_TOPLEFT.ord or JunctionSides.CORNER_BOTTOMLEFT.ord),
    CORNER_BOTTOMRIGHT = 1 shl 3,
    RIGHT = (JunctionSides.CORNER_TOPRIGHT.ord or JunctionSides.CORNER_BOTTOMRIGHT.ord),
    BOTTOM = (JunctionSides.CORNER_BOTTOMLEFT.ord or JunctionSides.CORNER_BOTTOMRIGHT.ord)
type 
  BorderStyle* {.size: sizeof(cint), pure.} = enum 
    NONE, SOLID, INSET, 
    OUTSET, HIDDEN, DOTTED, 
    DASHED, DOUBLE, GROOVE, 
    RIDGE
type 
  LevelBarMode* {.size: sizeof(cint), pure.} = enum 
    CONTINUOUS, DISCRETE
type 
  InputPurpose* {.size: sizeof(cint), pure.} = enum 
    FREE_FORM, ALPHA, 
    DIGITS, NUMBER, 
    PHONE, URL, EMAIL, 
    NAME, PASSWORD, PIN
type 
  InputHints* {.size: sizeof(cint), pure.} = enum 
    NONE = 0, SPELLCHECK = 1 shl 0, 
    NO_SPELLCHECK = 1 shl 1, 
    WORD_COMPLETION = 1 shl 2, 
    LOWERCASE = 1 shl 3, 
    UPPERCASE_CHARS = 1 shl 4, 
    UPPERCASE_WORDS = 1 shl 5, 
    UPPERCASE_SENTENCES = 1 shl 6, 
    INHIBIT_OSK = 1 shl 7
type 
  PropagationPhase* {.size: sizeof(cint), pure.} = enum 
    NONE, CAPTURE, BUBBLE, TARGET
type 
  EventSequenceState* {.size: sizeof(cint), pure.} = enum 
    NONE, CLAIMED, 
    DENIED
type 
  PanDirection* {.size: sizeof(cint), pure.} = enum 
    LEFT, RIGHT, UP, 
    DOWN

template gtk_accel_group*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, accel_group_get_type(), AccelGroupObj))

template gtk_accel_group_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, accel_group_get_type(), AccelGroupClassObj))

template gtk_is_accel_group*(obj: expr): expr = 
  (g_type_check_instance_type(obj, accel_group_get_type()))

template gtk_is_accel_group_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, accel_group_get_type()))

template gtk_accel_group_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, accel_group_get_type(), AccelGroupClassObj))

type 
  AccelFlags* {.size: sizeof(cint), pure.} = enum 
    VISIBLE = 1 shl 0, LOCKED = 1 shl 1, 
    MASK = 0x7
type 
  AccelGroupPrivateObj = object 
  
  AccelGroupActivate* = proc (accel_group: AccelGroup; 
                                 acceleratable: GObject; keyval: guint; 
                                 modifier: gdk3.ModifierType): gboolean {.cdecl.}
  AccelGroupFindFunc* = proc (key: AccelKey; closure: gobject.GClosure; 
                                 data: gpointer): gboolean {.cdecl.}
  AccelGroup* =  ptr AccelGroupObj
  AccelGroupPtr* = ptr AccelGroupObj
  AccelGroupObj*{.final.} = object of GObjectObj
    priv1: ptr AccelGroupPrivateObj

  AccelGroupClass* =  ptr AccelGroupClassObj
  AccelGroupClassPtr* = ptr AccelGroupClassObj
  AccelGroupClassObj*{.final.} = object of GObjectClassObj
    accel_changed*: proc (accel_group: AccelGroup; keyval: guint; 
                          modifier: gdk3.ModifierType; 
                          accel_closure: gobject.GClosure) {.cdecl.}
    gtk_reserved11: proc () {.cdecl.}
    gtk_reserved12: proc () {.cdecl.}
    gtk_reserved13: proc () {.cdecl.}
    gtk_reserved14: proc () {.cdecl.}

  AccelKey* =  ptr AccelKeyObj
  AccelKeyPtr* = ptr AccelKeyObj
  AccelKeyObj* = object 
    accel_key*: guint
    accel_mods*: gdk3.ModifierType
    accel_flags*: guint

proc accel_group_get_type*(): GType {.importc: "gtk_accel_group_get_type", 
    libgtk.}
proc accel_group_new*(): AccelGroup {.
    importc: "gtk_accel_group_new", libgtk.}
proc get_is_locked*(accel_group: AccelGroup): gboolean {.
    importc: "gtk_accel_group_get_is_locked", libgtk.}
proc is_locked*(accel_group: AccelGroup): gboolean {.
    importc: "gtk_accel_group_get_is_locked", libgtk.}
proc get_modifier_mask*(accel_group: AccelGroup): gdk3.ModifierType {.
    importc: "gtk_accel_group_get_modifier_mask", libgtk.}
proc modifier_mask*(accel_group: AccelGroup): gdk3.ModifierType {.
    importc: "gtk_accel_group_get_modifier_mask", libgtk.}
proc lock*(accel_group: AccelGroup) {.
    importc: "gtk_accel_group_lock", libgtk.}
proc unlock*(accel_group: AccelGroup) {.
    importc: "gtk_accel_group_unlock", libgtk.}
proc connect*(accel_group: AccelGroup; 
                              accel_key: guint; accel_mods: gdk3.ModifierType; 
                              accel_flags: AccelFlags; 
                              closure: gobject.GClosure) {.
    importc: "gtk_accel_group_connect", libgtk.}
proc connect_by_path*(accel_group: AccelGroup; 
                                      accel_path: cstring; 
                                      closure: gobject.GClosure) {.
    importc: "gtk_accel_group_connect_by_path", libgtk.}
proc disconnect*(accel_group: AccelGroup; 
                                 closure: gobject.GClosure): gboolean {.
    importc: "gtk_accel_group_disconnect", libgtk.}
proc disconnect_key*(accel_group: AccelGroup; 
                                     accel_key: guint; 
                                     accel_mods: gdk3.ModifierType): gboolean {.
    importc: "gtk_accel_group_disconnect_key", libgtk.}
proc activate*(accel_group: AccelGroup; 
                               accel_quark: GQuark; 
                               acceleratable: GObject; accel_key: guint; 
                               accel_mods: gdk3.ModifierType): gboolean {.
    importc: "gtk_accel_group_activate", libgtk.}

proc accel_groups_activate*(`object`: GObject; accel_key: guint; 
                                accel_mods: gdk3.ModifierType): gboolean {.
    importc: "gtk_accel_groups_activate", libgtk.}
proc accel_groups_from_object*(`object`: GObject): glib.GSList {.
    importc: "gtk_accel_groups_from_object", libgtk.}
proc find*(accel_group: AccelGroup; 
                           find_func: AccelGroupFindFunc; data: gpointer): AccelKey {.
    importc: "gtk_accel_group_find", libgtk.}
proc accel_group_from_accel_closure*(closure: gobject.GClosure): AccelGroup {.
    importc: "gtk_accel_group_from_accel_closure", libgtk.}
proc accelerator_valid*(keyval: guint; modifiers: gdk3.ModifierType): gboolean {.
    importc: "gtk_accelerator_valid", libgtk.}
proc accelerator_parse*(accelerator: cstring; 
                            accelerator_key: var guint; 
                            accelerator_mods: var gdk3.ModifierType) {.
    importc: "gtk_accelerator_parse", libgtk.}
proc accelerator_parse_with_keycode*(accelerator: cstring; 
    accelerator_key: var guint; accelerator_codes: var ptr guint; 
    accelerator_mods: var gdk3.ModifierType) {.
    importc: "gtk_accelerator_parse_with_keycode", libgtk.}
proc accelerator_name*(accelerator_key: guint; 
                           accelerator_mods: gdk3.ModifierType): cstring {.
    importc: "gtk_accelerator_name", libgtk.}
proc accelerator_name_with_keycode*(display: gdk3.Display; 
    accelerator_key: guint; keycode: guint; accelerator_mods: gdk3.ModifierType): cstring {.
    importc: "gtk_accelerator_name_with_keycode", libgtk.}
proc accelerator_get_label*(accelerator_key: guint; 
                                accelerator_mods: gdk3.ModifierType): cstring {.
    importc: "gtk_accelerator_get_label", libgtk.}
proc accelerator_get_label_with_keycode*(display: gdk3.Display; 
    accelerator_key: guint; keycode: guint; accelerator_mods: gdk3.ModifierType): cstring {.
    importc: "gtk_accelerator_get_label_with_keycode", libgtk.}
proc accelerator_set_default_mod_mask*(default_mod_mask: gdk3.ModifierType) {.
    importc: "gtk_accelerator_set_default_mod_mask", libgtk.}
proc accelerator_get_default_mod_mask*(): gdk3.ModifierType {.
    importc: "gtk_accelerator_get_default_mod_mask", libgtk.}
type 
  AccelGroupEntry* =  ptr AccelGroupEntryObj
  AccelGroupEntryPtr* = ptr AccelGroupEntryObj
  AccelGroupEntryObj* = object 
    key*: AccelKeyObj
    closure*: gobject.GClosure
    accel_path_quark*: GQuark

proc query*(accel_group: AccelGroup; accel_key: guint; 
                            accel_mods: gdk3.ModifierType; n_entries: var guint): AccelGroupEntry {.
    importc: "gtk_accel_group_query", libgtk.}

type 
  Border* =  ptr BorderObj
  BorderPtr* = ptr BorderObj
  BorderObj* = object 
    left*: gint16
    right*: gint16
    top*: gint16
    bottom*: gint16

proc border_get_type*(): GType {.importc: "gtk_border_get_type", 
                                     libgtk.}
proc border_new*(): Border {.importc: "gtk_border_new", libgtk.}
proc copy*(border: Border): Border {.
    importc: "gtk_border_copy", libgtk.}
proc free*(border: Border) {.importc: "gtk_border_free", 
    libgtk.}

type 
  BuilderPrivateObj = object 
type 
  Builder* =  ptr BuilderObj
  BuilderPtr* = ptr BuilderObj
  BuilderObj*{.final.} = object of GObjectObj
    priv39: ptr BuilderPrivateObj
type 
  Clipboard* =  ptr ClipboardObj
  ClipboardPtr* = ptr ClipboardObj
  ClipboardObj* = object 
  
  IconSet* =  ptr IconSetObj
  IconSetPtr* = ptr IconSetObj
  IconSetObj* = object 
  
  IconSource* =  ptr IconSourceObj
  IconSourcePtr* = ptr IconSourceObj
  IconSourceObj* = object 
  
  SelectionData* =  ptr SelectionDataObj
  SelectionDataPtr* = ptr SelectionDataObj
  SelectionDataObj* = object 
  
  Tooltip* =  ptr TooltipObj
  TooltipPtr* = ptr TooltipObj
  TooltipObj* = object 
  
  WidgetPath* =  ptr WidgetPathObj
  WidgetPathPtr* = ptr WidgetPathObj
  WidgetPathObj* = object 
  
  RcPropertyParser* = proc (pspec: gobject.GParamSpec; rc_string: glib.GString; 
                               property_value: gobject.GValue): gboolean {.cdecl.}
  BuilderConnectFunc* = proc (builder: Builder; `object`: GObject; 
                                 signal_name: cstring; 
                                 handler_name: cstring; 
                                 connect_obj: GObject; 
                                 flags: GConnectFlags; user_data: gpointer) {.cdecl.}

type 
  SettingsPrivateObj = object 
  
type 
  Settings* =  ptr SettingsObj
  SettingsPtr* = ptr SettingsObj
  SettingsObj*{.final.} = object of GObjectObj
    priv111: ptr SettingsPrivateObj

type 
  WidgetHelpType* {.size: sizeof(cint), pure.} = enum 
    TOOLTIP, WHATS_THIS
template gtk_widget*(widget: expr): expr = 
  (g_type_check_instance_cast(widget, widget_get_type(), WidgetObj))

template gtk_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, widget_get_type(), WidgetClassObj))

template gtk_is_widget*(widget: expr): expr = 
  (g_type_check_instance_type(widget, widget_get_type()))

template gtk_is_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, widget_get_type()))

template gtk_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, widget_get_type(), WidgetClassObj))

type 
  WidgetPrivateObj = object 
  
  WidgetClassPrivateObj = object 
  
type 
  Widget* =  ptr WidgetObj
  WidgetPtr* = ptr WidgetObj
  WidgetObj* = object of gobject.GInitiallyUnownedObj
    priv2: ptr WidgetPrivateObj
type 
  Allocation* =  ptr AllocationObj
  AllocationPtr* = ptr AllocationObj
  AllocationObj* = gdk3.RectangleObj
type 
  Callback* = proc (widget: Widget; data: gpointer) {.cdecl.}
type 
  TickCallback* = proc (widget: Widget; 
                           frame_clock: gdk3.FrameClock; user_data: gpointer): gboolean {.cdecl.}
type 
  Requisition* =  ptr RequisitionObj
  RequisitionPtr* = ptr RequisitionObj
  RequisitionObj* = object 
    width*: gint
    height*: gint
type 
  RcFlags* {.size: sizeof(cint), pure.} = enum 
    FG = 1 shl 0, BG = 1 shl 1, TEXT = 1 shl 2, 
    BASE = 1 shl 3
type 
  RcStyle* =  ptr RcStyleObj
  RcStylePtr* = ptr RcStyleObj
  RcStyleObj*{.final.} = object of GObjectObj
    name*: cstring
    bg_pixmap_name*: array[5, cstring]
    font_desc*: pango.FontDescription
    color_flags*: array[5, RcFlags]
    fg*: array[5, gdk3.ColorObj]
    bg*: array[5, gdk3.ColorObj]
    text*: array[5, gdk3.ColorObj]
    base*: array[5, gdk3.ColorObj]
    xthickness*: gint
    ythickness*: gint
    rc_properties*: glib.GArray
    rc_style_lists*: glib.GSList
    icon_factories*: glib.GSList
    engine_specified*: guint
type 
  Style* =  ptr StyleObj
  StylePtr* = ptr StyleObj
  StyleObj*{.final.} = object of GObjectObj
    fg*: array[5, gdk3.ColorObj]
    bg*: array[5, gdk3.ColorObj]
    light*: array[5, gdk3.ColorObj]
    dark*: array[5, gdk3.ColorObj]
    mid*: array[5, gdk3.ColorObj]
    text*: array[5, gdk3.ColorObj]
    base*: array[5, gdk3.ColorObj]
    text_aa*: array[5, gdk3.ColorObj]
    black*: gdk3.ColorObj
    white*: gdk3.ColorObj
    font_desc*: pango.FontDescription
    xthickness*: gint
    ythickness*: gint
    background*: array[5, cairo.Pattern]
    attach_count*: gint
    visual*: gdk3.Visual
    private_font_desc*: pango.FontDescription
    rc_style*: RcStyle
    styles*: glib.GSList
    property_cache*: glib.GArray
    icon_factories*: glib.GSList

type 
  WidgetClass* =  ptr WidgetClassObj
  WidgetClassPtr* = ptr WidgetClassObj
  WidgetClassObj = object of gobject.GInitiallyUnownedClassObj
    activate_signal*: guint
    dispatch_child_properties_changed*: proc (widget: Widget; 
        n_pspecs: guint; pspecs: var gobject.GParamSpec) {.cdecl.}
    destroy*: proc (widget: Widget) {.cdecl.}
    show*: proc (widget: Widget) {.cdecl.}
    show_all*: proc (widget: Widget) {.cdecl.}
    hide*: proc (widget: Widget) {.cdecl.}
    map*: proc (widget: Widget) {.cdecl.}
    unmap*: proc (widget: Widget) {.cdecl.}
    realize*: proc (widget: Widget) {.cdecl.}
    unrealize*: proc (widget: Widget) {.cdecl.}
    size_allocate*: proc (widget: Widget; allocation: Allocation) {.cdecl.}
    state_changed*: proc (widget: Widget; previous_state: StateType) {.cdecl.}
    state_flags_changed*: proc (widget: Widget; 
                                previous_state_flags: StateFlags) {.cdecl.}
    parent_set*: proc (widget: Widget; previous_parent: Widget) {.cdecl.}
    hierarchy_changed*: proc (widget: Widget; 
                              previous_toplevel: Widget) {.cdecl.}
    style_set*: proc (widget: Widget; previous_style: Style) {.cdecl.}
    direction_changed*: proc (widget: Widget; 
                              previous_direction: TextDirection) {.cdecl.}
    grab_notify*: proc (widget: Widget; was_grabbed: gboolean) {.cdecl.}
    child_notify*: proc (widget: Widget; child_property: gobject.GParamSpec) {.cdecl.}
    draw*: proc (widget: Widget; cr: cairo.Context): gboolean {.cdecl.}
    get_request_mode*: proc (widget: Widget): SizeRequestMode {.cdecl.}
    get_preferred_height*: proc (widget: Widget; 
                                 minimum_height: var gint; 
                                 natural_height: var gint) {.cdecl.}
    get_preferred_width_for_height*: proc (widget: Widget; 
        height: gint; minimum_width: var gint; natural_width: var gint) {.cdecl.}
    get_preferred_width*: proc (widget: Widget; 
                                minimum_width: var gint; 
                                natural_width: var gint) {.cdecl.}
    get_preferred_height_for_width*: proc (widget: Widget; width: gint; 
        minimum_height: var gint; natural_height: var gint) {.cdecl.}
    mnemonic_activate*: proc (widget: Widget; group_cycling: gboolean): gboolean {.cdecl.}
    grab_focus*: proc (widget: Widget) {.cdecl.}
    focus*: proc (widget: Widget; direction: DirectionType): gboolean {.cdecl.}
    move_focus*: proc (widget: Widget; direction: DirectionType) {.cdecl.}
    keynav_failed*: proc (widget: Widget; direction: DirectionType): gboolean {.cdecl.}
    event*: proc (widget: Widget; event: gdk3.Event): gboolean {.cdecl.}
    button_press_event*: proc (widget: Widget; 
                               event: gdk3.EventButton): gboolean {.cdecl.}
    button_release_event*: proc (widget: Widget; 
                                 event: gdk3.EventButton): gboolean {.cdecl.}
    scroll_event*: proc (widget: Widget; event: gdk3.EventScroll): gboolean {.cdecl.}
    motion_notify_event*: proc (widget: Widget; 
                                event: gdk3.EventMotion): gboolean {.cdecl.}
    delete_event*: proc (widget: Widget; event: gdk3.EventAny): gboolean {.cdecl.}
    destroy_event*: proc (widget: Widget; event: gdk3.EventAny): gboolean {.cdecl.}
    key_press_event*: proc (widget: Widget; event: gdk3.EventKey): gboolean {.cdecl.}
    key_release_event*: proc (widget: Widget; event: gdk3.EventKey): gboolean {.cdecl.}
    enter_notify_event*: proc (widget: Widget; 
                               event: gdk3.EventCrossing): gboolean {.cdecl.}
    leave_notify_event*: proc (widget: Widget; 
                               event: gdk3.EventCrossing): gboolean {.cdecl.}
    configure_event*: proc (widget: Widget; 
                            event: gdk3.EventConfigure): gboolean {.cdecl.}
    focus_in_event*: proc (widget: Widget; event: gdk3.EventFocus): gboolean {.cdecl.}
    focus_out_event*: proc (widget: Widget; event: gdk3.EventFocus): gboolean {.cdecl.}
    map_event*: proc (widget: Widget; event: gdk3.EventAny): gboolean {.cdecl.}
    unmap_event*: proc (widget: Widget; event: gdk3.EventAny): gboolean {.cdecl.}
    property_notify_event*: proc (widget: Widget; 
                                  event: gdk3.EventProperty): gboolean {.cdecl.}
    selection_clear_event*: proc (widget: Widget; 
                                  event: gdk3.EventSelection): gboolean {.cdecl.}
    selection_request_event*: proc (widget: Widget; 
                                    event: gdk3.EventSelection): gboolean {.cdecl.}
    selection_notify_event*: proc (widget: Widget; 
                                   event: gdk3.EventSelection): gboolean {.cdecl.}
    proximity_in_event*: proc (widget: Widget; 
                               event: gdk3.EventProximity): gboolean {.cdecl.}
    proximity_out_event*: proc (widget: Widget; 
                                event: gdk3.EventProximity): gboolean {.cdecl.}
    visibility_notify_event*: proc (widget: Widget; 
                                    event: gdk3.EventVisibility): gboolean {.cdecl.}
    window_state_event*: proc (widget: Widget; 
                               event: gdk3.EventWindowState): gboolean {.cdecl.}
    damage_event*: proc (widget: Widget; event: gdk3.EventExpose): gboolean {.cdecl.}
    grab_broken_event*: proc (widget: Widget; 
                              event: gdk3.EventGrabBroken): gboolean {.cdecl.}
    selection_get*: proc (widget: Widget; 
                          selection_data: SelectionData; info: guint; 
                          time: guint) {.cdecl.}
    selection_received*: proc (widget: Widget; 
                               selection_data: SelectionData; 
                               time: guint) {.cdecl.}
    drag_begin*: proc (widget: Widget; context: gdk3.DragContext) {.cdecl.}
    drag_end*: proc (widget: Widget; context: gdk3.DragContext) {.cdecl.}
    drag_data_get*: proc (widget: Widget; context: gdk3.DragContext; 
                          selection_data: SelectionData; info: guint; 
                          time: guint) {.cdecl.}
    drag_data_delete*: proc (widget: Widget; 
                             context: gdk3.DragContext) {.cdecl.}
    drag_leave*: proc (widget: Widget; context: gdk3.DragContext; 
                       time: guint) {.cdecl.}
    drag_motion*: proc (widget: Widget; context: gdk3.DragContext; 
                        x: gint; y: gint; time: guint): gboolean {.cdecl.}
    drag_drop*: proc (widget: Widget; context: gdk3.DragContext; 
                      x: gint; y: gint; time: guint): gboolean {.cdecl.}
    drag_data_received*: proc (widget: Widget; 
                               context: gdk3.DragContext; x: gint; y: gint; 
                               selection_data: SelectionData; 
                               info: guint; time: guint) {.cdecl.}
    drag_failed*: proc (widget: Widget; context: gdk3.DragContext; 
                        result: DragResult): gboolean {.cdecl.}
    popup_menu*: proc (widget: Widget): gboolean {.cdecl.}
    show_help*: proc (widget: Widget; help_type: WidgetHelpType): gboolean {.cdecl.}
    get_accessible*: proc (widget: Widget): atk.Object {.cdecl.}
    screen_changed*: proc (widget: Widget; 
                           previous_screen: gdk3.Screen) {.cdecl.}
    can_activate_accel*: proc (widget: Widget; signal_id: guint): gboolean {.cdecl.}
    composited_changed*: proc (widget: Widget) {.cdecl.}
    query_tooltip*: proc (widget: Widget; x: gint; y: gint; 
                          keyboard_tooltip: gboolean; tooltip: Tooltip): gboolean {.cdecl.}
    compute_expand*: proc (widget: Widget; hexpand_p: ptr gboolean; 
                           vexpand_p: var gboolean) {.cdecl.}
    adjust_size_request*: proc (widget: Widget; 
                                orientation: Orientation; 
                                minimum_size: var gint; natural_size: var gint) {.cdecl.}
    adjust_size_allocation*: proc (widget: Widget; 
                                   orientation: Orientation; 
                                   minimum_size: var gint; 
                                   natural_size: var gint; 
                                   allocated_pos: var gint; 
                                   allocated_size: var gint) {.cdecl.}
    style_updated*: proc (widget: Widget) {.cdecl.}
    touch_event*: proc (widget: Widget; event: gdk3.EventTouch): gboolean {.cdecl.}
    get_preferred_height_and_baseline_for_width*: proc (widget: Widget; 
        width: gint; minimum_height: var gint; natural_height: var gint; 
        minimum_baseline: var gint; natural_baseline: var gint) {.cdecl.}
    adjust_baseline_request*: proc (widget: Widget; 
                                    minimum_baseline: var gint; 
                                    natural_baseline: var gint) {.cdecl.}
    adjust_baseline_allocation*: proc (widget: Widget; 
        baseline: var gint) {.cdecl.}
    queue_draw_region*: proc (widget: Widget; 
                              region: cairo.Region) {.cdecl.}
    priv3: ptr WidgetClassPrivateObj
    gtk_reserved26: proc () {.cdecl.}
    gtk_reserved27: proc () {.cdecl.}

type 
  WidgetAuxInfo* =  ptr WidgetAuxInfoObj
  WidgetAuxInfoPtr* = ptr WidgetAuxInfoObj
  WidgetAuxInfoObj* = object 
    width*: gint
    height*: gint
    bitfield0GtkWidgetAuxInfo*: guint
    margin*: BorderObj
type 
  ContainerPrivateObj = object 
  
type 
  Container* =  ptr ContainerObj
  ContainerPtr* = ptr ContainerObj
  ContainerObj* = object of WidgetObj
    priv5: ptr ContainerPrivateObj
type 
  BinPrivateObj = object 
  
type 
  Bin* =  ptr BinObj
  BinPtr* = ptr BinObj
  BinObj* = object of ContainerObj
    priv6: ptr BinPrivateObj
type 
  WindowPrivateObj = object 
  
  WindowGroupPrivateObj = object 
type 
  WindowGroup* =  ptr WindowGroupObj
  WindowGroupPtr* = ptr WindowGroupObj
  WindowGroupObj*{.final.} = object of GObjectObj
    priv126: ptr WindowGroupPrivateObj
  
type 
  Window* =  ptr WindowObj
  WindowPtr* = ptr WindowObj
  WindowObj* = object of BinObj
    priv7: ptr WindowPrivateObj
type 
  StyleContextPrivateObj = object 
  
type 
  StyleContext* =  ptr StyleContextObj
  StyleContextPtr* = ptr StyleContextObj
  StyleContextObj*{.final.} = object of GObjectObj
    priv73: ptr StyleContextPrivateObj
type 
  AdjustmentPrivateObj = object 
  
type 
  Adjustment* =  ptr AdjustmentObj
  AdjustmentPtr* = ptr AdjustmentObj
  AdjustmentObj*{.final.} = object of gobject.GInitiallyUnownedObj
    priv16: ptr AdjustmentPrivateObj

proc widget_get_type*(): GType {.importc: "gtk_widget_get_type", 
                                     libgtk.}
proc widget_new*(`type`: GType; first_property_name: cstring): Widget {.
    varargs, importc: "gtk_widget_new", libgtk.}
proc destroy*(widget: Widget) {.
    importc: "gtk_widget_destroy", libgtk.}
proc destroyed*(widget: Widget; 
                           widget_pointer: var Widget) {.
    importc: "gtk_widget_destroyed", libgtk.}
proc unparent*(widget: Widget) {.
    importc: "gtk_widget_unparent", libgtk.}
proc show*(widget: Widget) {.importc: "gtk_widget_show", 
    libgtk.}
proc hide*(widget: Widget) {.importc: "gtk_widget_hide", 
    libgtk.}
proc show_now*(widget: Widget) {.
    importc: "gtk_widget_show_now", libgtk.}
proc show_all*(widget: Widget) {.
    importc: "gtk_widget_show_all", libgtk.}
proc set_no_show_all*(widget: Widget; no_show_all: gboolean) {.
    importc: "gtk_widget_set_no_show_all", libgtk.}
proc `no_show_all=`*(widget: Widget; no_show_all: gboolean) {.
    importc: "gtk_widget_set_no_show_all", libgtk.}
proc get_no_show_all*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_no_show_all", libgtk.}
proc no_show_all*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_no_show_all", libgtk.}
proc map*(widget: Widget) {.importc: "gtk_widget_map", 
    libgtk.}
proc unmap*(widget: Widget) {.importc: "gtk_widget_unmap", 
    libgtk.}
proc realize*(widget: Widget) {.
    importc: "gtk_widget_realize", libgtk.}
proc unrealize*(widget: Widget) {.
    importc: "gtk_widget_unrealize", libgtk.}
proc draw*(widget: Widget; cr: cairo.Context) {.
    importc: "gtk_widget_draw", libgtk.}
proc queue_draw*(widget: Widget) {.
    importc: "gtk_widget_queue_draw", libgtk.}
proc queue_draw_area*(widget: Widget; x: gint; y: gint; 
                                 width: gint; height: gint) {.
    importc: "gtk_widget_queue_draw_area", libgtk.}
proc queue_draw_region*(widget: Widget; 
                                   region: cairo.Region) {.
    importc: "gtk_widget_queue_draw_region", libgtk.}
proc queue_resize*(widget: Widget) {.
    importc: "gtk_widget_queue_resize", libgtk.}
proc queue_resize_no_redraw*(widget: Widget) {.
    importc: "gtk_widget_queue_resize_no_redraw", libgtk.}
proc get_frame_clock*(widget: Widget): gdk3.FrameClock {.
    importc: "gtk_widget_get_frame_clock", libgtk.}
proc frame_clock*(widget: Widget): gdk3.FrameClock {.
    importc: "gtk_widget_get_frame_clock", libgtk.}
proc size_request*(widget: Widget; 
                              requisition: Requisition) {.
    importc: "gtk_widget_size_request", libgtk.}
proc size_allocate*(widget: Widget; 
                               allocation: Allocation) {.
    importc: "gtk_widget_size_allocate", libgtk.}
proc size_allocate_with_baseline*(widget: Widget; 
    allocation: Allocation; baseline: gint) {.
    importc: "gtk_widget_size_allocate_with_baseline", libgtk.}
proc get_request_mode*(widget: Widget): SizeRequestMode {.
    importc: "gtk_widget_get_request_mode", libgtk.}
proc request_mode*(widget: Widget): SizeRequestMode {.
    importc: "gtk_widget_get_request_mode", libgtk.}
proc get_preferred_width*(widget: Widget; 
                                     minimum_width: var gint; 
                                     natural_width: var gint) {.
    importc: "gtk_widget_get_preferred_width", libgtk.}
proc get_preferred_height_for_width*(widget: Widget; 
    width: gint; minimum_height: var gint; natural_height: var gint) {.
    importc: "gtk_widget_get_preferred_height_for_width", libgtk.}
proc get_preferred_height*(widget: Widget; 
                                      minimum_height: var gint; 
                                      natural_height: var gint) {.
    importc: "gtk_widget_get_preferred_height", libgtk.}
proc get_preferred_width_for_height*(widget: Widget; 
    height: gint; minimum_width: var gint; natural_width: var gint) {.
    importc: "gtk_widget_get_preferred_width_for_height", libgtk.}
proc get_preferred_height_and_baseline_for_width*(
    widget: Widget; width: gint; minimum_height: var gint; 
    natural_height: var gint; minimum_baseline: var gint; 
    natural_baseline: var gint) {.importc: "gtk_widget_get_preferred_height_and_baseline_for_width", 
                                  libgtk.}
proc get_preferred_size*(widget: Widget; 
                                    minimum_size: var RequisitionObj; 
                                    natural_size: var RequisitionObj) {.
    importc: "gtk_widget_get_preferred_size", libgtk.}
proc get_child_requisition*(widget: Widget; 
    requisition: var RequisitionObj) {.
    importc: "gtk_widget_get_child_requisition", libgtk.}
proc add_accelerator*(widget: Widget; 
                                 accel_signal: cstring; 
                                 accel_group: AccelGroup; 
                                 accel_key: guint; 
                                 accel_mods: gdk3.ModifierType; 
                                 accel_flags: AccelFlags) {.
    importc: "gtk_widget_add_accelerator", libgtk.}
proc remove_accelerator*(widget: Widget; 
                                    accel_group: AccelGroup; 
                                    accel_key: guint; 
                                    accel_mods: gdk3.ModifierType): gboolean {.
    importc: "gtk_widget_remove_accelerator", libgtk.}
proc set_accel_path*(widget: Widget; accel_path: cstring; 
                                accel_group: AccelGroup) {.
    importc: "gtk_widget_set_accel_path", libgtk.}
proc `accel_path=`*(widget: Widget; accel_path: cstring; 
                                accel_group: AccelGroup) {.
    importc: "gtk_widget_set_accel_path", libgtk.}
proc list_accel_closures*(widget: Widget): glib.GList {.
    importc: "gtk_widget_list_accel_closures", libgtk.}
proc can_activate_accel*(widget: Widget; signal_id: guint): gboolean {.
    importc: "gtk_widget_can_activate_accel", libgtk.}
proc mnemonic_activate*(widget: Widget; 
                                   group_cycling: gboolean): gboolean {.
    importc: "gtk_widget_mnemonic_activate", libgtk.}
proc event*(widget: Widget; event: gdk3.Event): gboolean {.
    importc: "gtk_widget_event", libgtk.}
proc send_expose*(widget: Widget; event: gdk3.Event): gint {.
    importc: "gtk_widget_send_expose", libgtk.}
proc send_focus_change*(widget: Widget; event: gdk3.Event): gboolean {.
    importc: "gtk_widget_send_focus_change", libgtk.}
proc activate*(widget: Widget): gboolean {.
    importc: "gtk_widget_activate", libgtk.}
proc reparent*(widget: Widget; new_parent: Widget) {.
    importc: "gtk_widget_reparent", libgtk.}
proc intersect*(widget: Widget; area: gdk3.Rectangle; 
                           intersection: gdk3.Rectangle): gboolean {.
    importc: "gtk_widget_intersect", libgtk.}
proc region_intersect*(widget: Widget; 
                                  region: cairo.Region): cairo.Region {.
    importc: "gtk_widget_region_intersect", libgtk.}
proc freeze_child_notify*(widget: Widget) {.
    importc: "gtk_widget_freeze_child_notify", libgtk.}
proc child_notify*(widget: Widget; child_property: cstring) {.
    importc: "gtk_widget_child_notify", libgtk.}
proc thaw_child_notify*(widget: Widget) {.
    importc: "gtk_widget_thaw_child_notify", libgtk.}
proc set_can_focus*(widget: Widget; can_focus: gboolean) {.
    importc: "gtk_widget_set_can_focus", libgtk.}
proc `can_focus=`*(widget: Widget; can_focus: gboolean) {.
    importc: "gtk_widget_set_can_focus", libgtk.}
proc get_can_focus*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_can_focus", libgtk.}
proc can_focus*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_can_focus", libgtk.}
proc has_focus*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_focus", libgtk.}
proc is_focus*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_focus", libgtk.}
proc has_visible_focus*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_visible_focus", libgtk.}
proc grab_focus*(widget: Widget) {.
    importc: "gtk_widget_grab_focus", libgtk.}
proc set_can_default*(widget: Widget; can_default: gboolean) {.
    importc: "gtk_widget_set_can_default", libgtk.}
proc `can_default=`*(widget: Widget; can_default: gboolean) {.
    importc: "gtk_widget_set_can_default", libgtk.}
proc get_can_default*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_can_default", libgtk.}
proc can_default*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_can_default", libgtk.}
proc has_default*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_default", libgtk.}
proc grab_default*(widget: Widget) {.
    importc: "gtk_widget_grab_default", libgtk.}
proc set_receives_default*(widget: Widget; 
                                      receives_default: gboolean) {.
    importc: "gtk_widget_set_receives_default", libgtk.}
proc `receives_default=`*(widget: Widget; 
                                      receives_default: gboolean) {.
    importc: "gtk_widget_set_receives_default", libgtk.}
proc get_receives_default*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_receives_default", libgtk.}
proc receives_default*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_receives_default", libgtk.}
proc has_grab*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_grab", libgtk.}
proc device_is_shadowed*(widget: Widget; 
                                    device: gdk3.Device): gboolean {.
    importc: "gtk_widget_device_is_shadowed", libgtk.}
proc set_name*(widget: Widget; name: cstring) {.
    importc: "gtk_widget_set_name", libgtk.}
proc `name=`*(widget: Widget; name: cstring) {.
    importc: "gtk_widget_set_name", libgtk.}
proc get_name*(widget: Widget): cstring {.
    importc: "gtk_widget_get_name", libgtk.}
proc name*(widget: Widget): cstring {.
    importc: "gtk_widget_get_name", libgtk.}
proc set_state*(widget: Widget; state: StateType) {.
    importc: "gtk_widget_set_state", libgtk.}
proc `state=`*(widget: Widget; state: StateType) {.
    importc: "gtk_widget_set_state", libgtk.}
proc get_state*(widget: Widget): StateType {.
    importc: "gtk_widget_get_state", libgtk.}
proc state*(widget: Widget): StateType {.
    importc: "gtk_widget_get_state", libgtk.}
proc set_state_flags*(widget: Widget; flags: StateFlags; 
                                 clear: gboolean) {.
    importc: "gtk_widget_set_state_flags", libgtk.}
proc `state_flags=`*(widget: Widget; flags: StateFlags; 
                                 clear: gboolean) {.
    importc: "gtk_widget_set_state_flags", libgtk.}
proc unset_state_flags*(widget: Widget; flags: StateFlags) {.
    importc: "gtk_widget_unset_state_flags", libgtk.}
proc get_state_flags*(widget: Widget): StateFlags {.
    importc: "gtk_widget_get_state_flags", libgtk.}
proc state_flags*(widget: Widget): StateFlags {.
    importc: "gtk_widget_get_state_flags", libgtk.}
proc set_sensitive*(widget: Widget; sensitive: gboolean) {.
    importc: "gtk_widget_set_sensitive", libgtk.}
proc `sensitive=`*(widget: Widget; sensitive: gboolean) {.
    importc: "gtk_widget_set_sensitive", libgtk.}
proc get_sensitive*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_sensitive", libgtk.}
proc sensitive*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_sensitive", libgtk.}
proc is_sensitive*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_sensitive", libgtk.}
proc set_visible*(widget: Widget; visible: gboolean) {.
    importc: "gtk_widget_set_visible", libgtk.}
proc `visible=`*(widget: Widget; visible: gboolean) {.
    importc: "gtk_widget_set_visible", libgtk.}
proc get_visible*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_visible", libgtk.}
proc visible*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_visible", libgtk.}
proc is_visible*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_visible", libgtk.}
proc set_has_window*(widget: Widget; has_window: gboolean) {.
    importc: "gtk_widget_set_has_window", libgtk.}
proc `has_window=`*(widget: Widget; has_window: gboolean) {.
    importc: "gtk_widget_set_has_window", libgtk.}
proc get_has_window*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_has_window", libgtk.}
proc has_window*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_has_window", libgtk.}
proc is_toplevel*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_toplevel", libgtk.}
proc is_drawable*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_drawable", libgtk.}
proc set_realized*(widget: Widget; realized: gboolean) {.
    importc: "gtk_widget_set_realized", libgtk.}
proc `realized=`*(widget: Widget; realized: gboolean) {.
    importc: "gtk_widget_set_realized", libgtk.}
proc get_realized*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_realized", libgtk.}
proc realized*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_realized", libgtk.}
proc set_mapped*(widget: Widget; mapped: gboolean) {.
    importc: "gtk_widget_set_mapped", libgtk.}
proc `mapped=`*(widget: Widget; mapped: gboolean) {.
    importc: "gtk_widget_set_mapped", libgtk.}
proc get_mapped*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_mapped", libgtk.}
proc mapped*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_mapped", libgtk.}
proc set_app_paintable*(widget: Widget; 
                                   app_paintable: gboolean) {.
    importc: "gtk_widget_set_app_paintable", libgtk.}
proc `app_paintable=`*(widget: Widget; 
                                   app_paintable: gboolean) {.
    importc: "gtk_widget_set_app_paintable", libgtk.}
proc get_app_paintable*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_app_paintable", libgtk.}
proc app_paintable*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_app_paintable", libgtk.}
proc set_double_buffered*(widget: Widget; 
                                     double_buffered: gboolean) {.
    importc: "gtk_widget_set_double_buffered", libgtk.}
proc `double_buffered=`*(widget: Widget; 
                                     double_buffered: gboolean) {.
    importc: "gtk_widget_set_double_buffered", libgtk.}
proc get_double_buffered*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_double_buffered", libgtk.}
proc double_buffered*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_double_buffered", libgtk.}
proc set_redraw_on_allocate*(widget: Widget; 
    redraw_on_allocate: gboolean) {.importc: "gtk_widget_set_redraw_on_allocate", 
                                    libgtk.}
proc `redraw_on_allocate=`*(widget: Widget; 
    redraw_on_allocate: gboolean) {.importc: "gtk_widget_set_redraw_on_allocate", 
                                    libgtk.}
proc set_parent*(widget: Widget; parent: Widget) {.
    importc: "gtk_widget_set_parent", libgtk.}
proc `parent=`*(widget: Widget; parent: Widget) {.
    importc: "gtk_widget_set_parent", libgtk.}
proc get_parent*(widget: Widget): Widget {.
    importc: "gtk_widget_get_parent", libgtk.}
proc parent*(widget: Widget): Widget {.
    importc: "gtk_widget_get_parent", libgtk.}
proc set_parent_window*(widget: Widget; 
                                   parent_window: gdk3.Window) {.
    importc: "gtk_widget_set_parent_window", libgtk.}
proc `parent_window=`*(widget: Widget; 
                                   parent_window: gdk3.Window) {.
    importc: "gtk_widget_set_parent_window", libgtk.}
proc get_parent_window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_parent_window", libgtk.}
proc parent_window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_parent_window", libgtk.}
proc set_child_visible*(widget: Widget; is_visible: gboolean) {.
    importc: "gtk_widget_set_child_visible", libgtk.}
proc `child_visible=`*(widget: Widget; is_visible: gboolean) {.
    importc: "gtk_widget_set_child_visible", libgtk.}
proc get_child_visible*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_child_visible", libgtk.}
proc child_visible*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_child_visible", libgtk.}
proc set_window*(widget: Widget; window: gdk3.Window) {.
    importc: "gtk_widget_set_window", libgtk.}
proc `window=`*(widget: Widget; window: gdk3.Window) {.
    importc: "gtk_widget_set_window", libgtk.}
proc get_window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_window", libgtk.}
proc window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_window", libgtk.}
proc register_window*(widget: Widget; window: gdk3.Window) {.
    importc: "gtk_widget_register_window", libgtk.}
proc unregister_window*(widget: Widget; 
                                   window: gdk3.Window) {.
    importc: "gtk_widget_unregister_window", libgtk.}
proc get_allocated_width*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_width", libgtk.}
proc allocated_width*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_width", libgtk.}
proc get_allocated_height*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_height", libgtk.}
proc allocated_height*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_height", libgtk.}
proc get_allocated_baseline*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_baseline", libgtk.}
proc allocated_baseline*(widget: Widget): cint {.
    importc: "gtk_widget_get_allocated_baseline", libgtk.}
proc get_allocation*(widget: Widget; 
                                allocation: var AllocationObj) {.
    importc: "gtk_widget_get_allocation", libgtk.}
proc set_allocation*(widget: Widget; 
                                allocation: Allocation) {.
    importc: "gtk_widget_set_allocation", libgtk.}
proc `allocation=`*(widget: Widget; 
                                allocation: Allocation) {.
    importc: "gtk_widget_set_allocation", libgtk.}
proc set_clip*(widget: Widget; clip: Allocation) {.
    importc: "gtk_widget_set_clip", libgtk.}
proc `clip=`*(widget: Widget; clip: Allocation) {.
    importc: "gtk_widget_set_clip", libgtk.}
proc get_clip*(widget: Widget; clip: var AllocationObj) {.
    importc: "gtk_widget_get_clip", libgtk.}
proc get_requisition*(widget: Widget; 
                                 requisition: var RequisitionObj) {.
    importc: "gtk_widget_get_requisition", libgtk.}
proc child_focus*(widget: Widget; 
                             direction: DirectionType): gboolean {.
    importc: "gtk_widget_child_focus", libgtk.}
proc keynav_failed*(widget: Widget; 
                               direction: DirectionType): gboolean {.
    importc: "gtk_widget_keynav_failed", libgtk.}
proc error_bell*(widget: Widget) {.
    importc: "gtk_widget_error_bell", libgtk.}
proc set_size_request*(widget: Widget; width: gint; 
                                  height: gint) {.
    importc: "gtk_widget_set_size_request", libgtk.}
proc `size_request=`*(widget: Widget; width: gint; 
                                  height: gint) {.
    importc: "gtk_widget_set_size_request", libgtk.}
proc get_size_request*(widget: Widget; width: var gint; 
                                  height: var gint) {.
    importc: "gtk_widget_get_size_request", libgtk.}
proc set_events*(widget: Widget; events: gint) {.
    importc: "gtk_widget_set_events", libgtk.}
proc `events=`*(widget: Widget; events: gint) {.
    importc: "gtk_widget_set_events", libgtk.}
proc add_events*(widget: Widget; events: gint) {.
    importc: "gtk_widget_add_events", libgtk.}
proc set_device_events*(widget: Widget; 
                                   device: gdk3.Device; events: gdk3.EventMask) {.
    importc: "gtk_widget_set_device_events", libgtk.}
proc `device_events=`*(widget: Widget; 
                                   device: gdk3.Device; events: gdk3.EventMask) {.
    importc: "gtk_widget_set_device_events", libgtk.}
proc add_device_events*(widget: Widget; 
                                   device: gdk3.Device; events: gdk3.EventMask) {.
    importc: "gtk_widget_add_device_events", libgtk.}
proc set_opacity*(widget: Widget; opacity: cdouble) {.
    importc: "gtk_widget_set_opacity", libgtk.}
proc `opacity=`*(widget: Widget; opacity: cdouble) {.
    importc: "gtk_widget_set_opacity", libgtk.}
proc get_opacity*(widget: Widget): cdouble {.
    importc: "gtk_widget_get_opacity", libgtk.}
proc opacity*(widget: Widget): cdouble {.
    importc: "gtk_widget_get_opacity", libgtk.}
proc set_device_enabled*(widget: Widget; 
                                    device: gdk3.Device; enabled: gboolean) {.
    importc: "gtk_widget_set_device_enabled", libgtk.}
proc `device_enabled=`*(widget: Widget; 
                                    device: gdk3.Device; enabled: gboolean) {.
    importc: "gtk_widget_set_device_enabled", libgtk.}
proc get_device_enabled*(widget: Widget; 
                                    device: gdk3.Device): gboolean {.
    importc: "gtk_widget_get_device_enabled", libgtk.}
proc device_enabled*(widget: Widget; 
                                    device: gdk3.Device): gboolean {.
    importc: "gtk_widget_get_device_enabled", libgtk.}
proc get_toplevel*(widget: Widget): Widget {.
    importc: "gtk_widget_get_toplevel", libgtk.}
proc toplevel*(widget: Widget): Widget {.
    importc: "gtk_widget_get_toplevel", libgtk.}
proc get_ancestor*(widget: Widget; widget_type: GType): Widget {.
    importc: "gtk_widget_get_ancestor", libgtk.}
proc ancestor*(widget: Widget; widget_type: GType): Widget {.
    importc: "gtk_widget_get_ancestor", libgtk.}
proc get_visual*(widget: Widget): gdk3.Visual {.
    importc: "gtk_widget_get_visual", libgtk.}
proc visual*(widget: Widget): gdk3.Visual {.
    importc: "gtk_widget_get_visual", libgtk.}
proc set_visual*(widget: Widget; visual: gdk3.Visual) {.
    importc: "gtk_widget_set_visual", libgtk.}
proc `visual=`*(widget: Widget; visual: gdk3.Visual) {.
    importc: "gtk_widget_set_visual", libgtk.}
proc get_screen*(widget: Widget): gdk3.Screen {.
    importc: "gtk_widget_get_screen", libgtk.}
proc screen*(widget: Widget): gdk3.Screen {.
    importc: "gtk_widget_get_screen", libgtk.}
proc has_screen*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_screen", libgtk.}
proc get_scale_factor*(widget: Widget): gint {.
    importc: "gtk_widget_get_scale_factor", libgtk.}
proc scale_factor*(widget: Widget): gint {.
    importc: "gtk_widget_get_scale_factor", libgtk.}
proc get_display*(widget: Widget): gdk3.Display {.
    importc: "gtk_widget_get_display", libgtk.}
proc display*(widget: Widget): gdk3.Display {.
    importc: "gtk_widget_get_display", libgtk.}
proc get_root_window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_root_window", libgtk.}
proc root_window*(widget: Widget): gdk3.Window {.
    importc: "gtk_widget_get_root_window", libgtk.}
proc get_settings*(widget: Widget): Settings {.
    importc: "gtk_widget_get_settings", libgtk.}
proc settings*(widget: Widget): Settings {.
    importc: "gtk_widget_get_settings", libgtk.}
proc get_clipboard*(widget: Widget; selection: gdk3.Atom): Clipboard {.
    importc: "gtk_widget_get_clipboard", libgtk.}
proc clipboard*(widget: Widget; selection: gdk3.Atom): Clipboard {.
    importc: "gtk_widget_get_clipboard", libgtk.}
proc get_hexpand*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_hexpand", libgtk.}
proc hexpand*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_hexpand", libgtk.}
proc set_hexpand*(widget: Widget; expand: gboolean) {.
    importc: "gtk_widget_set_hexpand", libgtk.}
proc `hexpand=`*(widget: Widget; expand: gboolean) {.
    importc: "gtk_widget_set_hexpand", libgtk.}
proc get_hexpand_set*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_hexpand_set", libgtk.}
proc hexpand_set*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_hexpand_set", libgtk.}
proc set_hexpand_set*(widget: Widget; set: gboolean) {.
    importc: "gtk_widget_set_hexpand_set", libgtk.}
proc `hexpand_set=`*(widget: Widget; set: gboolean) {.
    importc: "gtk_widget_set_hexpand_set", libgtk.}
proc get_vexpand*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_vexpand", libgtk.}
proc vexpand*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_vexpand", libgtk.}
proc set_vexpand*(widget: Widget; expand: gboolean) {.
    importc: "gtk_widget_set_vexpand", libgtk.}
proc `vexpand=`*(widget: Widget; expand: gboolean) {.
    importc: "gtk_widget_set_vexpand", libgtk.}
proc get_vexpand_set*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_vexpand_set", libgtk.}
proc vexpand_set*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_vexpand_set", libgtk.}
proc set_vexpand_set*(widget: Widget; set: gboolean) {.
    importc: "gtk_widget_set_vexpand_set", libgtk.}
proc `vexpand_set=`*(widget: Widget; set: gboolean) {.
    importc: "gtk_widget_set_vexpand_set", libgtk.}
proc queue_compute_expand*(widget: Widget) {.
    importc: "gtk_widget_queue_compute_expand", libgtk.}
proc compute_expand*(widget: Widget; 
                                orientation: Orientation): gboolean {.
    importc: "gtk_widget_compute_expand", libgtk.}
proc get_support_multidevice*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_support_multidevice", libgtk.}
proc support_multidevice*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_support_multidevice", libgtk.}
proc set_support_multidevice*(widget: Widget; 
    support_multidevice: gboolean) {.importc: "gtk_widget_set_support_multidevice", 
                                     libgtk.}
proc `support_multidevice=`*(widget: Widget; 
    support_multidevice: gboolean) {.importc: "gtk_widget_set_support_multidevice", 
                                     libgtk.}
proc set_accessible_type*(widget_class: WidgetClass; 
    `type`: GType) {.importc: "gtk_widget_class_set_accessible_type", 
                   libgtk.}
proc `accessible_type=`*(widget_class: WidgetClass; 
    `type`: GType) {.importc: "gtk_widget_class_set_accessible_type", 
                   libgtk.}
proc set_accessible_role*(widget_class: WidgetClass; 
    role: atk.Role) {.importc: "gtk_widget_class_set_accessible_role", 
                     libgtk.}
proc `accessible_role=`*(widget_class: WidgetClass; 
    role: atk.Role) {.importc: "gtk_widget_class_set_accessible_role", 
                     libgtk.}
proc get_accessible*(widget: Widget): atk.Object {.
    importc: "gtk_widget_get_accessible", libgtk.}
proc accessible*(widget: Widget): atk.Object {.
    importc: "gtk_widget_get_accessible", libgtk.}
proc get_halign*(widget: Widget): Align {.
    importc: "gtk_widget_get_halign", libgtk.}
proc halign*(widget: Widget): Align {.
    importc: "gtk_widget_get_halign", libgtk.}
proc set_halign*(widget: Widget; align: Align) {.
    importc: "gtk_widget_set_halign", libgtk.}
proc `halign=`*(widget: Widget; align: Align) {.
    importc: "gtk_widget_set_halign", libgtk.}
proc get_valign*(widget: Widget): Align {.
    importc: "gtk_widget_get_valign", libgtk.}
proc valign*(widget: Widget): Align {.
    importc: "gtk_widget_get_valign", libgtk.}
proc get_valign_with_baseline*(widget: Widget): Align {.
    importc: "gtk_widget_get_valign_with_baseline", libgtk.}
proc valign_with_baseline*(widget: Widget): Align {.
    importc: "gtk_widget_get_valign_with_baseline", libgtk.}
proc set_valign*(widget: Widget; align: Align) {.
    importc: "gtk_widget_set_valign", libgtk.}
proc `valign=`*(widget: Widget; align: Align) {.
    importc: "gtk_widget_set_valign", libgtk.}
proc get_margin_left*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_left", libgtk.}
proc margin_left*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_left", libgtk.}
proc set_margin_left*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_left", libgtk.}
proc `margin_left=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_left", libgtk.}
proc get_margin_right*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_right", libgtk.}
proc margin_right*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_right", libgtk.}
proc set_margin_right*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_right", libgtk.}
proc `margin_right=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_right", libgtk.}
proc get_margin_start*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_start", libgtk.}
proc margin_start*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_start", libgtk.}
proc set_margin_start*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_start", libgtk.}
proc `margin_start=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_start", libgtk.}
proc get_margin_end*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_end", libgtk.}
proc margin_end*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_end", libgtk.}
proc set_margin_end*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_end", libgtk.}
proc `margin_end=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_end", libgtk.}
proc get_margin_top*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_top", libgtk.}
proc margin_top*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_top", libgtk.}
proc set_margin_top*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_top", libgtk.}
proc `margin_top=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_top", libgtk.}
proc get_margin_bottom*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_bottom", libgtk.}
proc margin_bottom*(widget: Widget): gint {.
    importc: "gtk_widget_get_margin_bottom", libgtk.}
proc set_margin_bottom*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_bottom", libgtk.}
proc `margin_bottom=`*(widget: Widget; margin: gint) {.
    importc: "gtk_widget_set_margin_bottom", libgtk.}
proc get_events*(widget: Widget): gint {.
    importc: "gtk_widget_get_events", libgtk.}
proc events*(widget: Widget): gint {.
    importc: "gtk_widget_get_events", libgtk.}
proc get_device_events*(widget: Widget; 
                                   device: gdk3.Device): gdk3.EventMask {.
    importc: "gtk_widget_get_device_events", libgtk.}
proc device_events*(widget: Widget; 
                                   device: gdk3.Device): gdk3.EventMask {.
    importc: "gtk_widget_get_device_events", libgtk.}
proc get_pointer*(widget: Widget; x: var gint; y: var gint) {.
    importc: "gtk_widget_get_pointer", libgtk.}
proc is_ancestor*(widget: Widget; ancestor: Widget): gboolean {.
    importc: "gtk_widget_is_ancestor", libgtk.}
proc translate_coordinates*(src_widget: Widget; 
    dest_widget: Widget; src_x: gint; src_y: gint; dest_x: var gint; 
    dest_y: var gint): gboolean {.importc: "gtk_widget_translate_coordinates", 
                                  libgtk.}
proc hide_on_delete*(widget: Widget): gboolean {.
    importc: "gtk_widget_hide_on_delete", libgtk.}
proc override_color*(widget: Widget; state: StateFlags; 
                                color: gdk3.RGBA) {.
    importc: "gtk_widget_override_color", libgtk.}
proc override_background_color*(widget: Widget; 
    state: StateFlags; color: gdk3.RGBA) {.
    importc: "gtk_widget_override_background_color", libgtk.}
proc override_font*(widget: Widget; 
                               font_desc: pango.FontDescription) {.
    importc: "gtk_widget_override_font", libgtk.}
proc override_symbolic_color*(widget: Widget; 
    name: cstring; color: gdk3.RGBA) {.
    importc: "gtk_widget_override_symbolic_color", libgtk.}
proc override_cursor*(widget: Widget; cursor: gdk3.RGBA; 
                                 secondary_cursor: gdk3.RGBA) {.
    importc: "gtk_widget_override_cursor", libgtk.}
proc reset_style*(widget: Widget) {.
    importc: "gtk_widget_reset_style", libgtk.}
proc create_pango_context*(widget: Widget): pango.Context {.
    importc: "gtk_widget_create_pango_context", libgtk.}
proc get_pango_context*(widget: Widget): pango.Context {.
    importc: "gtk_widget_get_pango_context", libgtk.}
proc pango_context*(widget: Widget): pango.Context {.
    importc: "gtk_widget_get_pango_context", libgtk.}
proc create_pango_layout*(widget: Widget; text: cstring): pango.Layout {.
    importc: "gtk_widget_create_pango_layout", libgtk.}
proc render_icon_pixbuf*(widget: Widget; 
                                    stock_id: cstring; size: IconSize): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_widget_render_icon_pixbuf", libgtk.}
proc set_composite_name*(widget: Widget; name: cstring) {.
    importc: "gtk_widget_set_composite_name", libgtk.}
proc `composite_name=`*(widget: Widget; name: cstring) {.
    importc: "gtk_widget_set_composite_name", libgtk.}
proc get_composite_name*(widget: Widget): cstring {.
    importc: "gtk_widget_get_composite_name", libgtk.}
proc composite_name*(widget: Widget): cstring {.
    importc: "gtk_widget_get_composite_name", libgtk.}
proc widget_push_composite_child*() {.
    importc: "gtk_widget_push_composite_child", libgtk.}
proc widget_pop_composite_child*() {.
    importc: "gtk_widget_pop_composite_child", libgtk.}
proc install_style_property*(klass: WidgetClass; 
    pspec: gobject.GParamSpec) {.importc: "gtk_widget_class_install_style_property", 
                             libgtk.}
proc install_style_property_parser*(
    klass: WidgetClass; pspec: gobject.GParamSpec; 
    parser: RcPropertyParser) {.importc: "gtk_widget_class_install_style_property_parser", 
                                   libgtk.}
proc find_style_property*(klass: WidgetClass; 
    property_name: cstring): gobject.GParamSpec {.
    importc: "gtk_widget_class_find_style_property", libgtk.}
proc list_style_properties*(klass: WidgetClass; 
    n_properties: var guint): var gobject.GParamSpec {.
    importc: "gtk_widget_class_list_style_properties", libgtk.}
proc style_get_property*(widget: Widget; 
                                    property_name: cstring; 
                                    value: gobject.GValue) {.
    importc: "gtk_widget_style_get_property", libgtk.}

discard """ proc "style_get_valist*(widget: Widget; 
                                  first_property_name: cstring; 
                                  var_args: va_list) {.
    importc: "gtk_widget_style_get_valist", libgtk.}"""

proc style_get*(widget: Widget; 
                           first_property_name: cstring) {.varargs, 
    importc: "gtk_widget_style_get", libgtk.}
proc set_direction*(widget: Widget; dir: TextDirection) {.
    importc: "gtk_widget_set_direction", libgtk.}
proc `direction=`*(widget: Widget; dir: TextDirection) {.
    importc: "gtk_widget_set_direction", libgtk.}
proc get_direction*(widget: Widget): TextDirection {.
    importc: "gtk_widget_get_direction", libgtk.}
proc direction*(widget: Widget): TextDirection {.
    importc: "gtk_widget_get_direction", libgtk.}
proc widget_set_default_direction*(dir: TextDirection) {.
    importc: "gtk_widget_set_default_direction", libgtk.}
proc widget_get_default_direction*(): TextDirection {.
    importc: "gtk_widget_get_default_direction", libgtk.}
proc is_composited*(widget: Widget): gboolean {.
    importc: "gtk_widget_is_composited", libgtk.}
proc shape_combine_region*(widget: Widget; 
                                      region: cairo.Region) {.
    importc: "gtk_widget_shape_combine_region", libgtk.}
proc input_shape_combine_region*(widget: Widget; 
    region: cairo.Region) {.importc: "gtk_widget_input_shape_combine_region", 
                                  libgtk.}
proc list_mnemonic_labels*(widget: Widget): glib.GList {.
    importc: "gtk_widget_list_mnemonic_labels", libgtk.}
proc add_mnemonic_label*(widget: Widget; 
                                    label: Widget) {.
    importc: "gtk_widget_add_mnemonic_label", libgtk.}
proc remove_mnemonic_label*(widget: Widget; 
    label: Widget) {.importc: "gtk_widget_remove_mnemonic_label", 
                            libgtk.}
proc set_tooltip_window*(widget: Widget; 
                                    custom_window: Window) {.
    importc: "gtk_widget_set_tooltip_window", libgtk.}
proc `tooltip_window=`*(widget: Widget; 
                                    custom_window: Window) {.
    importc: "gtk_widget_set_tooltip_window", libgtk.}
proc get_tooltip_window*(widget: Widget): Window {.
    importc: "gtk_widget_get_tooltip_window", libgtk.}
proc tooltip_window*(widget: Widget): Window {.
    importc: "gtk_widget_get_tooltip_window", libgtk.}
proc trigger_tooltip_query*(widget: Widget) {.
    importc: "gtk_widget_trigger_tooltip_query", libgtk.}
proc set_tooltip_text*(widget: Widget; text: cstring) {.
    importc: "gtk_widget_set_tooltip_text", libgtk.}
proc `tooltip_text=`*(widget: Widget; text: cstring) {.
    importc: "gtk_widget_set_tooltip_text", libgtk.}
proc get_tooltip_text*(widget: Widget): cstring {.
    importc: "gtk_widget_get_tooltip_text", libgtk.}
proc tooltip_text*(widget: Widget): cstring {.
    importc: "gtk_widget_get_tooltip_text", libgtk.}
proc set_tooltip_markup*(widget: Widget; markup: cstring) {.
    importc: "gtk_widget_set_tooltip_markup", libgtk.}
proc `tooltip_markup=`*(widget: Widget; markup: cstring) {.
    importc: "gtk_widget_set_tooltip_markup", libgtk.}
proc get_tooltip_markup*(widget: Widget): cstring {.
    importc: "gtk_widget_get_tooltip_markup", libgtk.}
proc tooltip_markup*(widget: Widget): cstring {.
    importc: "gtk_widget_get_tooltip_markup", libgtk.}
proc set_has_tooltip*(widget: Widget; has_tooltip: gboolean) {.
    importc: "gtk_widget_set_has_tooltip", libgtk.}
proc `has_tooltip=`*(widget: Widget; has_tooltip: gboolean) {.
    importc: "gtk_widget_set_has_tooltip", libgtk.}
proc get_has_tooltip*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_has_tooltip", libgtk.}
proc has_tooltip*(widget: Widget): gboolean {.
    importc: "gtk_widget_get_has_tooltip", libgtk.}
proc cairo_should_draw_window*(cr: cairo.Context; window: gdk3.Window): gboolean {.
    importc: "gtk_cairo_should_draw_window", libgtk.}
proc cairo_transform_to_window*(cr: cairo.Context; widget: Widget; 
                                    window: gdk3.Window) {.
    importc: "gtk_cairo_transform_to_window", libgtk.}
proc requisition_get_type*(): GType {.importc: "gtk_requisition_get_type", 
    libgtk.}
proc requisition_new*(): Requisition {.
    importc: "gtk_requisition_new", libgtk.}
proc copy*(requisition: Requisition): Requisition {.
    importc: "gtk_requisition_copy", libgtk.}
proc free*(requisition: Requisition) {.
    importc: "gtk_requisition_free", libgtk.}
proc in_destruction*(widget: Widget): gboolean {.
    importc: "gtk_widget_in_destruction", libgtk.}
proc get_style_context*(widget: Widget): StyleContext {.
    importc: "gtk_widget_get_style_context", libgtk.}
proc style_context*(widget: Widget): StyleContext {.
    importc: "gtk_widget_get_style_context", libgtk.}
proc get_path*(widget: Widget): WidgetPath {.
    importc: "gtk_widget_get_path", libgtk.}
proc path*(widget: Widget): WidgetPath {.
    importc: "gtk_widget_get_path", libgtk.}
proc get_modifier_mask*(widget: Widget; 
                                   intent: gdk3.ModifierIntent): gdk3.ModifierType {.
    importc: "gtk_widget_get_modifier_mask", libgtk.}
proc modifier_mask*(widget: Widget; 
                                   intent: gdk3.ModifierIntent): gdk3.ModifierType {.
    importc: "gtk_widget_get_modifier_mask", libgtk.}
proc insert_action_group*(widget: Widget; name: cstring; 
                                     group: gio.GActionGroup) {.
    importc: "gtk_widget_insert_action_group", libgtk.}
proc add_tick_callback*(widget: Widget; 
                                   callback: TickCallback; 
                                   user_data: gpointer; notify: GDestroyNotify): guint {.
    importc: "gtk_widget_add_tick_callback", libgtk.}
proc remove_tick_callback*(widget: Widget; id: guint) {.
    importc: "gtk_widget_remove_tick_callback", libgtk.}
proc init_template*(widget: Widget) {.
    importc: "gtk_widget_init_template", libgtk.}
proc get_template_child*(widget: Widget; widget_type: GType; 
                                    name: cstring): GObject {.
    importc: "gtk_widget_get_template_child", libgtk.}
proc template_child*(widget: Widget; widget_type: GType; 
                                    name: cstring): GObject {.
    importc: "gtk_widget_get_template_child", libgtk.}
proc set_template*(widget_class: WidgetClass; 
                                    template_bytes: glib.GBytes) {.
    importc: "gtk_widget_class_set_template", libgtk.}
proc `template=`*(widget_class: WidgetClass; 
                                    template_bytes: glib.GBytes) {.
    importc: "gtk_widget_class_set_template", libgtk.}
proc set_template_from_resource*(
    widget_class: WidgetClass; resource_name: cstring) {.
    importc: "gtk_widget_class_set_template_from_resource", libgtk.}
proc `template_from_resource=`*(
    widget_class: WidgetClass; resource_name: cstring) {.
    importc: "gtk_widget_class_set_template_from_resource", libgtk.}
proc bind_template_callback_full*(
    widget_class: WidgetClass; callback_name: cstring; 
    callback_symbol: GCallback) {.importc: "gtk_widget_class_bind_template_callback_full", 
                                  libgtk.}
proc set_connect_func*(widget_class: WidgetClass; 
    connect_func: BuilderConnectFunc; connect_data: gpointer; 
    connect_data_destroy: GDestroyNotify) {.
    importc: "gtk_widget_class_set_connect_func", libgtk.}
proc `connect_func=`*(widget_class: WidgetClass; 
    connect_func: BuilderConnectFunc; connect_data: gpointer; 
    connect_data_destroy: GDestroyNotify) {.
    importc: "gtk_widget_class_set_connect_func", libgtk.}
proc bind_template_child_full*(
    widget_class: WidgetClass; name: cstring; 
    internal_child: gboolean; struct_offset: gssize) {.
    importc: "gtk_widget_class_bind_template_child_full", libgtk.}
proc get_action_group*(widget: Widget; prefix: cstring): gio.GActionGroup {.
    importc: "gtk_widget_get_action_group", libgtk.}
proc action_group*(widget: Widget; prefix: cstring): gio.GActionGroup {.
    importc: "gtk_widget_get_action_group", libgtk.}
proc list_action_prefixes*(widget: Widget): cstringArray {.
    importc: "gtk_widget_list_action_prefixes", libgtk.}

template gtk_application*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, application_get_type(), ApplicationObj))

template gtk_application_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, application_get_type(), ApplicationClassObj))

template gtk_is_application*(obj: expr): expr = 
  (g_type_check_instance_type(obj, application_get_type()))

template gtk_is_application_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, application_get_type()))

template gtk_application_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, application_get_type(), ApplicationClassObj))

type 
  ApplicationPrivateObj = object 
  
type 
  Application* =  ptr ApplicationObj
  ApplicationPtr* = ptr ApplicationObj
  ApplicationObj*{.final.} = object of gio.GApplicationObj
    priv4: ptr ApplicationPrivateObj

type 
  ApplicationClass* =  ptr ApplicationClassObj
  ApplicationClassPtr* = ptr ApplicationClassObj
  ApplicationClassObj*{.final.} = object of gio.GApplicationClassObj
    window_added*: proc (application: Application; 
                         window: Window) {.cdecl.}
    window_removed*: proc (application: Application; 
                           window: Window) {.cdecl.}
    padding*: array[12, gpointer]

proc application_get_type*(): GType {.importc: "gtk_application_get_type", 
    libgtk.}
proc application_new*(application_id: cstring; flags: GApplicationFlags): Application {.
    importc: "gtk_application_new", libgtk.}
proc add_window*(application: Application; 
                                 window: Window) {.
    importc: "gtk_application_add_window", libgtk.}
proc remove_window*(application: Application; 
                                    window: Window) {.
    importc: "gtk_application_remove_window", libgtk.}
proc get_windows*(application: Application): glib.GList {.
    importc: "gtk_application_get_windows", libgtk.}
proc windows*(application: Application): glib.GList {.
    importc: "gtk_application_get_windows", libgtk.}
proc get_app_menu*(application: Application): gio.GMenuModel {.
    importc: "gtk_application_get_app_menu", libgtk.}
proc app_menu*(application: Application): gio.GMenuModel {.
    importc: "gtk_application_get_app_menu", libgtk.}
proc set_app_menu*(application: Application; 
                                   app_menu: gio.GMenuModel) {.
    importc: "gtk_application_set_app_menu", libgtk.}
proc `app_menu=`*(application: Application; 
                                   app_menu: gio.GMenuModel) {.
    importc: "gtk_application_set_app_menu", libgtk.}
proc get_menubar*(application: Application): gio.GMenuModel {.
    importc: "gtk_application_get_menubar", libgtk.}
proc menubar*(application: Application): gio.GMenuModel {.
    importc: "gtk_application_get_menubar", libgtk.}
proc set_menubar*(application: Application; 
                                  menubar: gio.GMenuModel) {.
    importc: "gtk_application_set_menubar", libgtk.}
proc `menubar=`*(application: Application; 
                                  menubar: gio.GMenuModel) {.
    importc: "gtk_application_set_menubar", libgtk.}
proc add_accelerator*(application: Application; 
                                      accelerator: cstring; 
                                      action_name: cstring; 
                                      parameter: glib.GVariant) {.
    importc: "gtk_application_add_accelerator", libgtk.}
proc remove_accelerator*(application: Application; 
    action_name: cstring; parameter: glib.GVariant) {.
    importc: "gtk_application_remove_accelerator", libgtk.}
type 
  ApplicationInhibitFlags* {.size: sizeof(cint), pure.} = enum 
    LOGOUT = (1 shl 0), 
    SWITCH = (1 shl 1), 
    SUSPEND = (1 shl 2), 
    IDLE = (1 shl 3)
proc inhibit*(application: Application; 
                              window: Window; 
                              flags: ApplicationInhibitFlags; 
                              reason: cstring): guint {.
    importc: "gtk_application_inhibit", libgtk.}
proc uninhibit*(application: Application; cookie: guint) {.
    importc: "gtk_application_uninhibit", libgtk.}
proc is_inhibited*(application: Application; 
                                   flags: ApplicationInhibitFlags): gboolean {.
    importc: "gtk_application_is_inhibited", libgtk.}
proc get_window_by_id*(application: Application; 
    id: guint): Window {.importc: "gtk_application_get_window_by_id", 
                                libgtk.}
proc window_by_id*(application: Application; 
    id: guint): Window {.importc: "gtk_application_get_window_by_id", 
                                libgtk.}
proc get_active_window*(application: Application): Window {.
    importc: "gtk_application_get_active_window", libgtk.}
proc active_window*(application: Application): Window {.
    importc: "gtk_application_get_active_window", libgtk.}
proc list_action_descriptions*(application: Application): cstringArray {.
    importc: "gtk_application_list_action_descriptions", libgtk.}
proc get_accels_for_action*(application: Application; 
    detailed_action_name: cstring): cstringArray {.
    importc: "gtk_application_get_accels_for_action", libgtk.}
proc accels_for_action*(application: Application; 
    detailed_action_name: cstring): cstringArray {.
    importc: "gtk_application_get_accels_for_action", libgtk.}
proc get_actions_for_accel*(application: Application; 
    accel: cstring): cstringArray {.
    importc: "gtk_application_get_actions_for_accel", libgtk.}
proc actions_for_accel*(application: Application; 
    accel: cstring): cstringArray {.
    importc: "gtk_application_get_actions_for_accel", libgtk.}
proc set_accels_for_action*(application: Application; 
    detailed_action_name: cstring; accels: var cstring) {.
    importc: "gtk_application_set_accels_for_action", libgtk.}
proc `accels_for_action=`*(application: Application; 
    detailed_action_name: cstring; accels: var cstring) {.
    importc: "gtk_application_set_accels_for_action", libgtk.}
proc prefers_app_menu*(application: Application): gboolean {.
    importc: "gtk_application_prefers_app_menu", libgtk.}
proc get_menu_by_id*(application: Application; 
                                     id: cstring): gio.GMenu {.
    importc: "gtk_application_get_menu_by_id", libgtk.}
proc menu_by_id*(application: Application; 
                                     id: cstring): gio.GMenu {.
    importc: "gtk_application_get_menu_by_id", libgtk.}

template gtk_container*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, container_get_type(), ContainerObj))

template gtk_container_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, container_get_type(), ContainerClassObj))

template gtk_is_container*(obj: expr): expr = 
  (g_type_check_instance_type(obj, container_get_type()))

template gtk_is_container_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, container_get_type()))

template gtk_container_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, container_get_type(), ContainerClassObj))

type 
  ContainerClass* =  ptr ContainerClassObj
  ContainerClassPtr* = ptr ContainerClassObj
  ContainerClassObj = object of WidgetClassObj
    add*: proc (container: Container; widget: Widget) {.cdecl.}
    remove*: proc (container: Container; widget: Widget) {.cdecl.}
    check_resize*: proc (container: Container) {.cdecl.}
    forall*: proc (container: Container; include_internals: gboolean; 
                   callback: Callback; callback_data: gpointer) {.cdecl.}
    set_focus_child*: proc (container: Container; child: Widget) {.cdecl.}
    child_type*: proc (container: Container): GType {.cdecl.}
    composite_name*: proc (container: Container; child: Widget): cstring {.cdecl.}
    set_child_property*: proc (container: Container; 
                               child: Widget; property_id: guint; 
                               value: gobject.GValue; pspec: gobject.GParamSpec) {.cdecl.}
    get_child_property*: proc (container: Container; 
                               child: Widget; property_id: guint; 
                               value: gobject.GValue; pspec: gobject.GParamSpec) {.cdecl.}
    get_path_for_child*: proc (container: Container; 
                               child: Widget): WidgetPath {.cdecl.}
    handle_border_width: cuint
    gtk_reserved31: proc () {.cdecl.}
    gtk_reserved32: proc () {.cdecl.}
    gtk_reserved33: proc () {.cdecl.}
    gtk_reserved34: proc () {.cdecl.}
    gtk_reserved35: proc () {.cdecl.}
    gtk_reserved36: proc () {.cdecl.}
    gtk_reserved37: proc () {.cdecl.}
    gtk_reserved38: proc () {.cdecl.}

type 
  ResizeMode* {.size: sizeof(cint), pure.} = enum 
    PARENT, QUEUE, IMMEDIATE
proc container_get_type*(): GType {.importc: "gtk_container_get_type", 
    libgtk.}
proc set_border_width*(container: Container; 
                                     border_width: guint) {.
    importc: "gtk_container_set_border_width", libgtk.}
proc `border_width=`*(container: Container; 
                                     border_width: guint) {.
    importc: "gtk_container_set_border_width", libgtk.}
proc get_border_width*(container: Container): guint {.
    importc: "gtk_container_get_border_width", libgtk.}
proc border_width*(container: Container): guint {.
    importc: "gtk_container_get_border_width", libgtk.}
proc add*(container: Container; widget: Widget) {.
    importc: "gtk_container_add", libgtk.}
proc remove*(container: Container; widget: Widget) {.
    importc: "gtk_container_remove", libgtk.}
proc set_resize_mode*(container: Container; 
                                    resize_mode: ResizeMode) {.
    importc: "gtk_container_set_resize_mode", libgtk.}
proc `resize_mode=`*(container: Container; 
                                    resize_mode: ResizeMode) {.
    importc: "gtk_container_set_resize_mode", libgtk.}
proc get_resize_mode*(container: Container): ResizeMode {.
    importc: "gtk_container_get_resize_mode", libgtk.}
proc resize_mode*(container: Container): ResizeMode {.
    importc: "gtk_container_get_resize_mode", libgtk.}
proc check_resize*(container: Container) {.
    importc: "gtk_container_check_resize", libgtk.}
proc foreach*(container: Container; 
                            callback: Callback; callback_data: gpointer) {.
    importc: "gtk_container_foreach", libgtk.}
proc get_children*(container: Container): glib.GList {.
    importc: "gtk_container_get_children", libgtk.}
proc children*(container: Container): glib.GList {.
    importc: "gtk_container_get_children", libgtk.}
proc propagate_draw*(container: Container; 
                                   child: Widget; cr: cairo.Context) {.
    importc: "gtk_container_propagate_draw", libgtk.}
proc set_focus_chain*(container: Container; 
                                    focusable_widgets: glib.GList) {.
    importc: "gtk_container_set_focus_chain", libgtk.}
proc `focus_chain=`*(container: Container; 
                                    focusable_widgets: glib.GList) {.
    importc: "gtk_container_set_focus_chain", libgtk.}
proc get_focus_chain*(container: Container; 
                                    focusable_widgets: var glib.GList): gboolean {.
    importc: "gtk_container_get_focus_chain", libgtk.}
proc focus_chain*(container: Container; 
                                    focusable_widgets: var glib.GList): gboolean {.
    importc: "gtk_container_get_focus_chain", libgtk.}
proc unset_focus_chain*(container: Container) {.
    importc: "gtk_container_unset_focus_chain", libgtk.}
template gtk_is_resize_container*(widget: expr): expr = 
  (gtk_is_container(widget) and
      (gtk_container_get_resize_mode(gtk_container(widget)) !=
      RESIZE_PARENT))

proc set_reallocate_redraws*(container: Container; 
    needs_redraws: gboolean) {.importc: "gtk_container_set_reallocate_redraws", 
                               libgtk.}

proc `reallocate_redraws=`*(container: Container; 
    needs_redraws: gboolean) {.importc: "gtk_container_set_reallocate_redraws", 
                               libgtk.}
proc set_focus_child*(container: Container; 
                                    child: Widget) {.
    importc: "gtk_container_set_focus_child", libgtk.}
proc `focus_child=`*(container: Container; 
                                    child: Widget) {.
    importc: "gtk_container_set_focus_child", libgtk.}
proc get_focus_child*(container: Container): Widget {.
    importc: "gtk_container_get_focus_child", libgtk.}
proc focus_child*(container: Container): Widget {.
    importc: "gtk_container_get_focus_child", libgtk.}
proc set_focus_vadjustment*(container: Container; 
    adjustment: Adjustment) {.importc: "gtk_container_set_focus_vadjustment", 
                                     libgtk.}
proc `focus_vadjustment=`*(container: Container; 
    adjustment: Adjustment) {.importc: "gtk_container_set_focus_vadjustment", 
                                     libgtk.}
proc get_focus_vadjustment*(container: Container): Adjustment {.
    importc: "gtk_container_get_focus_vadjustment", libgtk.}
proc focus_vadjustment*(container: Container): Adjustment {.
    importc: "gtk_container_get_focus_vadjustment", libgtk.}
proc set_focus_hadjustment*(container: Container; 
    adjustment: Adjustment) {.importc: "gtk_container_set_focus_hadjustment", 
                                     libgtk.}
proc `focus_hadjustment=`*(container: Container; 
    adjustment: Adjustment) {.importc: "gtk_container_set_focus_hadjustment", 
                                     libgtk.}
proc get_focus_hadjustment*(container: Container): Adjustment {.
    importc: "gtk_container_get_focus_hadjustment", libgtk.}
proc focus_hadjustment*(container: Container): Adjustment {.
    importc: "gtk_container_get_focus_hadjustment", libgtk.}
proc resize_children*(container: Container) {.
    importc: "gtk_container_resize_children", libgtk.}
proc child_type*(container: Container): GType {.
    importc: "gtk_container_child_type", libgtk.}
proc install_child_property*(
    cclass: ContainerClass; property_id: guint; pspec: gobject.GParamSpec) {.
    importc: "gtk_container_class_install_child_property", libgtk.}
proc container_class_find_child_property*(cclass: gobject.GObjectClass; 
    property_name: cstring): gobject.GParamSpec {.
    importc: "gtk_container_class_find_child_property", libgtk.}
proc container_class_list_child_properties*(cclass: gobject.GObjectClass; 
    n_properties: var guint): var gobject.GParamSpec {.
    importc: "gtk_container_class_list_child_properties", libgtk.}
proc add_with_properties*(container: Container; 
    widget: Widget; first_prop_name: cstring) {.varargs, 
    importc: "gtk_container_add_with_properties", libgtk.}
proc child_set*(container: Container; 
                              child: Widget; first_prop_name: cstring) {.
    varargs, importc: "gtk_container_child_set", libgtk.}
proc child_get*(container: Container; 
                              child: Widget; first_prop_name: cstring) {.
    varargs, importc: "gtk_container_child_get", libgtk.}

discard """ proc "child_set_valist*(container: Container; 
                                     child: Widget; 
                                     first_property_name: cstring; 
                                     var_args: va_list) {.
    importc: "gtk_container_child_set_valist", libgtk.}"""

discard """ proc "child_get_valist*(container: Container; 
                                     child: Widget; 
                                     first_property_name: cstring; 
                                     var_args: va_list) {.
    importc: "gtk_container_child_get_valist", libgtk.}"""

proc child_set_property*(container: Container; 
    child: Widget; property_name: cstring; value: gobject.GValue) {.
    importc: "gtk_container_child_set_property", libgtk.}
proc child_get_property*(container: Container; 
    child: Widget; property_name: cstring; value: gobject.GValue) {.
    importc: "gtk_container_child_get_property", libgtk.}
proc child_notify*(container: Container; 
                                 child: Widget; 
                                 child_property: cstring) {.
    importc: "gtk_container_child_notify", libgtk.}
template gtk_container_warn_invalid_child_property_id*(
    obj, property_id, pspec: expr): expr = 
  G_OBJECT_WARN_INVALID_PSPEC(obj, "child property", property_id, pspec)

proc forall*(container: Container; callback: Callback; 
                           callback_data: gpointer) {.
    importc: "gtk_container_forall", libgtk.}
proc handle_border_width*(klass: ContainerClass) {.
    importc: "gtk_container_class_handle_border_width", libgtk.}
proc get_path_for_child*(container: Container; 
    child: Widget): WidgetPath {.
    importc: "gtk_container_get_path_for_child", libgtk.}
proc path_for_child*(container: Container; 
    child: Widget): WidgetPath {.
    importc: "gtk_container_get_path_for_child", libgtk.}

template gtk_bin*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, bin_get_type(), BinObj))

template gtk_bin_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, bin_get_type(), BinClassObj))

template gtk_is_bin*(obj: expr): expr = 
  (g_type_check_instance_type(obj, bin_get_type()))

template gtk_is_bin_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, bin_get_type()))

template gtk_bin_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, bin_get_type(), BinClassObj))

type 
  BinClass* =  ptr BinClassObj
  BinClassPtr* = ptr BinClassObj
  BinClassObj* = object of ContainerClassObj
    gtk_reserved41: proc () {.cdecl.}
    gtk_reserved42: proc () {.cdecl.}
    gtk_reserved43: proc () {.cdecl.}
    gtk_reserved44: proc () {.cdecl.}

proc bin_get_type*(): GType {.importc: "gtk_bin_get_type", libgtk.}
proc get_child*(bin: Bin): Widget {.
    importc: "gtk_bin_get_child", libgtk.}
proc child*(bin: Bin): Widget {.
    importc: "gtk_bin_get_child", libgtk.}

template gtk_window*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, window_get_type(), WindowObj))

template gtk_window_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, window_get_type(), WindowClassObj))

template gtk_is_window*(obj: expr): expr = 
  (g_type_check_instance_type(obj, window_get_type()))

template gtk_is_window_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, window_get_type()))

template gtk_window_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, window_get_type(), WindowClassObj))

type 
  WindowClass* =  ptr WindowClassObj
  WindowClassPtr* = ptr WindowClassObj
  WindowClassObj* = object of BinClassObj
    set_focus*: proc (window: Window; focus: Widget) {.cdecl.}
    activate_focus*: proc (window: Window) {.cdecl.}
    activate_default*: proc (window: Window) {.cdecl.}
    keys_changed*: proc (window: Window) {.cdecl.}
    enable_debugging*: proc (window: Window; toggle: gboolean): gboolean {.cdecl.}
    gtk_reserved51: proc () {.cdecl.}
    gtk_reserved52: proc () {.cdecl.}
    gtk_reserved53: proc () {.cdecl.}

type 
  WindowType* {.size: sizeof(cint), pure.} = enum 
    TOPLEVEL, POPUP
type 
  WindowPosition* {.size: sizeof(cint), pure.} = enum 
    NONE, CENTER, MOUSE, 
    CENTER_ALWAYS, CENTER_ON_PARENT
proc window_get_type*(): GType {.importc: "gtk_window_get_type", 
                                     libgtk.}
proc window_new*(`type`: WindowType = WindowType.TOPLEVEL): Window {.
    importc: "gtk_window_new", libgtk.}
proc set_title*(window: Window; title: cstring) {.
    importc: "gtk_window_set_title", libgtk.}
proc `title=`*(window: Window; title: cstring) {.
    importc: "gtk_window_set_title", libgtk.}
proc get_title*(window: Window): cstring {.
    importc: "gtk_window_get_title", libgtk.}
proc title*(window: Window): cstring {.
    importc: "gtk_window_get_title", libgtk.}
proc set_wmclass*(window: Window; wmclass_name: cstring; 
                             wmclass_class: cstring) {.
    importc: "gtk_window_set_wmclass", libgtk.}
proc `wmclass=`*(window: Window; wmclass_name: cstring; 
                             wmclass_class: cstring) {.
    importc: "gtk_window_set_wmclass", libgtk.}
proc set_role*(window: Window; role: cstring) {.
    importc: "gtk_window_set_role", libgtk.}
proc `role=`*(window: Window; role: cstring) {.
    importc: "gtk_window_set_role", libgtk.}
proc set_startup_id*(window: Window; startup_id: cstring) {.
    importc: "gtk_window_set_startup_id", libgtk.}
proc `startup_id=`*(window: Window; startup_id: cstring) {.
    importc: "gtk_window_set_startup_id", libgtk.}
proc get_role*(window: Window): cstring {.
    importc: "gtk_window_get_role", libgtk.}
proc role*(window: Window): cstring {.
    importc: "gtk_window_get_role", libgtk.}
proc add_accel_group*(window: Window; 
                                 accel_group: AccelGroup) {.
    importc: "gtk_window_add_accel_group", libgtk.}
proc remove_accel_group*(window: Window; 
                                    accel_group: AccelGroup) {.
    importc: "gtk_window_remove_accel_group", libgtk.}
proc set_position*(window: Window; 
                              position: WindowPosition) {.
    importc: "gtk_window_set_position", libgtk.}
proc `position=`*(window: Window; 
                              position: WindowPosition) {.
    importc: "gtk_window_set_position", libgtk.}
proc activate_focus*(window: Window): gboolean {.
    importc: "gtk_window_activate_focus", libgtk.}
proc set_focus*(window: Window; focus: Widget) {.
    importc: "gtk_window_set_focus", libgtk.}
proc `focus=`*(window: Window; focus: Widget) {.
    importc: "gtk_window_set_focus", libgtk.}
proc get_focus*(window: Window): Widget {.
    importc: "gtk_window_get_focus", libgtk.}
proc focus*(window: Window): Widget {.
    importc: "gtk_window_get_focus", libgtk.}
proc set_default*(window: Window; 
                             default_widget: Widget) {.
    importc: "gtk_window_set_default", libgtk.}
proc `default=`*(window: Window; 
                             default_widget: Widget) {.
    importc: "gtk_window_set_default", libgtk.}
proc get_default_widget*(window: Window): Widget {.
    importc: "gtk_window_get_default_widget", libgtk.}
proc default_widget*(window: Window): Widget {.
    importc: "gtk_window_get_default_widget", libgtk.}
proc activate_default*(window: Window): gboolean {.
    importc: "gtk_window_activate_default", libgtk.}
proc set_transient_for*(window: Window; 
                                   parent: Window) {.
    importc: "gtk_window_set_transient_for", libgtk.}
proc `transient_for=`*(window: Window; 
                                   parent: Window) {.
    importc: "gtk_window_set_transient_for", libgtk.}
proc get_transient_for*(window: Window): Window {.
    importc: "gtk_window_get_transient_for", libgtk.}
proc transient_for*(window: Window): Window {.
    importc: "gtk_window_get_transient_for", libgtk.}
proc set_attached_to*(window: Window; 
                                 attach_widget: Widget) {.
    importc: "gtk_window_set_attached_to", libgtk.}
proc `attached_to=`*(window: Window; 
                                 attach_widget: Widget) {.
    importc: "gtk_window_set_attached_to", libgtk.}
proc get_attached_to*(window: Window): Widget {.
    importc: "gtk_window_get_attached_to", libgtk.}
proc attached_to*(window: Window): Widget {.
    importc: "gtk_window_get_attached_to", libgtk.}
proc set_opacity*(window: Window; opacity: gdouble) {.
    importc: "gtk_window_set_opacity", libgtk.}
proc `opacity=`*(window: Window; opacity: gdouble) {.
    importc: "gtk_window_set_opacity", libgtk.}
proc get_opacity*(window: Window): gdouble {.
    importc: "gtk_window_get_opacity", libgtk.}
proc opacity*(window: Window): gdouble {.
    importc: "gtk_window_get_opacity", libgtk.}
proc set_type_hint*(window: Window; hint: gdk3.WindowTypeHint) {.
    importc: "gtk_window_set_type_hint", libgtk.}
proc `type_hint=`*(window: Window; hint: gdk3.WindowTypeHint) {.
    importc: "gtk_window_set_type_hint", libgtk.}
proc get_type_hint*(window: Window): gdk3.WindowTypeHint {.
    importc: "gtk_window_get_type_hint", libgtk.}
proc type_hint*(window: Window): gdk3.WindowTypeHint {.
    importc: "gtk_window_get_type_hint", libgtk.}
proc set_skip_taskbar_hint*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_skip_taskbar_hint", 
                         libgtk.}
proc `skip_taskbar_hint=`*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_skip_taskbar_hint", 
                         libgtk.}
proc get_skip_taskbar_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_skip_taskbar_hint", libgtk.}
proc skip_taskbar_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_skip_taskbar_hint", libgtk.}
proc set_skip_pager_hint*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_skip_pager_hint", libgtk.}
proc `skip_pager_hint=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_skip_pager_hint", libgtk.}
proc get_skip_pager_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_skip_pager_hint", libgtk.}
proc skip_pager_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_skip_pager_hint", libgtk.}
proc set_urgency_hint*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_urgency_hint", libgtk.}
proc `urgency_hint=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_urgency_hint", libgtk.}
proc get_urgency_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_urgency_hint", libgtk.}
proc urgency_hint*(window: Window): gboolean {.
    importc: "gtk_window_get_urgency_hint", libgtk.}
proc set_accept_focus*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_accept_focus", libgtk.}
proc `accept_focus=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_accept_focus", libgtk.}
proc get_accept_focus*(window: Window): gboolean {.
    importc: "gtk_window_get_accept_focus", libgtk.}
proc accept_focus*(window: Window): gboolean {.
    importc: "gtk_window_get_accept_focus", libgtk.}
proc set_focus_on_map*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_focus_on_map", libgtk.}
proc `focus_on_map=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_focus_on_map", libgtk.}
proc get_focus_on_map*(window: Window): gboolean {.
    importc: "gtk_window_get_focus_on_map", libgtk.}
proc focus_on_map*(window: Window): gboolean {.
    importc: "gtk_window_get_focus_on_map", libgtk.}
proc set_destroy_with_parent*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_destroy_with_parent", 
                         libgtk.}
proc `destroy_with_parent=`*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_destroy_with_parent", 
                         libgtk.}
proc get_destroy_with_parent*(window: Window): gboolean {.
    importc: "gtk_window_get_destroy_with_parent", libgtk.}
proc destroy_with_parent*(window: Window): gboolean {.
    importc: "gtk_window_get_destroy_with_parent", libgtk.}
proc set_hide_titlebar_when_maximized*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_hide_titlebar_when_maximized", 
                         libgtk.}
proc `hide_titlebar_when_maximized=`*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_hide_titlebar_when_maximized", 
                         libgtk.}
proc get_hide_titlebar_when_maximized*(window: Window): gboolean {.
    importc: "gtk_window_get_hide_titlebar_when_maximized", libgtk.}
proc hide_titlebar_when_maximized*(window: Window): gboolean {.
    importc: "gtk_window_get_hide_titlebar_when_maximized", libgtk.}
proc set_mnemonics_visible*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_mnemonics_visible", 
                         libgtk.}
proc `mnemonics_visible=`*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_mnemonics_visible", 
                         libgtk.}
proc get_mnemonics_visible*(window: Window): gboolean {.
    importc: "gtk_window_get_mnemonics_visible", libgtk.}
proc mnemonics_visible*(window: Window): gboolean {.
    importc: "gtk_window_get_mnemonics_visible", libgtk.}
proc set_focus_visible*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_focus_visible", libgtk.}
proc `focus_visible=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_focus_visible", libgtk.}
proc get_focus_visible*(window: Window): gboolean {.
    importc: "gtk_window_get_focus_visible", libgtk.}
proc focus_visible*(window: Window): gboolean {.
    importc: "gtk_window_get_focus_visible", libgtk.}
proc set_resizable*(window: Window; resizable: gboolean) {.
    importc: "gtk_window_set_resizable", libgtk.}
proc `resizable=`*(window: Window; resizable: gboolean) {.
    importc: "gtk_window_set_resizable", libgtk.}
proc get_resizable*(window: Window): gboolean {.
    importc: "gtk_window_get_resizable", libgtk.}
proc resizable*(window: Window): gboolean {.
    importc: "gtk_window_get_resizable", libgtk.}
proc set_gravity*(window: Window; gravity: gdk3.Gravity) {.
    importc: "gtk_window_set_gravity", libgtk.}
proc `gravity=`*(window: Window; gravity: gdk3.Gravity) {.
    importc: "gtk_window_set_gravity", libgtk.}
proc get_gravity*(window: Window): gdk3.Gravity {.
    importc: "gtk_window_get_gravity", libgtk.}
proc gravity*(window: Window): gdk3.Gravity {.
    importc: "gtk_window_get_gravity", libgtk.}
proc set_geometry_hints*(window: Window; 
                                    geometry_widget: Widget; 
                                    geometry: gdk3.Geometry; 
                                    geom_mask: gdk3.WindowHints) {.
    importc: "gtk_window_set_geometry_hints", libgtk.}
proc `geometry_hints=`*(window: Window; 
                                    geometry_widget: Widget; 
                                    geometry: gdk3.Geometry; 
                                    geom_mask: gdk3.WindowHints) {.
    importc: "gtk_window_set_geometry_hints", libgtk.}
proc set_screen*(window: Window; screen: gdk3.Screen) {.
    importc: "gtk_window_set_screen", libgtk.}
proc `screen=`*(window: Window; screen: gdk3.Screen) {.
    importc: "gtk_window_set_screen", libgtk.}
proc get_screen*(window: Window): gdk3.Screen {.
    importc: "gtk_window_get_screen", libgtk.}
proc screen*(window: Window): gdk3.Screen {.
    importc: "gtk_window_get_screen", libgtk.}
proc is_active*(window: Window): gboolean {.
    importc: "gtk_window_is_active", libgtk.}
proc has_toplevel_focus*(window: Window): gboolean {.
    importc: "gtk_window_has_toplevel_focus", libgtk.}
proc set_decorated*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_decorated", libgtk.}
proc `decorated=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_decorated", libgtk.}
proc get_decorated*(window: Window): gboolean {.
    importc: "gtk_window_get_decorated", libgtk.}
proc decorated*(window: Window): gboolean {.
    importc: "gtk_window_get_decorated", libgtk.}
proc set_deletable*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_deletable", libgtk.}
proc `deletable=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_deletable", libgtk.}
proc get_deletable*(window: Window): gboolean {.
    importc: "gtk_window_get_deletable", libgtk.}
proc deletable*(window: Window): gboolean {.
    importc: "gtk_window_get_deletable", libgtk.}
proc set_icon_list*(window: Window; list: glib.GList) {.
    importc: "gtk_window_set_icon_list", libgtk.}
proc `icon_list=`*(window: Window; list: glib.GList) {.
    importc: "gtk_window_set_icon_list", libgtk.}
proc get_icon_list*(window: Window): glib.GList {.
    importc: "gtk_window_get_icon_list", libgtk.}
proc icon_list*(window: Window): glib.GList {.
    importc: "gtk_window_get_icon_list", libgtk.}
proc set_icon*(window: Window; icon: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_window_set_icon", libgtk.}
proc `icon=`*(window: Window; icon: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_window_set_icon", libgtk.}
proc set_icon_name*(window: Window; name: cstring) {.
    importc: "gtk_window_set_icon_name", libgtk.}
proc `icon_name=`*(window: Window; name: cstring) {.
    importc: "gtk_window_set_icon_name", libgtk.}
proc set_icon_from_file*(window: Window; 
                                    filename: cstring; err: var glib.GError): gboolean {.
    importc: "gtk_window_set_icon_from_file", libgtk.}
proc get_icon*(window: Window): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_window_get_icon", libgtk.}
proc icon*(window: Window): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_window_get_icon", libgtk.}
proc get_icon_name*(window: Window): cstring {.
    importc: "gtk_window_get_icon_name", libgtk.}
proc icon_name*(window: Window): cstring {.
    importc: "gtk_window_get_icon_name", libgtk.}
proc window_set_default_icon_list*(list: glib.GList) {.
    importc: "gtk_window_set_default_icon_list", libgtk.}
proc window_get_default_icon_list*(): glib.GList {.
    importc: "gtk_window_get_default_icon_list", libgtk.}
proc window_set_default_icon*(icon: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_window_set_default_icon", libgtk.}
proc window_set_default_icon_name*(name: cstring) {.
    importc: "gtk_window_set_default_icon_name", libgtk.}
proc window_get_default_icon_name*(): cstring {.
    importc: "gtk_window_get_default_icon_name", libgtk.}
proc window_set_default_icon_from_file*(filename: cstring; 
    err: var glib.GError): gboolean {.importc: "gtk_window_set_default_icon_from_file", 
                                     libgtk.}
proc window_set_auto_startup_notification*(setting: gboolean) {.
    importc: "gtk_window_set_auto_startup_notification", libgtk.}
proc set_modal*(window: Window; modal: gboolean) {.
    importc: "gtk_window_set_modal", libgtk.}
proc `modal=`*(window: Window; modal: gboolean) {.
    importc: "gtk_window_set_modal", libgtk.}
proc get_modal*(window: Window): gboolean {.
    importc: "gtk_window_get_modal", libgtk.}
proc modal*(window: Window): gboolean {.
    importc: "gtk_window_get_modal", libgtk.}
proc window_list_toplevels*(): glib.GList {.
    importc: "gtk_window_list_toplevels", libgtk.}
proc set_has_user_ref_count*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_has_user_ref_count", 
                         libgtk.}
proc `has_user_ref_count=`*(window: Window; 
    setting: gboolean) {.importc: "gtk_window_set_has_user_ref_count", 
                         libgtk.}
proc add_mnemonic*(window: Window; keyval: guint; 
                              target: Widget) {.
    importc: "gtk_window_add_mnemonic", libgtk.}
proc remove_mnemonic*(window: Window; keyval: guint; 
                                 target: Widget) {.
    importc: "gtk_window_remove_mnemonic", libgtk.}
proc mnemonic_activate*(window: Window; keyval: guint; 
                                   modifier: gdk3.ModifierType): gboolean {.
    importc: "gtk_window_mnemonic_activate", libgtk.}
proc set_mnemonic_modifier*(window: Window; 
    modifier: gdk3.ModifierType) {.importc: "gtk_window_set_mnemonic_modifier", 
                                 libgtk.}
proc `mnemonic_modifier=`*(window: Window; 
    modifier: gdk3.ModifierType) {.importc: "gtk_window_set_mnemonic_modifier", 
                                 libgtk.}
proc get_mnemonic_modifier*(window: Window): gdk3.ModifierType {.
    importc: "gtk_window_get_mnemonic_modifier", libgtk.}
proc mnemonic_modifier*(window: Window): gdk3.ModifierType {.
    importc: "gtk_window_get_mnemonic_modifier", libgtk.}
proc activate_key*(window: Window; event: gdk3.EventKey): gboolean {.
    importc: "gtk_window_activate_key", libgtk.}
proc propagate_key_event*(window: Window; 
                                     event: gdk3.EventKey): gboolean {.
    importc: "gtk_window_propagate_key_event", libgtk.}
proc present*(window: Window) {.
    importc: "gtk_window_present", libgtk.}
proc present_with_time*(window: Window; timestamp: guint32) {.
    importc: "gtk_window_present_with_time", libgtk.}
proc iconify*(window: Window) {.
    importc: "gtk_window_iconify", libgtk.}
proc deiconify*(window: Window) {.
    importc: "gtk_window_deiconify", libgtk.}
proc stick*(window: Window) {.importc: "gtk_window_stick", 
    libgtk.}
proc unstick*(window: Window) {.
    importc: "gtk_window_unstick", libgtk.}
proc maximize*(window: Window) {.
    importc: "gtk_window_maximize", libgtk.}
proc unmaximize*(window: Window) {.
    importc: "gtk_window_unmaximize", libgtk.}
proc fullscreen*(window: Window) {.
    importc: "gtk_window_fullscreen", libgtk.}
proc unfullscreen*(window: Window) {.
    importc: "gtk_window_unfullscreen", libgtk.}
proc close*(window: Window) {.importc: "gtk_window_close", 
    libgtk.}
proc set_keep_above*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_keep_above", libgtk.}
proc `keep_above=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_keep_above", libgtk.}
proc set_keep_below*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_keep_below", libgtk.}
proc `keep_below=`*(window: Window; setting: gboolean) {.
    importc: "gtk_window_set_keep_below", libgtk.}
proc begin_resize_drag*(window: Window; edge: gdk3.WindowEdge; 
                                   button: gint; root_x: gint; root_y: gint; 
                                   timestamp: guint32) {.
    importc: "gtk_window_begin_resize_drag", libgtk.}
proc begin_move_drag*(window: Window; button: gint; 
                                 root_x: gint; root_y: gint; 
                                 timestamp: guint32) {.
    importc: "gtk_window_begin_move_drag", libgtk.}
proc set_default_size*(window: Window; width: gint; 
                                  height: gint) {.
    importc: "gtk_window_set_default_size", libgtk.}
proc `default_size=`*(window: Window; width: gint; 
                                  height: gint) {.
    importc: "gtk_window_set_default_size", libgtk.}
proc get_default_size*(window: Window; width: var gint; 
                                  height: var gint) {.
    importc: "gtk_window_get_default_size", libgtk.}
proc resize*(window: Window; width: gint; height: gint) {.
    importc: "gtk_window_resize", libgtk.}
proc get_size*(window: Window; width: var gint; 
                          height: var gint) {.importc: "gtk_window_get_size", 
    libgtk.}
proc move*(window: Window; x: gint; y: gint) {.
    importc: "gtk_window_move", libgtk.}
proc get_position*(window: Window; root_x: var gint; 
                              root_y: var gint) {.
    importc: "gtk_window_get_position", libgtk.}
proc parse_geometry*(window: Window; geometry: cstring): gboolean {.
    importc: "gtk_window_parse_geometry", libgtk.}
proc set_default_geometry*(window: Window; width: gint; 
                                      height: gint) {.
    importc: "gtk_window_set_default_geometry", libgtk.}
proc `default_geometry=`*(window: Window; width: gint; 
                                      height: gint) {.
    importc: "gtk_window_set_default_geometry", libgtk.}
proc resize_to_geometry*(window: Window; width: gint; 
                                    height: gint) {.
    importc: "gtk_window_resize_to_geometry", libgtk.}
proc get_group*(window: Window): WindowGroup {.
    importc: "gtk_window_get_group", libgtk.}
proc group*(window: Window): WindowGroup {.
    importc: "gtk_window_get_group", libgtk.}
proc has_group*(window: Window): gboolean {.
    importc: "gtk_window_has_group", libgtk.}
proc reshow_with_initial_size*(window: Window) {.
    importc: "gtk_window_reshow_with_initial_size", libgtk.}
proc get_window_type*(window: Window): WindowType {.
    importc: "gtk_window_get_window_type", libgtk.}
proc window_type*(window: Window): WindowType {.
    importc: "gtk_window_get_window_type", libgtk.}
proc get_application*(window: Window): Application {.
    importc: "gtk_window_get_application", libgtk.}
proc application*(window: Window): Application {.
    importc: "gtk_window_get_application", libgtk.}
proc set_application*(window: Window; 
                                 application: Application) {.
    importc: "gtk_window_set_application", libgtk.}
proc `application=`*(window: Window; 
                                 application: Application) {.
    importc: "gtk_window_set_application", libgtk.}
proc set_has_resize_grip*(window: Window; value: gboolean) {.
    importc: "gtk_window_set_has_resize_grip", libgtk.}
proc `has_resize_grip=`*(window: Window; value: gboolean) {.
    importc: "gtk_window_set_has_resize_grip", libgtk.}
proc get_has_resize_grip*(window: Window): gboolean {.
    importc: "gtk_window_get_has_resize_grip", libgtk.}
proc has_resize_grip*(window: Window): gboolean {.
    importc: "gtk_window_get_has_resize_grip", libgtk.}
proc resize_grip_is_visible*(window: Window): gboolean {.
    importc: "gtk_window_resize_grip_is_visible", libgtk.}
proc get_resize_grip_area*(window: Window; 
                                      rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_window_get_resize_grip_area", libgtk.}
proc resize_grip_area*(window: Window; 
                                      rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_window_get_resize_grip_area", libgtk.}
proc set_titlebar*(window: Window; titlebar: Widget) {.
    importc: "gtk_window_set_titlebar", libgtk.}
proc `titlebar=`*(window: Window; titlebar: Widget) {.
    importc: "gtk_window_set_titlebar", libgtk.}
proc get_titlebar*(window: Window): Widget {.
    importc: "gtk_window_get_titlebar", libgtk.}
proc titlebar*(window: Window): Widget {.
    importc: "gtk_window_get_titlebar", libgtk.}
proc is_maximized*(window: Window): gboolean {.
    importc: "gtk_window_is_maximized", libgtk.}
proc window_set_interactive_debugging*(enable: gboolean) {.
    importc: "gtk_window_set_interactive_debugging", libgtk.}

type 
  DialogFlags* {.size: sizeof(cint), pure.} = enum 
    MODAL = 1 shl 0, DESTROY_WITH_PARENT = 1 shl 1, 
    USE_HEADER_BAR = 1 shl 2
type 
  ResponseType* {.size: sizeof(cint), pure.} = enum 
    HELP = - 11, APPLY = - 10, 
    NO = - 9, YES = - 8, CLOSE = - 7, 
    CANCEL = - 6, OK = - 5, 
    DELETE_EVENT = - 4, ACCEPT = - 3, 
    REJECT = - 2, NONE = - 1
template gtk_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, dialog_get_type(), DialogObj))

template gtk_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, dialog_get_type(), DialogClassObj))

template gtk_is_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, dialog_get_type()))

template gtk_is_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, dialog_get_type()))

template gtk_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, dialog_get_type(), DialogClassObj))

type 
  ButtonPrivateObj = object 
  
type 
  Button* =  ptr ButtonObj
  ButtonPtr* = ptr ButtonObj
  ButtonObj* = object of BinObj
    priv40: ptr ButtonPrivateObj
type 
  MenuItemPrivateObj = object 
  
type 
  MenuItem* =  ptr MenuItemObj
  MenuItemPtr* = ptr MenuItemObj
  MenuItemObj* = object of BinObj
    priv54: ptr MenuItemPrivateObj
type 
  HeaderBar* =  ptr HeaderBarObj
  HeaderBarPtr* = ptr HeaderBarObj
  HeaderBarObj*{.final.} = object of ContainerObj
type 
  DialogPrivateObj = object 
  
type 
  Dialog* =  ptr DialogObj
  DialogPtr* = ptr DialogObj
  DialogObj* = object of WindowObj
    priv8: ptr DialogPrivateObj

type 
  DialogClass* =  ptr DialogClassObj
  DialogClassPtr* = ptr DialogClassObj
  DialogClassObj = object of WindowClassObj
    response*: proc (dialog: Dialog; response_id: gint) {.cdecl.}
    close*: proc (dialog: Dialog) {.cdecl.}
    gtk_reserved61: proc () {.cdecl.}
    gtk_reserved62: proc () {.cdecl.}
    gtk_reserved63: proc () {.cdecl.}
    gtk_reserved64: proc () {.cdecl.}

proc dialog_get_type*(): GType {.importc: "gtk_dialog_get_type", 
                                     libgtk.}
proc dialog_new*(): Dialog {.importc: "gtk_dialog_new", libgtk.}
proc dialog_new_with_buttons*(title: cstring; parent: Window; 
                                  flags: DialogFlags; 
                                  first_button_text: cstring): Dialog {.
    varargs, importc: "gtk_dialog_new_with_buttons", libgtk.}
proc add_action_widget*(dialog: Dialog; 
                                   child: Widget; response_id: gint) {.
    importc: "gtk_dialog_add_action_widget", libgtk.}
proc add_button*(dialog: Dialog; button_text: cstring; 
                            response_id: gint): Button {.
    importc: "gtk_dialog_add_button", libgtk.}
proc add_buttons*(dialog: Dialog; 
                             first_button_text: cstring) {.varargs, 
    importc: "gtk_dialog_add_buttons", libgtk.}
proc set_response_sensitive*(dialog: Dialog; 
    response_id: gint; setting: gboolean) {.
    importc: "gtk_dialog_set_response_sensitive", libgtk.}
proc `response_sensitive=`*(dialog: Dialog; 
    response_id: gint; setting: gboolean) {.
    importc: "gtk_dialog_set_response_sensitive", libgtk.}
proc set_default_response*(dialog: Dialog; response_id: gint) {.
    importc: "gtk_dialog_set_default_response", libgtk.}
proc `default_response=`*(dialog: Dialog; response_id: gint) {.
    importc: "gtk_dialog_set_default_response", libgtk.}
proc get_widget_for_response*(dialog: Dialog; 
    response_id: gint): Button {.
    importc: "gtk_dialog_get_widget_for_response", libgtk.}
proc widget_for_response*(dialog: Dialog; 
    response_id: gint): Button {.
    importc: "gtk_dialog_get_widget_for_response", libgtk.}
proc get_response_for_widget*(dialog: Dialog; 
    widget: Widget): gint {.importc: "gtk_dialog_get_response_for_widget", 
                                   libgtk.}
proc response_for_widget*(dialog: Dialog; 
    widget: Widget): gint {.importc: "gtk_dialog_get_response_for_widget", 
                                   libgtk.}
proc alternative_dialog_button_order*(screen: gdk3.Screen): gboolean {.
    importc: "gtk_alternative_dialog_button_order", libgtk.}
proc set_alternative_button_order*(dialog: Dialog; 
    first_response_id: gint) {.varargs, importc: "gtk_dialog_set_alternative_button_order", 
                               libgtk.}
proc `alternative_button_order=`*(dialog: Dialog; 
    first_response_id: gint) {.varargs, importc: "gtk_dialog_set_alternative_button_order", 
                               libgtk.}
proc set_alternative_button_order_from_array*(
    dialog: Dialog; n_params: gint; new_order: var gint) {.
    importc: "gtk_dialog_set_alternative_button_order_from_array", libgtk.}
proc `alternative_button_order_from_array=`*(
    dialog: Dialog; n_params: gint; new_order: var gint) {.
    importc: "gtk_dialog_set_alternative_button_order_from_array", libgtk.}
proc response*(dialog: Dialog; response_id: gint) {.
    importc: "gtk_dialog_response", libgtk.}
proc run*(dialog: Dialog): gint {.importc: "gtk_dialog_run", 
    libgtk.}
proc get_action_area*(dialog: Dialog): Widget {.
    importc: "gtk_dialog_get_action_area", libgtk.}
proc action_area*(dialog: Dialog): Widget {.
    importc: "gtk_dialog_get_action_area", libgtk.}
proc get_content_area*(dialog: Dialog): Widget {.
    importc: "gtk_dialog_get_content_area", libgtk.}
proc content_area*(dialog: Dialog): Widget {.
    importc: "gtk_dialog_get_content_area", libgtk.}
proc get_header_bar*(dialog: Dialog): HeaderBar {.
    importc: "gtk_dialog_get_header_bar", libgtk.}
proc header_bar*(dialog: Dialog): HeaderBar {.
    importc: "gtk_dialog_get_header_bar", libgtk.}

template gtk_about_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, about_dialog_get_type(), AboutDialogObj))

template gtk_about_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, about_dialog_get_type(), AboutDialogClassObj))

template gtk_is_about_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, about_dialog_get_type()))

template gtk_is_about_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, about_dialog_get_type()))

template gtk_about_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, about_dialog_get_type(), AboutDialogClassObj))

type 
  AboutDialogPrivateObj = object 
  
type 
  License* {.size: sizeof(cint), pure.} = enum 
    UNKNOWN, CUSTOM, GPL_2_0, 
    GPL_3_0, LGPL_2_1, LGPL_3_0, 
    BSD, MIT_X11, ARTISTIC, 
    GPL_2_0_ONLY, GPL_3_0_ONLY, 
    LGPL_2_1_ONLY, LGPL_3_0_ONLY
type 
  AboutDialog* =  ptr AboutDialogObj
  AboutDialogPtr* = ptr AboutDialogObj
  AboutDialogObj*{.final.} = object of DialogObj
    priv9: ptr AboutDialogPrivateObj

type 
  AboutDialogClass* =  ptr AboutDialogClassObj
  AboutDialogClassPtr* = ptr AboutDialogClassObj
  AboutDialogClassObj*{.final.} = object of DialogClassObj
    activate_link*: proc (dialog: AboutDialog; uri: cstring): gboolean {.cdecl.}
    gtk_reserved71: proc () {.cdecl.}
    gtk_reserved72: proc () {.cdecl.}
    gtk_reserved73: proc () {.cdecl.}
    gtk_reserved74: proc () {.cdecl.}

proc about_dialog_get_type*(): GType {.
    importc: "gtk_about_dialog_get_type", libgtk.}
proc about_dialog_new*(): AboutDialog {.importc: "gtk_about_dialog_new", 
    libgtk.}
proc show_about_dialog*(parent: Window; 
                            first_property_name: cstring) {.varargs, 
    importc: "gtk_show_about_dialog", libgtk.}
proc get_program_name*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_program_name", libgtk.}
proc program_name*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_program_name", libgtk.}
proc set_program_name*(about: AboutDialog; 
    name: cstring) {.importc: "gtk_about_dialog_set_program_name", 
                       libgtk.}
proc `program_name=`*(about: AboutDialog; 
    name: cstring) {.importc: "gtk_about_dialog_set_program_name", 
                       libgtk.}
proc get_version*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_version", libgtk.}
proc version*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_version", libgtk.}
proc set_version*(about: AboutDialog; 
                                   version: cstring) {.
    importc: "gtk_about_dialog_set_version", libgtk.}
proc `version=`*(about: AboutDialog; 
                                   version: cstring) {.
    importc: "gtk_about_dialog_set_version", libgtk.}
proc get_copyright*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_copyright", libgtk.}
proc copyright*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_copyright", libgtk.}
proc set_copyright*(about: AboutDialog; 
                                     copyright: cstring) {.
    importc: "gtk_about_dialog_set_copyright", libgtk.}
proc `copyright=`*(about: AboutDialog; 
                                     copyright: cstring) {.
    importc: "gtk_about_dialog_set_copyright", libgtk.}
proc get_comments*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_comments", libgtk.}
proc comments*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_comments", libgtk.}
proc set_comments*(about: AboutDialog; 
                                    comments: cstring) {.
    importc: "gtk_about_dialog_set_comments", libgtk.}
proc `comments=`*(about: AboutDialog; 
                                    comments: cstring) {.
    importc: "gtk_about_dialog_set_comments", libgtk.}
proc get_license*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_license", libgtk.}
proc license*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_license", libgtk.}
proc set_license*(about: AboutDialog; 
                                   license: cstring) {.
    importc: "gtk_about_dialog_set_license", libgtk.}
proc `license=`*(about: AboutDialog; 
                                   license: cstring) {.
    importc: "gtk_about_dialog_set_license", libgtk.}
proc set_license_type*(about: AboutDialog; 
    license_type: License) {.importc: "gtk_about_dialog_set_license_type", 
                                libgtk.}
proc `license_type=`*(about: AboutDialog; 
    license_type: License) {.importc: "gtk_about_dialog_set_license_type", 
                                libgtk.}
proc get_license_type*(about: AboutDialog): License {.
    importc: "gtk_about_dialog_get_license_type", libgtk.}
proc license_type*(about: AboutDialog): License {.
    importc: "gtk_about_dialog_get_license_type", libgtk.}
proc get_wrap_license*(about: AboutDialog): gboolean {.
    importc: "gtk_about_dialog_get_wrap_license", libgtk.}
proc wrap_license*(about: AboutDialog): gboolean {.
    importc: "gtk_about_dialog_get_wrap_license", libgtk.}
proc set_wrap_license*(about: AboutDialog; 
    wrap_license: gboolean) {.importc: "gtk_about_dialog_set_wrap_license", 
                              libgtk.}
proc `wrap_license=`*(about: AboutDialog; 
    wrap_license: gboolean) {.importc: "gtk_about_dialog_set_wrap_license", 
                              libgtk.}
proc get_website*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_website", libgtk.}
proc website*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_website", libgtk.}
proc set_website*(about: AboutDialog; 
                                   website: cstring) {.
    importc: "gtk_about_dialog_set_website", libgtk.}
proc `website=`*(about: AboutDialog; 
                                   website: cstring) {.
    importc: "gtk_about_dialog_set_website", libgtk.}
proc get_website_label*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_website_label", libgtk.}
proc website_label*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_website_label", libgtk.}
proc set_website_label*(about: AboutDialog; 
    website_label: cstring) {.importc: "gtk_about_dialog_set_website_label", 
                                libgtk.}
proc `website_label=`*(about: AboutDialog; 
    website_label: cstring) {.importc: "gtk_about_dialog_set_website_label", 
                                libgtk.}
proc get_authors*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_authors", libgtk.}
proc authors*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_authors", libgtk.}
proc set_authors*(about: AboutDialog; 
                                   authors: var cstring) {.
    importc: "gtk_about_dialog_set_authors", libgtk.}
proc `authors=`*(about: AboutDialog; 
                                   authors: var cstring) {.
    importc: "gtk_about_dialog_set_authors", libgtk.}
proc get_documenters*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_documenters", libgtk.}
proc documenters*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_documenters", libgtk.}
proc set_documenters*(about: AboutDialog; 
    documenters: var cstring) {.importc: "gtk_about_dialog_set_documenters", 
                                  libgtk.}
proc `documenters=`*(about: AboutDialog; 
    documenters: var cstring) {.importc: "gtk_about_dialog_set_documenters", 
                                  libgtk.}
proc get_artists*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_artists", libgtk.}
proc artists*(about: AboutDialog): cstringArray {.
    importc: "gtk_about_dialog_get_artists", libgtk.}
proc set_artists*(about: AboutDialog; 
                                   artists: var cstring) {.
    importc: "gtk_about_dialog_set_artists", libgtk.}
proc `artists=`*(about: AboutDialog; 
                                   artists: var cstring) {.
    importc: "gtk_about_dialog_set_artists", libgtk.}
proc get_translator_credits*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_translator_credits", libgtk.}
proc translator_credits*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_translator_credits", libgtk.}
proc set_translator_credits*(about: AboutDialog; 
    translator_credits: cstring) {.importc: "gtk_about_dialog_set_translator_credits", 
                                     libgtk.}
proc `translator_credits=`*(about: AboutDialog; 
    translator_credits: cstring) {.importc: "gtk_about_dialog_set_translator_credits", 
                                     libgtk.}
proc get_logo*(about: AboutDialog): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_about_dialog_get_logo", libgtk.}
proc logo*(about: AboutDialog): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_about_dialog_get_logo", libgtk.}
proc set_logo*(about: AboutDialog; logo: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_about_dialog_set_logo", libgtk.}
proc `logo=`*(about: AboutDialog; logo: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_about_dialog_set_logo", libgtk.}
proc get_logo_icon_name*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_logo_icon_name", libgtk.}
proc logo_icon_name*(about: AboutDialog): cstring {.
    importc: "gtk_about_dialog_get_logo_icon_name", libgtk.}
proc set_logo_icon_name*(about: AboutDialog; 
    icon_name: cstring) {.importc: "gtk_about_dialog_set_logo_icon_name", 
                            libgtk.}
proc `logo_icon_name=`*(about: AboutDialog; 
    icon_name: cstring) {.importc: "gtk_about_dialog_set_logo_icon_name", 
                            libgtk.}
proc add_credit_section*(about: AboutDialog; 
    section_name: cstring; people: var cstring) {.
    importc: "gtk_about_dialog_add_credit_section", libgtk.}

template gtk_misc*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, misc_get_type(), MiscObj))

template gtk_misc_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, misc_get_type(), MiscClassObj))

template gtk_is_misc*(obj: expr): expr = 
  (g_type_check_instance_type(obj, misc_get_type()))

template gtk_is_misc_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, misc_get_type()))

template gtk_misc_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, misc_get_type(), MiscClassObj))

type 
  MiscPrivateObj = object 
  
type 
  Misc* =  ptr MiscObj
  MiscPtr* = ptr MiscObj
  MiscObj* = object of WidgetObj
    priv10: ptr MiscPrivateObj

type 
  MiscClass* =  ptr MiscClassObj
  MiscClassPtr* = ptr MiscClassObj
  MiscClassObj = object of WidgetClassObj
    gtk_reserved81: proc () {.cdecl.}
    gtk_reserved82: proc () {.cdecl.}
    gtk_reserved83: proc () {.cdecl.}
    gtk_reserved84: proc () {.cdecl.}

proc misc_get_type*(): GType {.importc: "gtk_misc_get_type", libgtk.}
proc set_alignment*(misc: Misc; xalign: gfloat; yalign: gfloat) {.
    importc: "gtk_misc_set_alignment", libgtk.}
proc `alignment=`*(misc: Misc; xalign: gfloat; yalign: gfloat) {.
    importc: "gtk_misc_set_alignment", libgtk.}
proc get_alignment*(misc: Misc; xalign: var gfloat; 
                             yalign: var gfloat) {.
    importc: "gtk_misc_get_alignment", libgtk.}
proc set_padding*(misc: Misc; xpad: gint; ypad: gint) {.
    importc: "gtk_misc_set_padding", libgtk.}
proc `padding=`*(misc: Misc; xpad: gint; ypad: gint) {.
    importc: "gtk_misc_set_padding", libgtk.}
proc get_padding*(misc: Misc; xpad: var gint; ypad: var gint) {.
    importc: "gtk_misc_get_padding", libgtk.}

template gtk_menu_shell*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_shell_get_type(), MenuShellObj))

template gtk_menu_shell_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_shell_get_type(), MenuShellClassObj))

template gtk_is_menu_shell*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_shell_get_type()))

template gtk_is_menu_shell_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_shell_get_type()))

template gtk_menu_shell_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_shell_get_type(), MenuShellClassObj))

type 
  MenuShellPrivateObj = object 
  
type 
  MenuShell* =  ptr MenuShellObj
  MenuShellPtr* = ptr MenuShellObj
  MenuShellObj* = object of ContainerObj
    priv11: ptr MenuShellPrivateObj

type 
  MenuShellClass* =  ptr MenuShellClassObj
  MenuShellClassPtr* = ptr MenuShellClassObj
  MenuShellClassObj = object of ContainerClassObj
    submenu_placement*: guint
    deactivate*: proc (menu_shell: MenuShell) {.cdecl.}
    selection_done*: proc (menu_shell: MenuShell) {.cdecl.}
    move_current*: proc (menu_shell: MenuShell; 
                         direction: MenuDirectionType) {.cdecl.}
    activate_current*: proc (menu_shell: MenuShell; 
                             force_hide: gboolean) {.cdecl.}
    cancel*: proc (menu_shell: MenuShell) {.cdecl.}
    select_item*: proc (menu_shell: MenuShell; menu_item: Widget) {.cdecl.}
    insert*: proc (menu_shell: MenuShell; child: Widget; 
                   position: gint) {.cdecl.}
    get_popup_delay*: proc (menu_shell: MenuShell): gint {.cdecl.}
    move_selected*: proc (menu_shell: MenuShell; distance: gint): gboolean {.cdecl.}
    gtk_reserved91: proc () {.cdecl.}
    gtk_reserved92: proc () {.cdecl.}
    gtk_reserved93: proc () {.cdecl.}
    gtk_reserved94: proc () {.cdecl.}

proc menu_shell_get_type*(): GType {.importc: "gtk_menu_shell_get_type", 
    libgtk.}
proc append*(menu_shell: MenuShell; child: Widget) {.
    importc: "gtk_menu_shell_append", libgtk.}
proc prepend*(menu_shell: MenuShell; 
                             child: Widget) {.
    importc: "gtk_menu_shell_prepend", libgtk.}
proc insert*(menu_shell: MenuShell; 
                            child: Widget; position: gint) {.
    importc: "gtk_menu_shell_insert", libgtk.}
proc deactivate*(menu_shell: MenuShell) {.
    importc: "gtk_menu_shell_deactivate", libgtk.}
proc select_item*(menu_shell: MenuShell; 
                                 menu_item: Widget) {.
    importc: "gtk_menu_shell_select_item", libgtk.}
proc deselect*(menu_shell: MenuShell) {.
    importc: "gtk_menu_shell_deselect", libgtk.}
proc activate_item*(menu_shell: MenuShell; 
                                   menu_item: Widget; 
                                   force_deactivate: gboolean) {.
    importc: "gtk_menu_shell_activate_item", libgtk.}
proc select_first*(menu_shell: MenuShell; 
                                  search_sensitive: gboolean) {.
    importc: "gtk_menu_shell_select_first", libgtk.}
proc cancel*(menu_shell: MenuShell) {.
    importc: "gtk_menu_shell_cancel", libgtk.}
proc get_take_focus*(menu_shell: MenuShell): gboolean {.
    importc: "gtk_menu_shell_get_take_focus", libgtk.}
proc take_focus*(menu_shell: MenuShell): gboolean {.
    importc: "gtk_menu_shell_get_take_focus", libgtk.}
proc set_take_focus*(menu_shell: MenuShell; 
                                    take_focus: gboolean) {.
    importc: "gtk_menu_shell_set_take_focus", libgtk.}
proc `take_focus=`*(menu_shell: MenuShell; 
                                    take_focus: gboolean) {.
    importc: "gtk_menu_shell_set_take_focus", libgtk.}
proc get_selected_item*(menu_shell: MenuShell): MenuItem {.
    importc: "gtk_menu_shell_get_selected_item", libgtk.}
proc selected_item*(menu_shell: MenuShell): MenuItem {.
    importc: "gtk_menu_shell_get_selected_item", libgtk.}
proc get_parent_shell*(menu_shell: MenuShell): MenuShell {.
    importc: "gtk_menu_shell_get_parent_shell", libgtk.}
proc parent_shell*(menu_shell: MenuShell): MenuShell {.
    importc: "gtk_menu_shell_get_parent_shell", libgtk.}
proc bind_model*(menu_shell: MenuShell; 
                                model: gio.GMenuModel; 
                                action_namespace: cstring; 
                                with_separators: gboolean) {.
    importc: "gtk_menu_shell_bind_model", libgtk.}

template gtk_menu*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_get_type(), MenuObj))

template gtk_menu_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_get_type(), MenuClassObj))

template gtk_is_menu*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_get_type()))

template gtk_is_menu_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_get_type()))

template gtk_menu_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_get_type(), MenuClassObj))

type 
  MenuPrivateObj = object 
  
type 
  ArrowPlacement* {.size: sizeof(cint), pure.} = enum 
    BOTH, START, END
type 
  MenuPositionFunc* = proc (menu: Menu; x: var gint; y: var gint; 
                               push_in: var gboolean; user_data: gpointer) {.cdecl.}
  MenuDetachFunc* = proc (attach_widget: Widget; menu: Menu) {.cdecl.}
  Menu* =  ptr MenuObj
  MenuPtr* = ptr MenuObj
  MenuObj* = object of MenuShellObj
    priv12: ptr MenuPrivateObj

type 
  MenuClass* =  ptr MenuClassObj
  MenuClassPtr* = ptr MenuClassObj
  MenuClassObj = object of MenuShellClassObj
    gtk_reserved101: proc () {.cdecl.}
    gtk_reserved102: proc () {.cdecl.}
    gtk_reserved103: proc () {.cdecl.}
    gtk_reserved104: proc () {.cdecl.}

proc menu_get_type*(): GType {.importc: "gtk_menu_get_type", libgtk.}
proc menu_new*(): Menu {.importc: "gtk_menu_new", libgtk.}
proc menu_new_from_model*(model: gio.GMenuModel): Menu {.
    importc: "gtk_menu_new_from_model", libgtk.}
proc popup*(menu: Menu; parent_menu_shell: Widget; 
                     parent_menu_item: Widget; 
                     fn: MenuPositionFunc; data: gpointer; button: guint; 
                     activate_time: guint32) {.importc: "gtk_menu_popup", 
    libgtk.}
proc popup_for_device*(menu: Menu; device: gdk3.Device; 
                                parent_menu_shell: Widget; 
                                parent_menu_item: Widget; 
                                fn: MenuPositionFunc; data: gpointer; 
                                destroy: GDestroyNotify; button: guint; 
                                activate_time: guint32) {.
    importc: "gtk_menu_popup_for_device", libgtk.}
proc reposition*(menu: Menu) {.importc: "gtk_menu_reposition", 
    libgtk.}
proc popdown*(menu: Menu) {.importc: "gtk_menu_popdown", 
    libgtk.}
proc get_active*(menu: Menu): MenuItem {.
    importc: "gtk_menu_get_active", libgtk.}
proc active*(menu: Menu): MenuItem {.
    importc: "gtk_menu_get_active", libgtk.}
proc set_active*(menu: Menu; index: guint) {.
    importc: "gtk_menu_set_active", libgtk.}
proc `active=`*(menu: Menu; index: guint) {.
    importc: "gtk_menu_set_active", libgtk.}
proc set_accel_group*(menu: Menu; 
                               accel_group: AccelGroup) {.
    importc: "gtk_menu_set_accel_group", libgtk.}
proc `accel_group=`*(menu: Menu; 
                               accel_group: AccelGroup) {.
    importc: "gtk_menu_set_accel_group", libgtk.}
proc get_accel_group*(menu: Menu): AccelGroup {.
    importc: "gtk_menu_get_accel_group", libgtk.}
proc accel_group*(menu: Menu): AccelGroup {.
    importc: "gtk_menu_get_accel_group", libgtk.}
proc set_accel_path*(menu: Menu; accel_path: cstring) {.
    importc: "gtk_menu_set_accel_path", libgtk.}
proc `accel_path=`*(menu: Menu; accel_path: cstring) {.
    importc: "gtk_menu_set_accel_path", libgtk.}
proc get_accel_path*(menu: Menu): cstring {.
    importc: "gtk_menu_get_accel_path", libgtk.}
proc accel_path*(menu: Menu): cstring {.
    importc: "gtk_menu_get_accel_path", libgtk.}
proc attach_to_widget*(menu: Menu; 
                                attach_widget: Widget; 
                                detacher: MenuDetachFunc) {.
    importc: "gtk_menu_attach_to_widget", libgtk.}
proc detach*(menu: Menu) {.importc: "gtk_menu_detach", 
    libgtk.}
proc get_attach_widget*(menu: Menu): Widget {.
    importc: "gtk_menu_get_attach_widget", libgtk.}
proc attach_widget*(menu: Menu): Widget {.
    importc: "gtk_menu_get_attach_widget", libgtk.}
proc set_tearoff_state*(menu: Menu; torn_off: gboolean) {.
    importc: "gtk_menu_set_tearoff_state", libgtk.}
proc `tearoff_state=`*(menu: Menu; torn_off: gboolean) {.
    importc: "gtk_menu_set_tearoff_state", libgtk.}
proc get_tearoff_state*(menu: Menu): gboolean {.
    importc: "gtk_menu_get_tearoff_state", libgtk.}
proc tearoff_state*(menu: Menu): gboolean {.
    importc: "gtk_menu_get_tearoff_state", libgtk.}
proc set_title*(menu: Menu; title: cstring) {.
    importc: "gtk_menu_set_title", libgtk.}
proc `title=`*(menu: Menu; title: cstring) {.
    importc: "gtk_menu_set_title", libgtk.}
proc get_title*(menu: Menu): cstring {.
    importc: "gtk_menu_get_title", libgtk.}
proc title*(menu: Menu): cstring {.
    importc: "gtk_menu_get_title", libgtk.}
proc reorder_child*(menu: Menu; child: Widget; 
                             position: gint) {.
    importc: "gtk_menu_reorder_child", libgtk.}
proc set_screen*(menu: Menu; screen: gdk3.Screen) {.
    importc: "gtk_menu_set_screen", libgtk.}
proc `screen=`*(menu: Menu; screen: gdk3.Screen) {.
    importc: "gtk_menu_set_screen", libgtk.}
proc attach*(menu: Menu; child: Widget; 
                      left_attach: guint; right_attach: guint; 
                      top_attach: guint; bottom_attach: guint) {.
    importc: "gtk_menu_attach", libgtk.}
proc set_monitor*(menu: Menu; monitor_num: gint) {.
    importc: "gtk_menu_set_monitor", libgtk.}
proc `monitor=`*(menu: Menu; monitor_num: gint) {.
    importc: "gtk_menu_set_monitor", libgtk.}
proc get_monitor*(menu: Menu): gint {.
    importc: "gtk_menu_get_monitor", libgtk.}
proc monitor*(menu: Menu): gint {.
    importc: "gtk_menu_get_monitor", libgtk.}
proc menu_get_for_attach_widget*(widget: Widget): glib.GList {.
    importc: "gtk_menu_get_for_attach_widget", libgtk.}
proc set_reserve_toggle_size*(menu: Menu; 
    reserve_toggle_size: gboolean) {.importc: "gtk_menu_set_reserve_toggle_size", 
                                     libgtk.}
proc `reserve_toggle_size=`*(menu: Menu; 
    reserve_toggle_size: gboolean) {.importc: "gtk_menu_set_reserve_toggle_size", 
                                     libgtk.}
proc get_reserve_toggle_size*(menu: Menu): gboolean {.
    importc: "gtk_menu_get_reserve_toggle_size", libgtk.}
proc reserve_toggle_size*(menu: Menu): gboolean {.
    importc: "gtk_menu_get_reserve_toggle_size", libgtk.}

template gtk_label*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, label_get_type(), LabelObj))

template gtk_label_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, label_get_type(), LabelClassObj))

template gtk_is_label*(obj: expr): expr = 
  (g_type_check_instance_type(obj, label_get_type()))

template gtk_is_label_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, label_get_type()))

template gtk_label_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, label_get_type(), LabelClassObj))

type 
  LabelPrivateObj = object 
  
type 
  Label* =  ptr LabelObj
  LabelPtr* = ptr LabelObj
  LabelObj* = object of MiscObj
    priv13: ptr LabelPrivateObj

type 
  LabelClass* =  ptr LabelClassObj
  LabelClassPtr* = ptr LabelClassObj
  LabelClassObj = object of MiscClassObj
    move_cursor*: proc (label: Label; step: MovementStep; 
                        count: gint; extend_selection: gboolean) {.cdecl.}
    copy_clipboard*: proc (label: Label) {.cdecl.}
    populate_popup*: proc (label: Label; menu: Menu) {.cdecl.}
    activate_link*: proc (label: Label; uri: cstring): gboolean {.cdecl.}
    gtk_reserved111: proc () {.cdecl.}
    gtk_reserved112: proc () {.cdecl.}
    gtk_reserved113: proc () {.cdecl.}
    gtk_reserved114: proc () {.cdecl.}
    gtk_reserved115: proc () {.cdecl.}
    gtk_reserved116: proc () {.cdecl.}
    gtk_reserved117: proc () {.cdecl.}
    gtk_reserved118: proc () {.cdecl.}

proc label_get_type*(): GType {.importc: "gtk_label_get_type", libgtk.}
proc label_new*(str: cstring): Label {.importc: "gtk_label_new", 
    libgtk.}
proc label_new_with_mnemonic*(str: cstring): Label {.
    importc: "gtk_label_new_with_mnemonic", libgtk.}
proc set_text*(label: Label; str: cstring) {.
    importc: "gtk_label_set_text", libgtk.}
proc `text=`*(label: Label; str: cstring) {.
    importc: "gtk_label_set_text", libgtk.}
proc get_text*(label: Label): cstring {.
    importc: "gtk_label_get_text", libgtk.}
proc text*(label: Label): cstring {.
    importc: "gtk_label_get_text", libgtk.}
proc set_attributes*(label: Label; attrs: pango.AttrList) {.
    importc: "gtk_label_set_attributes", libgtk.}
proc `attributes=`*(label: Label; attrs: pango.AttrList) {.
    importc: "gtk_label_set_attributes", libgtk.}
proc get_attributes*(label: Label): pango.AttrList {.
    importc: "gtk_label_get_attributes", libgtk.}
proc attributes*(label: Label): pango.AttrList {.
    importc: "gtk_label_get_attributes", libgtk.}
proc set_label*(label: Label; str: cstring) {.
    importc: "gtk_label_set_label", libgtk.}
proc `label=`*(label: Label; str: cstring) {.
    importc: "gtk_label_set_label", libgtk.}
proc get_label*(label: Label): cstring {.
    importc: "gtk_label_get_label", libgtk.}
proc label*(label: Label): cstring {.
    importc: "gtk_label_get_label", libgtk.}
proc set_markup*(label: Label; str: cstring) {.
    importc: "gtk_label_set_markup", libgtk.}
proc `markup=`*(label: Label; str: cstring) {.
    importc: "gtk_label_set_markup", libgtk.}
proc set_use_markup*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_use_markup", libgtk.}
proc `use_markup=`*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_use_markup", libgtk.}
proc get_use_markup*(label: Label): gboolean {.
    importc: "gtk_label_get_use_markup", libgtk.}
proc use_markup*(label: Label): gboolean {.
    importc: "gtk_label_get_use_markup", libgtk.}
proc set_use_underline*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_use_underline", libgtk.}
proc `use_underline=`*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_use_underline", libgtk.}
proc get_use_underline*(label: Label): gboolean {.
    importc: "gtk_label_get_use_underline", libgtk.}
proc use_underline*(label: Label): gboolean {.
    importc: "gtk_label_get_use_underline", libgtk.}
proc set_markup_with_mnemonic*(label: Label; str: cstring) {.
    importc: "gtk_label_set_markup_with_mnemonic", libgtk.}
proc `markup_with_mnemonic=`*(label: Label; str: cstring) {.
    importc: "gtk_label_set_markup_with_mnemonic", libgtk.}
proc get_mnemonic_keyval*(label: Label): guint {.
    importc: "gtk_label_get_mnemonic_keyval", libgtk.}
proc mnemonic_keyval*(label: Label): guint {.
    importc: "gtk_label_get_mnemonic_keyval", libgtk.}
proc set_mnemonic_widget*(label: Label; widget: Widget) {.
    importc: "gtk_label_set_mnemonic_widget", libgtk.}
proc `mnemonic_widget=`*(label: Label; widget: Widget) {.
    importc: "gtk_label_set_mnemonic_widget", libgtk.}
proc get_mnemonic_widget*(label: Label): Widget {.
    importc: "gtk_label_get_mnemonic_widget", libgtk.}
proc mnemonic_widget*(label: Label): Widget {.
    importc: "gtk_label_get_mnemonic_widget", libgtk.}
proc set_text_with_mnemonic*(label: Label; str: cstring) {.
    importc: "gtk_label_set_text_with_mnemonic", libgtk.}
proc `text_with_mnemonic=`*(label: Label; str: cstring) {.
    importc: "gtk_label_set_text_with_mnemonic", libgtk.}
proc set_justify*(label: Label; jtype: Justification) {.
    importc: "gtk_label_set_justify", libgtk.}
proc `justify=`*(label: Label; jtype: Justification) {.
    importc: "gtk_label_set_justify", libgtk.}
proc get_justify*(label: Label): Justification {.
    importc: "gtk_label_get_justify", libgtk.}
proc justify*(label: Label): Justification {.
    importc: "gtk_label_get_justify", libgtk.}
proc set_ellipsize*(label: Label; mode: pango.EllipsizeMode) {.
    importc: "gtk_label_set_ellipsize", libgtk.}
proc `ellipsize=`*(label: Label; mode: pango.EllipsizeMode) {.
    importc: "gtk_label_set_ellipsize", libgtk.}
proc get_ellipsize*(label: Label): pango.EllipsizeMode {.
    importc: "gtk_label_get_ellipsize", libgtk.}
proc ellipsize*(label: Label): pango.EllipsizeMode {.
    importc: "gtk_label_get_ellipsize", libgtk.}
proc set_width_chars*(label: Label; n_chars: gint) {.
    importc: "gtk_label_set_width_chars", libgtk.}
proc `width_chars=`*(label: Label; n_chars: gint) {.
    importc: "gtk_label_set_width_chars", libgtk.}
proc get_width_chars*(label: Label): gint {.
    importc: "gtk_label_get_width_chars", libgtk.}
proc width_chars*(label: Label): gint {.
    importc: "gtk_label_get_width_chars", libgtk.}
proc set_max_width_chars*(label: Label; n_chars: gint) {.
    importc: "gtk_label_set_max_width_chars", libgtk.}
proc `max_width_chars=`*(label: Label; n_chars: gint) {.
    importc: "gtk_label_set_max_width_chars", libgtk.}
proc get_max_width_chars*(label: Label): gint {.
    importc: "gtk_label_get_max_width_chars", libgtk.}
proc max_width_chars*(label: Label): gint {.
    importc: "gtk_label_get_max_width_chars", libgtk.}
proc set_lines*(label: Label; lines: gint) {.
    importc: "gtk_label_set_lines", libgtk.}
proc `lines=`*(label: Label; lines: gint) {.
    importc: "gtk_label_set_lines", libgtk.}
proc get_lines*(label: Label): gint {.
    importc: "gtk_label_get_lines", libgtk.}
proc lines*(label: Label): gint {.
    importc: "gtk_label_get_lines", libgtk.}
proc set_pattern*(label: Label; pattern: cstring) {.
    importc: "gtk_label_set_pattern", libgtk.}
proc `pattern=`*(label: Label; pattern: cstring) {.
    importc: "gtk_label_set_pattern", libgtk.}
proc set_line_wrap*(label: Label; wrap: gboolean) {.
    importc: "gtk_label_set_line_wrap", libgtk.}
proc `line_wrap=`*(label: Label; wrap: gboolean) {.
    importc: "gtk_label_set_line_wrap", libgtk.}
proc get_line_wrap*(label: Label): gboolean {.
    importc: "gtk_label_get_line_wrap", libgtk.}
proc line_wrap*(label: Label): gboolean {.
    importc: "gtk_label_get_line_wrap", libgtk.}
proc set_line_wrap_mode*(label: Label; 
                                   wrap_mode: pango.WrapMode) {.
    importc: "gtk_label_set_line_wrap_mode", libgtk.}
proc `line_wrap_mode=`*(label: Label; 
                                   wrap_mode: pango.WrapMode) {.
    importc: "gtk_label_set_line_wrap_mode", libgtk.}
proc get_line_wrap_mode*(label: Label): pango.WrapMode {.
    importc: "gtk_label_get_line_wrap_mode", libgtk.}
proc line_wrap_mode*(label: Label): pango.WrapMode {.
    importc: "gtk_label_get_line_wrap_mode", libgtk.}
proc set_selectable*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_selectable", libgtk.}
proc `selectable=`*(label: Label; setting: gboolean) {.
    importc: "gtk_label_set_selectable", libgtk.}
proc get_selectable*(label: Label): gboolean {.
    importc: "gtk_label_get_selectable", libgtk.}
proc selectable*(label: Label): gboolean {.
    importc: "gtk_label_get_selectable", libgtk.}
proc set_angle*(label: Label; angle: gdouble) {.
    importc: "gtk_label_set_angle", libgtk.}
proc `angle=`*(label: Label; angle: gdouble) {.
    importc: "gtk_label_set_angle", libgtk.}
proc get_angle*(label: Label): gdouble {.
    importc: "gtk_label_get_angle", libgtk.}
proc angle*(label: Label): gdouble {.
    importc: "gtk_label_get_angle", libgtk.}
proc select_region*(label: Label; start_offset: gint; 
                              end_offset: gint) {.
    importc: "gtk_label_select_region", libgtk.}
proc get_selection_bounds*(label: Label; start: var gint; 
                                     `end`: var gint): gboolean {.
    importc: "gtk_label_get_selection_bounds", libgtk.}
proc selection_bounds*(label: Label; start: var gint; 
                                     `end`: var gint): gboolean {.
    importc: "gtk_label_get_selection_bounds", libgtk.}
proc get_layout*(label: Label): pango.Layout {.
    importc: "gtk_label_get_layout", libgtk.}
proc layout*(label: Label): pango.Layout {.
    importc: "gtk_label_get_layout", libgtk.}
proc get_layout_offsets*(label: Label; x: var gint; 
                                   y: var gint) {.
    importc: "gtk_label_get_layout_offsets", libgtk.}
proc set_single_line_mode*(label: Label; 
                                     single_line_mode: gboolean) {.
    importc: "gtk_label_set_single_line_mode", libgtk.}
proc `single_line_mode=`*(label: Label; 
                                     single_line_mode: gboolean) {.
    importc: "gtk_label_set_single_line_mode", libgtk.}
proc get_single_line_mode*(label: Label): gboolean {.
    importc: "gtk_label_get_single_line_mode", libgtk.}
proc single_line_mode*(label: Label): gboolean {.
    importc: "gtk_label_get_single_line_mode", libgtk.}
proc get_current_uri*(label: Label): cstring {.
    importc: "gtk_label_get_current_uri", libgtk.}
proc current_uri*(label: Label): cstring {.
    importc: "gtk_label_get_current_uri", libgtk.}
proc set_track_visited_links*(label: Label; 
    track_links: gboolean) {.importc: "gtk_label_set_track_visited_links", 
                             libgtk.}
proc `track_visited_links=`*(label: Label; 
    track_links: gboolean) {.importc: "gtk_label_set_track_visited_links", 
                             libgtk.}
proc get_track_visited_links*(label: Label): gboolean {.
    importc: "gtk_label_get_track_visited_links", libgtk.}
proc track_visited_links*(label: Label): gboolean {.
    importc: "gtk_label_get_track_visited_links", libgtk.}
proc set_xalign*(label: Label; xalign: gfloat) {.
    importc: "gtk_label_set_xalign", libgtk.}
proc `xalign=`*(label: Label; xalign: gfloat) {.
    importc: "gtk_label_set_xalign", libgtk.}
proc get_xalign*(label: Label): gfloat {.
    importc: "gtk_label_get_xalign", libgtk.}
proc xalign*(label: Label): gfloat {.
    importc: "gtk_label_get_xalign", libgtk.}
proc set_yalign*(label: Label; xalign: gfloat) {.
    importc: "gtk_label_set_yalign", libgtk.}
proc `yalign=`*(label: Label; xalign: gfloat) {.
    importc: "gtk_label_set_yalign", libgtk.}
proc get_yalign*(label: Label): gfloat {.
    importc: "gtk_label_get_yalign", libgtk.}
proc yalign*(label: Label): gfloat {.
    importc: "gtk_label_get_yalign", libgtk.}

template gtk_accel_label*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, accel_label_get_type(), AccelLabelObj))

template gtk_accel_label_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, accel_label_get_type(), AccelLabelClassObj))

template gtk_is_accel_label*(obj: expr): expr = 
  (g_type_check_instance_type(obj, accel_label_get_type()))

template gtk_is_accel_label_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, accel_label_get_type()))

template gtk_accel_label_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, accel_label_get_type(), AccelLabelClassObj))

type 
  AccelLabelPrivateObj = object 
  
type 
  AccelLabel* =  ptr AccelLabelObj
  AccelLabelPtr* = ptr AccelLabelObj
  AccelLabelObj*{.final.} = object of LabelObj
    priv14: ptr AccelLabelPrivateObj

type 
  AccelLabelClass* =  ptr AccelLabelClassObj
  AccelLabelClassPtr* = ptr AccelLabelClassObj
  AccelLabelClassObj*{.final.} = object of LabelClassObj
    signal_quote1*: cstring
    signal_quote2*: cstring
    mod_name_shift*: cstring
    mod_name_control*: cstring
    mod_name_alt*: cstring
    mod_separator*: cstring
    gtk_reserved121: proc () {.cdecl.}
    gtk_reserved122: proc () {.cdecl.}
    gtk_reserved123: proc () {.cdecl.}
    gtk_reserved124: proc () {.cdecl.}

proc accel_label_get_type*(): GType {.importc: "gtk_accel_label_get_type", 
    libgtk.}
proc accel_label_new*(string: cstring): AccelLabel {.
    importc: "gtk_accel_label_new", libgtk.}
proc get_accel_widget*(accel_label: AccelLabel): Widget {.
    importc: "gtk_accel_label_get_accel_widget", libgtk.}
proc accel_widget*(accel_label: AccelLabel): Widget {.
    importc: "gtk_accel_label_get_accel_widget", libgtk.}
proc get_accel_width*(accel_label: AccelLabel): guint {.
    importc: "gtk_accel_label_get_accel_width", libgtk.}
proc accel_width*(accel_label: AccelLabel): guint {.
    importc: "gtk_accel_label_get_accel_width", libgtk.}
proc set_accel_widget*(accel_label: AccelLabel; 
    accel_widget: Widget) {.importc: "gtk_accel_label_set_accel_widget", 
                                   libgtk.}
proc `accel_widget=`*(accel_label: AccelLabel; 
    accel_widget: Widget) {.importc: "gtk_accel_label_set_accel_widget", 
                                   libgtk.}
proc set_accel_closure*(accel_label: AccelLabel; 
    accel_closure: gobject.GClosure) {.importc: "gtk_accel_label_set_accel_closure", 
                                   libgtk.}
proc `accel_closure=`*(accel_label: AccelLabel; 
    accel_closure: gobject.GClosure) {.importc: "gtk_accel_label_set_accel_closure", 
                                   libgtk.}
proc refetch*(accel_label: AccelLabel): gboolean {.
    importc: "gtk_accel_label_refetch", libgtk.}
proc set_accel*(accel_label: AccelLabel; 
                                accelerator_key: guint; 
                                accelerator_mods: gdk3.ModifierType) {.
    importc: "gtk_accel_label_set_accel", libgtk.}
proc `accel=`*(accel_label: AccelLabel; 
                                accelerator_key: guint; 
                                accelerator_mods: gdk3.ModifierType) {.
    importc: "gtk_accel_label_set_accel", libgtk.}
proc get_accel*(accel_label: AccelLabel; 
                                accelerator_key: var guint; 
                                accelerator_mods: var gdk3.ModifierType) {.
    importc: "gtk_accel_label_get_accel", libgtk.}

template gtk_accel_map*(accel_map: expr): expr = 
  (g_type_check_instance_cast(accel_map, accel_map_get_type(), AccelMapObj))

template gtk_accel_map_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, accel_map_get_type(), AccelMapClass))

template gtk_is_accel_map*(accel_map: expr): expr = 
  (g_type_check_instance_type(accel_map, accel_map_get_type()))

template gtk_is_accel_map_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, accel_map_get_type()))

template gtk_accel_map_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, accel_map_get_type(), AccelMapClass))

type 
  AccelMap* =  ptr AccelMapObj
  AccelMapPtr* = ptr AccelMapObj
  AccelMapObj* = object 
  
type 
  AccelMapForeach* = proc (data: gpointer; accel_path: cstring; 
                              accel_key: guint; accel_mods: gdk3.ModifierType; 
                              changed: gboolean) {.cdecl.}
proc accel_map_add_entry*(accel_path: cstring; accel_key: guint; 
                              accel_mods: gdk3.ModifierType) {.
    importc: "gtk_accel_map_add_entry", libgtk.}
proc accel_map_lookup_entry*(accel_path: cstring; key: AccelKey): gboolean {.
    importc: "gtk_accel_map_lookup_entry", libgtk.}
proc accel_map_change_entry*(accel_path: cstring; accel_key: guint; 
                                 accel_mods: gdk3.ModifierType; 
                                 replace: gboolean): gboolean {.
    importc: "gtk_accel_map_change_entry", libgtk.}
proc accel_map_load*(file_name: cstring) {.
    importc: "gtk_accel_map_load", libgtk.}
proc accel_map_save*(file_name: cstring) {.
    importc: "gtk_accel_map_save", libgtk.}
proc accel_map_foreach*(data: gpointer; foreach_func: AccelMapForeach) {.
    importc: "gtk_accel_map_foreach", libgtk.}
proc accel_map_load_fd*(fd: gint) {.importc: "gtk_accel_map_load_fd", 
    libgtk.}
proc accel_map_load_scanner*(scanner: glib.GScanner) {.
    importc: "gtk_accel_map_load_scanner", libgtk.}
proc accel_map_save_fd*(fd: gint) {.importc: "gtk_accel_map_save_fd", 
    libgtk.}
proc accel_map_lock_path*(accel_path: cstring) {.
    importc: "gtk_accel_map_lock_path", libgtk.}
proc accel_map_unlock_path*(accel_path: cstring) {.
    importc: "gtk_accel_map_unlock_path", libgtk.}
proc accel_map_add_filter*(filter_pattern: cstring) {.
    importc: "gtk_accel_map_add_filter", libgtk.}
proc accel_map_foreach_unfiltered*(data: gpointer; 
    foreach_func: AccelMapForeach) {.
    importc: "gtk_accel_map_foreach_unfiltered", libgtk.}
proc accel_map_get_type*(): GType {.importc: "gtk_accel_map_get_type", 
    libgtk.}
proc accel_map_get*(): AccelMap {.importc: "gtk_accel_map_get", 
    libgtk.}

template gtk_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, accessible_get_type(), AccessibleObj))

template gtk_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, accessible_get_type(), AccessibleClassObj))

template gtk_is_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, accessible_get_type()))

template gtk_is_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, accessible_get_type()))

template gtk_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, accessible_get_type(), AccessibleClassObj))

type 
  AccessiblePrivateObj = object 
  
type 
  Accessible* =  ptr AccessibleObj
  AccessiblePtr* = ptr AccessibleObj
  AccessibleObj = object of atk.ObjectObj
    priv15: ptr AccessiblePrivateObj

type 
  AccessibleClass* =  ptr AccessibleClassObj
  AccessibleClassPtr* = ptr AccessibleClassObj
  AccessibleClassObj = object of atk.ObjectClassObj
    connect_widget_destroyed*: proc (accessible: Accessible) {.cdecl.}
    widget_set*: proc (accessible: Accessible) {.cdecl.}
    widget_unset*: proc (accessible: Accessible) {.cdecl.}
    gtk_reserved133: proc () {.cdecl.}
    gtk_reserved134: proc () {.cdecl.}

proc accessible_get_type*(): GType {.importc: "gtk_accessible_get_type", 
    libgtk.}
proc set_widget*(accessible: Accessible; 
                                widget: Widget) {.
    importc: "gtk_accessible_set_widget", libgtk.}
proc `widget=`*(accessible: Accessible; 
                                widget: Widget) {.
    importc: "gtk_accessible_set_widget", libgtk.}
proc get_widget*(accessible: Accessible): Widget {.
    importc: "gtk_accessible_get_widget", libgtk.}
proc widget*(accessible: Accessible): Widget {.
    importc: "gtk_accessible_get_widget", libgtk.}
proc connect_widget_destroyed*(accessible: Accessible) {.
    importc: "gtk_accessible_connect_widget_destroyed", libgtk.}

template gtk_actionable*(inst: expr): expr = 
  (g_type_check_instance_cast(inst, actionable_get_type(), ActionableObj))

template gtk_is_actionable*(inst: expr): expr = 
  (g_type_check_instance_type(inst, actionable_get_type()))

template gtk_actionable_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, actionable_get_type(), 
                                 ActionableInterfaceObj))

type 
  Actionable* =  ptr ActionableObj
  ActionablePtr* = ptr ActionableObj
  ActionableObj* = object 
  
type 
  ActionableInterface* =  ptr ActionableInterfaceObj
  ActionableInterfacePtr* = ptr ActionableInterfaceObj
  ActionableInterfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_action_name*: proc (actionable: Actionable): cstring {.cdecl.}
    set_action_name*: proc (actionable: Actionable; 
                            action_name: cstring) {.cdecl.}
    get_action_target_value*: proc (actionable: Actionable): glib.GVariant {.cdecl.}
    set_action_target_value*: proc (actionable: Actionable; 
                                    target_value: glib.GVariant) {.cdecl.}

proc actionable_get_type*(): GType {.importc: "gtk_actionable_get_type", 
    libgtk.}
proc get_action_name*(actionable: Actionable): cstring {.
    importc: "gtk_actionable_get_action_name", libgtk.}
proc action_name*(actionable: Actionable): cstring {.
    importc: "gtk_actionable_get_action_name", libgtk.}
proc set_action_name*(actionable: Actionable; 
                                     action_name: cstring) {.
    importc: "gtk_actionable_set_action_name", libgtk.}
proc `action_name=`*(actionable: Actionable; 
                                     action_name: cstring) {.
    importc: "gtk_actionable_set_action_name", libgtk.}
proc get_action_target_value*(actionable: Actionable): glib.GVariant {.
    importc: "gtk_actionable_get_action_target_value", libgtk.}
proc action_target_value*(actionable: Actionable): glib.GVariant {.
    importc: "gtk_actionable_get_action_target_value", libgtk.}
proc set_action_target_value*(actionable: Actionable; 
    target_value: glib.GVariant) {.importc: "gtk_actionable_set_action_target_value", 
                                  libgtk.}
proc `action_target_value=`*(actionable: Actionable; 
    target_value: glib.GVariant) {.importc: "gtk_actionable_set_action_target_value", 
                                  libgtk.}
proc set_action_target*(actionable: Actionable; 
    format_string: cstring) {.varargs, 
                                importc: "gtk_actionable_set_action_target", 
                                libgtk.}
proc `action_target=`*(actionable: Actionable; 
    format_string: cstring) {.varargs, 
                                importc: "gtk_actionable_set_action_target", 
                                libgtk.}
proc set_detailed_action_name*(actionable: Actionable; 
    detailed_action_name: cstring) {.
    importc: "gtk_actionable_set_detailed_action_name", libgtk.}
proc `detailed_action_name=`*(actionable: Actionable; 
    detailed_action_name: cstring) {.
    importc: "gtk_actionable_set_detailed_action_name", libgtk.}

template gtk_action_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, action_bar_get_type(), ActionBarObj))

template gtk_action_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, action_bar_get_type(), ActionBarClassObj))

template gtk_is_action_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, action_bar_get_type()))

template gtk_is_action_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, action_bar_get_type()))

template gtk_action_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, action_bar_get_type(), ActionBarClassObj))

type 
  ActionBar* =  ptr ActionBarObj
  ActionBarPtr* = ptr ActionBarObj
  ActionBarObj*{.final.} = object of BinObj

type 
  ActionBarClass* =  ptr ActionBarClassObj
  ActionBarClassPtr* = ptr ActionBarClassObj
  ActionBarClassObj*{.final.} = object of BinClassObj
    gtk_reserved141: proc () {.cdecl.}
    gtk_reserved142: proc () {.cdecl.}
    gtk_reserved143: proc () {.cdecl.}
    gtk_reserved144: proc () {.cdecl.}

proc action_bar_get_type*(): GType {.importc: "gtk_action_bar_get_type", 
    libgtk.}
proc action_bar_new*(): ActionBar {.importc: "gtk_action_bar_new", 
    libgtk.}
proc get_center_widget*(action_bar: ActionBar): Widget {.
    importc: "gtk_action_bar_get_center_widget", libgtk.}
proc center_widget*(action_bar: ActionBar): Widget {.
    importc: "gtk_action_bar_get_center_widget", libgtk.}
proc set_center_widget*(action_bar: ActionBar; 
    center_widget: Widget) {.importc: "gtk_action_bar_set_center_widget", 
                                    libgtk.}
proc `center_widget=`*(action_bar: ActionBar; 
    center_widget: Widget) {.importc: "gtk_action_bar_set_center_widget", 
                                    libgtk.}
proc pack_start*(action_bar: ActionBar; 
                                child: Widget) {.
    importc: "gtk_action_bar_pack_start", libgtk.}
proc pack_end*(action_bar: ActionBar; 
                              child: Widget) {.
    importc: "gtk_action_bar_pack_end", libgtk.}

template gtk_adjustment*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, adjustment_get_type(), AdjustmentObj))

template gtk_adjustment_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, adjustment_get_type(), AdjustmentClassObj))

template gtk_is_adjustment*(obj: expr): expr = 
  (g_type_check_instance_type(obj, adjustment_get_type()))

template gtk_is_adjustment_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, adjustment_get_type()))

template gtk_adjustment_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, adjustment_get_type(), AdjustmentClassObj))

type 
  AdjustmentClass* =  ptr AdjustmentClassObj
  AdjustmentClassPtr* = ptr AdjustmentClassObj
  AdjustmentClassObj*{.final.} = object of gobject.GInitiallyUnownedClassObj
    changed*: proc (adjustment: Adjustment) {.cdecl.}
    value_changed*: proc (adjustment: Adjustment) {.cdecl.}
    gtk_reserved151: proc () {.cdecl.}
    gtk_reserved152: proc () {.cdecl.}
    gtk_reserved153: proc () {.cdecl.}
    gtk_reserved154: proc () {.cdecl.}

proc adjustment_get_type*(): GType {.importc: "gtk_adjustment_get_type", 
    libgtk.}
proc adjustment_new*(value: gdouble; lower: gdouble; upper: gdouble; 
                         step_increment: gdouble; page_increment: gdouble; 
                         page_size: gdouble): Adjustment {.
    importc: "gtk_adjustment_new", libgtk.}
proc changed*(adjustment: Adjustment) {.
    importc: "gtk_adjustment_changed", libgtk.}
proc value_changed*(adjustment: Adjustment) {.
    importc: "gtk_adjustment_value_changed", libgtk.}
proc clamp_page*(adjustment: Adjustment; lower: gdouble; 
                                upper: gdouble) {.
    importc: "gtk_adjustment_clamp_page", libgtk.}
proc get_value*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_value", libgtk.}
proc value*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_value", libgtk.}
proc set_value*(adjustment: Adjustment; value: gdouble) {.
    importc: "gtk_adjustment_set_value", libgtk.}
proc `value=`*(adjustment: Adjustment; value: gdouble) {.
    importc: "gtk_adjustment_set_value", libgtk.}
proc get_lower*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_lower", libgtk.}
proc lower*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_lower", libgtk.}
proc set_lower*(adjustment: Adjustment; lower: gdouble) {.
    importc: "gtk_adjustment_set_lower", libgtk.}
proc `lower=`*(adjustment: Adjustment; lower: gdouble) {.
    importc: "gtk_adjustment_set_lower", libgtk.}
proc get_upper*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_upper", libgtk.}
proc upper*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_upper", libgtk.}
proc set_upper*(adjustment: Adjustment; upper: gdouble) {.
    importc: "gtk_adjustment_set_upper", libgtk.}
proc `upper=`*(adjustment: Adjustment; upper: gdouble) {.
    importc: "gtk_adjustment_set_upper", libgtk.}
proc get_step_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_step_increment", libgtk.}
proc step_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_step_increment", libgtk.}
proc set_step_increment*(adjustment: Adjustment; 
    step_increment: gdouble) {.importc: "gtk_adjustment_set_step_increment", 
                               libgtk.}
proc `step_increment=`*(adjustment: Adjustment; 
    step_increment: gdouble) {.importc: "gtk_adjustment_set_step_increment", 
                               libgtk.}
proc get_page_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_page_increment", libgtk.}
proc page_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_page_increment", libgtk.}
proc set_page_increment*(adjustment: Adjustment; 
    page_increment: gdouble) {.importc: "gtk_adjustment_set_page_increment", 
                               libgtk.}
proc `page_increment=`*(adjustment: Adjustment; 
    page_increment: gdouble) {.importc: "gtk_adjustment_set_page_increment", 
                               libgtk.}
proc get_page_size*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_page_size", libgtk.}
proc page_size*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_page_size", libgtk.}
proc set_page_size*(adjustment: Adjustment; 
                                   page_size: gdouble) {.
    importc: "gtk_adjustment_set_page_size", libgtk.}
proc `page_size=`*(adjustment: Adjustment; 
                                   page_size: gdouble) {.
    importc: "gtk_adjustment_set_page_size", libgtk.}
proc configure*(adjustment: Adjustment; value: gdouble; 
                               lower: gdouble; upper: gdouble; 
                               step_increment: gdouble; 
                               page_increment: gdouble; page_size: gdouble) {.
    importc: "gtk_adjustment_configure", libgtk.}
proc get_minimum_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_minimum_increment", libgtk.}
proc minimum_increment*(adjustment: Adjustment): gdouble {.
    importc: "gtk_adjustment_get_minimum_increment", libgtk.}

template gtk_app_chooser*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, app_chooser_get_type(), AppChooserObj))

template gtk_is_app_chooser*(obj: expr): expr = 
  (g_type_check_instance_type(obj, app_chooser_get_type()))

type 
  AppChooser* =  ptr AppChooserObj
  AppChooserPtr* = ptr AppChooserObj
  AppChooserObj* = object 
  
proc app_chooser_get_type*(): GType {.importc: "gtk_app_chooser_get_type", 
    libgtk.}
proc get_app_info*(self: AppChooser): gio.GAppInfo {.
    importc: "gtk_app_chooser_get_app_info", libgtk.}
proc app_info*(self: AppChooser): gio.GAppInfo {.
    importc: "gtk_app_chooser_get_app_info", libgtk.}
proc get_content_type*(self: AppChooser): cstring {.
    importc: "gtk_app_chooser_get_content_type", libgtk.}
proc content_type*(self: AppChooser): cstring {.
    importc: "gtk_app_chooser_get_content_type", libgtk.}
proc refresh*(self: AppChooser) {.
    importc: "gtk_app_chooser_refresh", libgtk.}

template gtk_app_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, app_chooser_dialog_get_type(), 
                              AppChooserDialogObj))

template gtk_app_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, app_chooser_dialog_get_type(), 
                           AppChooserDialogClassObj))

template gtk_is_app_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, app_chooser_dialog_get_type()))

template gtk_is_app_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, app_chooser_dialog_get_type()))

template gtk_app_chooser_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, app_chooser_dialog_get_type(), 
                             AppChooserDialogClassObj))

type 
  AppChooserDialogPrivateObj = object 
  
type 
  AppChooserDialog* =  ptr AppChooserDialogObj
  AppChooserDialogPtr* = ptr AppChooserDialogObj
  AppChooserDialogObj*{.final.} = object of DialogObj
    priv17: ptr AppChooserDialogPrivateObj

type 
  AppChooserDialogClass* =  ptr AppChooserDialogClassObj
  AppChooserDialogClassPtr* = ptr AppChooserDialogClassObj
  AppChooserDialogClassObj*{.final.} = object of DialogClassObj
    padding*: array[16, gpointer]

proc app_chooser_dialog_get_type*(): GType {.
    importc: "gtk_app_chooser_dialog_get_type", libgtk.}
proc app_chooser_dialog_new*(parent: Window; flags: DialogFlags; 
                                 file: gio.GFile): AppChooserDialog {.
    importc: "gtk_app_chooser_dialog_new", libgtk.}
proc app_chooser_dialog_new_for_content_type*(parent: Window; 
    flags: DialogFlags; content_type: cstring): AppChooserDialog {.
    importc: "gtk_app_chooser_dialog_new_for_content_type", libgtk.}
proc get_widget*(self: AppChooserDialog): Button {.
    importc: "gtk_app_chooser_dialog_get_widget", libgtk.}
proc widget*(self: AppChooserDialog): Button {.
    importc: "gtk_app_chooser_dialog_get_widget", libgtk.}
proc set_heading*(self: AppChooserDialog; 
    heading: cstring) {.importc: "gtk_app_chooser_dialog_set_heading", 
                          libgtk.}
proc `heading=`*(self: AppChooserDialog; 
    heading: cstring) {.importc: "gtk_app_chooser_dialog_set_heading", 
                          libgtk.}
proc get_heading*(self: AppChooserDialog): cstring {.
    importc: "gtk_app_chooser_dialog_get_heading", libgtk.}
proc heading*(self: AppChooserDialog): cstring {.
    importc: "gtk_app_chooser_dialog_get_heading", libgtk.}

template gtk_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, box_get_type(), BoxObj))

template gtk_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, box_get_type(), BoxClassObj))

template gtk_is_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, box_get_type()))

template gtk_is_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, box_get_type()))

template gtk_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, box_get_type(), BoxClassObj))

type 
  BoxPrivateObj = object 
  
type 
  Box* =  ptr BoxObj
  BoxPtr* = ptr BoxObj
  BoxObj* = object of ContainerObj
    priv18: ptr BoxPrivateObj

type 
  BoxClass* =  ptr BoxClassObj
  BoxClassPtr* = ptr BoxClassObj
  BoxClassObj = object of ContainerClassObj
    gtk_reserved161: proc () {.cdecl.}
    gtk_reserved162: proc () {.cdecl.}
    gtk_reserved163: proc () {.cdecl.}
    gtk_reserved164: proc () {.cdecl.}

proc box_get_type*(): GType {.importc: "gtk_box_get_type", libgtk.}
proc box_new*(orientation: Orientation; spacing: gint): Box {.
    importc: "gtk_box_new", libgtk.}
proc pack_start*(box: Box; child: Widget; 
                         expand: gboolean; fill: gboolean; padding: guint) {.
    importc: "gtk_box_pack_start", libgtk.}
proc pack_end*(box: Box; child: Widget; 
                       expand: gboolean; fill: gboolean; padding: guint) {.
    importc: "gtk_box_pack_end", libgtk.}
proc set_homogeneous*(box: Box; homogeneous: gboolean) {.
    importc: "gtk_box_set_homogeneous", libgtk.}
proc `homogeneous=`*(box: Box; homogeneous: gboolean) {.
    importc: "gtk_box_set_homogeneous", libgtk.}
proc get_homogeneous*(box: Box): gboolean {.
    importc: "gtk_box_get_homogeneous", libgtk.}
proc homogeneous*(box: Box): gboolean {.
    importc: "gtk_box_get_homogeneous", libgtk.}
proc set_spacing*(box: Box; spacing: gint) {.
    importc: "gtk_box_set_spacing", libgtk.}
proc `spacing=`*(box: Box; spacing: gint) {.
    importc: "gtk_box_set_spacing", libgtk.}
proc get_spacing*(box: Box): gint {.
    importc: "gtk_box_get_spacing", libgtk.}
proc spacing*(box: Box): gint {.
    importc: "gtk_box_get_spacing", libgtk.}
proc set_baseline_position*(box: Box; 
                                    position: BaselinePosition) {.
    importc: "gtk_box_set_baseline_position", libgtk.}
proc `baseline_position=`*(box: Box; 
                                    position: BaselinePosition) {.
    importc: "gtk_box_set_baseline_position", libgtk.}
proc get_baseline_position*(box: Box): BaselinePosition {.
    importc: "gtk_box_get_baseline_position", libgtk.}
proc baseline_position*(box: Box): BaselinePosition {.
    importc: "gtk_box_get_baseline_position", libgtk.}
proc reorder_child*(box: Box; child: Widget; 
                            position: gint) {.
    importc: "gtk_box_reorder_child", libgtk.}
proc query_child_packing*(box: Box; child: Widget; 
                                  expand: ptr gboolean; fill: var gboolean; 
                                  padding: var guint; 
                                  pack_type: ptr PackType) {.
    importc: "gtk_box_query_child_packing", libgtk.}
proc set_child_packing*(box: Box; child: Widget; 
                                expand: gboolean; fill: gboolean; 
                                padding: guint; pack_type: PackType) {.
    importc: "gtk_box_set_child_packing", libgtk.}
proc `child_packing=`*(box: Box; child: Widget; 
                                expand: gboolean; fill: gboolean; 
                                padding: guint; pack_type: PackType) {.
    importc: "gtk_box_set_child_packing", libgtk.}
proc set_center_widget*(box: Box; widget: Widget) {.
    importc: "gtk_box_set_center_widget", libgtk.}
proc `center_widget=`*(box: Box; widget: Widget) {.
    importc: "gtk_box_set_center_widget", libgtk.}
proc get_center_widget*(box: Box): Widget {.
    importc: "gtk_box_get_center_widget", libgtk.}
proc center_widget*(box: Box): Widget {.
    importc: "gtk_box_get_center_widget", libgtk.}

template gtk_app_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, app_chooser_widget_get_type(), 
                              AppChooserWidgetObj))

template gtk_app_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, app_chooser_widget_get_type(), 
                           AppChooserWidgetClassObj))

template gtk_is_app_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_type(obj, app_chooser_widget_get_type()))

template gtk_is_app_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, app_chooser_widget_get_type()))

template gtk_app_chooser_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, app_chooser_widget_get_type(), 
                             AppChooserWidgetClassObj))

type 
  AppChooserWidgetPrivateObj = object 
  
type 
  AppChooserWidget* =  ptr AppChooserWidgetObj
  AppChooserWidgetPtr* = ptr AppChooserWidgetObj
  AppChooserWidgetObj*{.final.} = object of BoxObj
    priv19: ptr AppChooserWidgetPrivateObj

type 
  AppChooserWidgetClass* =  ptr AppChooserWidgetClassObj
  AppChooserWidgetClassPtr* = ptr AppChooserWidgetClassObj
  AppChooserWidgetClassObj*{.final.} = object of BoxClassObj
    application_selected*: proc (self: AppChooserWidget; 
                                 app_info: gio.GAppInfo) {.cdecl.}
    application_activated*: proc (self: AppChooserWidget; 
                                  app_info: gio.GAppInfo) {.cdecl.}
    populate_popup*: proc (self: AppChooserWidget; menu: Menu; 
                           app_info: gio.GAppInfo) {.cdecl.}
    padding*: array[16, gpointer]

proc app_chooser_widget_get_type*(): GType {.
    importc: "gtk_app_chooser_widget_get_type", libgtk.}
proc app_chooser_widget_new*(content_type: cstring): AppChooserWidget {.
    importc: "gtk_app_chooser_widget_new", libgtk.}
proc set_show_default*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_default", 
                         libgtk.}
proc `show_default=`*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_default", 
                         libgtk.}
proc get_show_default*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_default", libgtk.}
proc show_default*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_default", libgtk.}
proc set_show_recommended*(
    self: AppChooserWidget; setting: gboolean) {.
    importc: "gtk_app_chooser_widget_set_show_recommended", libgtk.}
proc `show_recommended=`*(
    self: AppChooserWidget; setting: gboolean) {.
    importc: "gtk_app_chooser_widget_set_show_recommended", libgtk.}
proc get_show_recommended*(
    self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_recommended", libgtk.}
proc show_recommended*(
    self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_recommended", libgtk.}
proc set_show_fallback*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_fallback", 
                         libgtk.}
proc `show_fallback=`*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_fallback", 
                         libgtk.}
proc get_show_fallback*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_fallback", libgtk.}
proc show_fallback*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_fallback", libgtk.}
proc set_show_other*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_other", 
                         libgtk.}
proc `show_other=`*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_other", 
                         libgtk.}
proc get_show_other*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_other", libgtk.}
proc show_other*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_other", libgtk.}
proc set_show_all*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_all", 
                         libgtk.}
proc `show_all=`*(self: AppChooserWidget; 
    setting: gboolean) {.importc: "gtk_app_chooser_widget_set_show_all", 
                         libgtk.}
proc get_show_all*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_all", libgtk.}
proc show_all*(self: AppChooserWidget): gboolean {.
    importc: "gtk_app_chooser_widget_get_show_all", libgtk.}
proc set_default_text*(self: AppChooserWidget; 
    text: cstring) {.importc: "gtk_app_chooser_widget_set_default_text", 
                       libgtk.}
proc `default_text=`*(self: AppChooserWidget; 
    text: cstring) {.importc: "gtk_app_chooser_widget_set_default_text", 
                       libgtk.}
proc get_default_text*(self: AppChooserWidget): cstring {.
    importc: "gtk_app_chooser_widget_get_default_text", libgtk.}
proc default_text*(self: AppChooserWidget): cstring {.
    importc: "gtk_app_chooser_widget_get_default_text", libgtk.}

template gtk_tree_model*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_model_get_type(), TreeModelObj))

template gtk_is_tree_model*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_model_get_type()))

template gtk_tree_model_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, tree_model_get_type(), TreeModelIfaceObj))

type 
  TreePath* =  ptr TreePathObj
  TreePathPtr* = ptr TreePathObj
  TreePathObj* = object 
  
  TreeRowReference* =  ptr TreeRowReferenceObj
  TreeRowReferencePtr* = ptr TreeRowReferenceObj
  TreeRowReferenceObj* = object 
  
  TreeModel* =  ptr TreeModelObj
  TreeModelPtr* = ptr TreeModelObj
  TreeModelObj* = object 
  
type 
  TreeModelFlags* {.size: sizeof(cint), pure.} = enum 
    ITERS_PERSIST = 1 shl 0, LIST_ONLY = 1 shl
        1
type 
  TreeIter* =  ptr TreeIterObj
  TreeIterPtr* = ptr TreeIterObj
  TreeIterObj* = object 
    stamp*: gint
    user_data*: gpointer
    user_data2*: gpointer
    user_data3*: gpointer
type 
  TreeModelForeachFunc* = proc (model: TreeModel; 
                                   path: TreePath; 
                                   iter: TreeIter; data: gpointer): gboolean {.cdecl.}

type 
  TreeModelIface* =  ptr TreeModelIfaceObj
  TreeModelIfacePtr* = ptr TreeModelIfaceObj
  TreeModelIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    row_changed*: proc (tree_model: TreeModel; path: TreePath; 
                        iter: TreeIter) {.cdecl.}
    row_inserted*: proc (tree_model: TreeModel; path: TreePath; 
                         iter: TreeIter) {.cdecl.}
    row_has_child_toggled*: proc (tree_model: TreeModel; 
                                  path: TreePath; iter: TreeIter) {.cdecl.}
    row_deleted*: proc (tree_model: TreeModel; path: TreePath) {.cdecl.}
    rows_reordered*: proc (tree_model: TreeModel; 
                           path: TreePath; iter: TreeIter; 
                           new_order: var gint) {.cdecl.}
    get_flags*: proc (tree_model: TreeModel): TreeModelFlags {.cdecl.}
    get_n_columns*: proc (tree_model: TreeModel): gint {.cdecl.}
    get_column_type*: proc (tree_model: TreeModel; index: gint): GType {.cdecl.}
    get_iter*: proc (tree_model: TreeModel; iter: TreeIter; 
                     path: TreePath): gboolean {.cdecl.}
    get_path*: proc (tree_model: TreeModel; iter: TreeIter): TreePath {.cdecl.}
    get_value*: proc (tree_model: TreeModel; iter: TreeIter; 
                      column: gint; value: gobject.GValue) {.cdecl.}
    iter_next*: proc (tree_model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    iter_previous*: proc (tree_model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    iter_children*: proc (tree_model: TreeModel; iter: TreeIter; 
                          parent: TreeIter): gboolean {.cdecl.}
    iter_has_child*: proc (tree_model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    iter_n_children*: proc (tree_model: TreeModel; 
                            iter: TreeIter): gint {.cdecl.}
    iter_nth_child*: proc (tree_model: TreeModel; 
                           iter: TreeIter; parent: TreeIter; 
                           n: gint): gboolean {.cdecl.}
    iter_parent*: proc (tree_model: TreeModel; iter: TreeIter; 
                        child: TreeIter): gboolean {.cdecl.}
    ref_node*: proc (tree_model: TreeModel; iter: TreeIter) {.cdecl.}
    unref_node*: proc (tree_model: TreeModel; iter: TreeIter) {.cdecl.}

proc tree_path_new*(): TreePath {.importc: "gtk_tree_path_new", 
    libgtk.}
proc tree_path_new_from_string*(path: cstring): TreePath {.
    importc: "gtk_tree_path_new_from_string", libgtk.}
proc tree_path_new_from_indices*(first_index: gint): TreePath {.
    varargs, importc: "gtk_tree_path_new_from_indices", libgtk.}
proc tree_path_new_from_indicesv*(indices: var gint; length: gsize): TreePath {.
    importc: "gtk_tree_path_new_from_indicesv", libgtk.}
proc to_string*(path: TreePath): cstring {.
    importc: "gtk_tree_path_to_string", libgtk.}
proc tree_path_new_first*(): TreePath {.
    importc: "gtk_tree_path_new_first", libgtk.}
proc append_index*(path: TreePath; index: gint) {.
    importc: "gtk_tree_path_append_index", libgtk.}
proc prepend_index*(path: TreePath; index: gint) {.
    importc: "gtk_tree_path_prepend_index", libgtk.}
proc get_depth*(path: TreePath): gint {.
    importc: "gtk_tree_path_get_depth", libgtk.}
proc depth*(path: TreePath): gint {.
    importc: "gtk_tree_path_get_depth", libgtk.}
proc get_indices*(path: TreePath): ptr gint {.
    importc: "gtk_tree_path_get_indices", libgtk.}
proc indices*(path: TreePath): ptr gint {.
    importc: "gtk_tree_path_get_indices", libgtk.}
proc get_indices_with_depth*(path: TreePath; 
    depth: var gint): ptr gint {.importc: "gtk_tree_path_get_indices_with_depth", 
                                 libgtk.}
proc indices_with_depth*(path: TreePath; 
    depth: var gint): ptr gint {.importc: "gtk_tree_path_get_indices_with_depth", 
                                 libgtk.}
proc free*(path: TreePath) {.
    importc: "gtk_tree_path_free", libgtk.}
proc copy*(path: TreePath): TreePath {.
    importc: "gtk_tree_path_copy", libgtk.}
proc tree_path_get_type*(): GType {.importc: "gtk_tree_path_get_type", 
    libgtk.}
proc compare*(a: TreePath; b: TreePath): gint {.
    importc: "gtk_tree_path_compare", libgtk.}
proc next*(path: TreePath) {.
    importc: "gtk_tree_path_next", libgtk.}
proc prev*(path: TreePath): gboolean {.
    importc: "gtk_tree_path_prev", libgtk.}
proc up*(path: TreePath): gboolean {.
    importc: "gtk_tree_path_up", libgtk.}
proc down*(path: TreePath) {.
    importc: "gtk_tree_path_down", libgtk.}
proc is_ancestor*(path: TreePath; 
                                descendant: TreePath): gboolean {.
    importc: "gtk_tree_path_is_ancestor", libgtk.}
proc is_descendant*(path: TreePath; 
                                  ancestor: TreePath): gboolean {.
    importc: "gtk_tree_path_is_descendant", libgtk.}
proc tree_row_reference_get_type*(): GType {.
    importc: "gtk_tree_row_reference_get_type", libgtk.}
proc tree_row_reference_new*(model: TreeModel; 
                                 path: TreePath): TreeRowReference {.
    importc: "gtk_tree_row_reference_new", libgtk.}
proc tree_row_reference_new_proxy*(proxy: GObject; 
    model: TreeModel; path: TreePath): TreeRowReference {.
    importc: "gtk_tree_row_reference_new_proxy", libgtk.}
proc get_path*(reference: TreeRowReference): TreePath {.
    importc: "gtk_tree_row_reference_get_path", libgtk.}
proc path*(reference: TreeRowReference): TreePath {.
    importc: "gtk_tree_row_reference_get_path", libgtk.}
proc get_model*(reference: TreeRowReference): TreeModel {.
    importc: "gtk_tree_row_reference_get_model", libgtk.}
proc model*(reference: TreeRowReference): TreeModel {.
    importc: "gtk_tree_row_reference_get_model", libgtk.}
proc valid*(reference: TreeRowReference): gboolean {.
    importc: "gtk_tree_row_reference_valid", libgtk.}
proc copy*(reference: TreeRowReference): TreeRowReference {.
    importc: "gtk_tree_row_reference_copy", libgtk.}
proc free*(reference: TreeRowReference) {.
    importc: "gtk_tree_row_reference_free", libgtk.}
proc tree_row_reference_inserted*(proxy: GObject; 
                                      path: TreePath) {.
    importc: "gtk_tree_row_reference_inserted", libgtk.}
proc tree_row_reference_deleted*(proxy: GObject; path: TreePath) {.
    importc: "gtk_tree_row_reference_deleted", libgtk.}
proc tree_row_reference_reordered*(proxy: GObject; 
    path: TreePath; iter: TreeIter; new_order: var gint) {.
    importc: "gtk_tree_row_reference_reordered", libgtk.}
proc copy*(iter: TreeIter): TreeIter {.
    importc: "gtk_tree_iter_copy", libgtk.}
proc free*(iter: TreeIter) {.
    importc: "gtk_tree_iter_free", libgtk.}
proc tree_iter_get_type*(): GType {.importc: "gtk_tree_iter_get_type", 
    libgtk.}
proc tree_model_get_type*(): GType {.importc: "gtk_tree_model_get_type", 
    libgtk.}
proc get_flags*(tree_model: TreeModel): TreeModelFlags {.
    importc: "gtk_tree_model_get_flags", libgtk.}
proc flags*(tree_model: TreeModel): TreeModelFlags {.
    importc: "gtk_tree_model_get_flags", libgtk.}
proc get_n_columns*(tree_model: TreeModel): gint {.
    importc: "gtk_tree_model_get_n_columns", libgtk.}
proc n_columns*(tree_model: TreeModel): gint {.
    importc: "gtk_tree_model_get_n_columns", libgtk.}
proc get_column_type*(tree_model: TreeModel; 
                                     index: gint): GType {.
    importc: "gtk_tree_model_get_column_type", libgtk.}
proc column_type*(tree_model: TreeModel; 
                                     index: gint): GType {.
    importc: "gtk_tree_model_get_column_type", libgtk.}
proc get_iter*(tree_model: TreeModel; 
                              iter: TreeIter; path: TreePath): gboolean {.
    importc: "gtk_tree_model_get_iter", libgtk.}
proc iter*(tree_model: TreeModel; 
                              iter: TreeIter; path: TreePath): gboolean {.
    importc: "gtk_tree_model_get_iter", libgtk.}
proc get_iter_from_string*(tree_model: TreeModel; 
    iter: TreeIter; path_string: cstring): gboolean {.
    importc: "gtk_tree_model_get_iter_from_string", libgtk.}
proc iter_from_string*(tree_model: TreeModel; 
    iter: TreeIter; path_string: cstring): gboolean {.
    importc: "gtk_tree_model_get_iter_from_string", libgtk.}
proc get_string_from_iter*(tree_model: TreeModel; 
    iter: TreeIter): cstring {.
    importc: "gtk_tree_model_get_string_from_iter", libgtk.}
proc string_from_iter*(tree_model: TreeModel; 
    iter: TreeIter): cstring {.
    importc: "gtk_tree_model_get_string_from_iter", libgtk.}
proc get_iter_first*(tree_model: TreeModel; 
                                    iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_get_iter_first", libgtk.}
proc iter_first*(tree_model: TreeModel; 
                                    iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_get_iter_first", libgtk.}
proc get_path*(tree_model: TreeModel; 
                              iter: TreeIter): TreePath {.
    importc: "gtk_tree_model_get_path", libgtk.}
proc path*(tree_model: TreeModel; 
                              iter: TreeIter): TreePath {.
    importc: "gtk_tree_model_get_path", libgtk.}
proc get_value*(tree_model: TreeModel; 
                               iter: TreeIter; column: gint; 
                               value: var gobject.GValueObj) {.
    importc: "gtk_tree_model_get_value", libgtk.}
proc iter_previous*(tree_model: TreeModel; 
                                   iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_iter_previous", libgtk.}
proc iter_next*(tree_model: TreeModel; 
                               iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_iter_next", libgtk.}
proc iter_children*(tree_model: TreeModel; 
                                   iter: TreeIter; 
                                   parent: TreeIter): gboolean {.
    importc: "gtk_tree_model_iter_children", libgtk.}
proc iter_has_child*(tree_model: TreeModel; 
                                    iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_iter_has_child", libgtk.}
proc iter_n_children*(tree_model: TreeModel; 
                                     iter: TreeIter): gint {.
    importc: "gtk_tree_model_iter_n_children", libgtk.}
proc iter_nth_child*(tree_model: TreeModel; 
                                    iter: TreeIter; 
                                    parent: TreeIter; n: gint): gboolean {.
    importc: "gtk_tree_model_iter_nth_child", libgtk.}
proc iter_parent*(tree_model: TreeModel; 
                                 iter: TreeIter; child: TreeIter): gboolean {.
    importc: "gtk_tree_model_iter_parent", libgtk.}
proc ref_node*(tree_model: TreeModel; 
                              iter: TreeIter) {.
    importc: "gtk_tree_model_ref_node", libgtk.}
proc unref_node*(tree_model: TreeModel; 
                                iter: TreeIter) {.
    importc: "gtk_tree_model_unref_node", libgtk.}
proc get*(tree_model: TreeModel; iter: TreeIter) {.
    varargs, importc: "gtk_tree_model_get", libgtk.}

discard """ proc "get_valist*(tree_model: TreeModel; 
                                iter: TreeIter; var_args: va_list) {.
    importc: "gtk_tree_model_get_valist", libgtk.}"""

proc foreach*(model: TreeModel; 
                          fn: TreeModelForeachFunc; 
                             user_data: gpointer) {.
    importc: "gtk_tree_model_foreach", libgtk.}
proc row_changed*(tree_model: TreeModel; 
                                 path: TreePath; iter: TreeIter) {.
    importc: "gtk_tree_model_row_changed", libgtk.}
proc row_inserted*(tree_model: TreeModel; 
                                  path: TreePath; iter: TreeIter) {.
    importc: "gtk_tree_model_row_inserted", libgtk.}
proc row_has_child_toggled*(tree_model: TreeModel; 
    path: TreePath; iter: TreeIter) {.
    importc: "gtk_tree_model_row_has_child_toggled", libgtk.}
proc row_deleted*(tree_model: TreeModel; 
                                 path: TreePath) {.
    importc: "gtk_tree_model_row_deleted", libgtk.}
proc rows_reordered*(tree_model: TreeModel; 
                                    path: TreePath; 
                                    iter: TreeIter; new_order: var gint) {.
    importc: "gtk_tree_model_rows_reordered", libgtk.}
proc rows_reordered_with_length*(tree_model: TreeModel; 
    path: TreePath; iter: TreeIter; new_order: var gint; 
    length: gint) {.importc: "gtk_tree_model_rows_reordered_with_length", 
                    libgtk.}

template gtk_cell_editable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_editable_get_type(), CellEditableObj))

template gtk_cell_editable_class*(obj: expr): expr = 
  (g_type_check_class_cast(obj, cell_editable_get_type(), CellEditableIfaceObj))

template gtk_is_cell_editable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_editable_get_type()))

template gtk_cell_editable_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, cell_editable_get_type(), 
                                 CellEditableIfaceObj))

type 
  CellEditable* =  ptr CellEditableObj
  CellEditablePtr* = ptr CellEditableObj
  CellEditableObj* = object 
  
type 
  CellEditableIface* =  ptr CellEditableIfaceObj
  CellEditableIfacePtr* = ptr CellEditableIfaceObj
  CellEditableIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    editing_done*: proc (cell_editable: CellEditable) {.cdecl.}
    remove_widget*: proc (cell_editable: CellEditable) {.cdecl.}
    start_editing*: proc (cell_editable: CellEditable; 
                          event: gdk3.Event) {.cdecl.}

proc cell_editable_get_type*(): GType {.
    importc: "gtk_cell_editable_get_type", libgtk.}
proc start_editing*(cell_editable: CellEditable; 
                                      event: gdk3.Event) {.
    importc: "gtk_cell_editable_start_editing", libgtk.}
proc editing_done*(cell_editable: CellEditable) {.
    importc: "gtk_cell_editable_editing_done", libgtk.}
proc remove_widget*(cell_editable: CellEditable) {.
    importc: "gtk_cell_editable_remove_widget", libgtk.}

type 
  CellRendererState* {.size: sizeof(cint), pure.} = enum 
    SELECTED = 1 shl 0, PRELIT = 1 shl
        1, INSENSITIVE = 1 shl 2, 
    SORTED = 1 shl 3, FOCUSED = 1 shl 4, 
    EXPANDABLE = 1 shl 5, 
    EXPANDED = 1 shl 6
type 
  CellRendererMode* {.size: sizeof(cint), pure.} = enum 
    INERT, ACTIVATABLE, 
    EDITABLE
template gtk_cell_renderer*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_get_type(), CellRendererObj))

template gtk_cell_renderer_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_get_type(), 
                           CellRendererClassObj))

template gtk_is_cell_renderer*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_get_type()))

template gtk_is_cell_renderer_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_get_type()))

template gtk_cell_renderer_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_get_type(), 
                             CellRendererClassObj))

type 
  CellRendererPrivateObj = object 
  
  CellRendererClassPrivateObj = object 
  
type 
  CellRenderer* =  ptr CellRendererObj
  CellRendererPtr* = ptr CellRendererObj
  CellRendererObj = object of gobject.GInitiallyUnownedObj
    priv20: ptr CellRendererPrivateObj

type 
  CellRendererClass* =  ptr CellRendererClassObj
  CellRendererClassPtr* = ptr CellRendererClassObj
  CellRendererClassObj = object of gobject.GInitiallyUnownedClassObj
    get_request_mode*: proc (cell: CellRenderer): SizeRequestMode {.cdecl.}
    get_preferred_width*: proc (cell: CellRenderer; 
                                widget: Widget; minimum_size: var gint; 
                                natural_size: var gint) {.cdecl.}
    get_preferred_height_for_width*: proc (cell: CellRenderer; 
        widget: Widget; width: gint; minimum_height: var gint; 
        natural_height: var gint) {.cdecl.}
    get_preferred_height*: proc (cell: CellRenderer; 
                                 widget: Widget; 
                                 minimum_size: var gint; 
                                 natural_size: var gint) {.cdecl.}
    get_preferred_width_for_height*: proc (cell: CellRenderer; 
        widget: Widget; height: gint; minimum_width: var gint; 
        natural_width: var gint) {.cdecl.}
    get_aligned_area*: proc (cell: CellRenderer; widget: Widget; 
                             flags: CellRendererState; 
                             cell_area: gdk3.Rectangle; 
                             aligned_area: gdk3.Rectangle) {.cdecl.}
    get_size*: proc (cell: CellRenderer; widget: Widget; 
                     cell_area: gdk3.Rectangle; x_offset: var gint; 
                     y_offset: var gint; width: var gint; height: var gint) {.cdecl.}
    render*: proc (cell: CellRenderer; cr: cairo.Context; 
                   widget: Widget; background_area: gdk3.Rectangle; 
                   cell_area: gdk3.Rectangle; flags: CellRendererState) {.cdecl.}
    activate*: proc (cell: CellRenderer; event: gdk3.Event; 
                     widget: Widget; path: cstring; 
                     background_area: gdk3.Rectangle; 
                     cell_area: gdk3.Rectangle; flags: CellRendererState): gboolean {.cdecl.}
    start_editing*: proc (cell: CellRenderer; event: gdk3.Event; 
                          widget: Widget; path: cstring; 
                          background_area: gdk3.Rectangle; 
                          cell_area: gdk3.Rectangle; 
                          flags: CellRendererState): CellEditable {.cdecl.}
    editing_canceled*: proc (cell: CellRenderer) {.cdecl.}
    editing_started*: proc (cell: CellRenderer; 
                            editable: CellEditable; path: cstring) {.cdecl.}
    priv21: ptr CellRendererClassPrivateObj
    gtk_reserved172: proc () {.cdecl.}
    gtk_reserved173: proc () {.cdecl.}
    gtk_reserved174: proc () {.cdecl.}

proc cell_renderer_get_type*(): GType {.
    importc: "gtk_cell_renderer_get_type", libgtk.}
proc get_request_mode*(cell: CellRenderer): SizeRequestMode {.
    importc: "gtk_cell_renderer_get_request_mode", libgtk.}
proc request_mode*(cell: CellRenderer): SizeRequestMode {.
    importc: "gtk_cell_renderer_get_request_mode", libgtk.}
proc get_preferred_width*(cell: CellRenderer; 
    widget: Widget; minimum_size: var gint; natural_size: var gint) {.
    importc: "gtk_cell_renderer_get_preferred_width", libgtk.}
proc get_preferred_height_for_width*(
    cell: CellRenderer; widget: Widget; width: gint; 
    minimum_height: var gint; natural_height: var gint) {.
    importc: "gtk_cell_renderer_get_preferred_height_for_width", libgtk.}
proc get_preferred_height*(cell: CellRenderer; 
    widget: Widget; minimum_size: var gint; natural_size: var gint) {.
    importc: "gtk_cell_renderer_get_preferred_height", libgtk.}
proc get_preferred_width_for_height*(
    cell: CellRenderer; widget: Widget; height: gint; 
    minimum_width: var gint; natural_width: var gint) {.
    importc: "gtk_cell_renderer_get_preferred_width_for_height", libgtk.}
proc get_preferred_size*(cell: CellRenderer; 
    widget: Widget; minimum_size: var RequisitionObj; 
    natural_size: var RequisitionObj) {.
    importc: "gtk_cell_renderer_get_preferred_size", libgtk.}
proc get_aligned_area*(cell: CellRenderer; 
    widget: Widget; flags: CellRendererState; 
    cell_area: gdk3.Rectangle; aligned_area: var gdk3.RectangleObj) {.
    importc: "gtk_cell_renderer_get_aligned_area", libgtk.}
proc get_size*(cell: CellRenderer; 
                                 widget: Widget; 
                                 cell_area: gdk3.Rectangle; 
                                 x_offset: var gint; y_offset: var gint; 
                                 width: var gint; height: var gint) {.
    importc: "gtk_cell_renderer_get_size", libgtk.}
proc render*(cell: CellRenderer; cr: cairo.Context; 
                               widget: Widget; 
                               background_area: gdk3.Rectangle; 
                               cell_area: gdk3.Rectangle; 
                               flags: CellRendererState) {.
    importc: "gtk_cell_renderer_render", libgtk.}
proc activate*(cell: CellRenderer; 
                                 event: gdk3.Event; widget: Widget; 
                                 path: cstring; 
                                 background_area: gdk3.Rectangle; 
                                 cell_area: gdk3.Rectangle; 
                                 flags: CellRendererState): gboolean {.
    importc: "gtk_cell_renderer_activate", libgtk.}
proc start_editing*(cell: CellRenderer; 
                                      event: gdk3.Event; 
                                      widget: Widget; path: cstring; 
                                      background_area: gdk3.Rectangle; 
                                      cell_area: gdk3.Rectangle; 
                                      flags: CellRendererState): CellEditable {.
    importc: "gtk_cell_renderer_start_editing", libgtk.}
proc set_fixed_size*(cell: CellRenderer; width: gint; 
    height: gint) {.importc: "gtk_cell_renderer_set_fixed_size", libgtk.}
proc `fixed_size=`*(cell: CellRenderer; width: gint; 
    height: gint) {.importc: "gtk_cell_renderer_set_fixed_size", libgtk.}
proc get_fixed_size*(cell: CellRenderer; 
    width: var gint; height: var gint) {.
    importc: "gtk_cell_renderer_get_fixed_size", libgtk.}
proc set_alignment*(cell: CellRenderer; 
                                      xalign: gfloat; yalign: gfloat) {.
    importc: "gtk_cell_renderer_set_alignment", libgtk.}
proc `alignment=`*(cell: CellRenderer; 
                                      xalign: gfloat; yalign: gfloat) {.
    importc: "gtk_cell_renderer_set_alignment", libgtk.}
proc get_alignment*(cell: CellRenderer; 
                                      xalign: var gfloat; yalign: var gfloat) {.
    importc: "gtk_cell_renderer_get_alignment", libgtk.}
proc set_padding*(cell: CellRenderer; xpad: gint; 
                                    ypad: gint) {.
    importc: "gtk_cell_renderer_set_padding", libgtk.}
proc `padding=`*(cell: CellRenderer; xpad: gint; 
                                    ypad: gint) {.
    importc: "gtk_cell_renderer_set_padding", libgtk.}
proc get_padding*(cell: CellRenderer; xpad: var gint; 
                                    ypad: var gint) {.
    importc: "gtk_cell_renderer_get_padding", libgtk.}
proc set_visible*(cell: CellRenderer; 
                                    visible: gboolean) {.
    importc: "gtk_cell_renderer_set_visible", libgtk.}
proc `visible=`*(cell: CellRenderer; 
                                    visible: gboolean) {.
    importc: "gtk_cell_renderer_set_visible", libgtk.}
proc get_visible*(cell: CellRenderer): gboolean {.
    importc: "gtk_cell_renderer_get_visible", libgtk.}
proc visible*(cell: CellRenderer): gboolean {.
    importc: "gtk_cell_renderer_get_visible", libgtk.}
proc set_sensitive*(cell: CellRenderer; 
                                      sensitive: gboolean) {.
    importc: "gtk_cell_renderer_set_sensitive", libgtk.}
proc `sensitive=`*(cell: CellRenderer; 
                                      sensitive: gboolean) {.
    importc: "gtk_cell_renderer_set_sensitive", libgtk.}
proc get_sensitive*(cell: CellRenderer): gboolean {.
    importc: "gtk_cell_renderer_get_sensitive", libgtk.}
proc sensitive*(cell: CellRenderer): gboolean {.
    importc: "gtk_cell_renderer_get_sensitive", libgtk.}
proc is_activatable*(cell: CellRenderer): gboolean {.
    importc: "gtk_cell_renderer_is_activatable", libgtk.}
proc stop_editing*(cell: CellRenderer; 
                                     canceled: gboolean) {.
    importc: "gtk_cell_renderer_stop_editing", libgtk.}

proc get_state*(cell: CellRenderer; 
                                  widget: Widget; 
                                  cell_state: CellRendererState): StateFlags {.
    importc: "gtk_cell_renderer_get_state", libgtk.}

proc state*(cell: CellRenderer; 
                                  widget: Widget; 
                                  cell_state: CellRendererState): StateFlags {.
    importc: "gtk_cell_renderer_get_state", libgtk.}
proc set_accessible_type*(
    renderer_class: CellRendererClass; `type`: GType) {.
    importc: "gtk_cell_renderer_class_set_accessible_type", libgtk.}
proc `accessible_type=`*(
    renderer_class: CellRendererClass; `type`: GType) {.
    importc: "gtk_cell_renderer_class_set_accessible_type", libgtk.}

template gtk_tree_sortable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_sortable_get_type(), TreeSortableObj))

template gtk_tree_sortable_class*(obj: expr): expr = 
  (g_type_check_class_cast(obj, tree_sortable_get_type(), TreeSortableIfaceObj))

template gtk_is_tree_sortable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_sortable_get_type()))

template gtk_tree_sortable_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, tree_sortable_get_type(), 
                                 TreeSortableIfaceObj))

const 
  TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID* = (- 1)
const 
  TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID* = (- 2)
type 
  TreeSortable* =  ptr TreeSortableObj
  TreeSortablePtr* = ptr TreeSortableObj
  TreeSortableObj* = object 
  
type 
  TreeIterCompareFunc* = proc (model: TreeModel; a: TreeIter; 
                                  b: TreeIter; user_data: gpointer): gint {.cdecl.}
type 
  TreeSortableIface* =  ptr TreeSortableIfaceObj
  TreeSortableIfacePtr* = ptr TreeSortableIfaceObj
  TreeSortableIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    sort_column_changed*: proc (sortable: TreeSortable) {.cdecl.}
    get_sort_column_id*: proc (sortable: TreeSortable; 
                               sort_column_id: var gint; 
                               order: var SortType): gboolean {.cdecl.}
    set_sort_column_id*: proc (sortable: TreeSortable; 
                               sort_column_id: gint; order: SortType) {.cdecl.}
    set_sort_func*: proc (sortable: TreeSortable; sort_column_id: gint; 
                          sort_func: TreeIterCompareFunc; 
                          user_data: gpointer; destroy: GDestroyNotify) {.cdecl.}
    set_default_sort_func*: proc (sortable: TreeSortable; 
                                  sort_func: TreeIterCompareFunc; 
                                  user_data: gpointer; destroy: GDestroyNotify) {.cdecl.}
    has_default_sort_func*: proc (sortable: TreeSortable): gboolean {.cdecl.}

proc tree_sortable_get_type*(): GType {.
    importc: "gtk_tree_sortable_get_type", libgtk.}
proc sort_column_changed*(sortable: TreeSortable) {.
    importc: "gtk_tree_sortable_sort_column_changed", libgtk.}
proc get_sort_column_id*(sortable: TreeSortable; 
    sort_column_id: var gint; order: var SortType): gboolean {.
    importc: "gtk_tree_sortable_get_sort_column_id", libgtk.}
proc sort_column_id*(sortable: TreeSortable; 
    sort_column_id: var gint; order: var SortType): gboolean {.
    importc: "gtk_tree_sortable_get_sort_column_id", libgtk.}
proc set_sort_column_id*(sortable: TreeSortable; 
    sort_column_id: gint; order: SortType) {.
    importc: "gtk_tree_sortable_set_sort_column_id", libgtk.}
proc `sort_column_id=`*(sortable: TreeSortable; 
    sort_column_id: gint; order: SortType) {.
    importc: "gtk_tree_sortable_set_sort_column_id", libgtk.}
proc set_sort_func*(sortable: TreeSortable; 
                                      sort_column_id: gint; 
                                      sort_func: TreeIterCompareFunc; 
                                      user_data: gpointer; 
                                      destroy: GDestroyNotify) {.
    importc: "gtk_tree_sortable_set_sort_func", libgtk.}
proc `sort_func=`*(sortable: TreeSortable; 
                                      sort_column_id: gint; 
                                      sort_func: TreeIterCompareFunc; 
                                      user_data: gpointer; 
                                      destroy: GDestroyNotify) {.
    importc: "gtk_tree_sortable_set_sort_func", libgtk.}
proc set_default_sort_func*(sortable: TreeSortable; 
    sort_func: TreeIterCompareFunc; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_sortable_set_default_sort_func", 
                               libgtk.}
proc `default_sort_func=`*(sortable: TreeSortable; 
    sort_func: TreeIterCompareFunc; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_sortable_set_default_sort_func", 
                               libgtk.}
proc has_default_sort_func*(sortable: TreeSortable): gboolean {.
    importc: "gtk_tree_sortable_has_default_sort_func", libgtk.}

template gtk_cell_area*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_area_get_type(), CellAreaObj))

template gtk_cell_area_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_area_get_type(), CellAreaClassObj))

template gtk_is_cell_area*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_area_get_type()))

template gtk_is_cell_area_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_area_get_type()))

template gtk_cell_area_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_area_get_type(), CellAreaClassObj))

type 
  CellAreaPrivateObj = object 
  
template gtk_cell_area_warn_invalid_cell_property_id*(
    obj, property_id, pspec: expr): expr = 
  G_OBJECT_WARN_INVALID_PSPEC(obj, "cell property id", property_id, 
                              (pspec))

type 
  CellCallback* = proc (renderer: CellRenderer; data: gpointer): gboolean {.cdecl.}
type 
  CellAllocCallback* = proc (renderer: CellRenderer; 
                                cell_area: gdk3.Rectangle; 
                                cell_background: gdk3.Rectangle; 
                                data: gpointer): gboolean {.cdecl.}
type 
  CellArea* =  ptr CellAreaObj
  CellAreaPtr* = ptr CellAreaObj
  CellAreaObj = object of gobject.GInitiallyUnownedObj
    priv22: ptr CellAreaPrivateObj
type 
  CellAreaContextPrivateObj = object 
  
type 
  CellAreaContext* =  ptr CellAreaContextObj
  CellAreaContextPtr* = ptr CellAreaContextObj
  CellAreaContextObj*{.final.} = object of GObjectObj
    priv43: ptr CellAreaContextPrivateObj

type 
  CellAreaClass* =  ptr CellAreaClassObj
  CellAreaClassPtr* = ptr CellAreaClassObj
  CellAreaClassObj = object of gobject.GInitiallyUnownedClassObj
    add*: proc (area: CellArea; renderer: CellRenderer) {.cdecl.}
    remove*: proc (area: CellArea; renderer: CellRenderer) {.cdecl.}
    foreach*: proc (area: CellArea; callback: CellCallback; 
                    callback_data: gpointer) {.cdecl.}
    foreach_alloc*: proc (area: CellArea; 
                          context: CellAreaContext; 
                          widget: Widget; cell_area: gdk3.Rectangle; 
                          background_area: gdk3.Rectangle; 
                          callback: CellAllocCallback; 
                          callback_data: gpointer) {.cdecl.}
    event*: proc (area: CellArea; context: CellAreaContext; 
                  widget: Widget; event: gdk3.Event; 
                  cell_area: gdk3.Rectangle; flags: CellRendererState): gint {.cdecl.}
    render*: proc (area: CellArea; context: CellAreaContext; 
                   widget: Widget; cr: cairo.Context; 
                   background_area: gdk3.Rectangle; 
                   cell_area: gdk3.Rectangle; flags: CellRendererState; 
                   paint_focus: gboolean) {.cdecl.}
    apply_attributes*: proc (area: CellArea; 
                             tree_model: TreeModel; 
                             iter: TreeIter; is_expander: gboolean; 
                             is_expanded: gboolean) {.cdecl.}
    create_context*: proc (area: CellArea): CellAreaContext {.cdecl.}
    copy_context*: proc (area: CellArea; 
                         context: CellAreaContext): CellAreaContext {.cdecl.}
    get_request_mode*: proc (area: CellArea): SizeRequestMode {.cdecl.}
    get_preferred_width*: proc (area: CellArea; 
                                context: CellAreaContext; 
                                widget: Widget; 
                                minimum_width: var gint; 
                                natural_width: var gint) {.cdecl.}
    get_preferred_height_for_width*: proc (area: CellArea; 
        context: CellAreaContext; widget: Widget; width: gint; 
        minimum_height: var gint; natural_height: var gint) {.cdecl.}
    get_preferred_height*: proc (area: CellArea; 
                                 context: CellAreaContext; 
                                 widget: Widget; 
                                 minimum_height: var gint; 
                                 natural_height: var gint) {.cdecl.}
    get_preferred_width_for_height*: proc (area: CellArea; 
        context: CellAreaContext; widget: Widget; height: gint; 
        minimum_width: var gint; natural_width: var gint) {.cdecl.}
    set_cell_property*: proc (area: CellArea; 
                              renderer: CellRenderer; 
                              property_id: guint; value: gobject.GValue; 
                              pspec: gobject.GParamSpec) {.cdecl.}
    get_cell_property*: proc (area: CellArea; 
                              renderer: CellRenderer; 
                              property_id: guint; value: gobject.GValue; 
                              pspec: gobject.GParamSpec) {.cdecl.}
    focus*: proc (area: CellArea; direction: DirectionType): gboolean {.cdecl.}
    is_activatable*: proc (area: CellArea): gboolean {.cdecl.}
    activate*: proc (area: CellArea; context: CellAreaContext; 
                     widget: Widget; cell_area: gdk3.Rectangle; 
                     flags: CellRendererState; edit_only: gboolean): gboolean {.cdecl.}
    gtk_reserved181: proc () {.cdecl.}
    gtk_reserved182: proc () {.cdecl.}
    gtk_reserved183: proc () {.cdecl.}
    gtk_reserved184: proc () {.cdecl.}
    gtk_reserved185: proc () {.cdecl.}
    gtk_reserved186: proc () {.cdecl.}
    gtk_reserved187: proc () {.cdecl.}
    gtk_reserved188: proc () {.cdecl.}

proc cell_area_get_type*(): GType {.importc: "gtk_cell_area_get_type", 
    libgtk.}
proc add*(area: CellArea; renderer: CellRenderer) {.
    importc: "gtk_cell_area_add", libgtk.}
proc remove*(area: CellArea; 
                           renderer: CellRenderer) {.
    importc: "gtk_cell_area_remove", libgtk.}
proc has_renderer*(area: CellArea; 
                                 renderer: CellRenderer): gboolean {.
    importc: "gtk_cell_area_has_renderer", libgtk.}
proc foreach*(area: CellArea; callback: CellCallback; 
                            callback_data: gpointer) {.
    importc: "gtk_cell_area_foreach", libgtk.}
proc foreach_alloc*(area: CellArea; 
                                  context: CellAreaContext; 
                                  widget: Widget; 
                                  cell_area: gdk3.Rectangle; 
                                  background_area: gdk3.Rectangle; 
                                  callback: CellAllocCallback; 
                                  callback_data: gpointer) {.
    importc: "gtk_cell_area_foreach_alloc", libgtk.}
proc event*(area: CellArea; 
                          context: CellAreaContext; 
                          widget: Widget; event: gdk3.Event; 
                          cell_area: gdk3.Rectangle; 
                          flags: CellRendererState): gint {.
    importc: "gtk_cell_area_event", libgtk.}
proc render*(area: CellArea; 
                           context: CellAreaContext; 
                           widget: Widget; cr: cairo.Context; 
                           background_area: gdk3.Rectangle; 
                           cell_area: gdk3.Rectangle; 
                           flags: CellRendererState; paint_focus: gboolean) {.
    importc: "gtk_cell_area_render", libgtk.}
proc get_cell_allocation*(area: CellArea; 
    context: CellAreaContext; widget: Widget; 
    renderer: CellRenderer; cell_area: gdk3.Rectangle; 
    allocation: var gdk3.RectangleObj) {.importc: "gtk_cell_area_get_cell_allocation", 
                                    libgtk.}
proc get_cell_at_position*(area: CellArea; 
    context: CellAreaContext; widget: Widget; 
    cell_area: gdk3.Rectangle; x: gint; y: gint; 
    alloc_area: gdk3.Rectangle): CellRenderer {.
    importc: "gtk_cell_area_get_cell_at_position", libgtk.}
proc cell_at_position*(area: CellArea; 
    context: CellAreaContext; widget: Widget; 
    cell_area: gdk3.Rectangle; x: gint; y: gint; 
    alloc_area: gdk3.Rectangle): CellRenderer {.
    importc: "gtk_cell_area_get_cell_at_position", libgtk.}
proc create_context*(area: CellArea): CellAreaContext {.
    importc: "gtk_cell_area_create_context", libgtk.}
proc copy_context*(area: CellArea; 
                                 context: CellAreaContext): CellAreaContext {.
    importc: "gtk_cell_area_copy_context", libgtk.}
proc get_request_mode*(area: CellArea): SizeRequestMode {.
    importc: "gtk_cell_area_get_request_mode", libgtk.}
proc request_mode*(area: CellArea): SizeRequestMode {.
    importc: "gtk_cell_area_get_request_mode", libgtk.}
proc get_preferred_width*(area: CellArea; 
    context: CellAreaContext; widget: Widget; 
    minimum_width: var gint; natural_width: var gint) {.
    importc: "gtk_cell_area_get_preferred_width", libgtk.}
proc get_preferred_height_for_width*(area: CellArea; 
    context: CellAreaContext; widget: Widget; width: gint; 
    minimum_height: var gint; natural_height: var gint) {.
    importc: "gtk_cell_area_get_preferred_height_for_width", libgtk.}
proc get_preferred_height*(area: CellArea; 
    context: CellAreaContext; widget: Widget; 
    minimum_height: var gint; natural_height: var gint) {.
    importc: "gtk_cell_area_get_preferred_height", libgtk.}
proc get_preferred_width_for_height*(area: CellArea; 
    context: CellAreaContext; widget: Widget; height: gint; 
    minimum_width: var gint; natural_width: var gint) {.
    importc: "gtk_cell_area_get_preferred_width_for_height", libgtk.}
proc get_current_path_string*(area: CellArea): cstring {.
    importc: "gtk_cell_area_get_current_path_string", libgtk.}
proc current_path_string*(area: CellArea): cstring {.
    importc: "gtk_cell_area_get_current_path_string", libgtk.}
proc apply_attributes*(area: CellArea; 
                                     tree_model: TreeModel; 
                                     iter: TreeIter; 
                                     is_expander: gboolean; 
                                     is_expanded: gboolean) {.
    importc: "gtk_cell_area_apply_attributes", libgtk.}
proc attribute_connect*(area: CellArea; 
                                      renderer: CellRenderer; 
                                      attribute: cstring; column: gint) {.
    importc: "gtk_cell_area_attribute_connect", libgtk.}
proc attribute_disconnect*(area: CellArea; 
    renderer: CellRenderer; attribute: cstring) {.
    importc: "gtk_cell_area_attribute_disconnect", libgtk.}
proc attribute_get_column*(area: CellArea; 
    renderer: CellRenderer; attribute: cstring): gint {.
    importc: "gtk_cell_area_attribute_get_column", libgtk.}
proc install_cell_property*(aclass: CellAreaClass; 
    property_id: guint; pspec: gobject.GParamSpec) {.
    importc: "gtk_cell_area_class_install_cell_property", libgtk.}
proc find_cell_property*(aclass: CellAreaClass; 
    property_name: cstring): gobject.GParamSpec {.
    importc: "gtk_cell_area_class_find_cell_property", libgtk.}
proc list_cell_properties*(aclass: CellAreaClass; 
    n_properties: var guint): var gobject.GParamSpec {.
    importc: "gtk_cell_area_class_list_cell_properties", libgtk.}
proc add_with_properties*(area: CellArea; 
    renderer: CellRenderer; first_prop_name: cstring) {.varargs, 
    importc: "gtk_cell_area_add_with_properties", libgtk.}
proc cell_set*(area: CellArea; 
                             renderer: CellRenderer; 
                             first_prop_name: cstring) {.varargs, 
    importc: "gtk_cell_area_cell_set", libgtk.}
proc cell_get*(area: CellArea; 
                             renderer: CellRenderer; 
                             first_prop_name: cstring) {.varargs, 
    importc: "gtk_cell_area_cell_get", libgtk.}

discard """ proc "cell_set_valist*(area: CellArea; 
                                    renderer: CellRenderer; 
                                    first_property_name: cstring; 
                                    var_args: va_list) {.
    importc: "gtk_cell_area_cell_set_valist", libgtk.}"""

discard """ proc "cell_get_valist*(area: CellArea; 
                                    renderer: CellRenderer; 
                                    first_property_name: cstring; 
                                    var_args: va_list) {.
    importc: "gtk_cell_area_cell_get_valist", libgtk.}"""

proc cell_set_property*(area: CellArea; 
                                      renderer: CellRenderer; 
                                      property_name: cstring; 
                                      value: gobject.GValue) {.
    importc: "gtk_cell_area_cell_set_property", libgtk.}
proc cell_get_property*(area: CellArea; 
                                      renderer: CellRenderer; 
                                      property_name: cstring; 
                                      value: gobject.GValue) {.
    importc: "gtk_cell_area_cell_get_property", libgtk.}
proc is_activatable*(area: CellArea): gboolean {.
    importc: "gtk_cell_area_is_activatable", libgtk.}
proc activate*(area: CellArea; 
                             context: CellAreaContext; 
                             widget: Widget; 
                             cell_area: gdk3.Rectangle; 
                             flags: CellRendererState; edit_only: gboolean): gboolean {.
    importc: "gtk_cell_area_activate", libgtk.}
proc focus*(area: CellArea; direction: DirectionType): gboolean {.
    importc: "gtk_cell_area_focus", libgtk.}
proc set_focus_cell*(area: CellArea; 
                                   renderer: CellRenderer) {.
    importc: "gtk_cell_area_set_focus_cell", libgtk.}
proc `focus_cell=`*(area: CellArea; 
                                   renderer: CellRenderer) {.
    importc: "gtk_cell_area_set_focus_cell", libgtk.}
proc get_focus_cell*(area: CellArea): CellRenderer {.
    importc: "gtk_cell_area_get_focus_cell", libgtk.}
proc focus_cell*(area: CellArea): CellRenderer {.
    importc: "gtk_cell_area_get_focus_cell", libgtk.}
proc add_focus_sibling*(area: CellArea; 
                                      renderer: CellRenderer; 
                                      sibling: CellRenderer) {.
    importc: "gtk_cell_area_add_focus_sibling", libgtk.}
proc remove_focus_sibling*(area: CellArea; 
    renderer: CellRenderer; sibling: CellRenderer) {.
    importc: "gtk_cell_area_remove_focus_sibling", libgtk.}
proc is_focus_sibling*(area: CellArea; 
                                     renderer: CellRenderer; 
                                     sibling: CellRenderer): gboolean {.
    importc: "gtk_cell_area_is_focus_sibling", libgtk.}
proc get_focus_siblings*(area: CellArea; 
    renderer: CellRenderer): glib.GList {.
    importc: "gtk_cell_area_get_focus_siblings", libgtk.}
proc focus_siblings*(area: CellArea; 
    renderer: CellRenderer): glib.GList {.
    importc: "gtk_cell_area_get_focus_siblings", libgtk.}
proc get_focus_from_sibling*(area: CellArea; 
    renderer: CellRenderer): CellRenderer {.
    importc: "gtk_cell_area_get_focus_from_sibling", libgtk.}
proc focus_from_sibling*(area: CellArea; 
    renderer: CellRenderer): CellRenderer {.
    importc: "gtk_cell_area_get_focus_from_sibling", libgtk.}
proc get_edited_cell*(area: CellArea): CellRenderer {.
    importc: "gtk_cell_area_get_edited_cell", libgtk.}
proc edited_cell*(area: CellArea): CellRenderer {.
    importc: "gtk_cell_area_get_edited_cell", libgtk.}
proc get_edit_widget*(area: CellArea): CellEditable {.
    importc: "gtk_cell_area_get_edit_widget", libgtk.}
proc edit_widget*(area: CellArea): CellEditable {.
    importc: "gtk_cell_area_get_edit_widget", libgtk.}
proc activate_cell*(area: CellArea; 
                                  widget: Widget; 
                                  renderer: CellRenderer; 
                                  event: gdk3.Event; 
                                  cell_area: gdk3.Rectangle; 
                                  flags: CellRendererState): gboolean {.
    importc: "gtk_cell_area_activate_cell", libgtk.}
proc stop_editing*(area: CellArea; canceled: gboolean) {.
    importc: "gtk_cell_area_stop_editing", libgtk.}
proc inner_cell_area*(area: CellArea; 
                                    widget: Widget; 
                                    cell_area: gdk3.Rectangle; 
                                    inner_area: gdk3.Rectangle) {.
    importc: "gtk_cell_area_inner_cell_area", libgtk.}
proc request_renderer*(area: CellArea; 
                                     renderer: CellRenderer; 
                                     orientation: Orientation; 
                                     widget: Widget; for_size: gint; 
                                     minimum_size: var gint; 
                                     natural_size: var gint) {.
    importc: "gtk_cell_area_request_renderer", libgtk.}

template gtk_tree_view_column*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_view_column_get_type(), 
                              TreeViewColumnObj))

template gtk_tree_view_column_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_view_column_get_type(), 
                           TreeViewColumnClassObj))

template gtk_is_tree_view_column*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_view_column_get_type()))

template gtk_is_tree_view_column_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_view_column_get_type()))

template gtk_tree_view_column_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_view_column_get_type(), 
                             TreeViewColumnClassObj))

type 
  TreeViewPrivateObj = object 
  
type 
  TreeView* =  ptr TreeViewObj
  TreeViewPtr* = ptr TreeViewObj
  TreeViewObj*{.final.} = object of ContainerObj
    priv31: ptr TreeViewPrivateObj
type 
  TreeViewColumnPrivateObj = object 
  
type 
  TreeViewColumnSizing* {.size: sizeof(cint), pure.} = enum 
    GROW_ONLY, AUTOSIZE, 
    FIXED
type 
  TreeCellDataFunc* = proc (tree_column: TreeViewColumn; 
                               cell: CellRenderer; 
                               tree_model: TreeModel; 
                               iter: TreeIter; data: gpointer) {.cdecl.}
  TreeViewColumn* =  ptr TreeViewColumnObj
  TreeViewColumnPtr* = ptr TreeViewColumnObj
  TreeViewColumnObj*{.final.} = object of gobject.GInitiallyUnownedObj
    priv23: ptr TreeViewColumnPrivateObj

type 
  TreeViewColumnClass* =  ptr TreeViewColumnClassObj
  TreeViewColumnClassPtr* = ptr TreeViewColumnClassObj
  TreeViewColumnClassObj*{.final.} = object of gobject.GInitiallyUnownedClassObj
    clicked*: proc (tree_column: TreeViewColumn) {.cdecl.}
    gtk_reserved191: proc () {.cdecl.}
    gtk_reserved192: proc () {.cdecl.}
    gtk_reserved193: proc () {.cdecl.}
    gtk_reserved194: proc () {.cdecl.}

proc tree_view_column_get_type*(): GType {.
    importc: "gtk_tree_view_column_get_type", libgtk.}
proc tree_view_column_new*(): TreeViewColumn {.
    importc: "gtk_tree_view_column_new", libgtk.}
proc tree_view_column_new_with_area*(area: CellArea): TreeViewColumn {.
    importc: "gtk_tree_view_column_new_with_area", libgtk.}
proc tree_view_column_new_with_attributes*(title: cstring; 
    cell: CellRenderer): TreeViewColumn {.varargs, 
    importc: "gtk_tree_view_column_new_with_attributes", libgtk.}
proc pack_start*(tree_column: TreeViewColumn; 
                                      cell: CellRenderer; 
                                      expand: gboolean) {.
    importc: "gtk_tree_view_column_pack_start", libgtk.}
proc pack_end*(tree_column: TreeViewColumn; 
                                    cell: CellRenderer; 
                                    expand: gboolean) {.
    importc: "gtk_tree_view_column_pack_end", libgtk.}
proc clear*(tree_column: TreeViewColumn) {.
    importc: "gtk_tree_view_column_clear", libgtk.}
proc add_attribute*(tree_column: TreeViewColumn; 
    cell_renderer: CellRenderer; attribute: cstring; column: gint) {.
    importc: "gtk_tree_view_column_add_attribute", libgtk.}
proc set_attributes*(tree_column: TreeViewColumn; 
    cell_renderer: CellRenderer) {.varargs, 
    importc: "gtk_tree_view_column_set_attributes", libgtk.}
proc `attributes=`*(tree_column: TreeViewColumn; 
    cell_renderer: CellRenderer) {.varargs, 
    importc: "gtk_tree_view_column_set_attributes", libgtk.}
proc set_cell_data_func*(
    tree_column: TreeViewColumn; cell_renderer: CellRenderer; 
 fn: TreeCellDataFunc; func_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_column_set_cell_data_func", libgtk.}
proc `cell_data_func=`*(
    tree_column: TreeViewColumn; cell_renderer: CellRenderer; 
 fn: TreeCellDataFunc; func_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_column_set_cell_data_func", libgtk.}
proc clear_attributes*(
    tree_column: TreeViewColumn; cell_renderer: CellRenderer) {.
    importc: "gtk_tree_view_column_clear_attributes", libgtk.}
proc set_spacing*(tree_column: TreeViewColumn; 
    spacing: gint) {.importc: "gtk_tree_view_column_set_spacing", libgtk.}
proc `spacing=`*(tree_column: TreeViewColumn; 
    spacing: gint) {.importc: "gtk_tree_view_column_set_spacing", libgtk.}
proc get_spacing*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_spacing", libgtk.}
proc spacing*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_spacing", libgtk.}
proc set_visible*(tree_column: TreeViewColumn; 
    visible: gboolean) {.importc: "gtk_tree_view_column_set_visible", 
                         libgtk.}
proc `visible=`*(tree_column: TreeViewColumn; 
    visible: gboolean) {.importc: "gtk_tree_view_column_set_visible", 
                         libgtk.}
proc get_visible*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_visible", libgtk.}
proc visible*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_visible", libgtk.}
proc set_resizable*(tree_column: TreeViewColumn; 
    resizable: gboolean) {.importc: "gtk_tree_view_column_set_resizable", 
                           libgtk.}
proc `resizable=`*(tree_column: TreeViewColumn; 
    resizable: gboolean) {.importc: "gtk_tree_view_column_set_resizable", 
                           libgtk.}
proc get_resizable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_resizable", libgtk.}
proc resizable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_resizable", libgtk.}
proc set_sizing*(tree_column: TreeViewColumn; 
                                      `type`: TreeViewColumnSizing) {.
    importc: "gtk_tree_view_column_set_sizing", libgtk.}
proc `sizing=`*(tree_column: TreeViewColumn; 
                                      `type`: TreeViewColumnSizing) {.
    importc: "gtk_tree_view_column_set_sizing", libgtk.}
proc get_sizing*(tree_column: TreeViewColumn): TreeViewColumnSizing {.
    importc: "gtk_tree_view_column_get_sizing", libgtk.}
proc sizing*(tree_column: TreeViewColumn): TreeViewColumnSizing {.
    importc: "gtk_tree_view_column_get_sizing", libgtk.}
proc get_x_offset*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_x_offset", libgtk.}
proc x_offset*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_x_offset", libgtk.}
proc get_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_width", libgtk.}
proc width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_width", libgtk.}
proc get_fixed_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_fixed_width", libgtk.}
proc fixed_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_fixed_width", libgtk.}
proc set_fixed_width*(tree_column: TreeViewColumn; 
    fixed_width: gint) {.importc: "gtk_tree_view_column_set_fixed_width", 
                         libgtk.}
proc `fixed_width=`*(tree_column: TreeViewColumn; 
    fixed_width: gint) {.importc: "gtk_tree_view_column_set_fixed_width", 
                         libgtk.}
proc set_min_width*(tree_column: TreeViewColumn; 
    min_width: gint) {.importc: "gtk_tree_view_column_set_min_width", 
                       libgtk.}
proc `min_width=`*(tree_column: TreeViewColumn; 
    min_width: gint) {.importc: "gtk_tree_view_column_set_min_width", 
                       libgtk.}
proc get_min_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_min_width", libgtk.}
proc min_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_min_width", libgtk.}
proc set_max_width*(tree_column: TreeViewColumn; 
    max_width: gint) {.importc: "gtk_tree_view_column_set_max_width", 
                       libgtk.}
proc `max_width=`*(tree_column: TreeViewColumn; 
    max_width: gint) {.importc: "gtk_tree_view_column_set_max_width", 
                       libgtk.}
proc get_max_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_max_width", libgtk.}
proc max_width*(tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_max_width", libgtk.}
proc clicked*(tree_column: TreeViewColumn) {.
    importc: "gtk_tree_view_column_clicked", libgtk.}
proc set_title*(tree_column: TreeViewColumn; 
                                     title: cstring) {.
    importc: "gtk_tree_view_column_set_title", libgtk.}
proc `title=`*(tree_column: TreeViewColumn; 
                                     title: cstring) {.
    importc: "gtk_tree_view_column_set_title", libgtk.}
proc get_title*(tree_column: TreeViewColumn): cstring {.
    importc: "gtk_tree_view_column_get_title", libgtk.}
proc title*(tree_column: TreeViewColumn): cstring {.
    importc: "gtk_tree_view_column_get_title", libgtk.}
proc set_expand*(tree_column: TreeViewColumn; 
                                      expand: gboolean) {.
    importc: "gtk_tree_view_column_set_expand", libgtk.}
proc `expand=`*(tree_column: TreeViewColumn; 
                                      expand: gboolean) {.
    importc: "gtk_tree_view_column_set_expand", libgtk.}
proc get_expand*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_expand", libgtk.}
proc expand*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_expand", libgtk.}
proc set_clickable*(tree_column: TreeViewColumn; 
    clickable: gboolean) {.importc: "gtk_tree_view_column_set_clickable", 
                           libgtk.}
proc `clickable=`*(tree_column: TreeViewColumn; 
    clickable: gboolean) {.importc: "gtk_tree_view_column_set_clickable", 
                           libgtk.}
proc get_clickable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_clickable", libgtk.}
proc clickable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_clickable", libgtk.}
proc set_widget*(tree_column: TreeViewColumn; 
                                      widget: Widget) {.
    importc: "gtk_tree_view_column_set_widget", libgtk.}
proc `widget=`*(tree_column: TreeViewColumn; 
                                      widget: Widget) {.
    importc: "gtk_tree_view_column_set_widget", libgtk.}
proc get_widget*(tree_column: TreeViewColumn): Widget {.
    importc: "gtk_tree_view_column_get_widget", libgtk.}
proc widget*(tree_column: TreeViewColumn): Widget {.
    importc: "gtk_tree_view_column_get_widget", libgtk.}
proc set_alignment*(tree_column: TreeViewColumn; 
    xalign: gfloat) {.importc: "gtk_tree_view_column_set_alignment", 
                      libgtk.}
proc `alignment=`*(tree_column: TreeViewColumn; 
    xalign: gfloat) {.importc: "gtk_tree_view_column_set_alignment", 
                      libgtk.}
proc get_alignment*(tree_column: TreeViewColumn): gfloat {.
    importc: "gtk_tree_view_column_get_alignment", libgtk.}
proc alignment*(tree_column: TreeViewColumn): gfloat {.
    importc: "gtk_tree_view_column_get_alignment", libgtk.}
proc set_reorderable*(tree_column: TreeViewColumn; 
    reorderable: gboolean) {.importc: "gtk_tree_view_column_set_reorderable", 
                             libgtk.}
proc `reorderable=`*(tree_column: TreeViewColumn; 
    reorderable: gboolean) {.importc: "gtk_tree_view_column_set_reorderable", 
                             libgtk.}
proc get_reorderable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_reorderable", libgtk.}
proc reorderable*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_reorderable", libgtk.}
proc set_sort_column_id*(
    tree_column: TreeViewColumn; sort_column_id: gint) {.
    importc: "gtk_tree_view_column_set_sort_column_id", libgtk.}
proc `sort_column_id=`*(
    tree_column: TreeViewColumn; sort_column_id: gint) {.
    importc: "gtk_tree_view_column_set_sort_column_id", libgtk.}
proc get_sort_column_id*(
    tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_sort_column_id", libgtk.}
proc sort_column_id*(
    tree_column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_column_get_sort_column_id", libgtk.}
proc set_sort_indicator*(
    tree_column: TreeViewColumn; setting: gboolean) {.
    importc: "gtk_tree_view_column_set_sort_indicator", libgtk.}
proc `sort_indicator=`*(
    tree_column: TreeViewColumn; setting: gboolean) {.
    importc: "gtk_tree_view_column_set_sort_indicator", libgtk.}
proc get_sort_indicator*(
    tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_sort_indicator", libgtk.}
proc sort_indicator*(
    tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_get_sort_indicator", libgtk.}
proc set_sort_order*(tree_column: TreeViewColumn; 
    order: SortType) {.importc: "gtk_tree_view_column_set_sort_order", 
                          libgtk.}
proc `sort_order=`*(tree_column: TreeViewColumn; 
    order: SortType) {.importc: "gtk_tree_view_column_set_sort_order", 
                          libgtk.}
proc get_sort_order*(tree_column: TreeViewColumn): SortType {.
    importc: "gtk_tree_view_column_get_sort_order", libgtk.}
proc sort_order*(tree_column: TreeViewColumn): SortType {.
    importc: "gtk_tree_view_column_get_sort_order", libgtk.}
proc cell_set_cell_data*(
    tree_column: TreeViewColumn; tree_model: TreeModel; 
    iter: TreeIter; is_expander: gboolean; is_expanded: gboolean) {.
    importc: "gtk_tree_view_column_cell_set_cell_data", libgtk.}
proc cell_get_size*(tree_column: TreeViewColumn; 
    cell_area: gdk3.Rectangle; x_offset: var gint; y_offset: var gint; 
    width: var gint; height: var gint) {.
    importc: "gtk_tree_view_column_cell_get_size", libgtk.}
proc cell_is_visible*(tree_column: TreeViewColumn): gboolean {.
    importc: "gtk_tree_view_column_cell_is_visible", libgtk.}
proc focus_cell*(tree_column: TreeViewColumn; 
                                      cell: CellRenderer) {.
    importc: "gtk_tree_view_column_focus_cell", libgtk.}
proc cell_get_position*(
    tree_column: TreeViewColumn; cell_renderer: CellRenderer; 
    x_offset: var gint; width: var gint): gboolean {.
    importc: "gtk_tree_view_column_cell_get_position", libgtk.}
proc queue_resize*(tree_column: TreeViewColumn) {.
    importc: "gtk_tree_view_column_queue_resize", libgtk.}
proc get_tree_view*(tree_column: TreeViewColumn): TreeView {.
    importc: "gtk_tree_view_column_get_tree_view", libgtk.}
proc tree_view*(tree_column: TreeViewColumn): TreeView {.
    importc: "gtk_tree_view_column_get_tree_view", libgtk.}
proc get_button*(tree_column: TreeViewColumn): Button {.
    importc: "gtk_tree_view_column_get_button", libgtk.}
proc button*(tree_column: TreeViewColumn): Button {.
    importc: "gtk_tree_view_column_get_button", libgtk.}

type 
  TextAppearance* =  ptr TextAppearanceObj
  TextAppearancePtr* = ptr TextAppearanceObj
  TextAppearanceObj* = object 
    bg_color*: gdk3.ColorObj
    fg_color*: gdk3.ColorObj
    rise*: gint
    bitfield0_GtkTextAppearance*: guint
    rgba*: array[2, gdk3.RGBA]

type 
  TextAttributes* =  ptr TextAttributesObj
  TextAttributesPtr* = ptr TextAttributesObj
  TextAttributesObj* = object 
    refcount*: guint
    appearance*: TextAppearanceObj
    justification*: Justification
    direction*: TextDirection
    font*: pango.FontDescription
    font_scale*: gdouble
    left_margin*: gint
    right_margin*: gint
    indent*: gint
    pixels_above_lines*: gint
    pixels_below_lines*: gint
    pixels_inside_wrap*: gint
    tabs*: pango.TabArray
    wrap_mode*: WrapMode
    language*: pango.Language
    pg_bg_color*: gdk3.Color
    bitfield0GtkTextAttributes*: guint
    pg_bg_rgba*: gdk3.RGBA
    letter_spacing*: gint
    padding*: array[2, guint]

proc text_attributes_new*(): TextAttributes {.
    importc: "gtk_text_attributes_new", libgtk.}
proc copy*(src: TextAttributes): TextAttributes {.
    importc: "gtk_text_attributes_copy", libgtk.}
proc copy_values*(src: TextAttributes; 
                                      dest: TextAttributes) {.
    importc: "gtk_text_attributes_copy_values", libgtk.}
proc unref*(values: TextAttributes) {.
    importc: "gtk_text_attributes_unref", libgtk.}
proc `ref`*(values: TextAttributes): TextAttributes {.
    importc: "gtk_text_attributes_ref", libgtk.}
proc text_attributes_get_type*(): GType {.
    importc: "gtk_text_attributes_get_type", libgtk.}

template gtk_text_child_anchor*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_child_anchor_get_type(), 
                              TextChildAnchorObj))

template gtk_text_child_anchor_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_child_anchor_get_type(), 
                           TextChildAnchorClassObj))

template gtk_is_text_child_anchor*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_child_anchor_get_type()))

template gtk_is_text_child_anchor_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_child_anchor_get_type()))

template gtk_text_child_anchor_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_child_anchor_get_type(), 
                             TextChildAnchorClassObj))

type 
  TextChildAnchor* =  ptr TextChildAnchorObj
  TextChildAnchorPtr* = ptr TextChildAnchorObj
  TextChildAnchorObj*{.final.} = object of GObjectObj
    segment*: gpointer

type 
  TextChildAnchorClass* =  ptr TextChildAnchorClassObj
  TextChildAnchorClassPtr* = ptr TextChildAnchorClassObj
  TextChildAnchorClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved201: proc () {.cdecl.}
    gtk_reserved202: proc () {.cdecl.}
    gtk_reserved203: proc () {.cdecl.}
    gtk_reserved204: proc () {.cdecl.}

proc text_child_anchor_get_type*(): GType {.
    importc: "gtk_text_child_anchor_get_type", libgtk.}
proc text_child_anchor_new*(): TextChildAnchor {.
    importc: "gtk_text_child_anchor_new", libgtk.}
proc get_widgets*(anchor: TextChildAnchor): glib.GList {.
    importc: "gtk_text_child_anchor_get_widgets", libgtk.}
proc widgets*(anchor: TextChildAnchor): glib.GList {.
    importc: "gtk_text_child_anchor_get_widgets", libgtk.}
proc get_deleted*(anchor: TextChildAnchor): gboolean {.
    importc: "gtk_text_child_anchor_get_deleted", libgtk.}
proc deleted*(anchor: TextChildAnchor): gboolean {.
    importc: "gtk_text_child_anchor_get_deleted", libgtk.}

template gtk_text_tag*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_tag_get_type(), TextTagObj))

template gtk_text_tag_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_tag_get_type(), TextTagClassObj))

template gtk_is_text_tag*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_tag_get_type()))

template gtk_is_text_tag_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_tag_get_type()))

template gtk_text_tag_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_tag_get_type(), TextTagClassObj))

type 
  TextIter* =  ptr TextIterObj
  TextIterPtr* = ptr TextIterObj
  TextIterObj* = object 
    dummy1: gpointer
    dummy2: gpointer
    dummy3: gint
    dummy4: gint
    dummy5: gint
    dummy6: gint
    dummy7: gint
    dummy8: gint
    dummy9: gpointer
    dummy10: gpointer
    dummy11: gint
    dummy12: gint
    dummy13: gint
    dummy14: gpointer
type 
  TextTagPrivateObj = object 
  
type 
  TextTag* =  ptr TextTagObj
  TextTagPtr* = ptr TextTagObj
  TextTagObj*{.final.} = object of GObjectObj
    priv24: ptr TextTagPrivateObj

type 
  TextTagClass* =  ptr TextTagClassObj
  TextTagClassPtr* = ptr TextTagClassObj
  TextTagClassObj*{.final.} = object of GObjectClassObj
    event*: proc (tag: TextTag; event_obj: GObject; 
                  event: gdk3.Event; iter: TextIter): gboolean {.cdecl.}
    gtk_reserved211: proc () {.cdecl.}
    gtk_reserved212: proc () {.cdecl.}
    gtk_reserved213: proc () {.cdecl.}
    gtk_reserved214: proc () {.cdecl.}

converter TIO2TI(i: var TextIterObj): TextIter =
  addr(i)
proc text_tag_get_type*(): GType {.importc: "gtk_text_tag_get_type", 
    libgtk.}
proc text_tag_new*(name: cstring): TextTag {.
    importc: "gtk_text_tag_new", libgtk.}
proc get_priority*(tag: TextTag): gint {.
    importc: "gtk_text_tag_get_priority", libgtk.}
proc priority*(tag: TextTag): gint {.
    importc: "gtk_text_tag_get_priority", libgtk.}
proc set_priority*(tag: TextTag; priority: gint) {.
    importc: "gtk_text_tag_set_priority", libgtk.}
proc `priority=`*(tag: TextTag; priority: gint) {.
    importc: "gtk_text_tag_set_priority", libgtk.}
proc event*(tag: TextTag; event_obj: GObject; 
                         event: gdk3.Event; iter: TextIter): gboolean {.
    importc: "gtk_text_tag_event", libgtk.}

type 
  TextBufferPrivateObj = object 
  
type 
  TextBuffer* =  ptr TextBufferObj
  TextBufferPtr* = ptr TextBufferObj
  TextBufferObj* = object of GObjectObj
    priv117: ptr TextBufferPrivateObj
type 
  TextSearchFlags* {.size: sizeof(cint), pure.} = enum 
    VISIBLE_ONLY = 1 shl 0, 
    TEXT_ONLY = 1 shl 1, 
    CASE_INSENSITIVE = 1 shl 2
    INVALID = 1 shl 3

proc get_buffer*(iter: TextIter): TextBuffer {.
    importc: "gtk_text_iter_get_buffer", libgtk.}

proc buffer*(iter: TextIter): TextBuffer {.
    importc: "gtk_text_iter_get_buffer", libgtk.}
proc copy*(iter: TextIter): TextIter {.
    importc: "gtk_text_iter_copy", libgtk.}
proc free*(iter: TextIter) {.
    importc: "gtk_text_iter_free", libgtk.}
proc assign*(iter: TextIter; other: TextIter) {.
    importc: "gtk_text_iter_assign", libgtk.}
proc text_iter_get_type*(): GType {.importc: "gtk_text_iter_get_type", 
    libgtk.}
proc get_offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_offset", libgtk.}
proc offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_offset", libgtk.}
proc get_line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line", libgtk.}
proc line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line", libgtk.}
proc get_line_offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line_offset", libgtk.}
proc line_offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line_offset", libgtk.}
proc get_line_index*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line_index", libgtk.}
proc line_index*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_line_index", libgtk.}
proc get_visible_line_offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_visible_line_offset", libgtk.}
proc visible_line_offset*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_visible_line_offset", libgtk.}
proc get_visible_line_index*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_visible_line_index", libgtk.}
proc visible_line_index*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_visible_line_index", libgtk.}
proc get_char*(iter: TextIter): gunichar {.
    importc: "gtk_text_iter_get_char", libgtk.}
proc char*(iter: TextIter): gunichar {.
    importc: "gtk_text_iter_get_char", libgtk.}
proc get_slice*(start: TextIter; `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_slice", libgtk.}
proc slice*(start: TextIter; `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_slice", libgtk.}
proc get_text*(start: TextIter; `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_text", libgtk.}
proc text*(start: TextIter; `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_text", libgtk.}
proc get_visible_slice*(start: TextIter; 
                                      `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_visible_slice", libgtk.}
proc visible_slice*(start: TextIter; 
                                      `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_visible_slice", libgtk.}
proc get_visible_text*(start: TextIter; 
                                     `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_visible_text", libgtk.}
proc visible_text*(start: TextIter; 
                                     `end`: TextIter): cstring {.
    importc: "gtk_text_iter_get_visible_text", libgtk.}
proc get_pixbuf*(iter: TextIter): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_text_iter_get_pixbuf", libgtk.}
proc pixbuf*(iter: TextIter): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_text_iter_get_pixbuf", libgtk.}
proc get_marks*(iter: TextIter): glib.GSList {.
    importc: "gtk_text_iter_get_marks", libgtk.}
proc marks*(iter: TextIter): glib.GSList {.
    importc: "gtk_text_iter_get_marks", libgtk.}
proc get_child_anchor*(iter: TextIter): TextChildAnchor {.
    importc: "gtk_text_iter_get_child_anchor", libgtk.}
proc child_anchor*(iter: TextIter): TextChildAnchor {.
    importc: "gtk_text_iter_get_child_anchor", libgtk.}
proc get_toggled_tags*(iter: TextIter; 
                                     toggled_on: gboolean): glib.GSList {.
    importc: "gtk_text_iter_get_toggled_tags", libgtk.}
proc toggled_tags*(iter: TextIter; 
                                     toggled_on: gboolean): glib.GSList {.
    importc: "gtk_text_iter_get_toggled_tags", libgtk.}
proc begins_tag*(iter: TextIter; tag: TextTag): gboolean {.
    importc: "gtk_text_iter_begins_tag", libgtk.}
proc ends_tag*(iter: TextIter; tag: TextTag): gboolean {.
    importc: "gtk_text_iter_ends_tag", libgtk.}
proc toggles_tag*(iter: TextIter; tag: TextTag): gboolean {.
    importc: "gtk_text_iter_toggles_tag", libgtk.}
proc has_tag*(iter: TextIter; tag: TextTag): gboolean {.
    importc: "gtk_text_iter_has_tag", libgtk.}
proc get_tags*(iter: TextIter): glib.GSList {.
    importc: "gtk_text_iter_get_tags", libgtk.}
proc tags*(iter: TextIter): glib.GSList {.
    importc: "gtk_text_iter_get_tags", libgtk.}
proc editable*(iter: TextIter; default_setting: gboolean): gboolean {.
    importc: "gtk_text_iter_editable", libgtk.}
proc can_insert*(iter: TextIter; 
                               default_editability: gboolean): gboolean {.
    importc: "gtk_text_iter_can_insert", libgtk.}
proc starts_word*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_starts_word", libgtk.}
proc ends_word*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_ends_word", libgtk.}
proc inside_word*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_inside_word", libgtk.}
proc starts_sentence*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_starts_sentence", libgtk.}
proc ends_sentence*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_ends_sentence", libgtk.}
proc inside_sentence*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_inside_sentence", libgtk.}
proc starts_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_starts_line", libgtk.}
proc ends_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_ends_line", libgtk.}
proc is_cursor_position*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_is_cursor_position", libgtk.}
proc get_chars_in_line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_chars_in_line", libgtk.}
proc chars_in_line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_chars_in_line", libgtk.}
proc get_bytes_in_line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_bytes_in_line", libgtk.}
proc bytes_in_line*(iter: TextIter): gint {.
    importc: "gtk_text_iter_get_bytes_in_line", libgtk.}
proc get_attributes*(iter: TextIter; 
                                   values: TextAttributes): gboolean {.
    importc: "gtk_text_iter_get_attributes", libgtk.}
proc attributes*(iter: TextIter; 
                                   values: TextAttributes): gboolean {.
    importc: "gtk_text_iter_get_attributes", libgtk.}
proc get_language*(iter: TextIter): pango.Language {.
    importc: "gtk_text_iter_get_language", libgtk.}
proc language*(iter: TextIter): pango.Language {.
    importc: "gtk_text_iter_get_language", libgtk.}
proc is_end*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_is_end", libgtk.}
proc is_start*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_is_start", libgtk.}
proc forward_char*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_char", libgtk.}
proc backward_char*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_char", libgtk.}
proc forward_chars*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_forward_chars", libgtk.}
proc backward_chars*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_backward_chars", libgtk.}
proc forward_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_line", libgtk.}
proc backward_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_line", libgtk.}
proc forward_lines*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_forward_lines", libgtk.}
proc backward_lines*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_backward_lines", libgtk.}
proc forward_word_end*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_word_end", libgtk.}
proc backward_word_start*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_word_start", libgtk.}
proc forward_word_ends*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_forward_word_ends", libgtk.}
proc backward_word_starts*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_backward_word_starts", libgtk.}
proc forward_visible_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_visible_line", libgtk.}
proc backward_visible_line*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_visible_line", libgtk.}
proc forward_visible_lines*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_forward_visible_lines", libgtk.}
proc backward_visible_lines*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_backward_visible_lines", libgtk.}
proc forward_visible_word_end*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_visible_word_end", libgtk.}
proc backward_visible_word_start*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_visible_word_start", libgtk.}
proc forward_visible_word_ends*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_forward_visible_word_ends", 
                             libgtk.}
proc backward_visible_word_starts*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_backward_visible_word_starts", 
                             libgtk.}
proc forward_sentence_end*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_sentence_end", libgtk.}
proc backward_sentence_start*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_sentence_start", libgtk.}
proc forward_sentence_ends*(iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_iter_forward_sentence_ends", libgtk.}
proc backward_sentence_starts*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_backward_sentence_starts", 
                             libgtk.}
proc forward_cursor_position*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_cursor_position", libgtk.}
proc backward_cursor_position*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_cursor_position", libgtk.}
proc forward_cursor_positions*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_forward_cursor_positions", 
                             libgtk.}
proc backward_cursor_positions*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_backward_cursor_positions", 
                             libgtk.}
proc forward_visible_cursor_position*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_visible_cursor_position", libgtk.}
proc backward_visible_cursor_position*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_visible_cursor_position", libgtk.}
proc forward_visible_cursor_positions*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_forward_visible_cursor_positions", 
                             libgtk.}
proc backward_visible_cursor_positions*(iter: TextIter; 
    count: gint): gboolean {.importc: "gtk_text_iter_backward_visible_cursor_positions", 
                             libgtk.}
proc set_offset*(iter: TextIter; char_offset: gint) {.
    importc: "gtk_text_iter_set_offset", libgtk.}
proc `offset=`*(iter: TextIter; char_offset: gint) {.
    importc: "gtk_text_iter_set_offset", libgtk.}
proc set_line*(iter: TextIter; line_number: gint) {.
    importc: "gtk_text_iter_set_line", libgtk.}
proc `line=`*(iter: TextIter; line_number: gint) {.
    importc: "gtk_text_iter_set_line", libgtk.}
proc set_line_offset*(iter: TextIter; char_on_line: gint) {.
    importc: "gtk_text_iter_set_line_offset", libgtk.}
proc `line_offset=`*(iter: TextIter; char_on_line: gint) {.
    importc: "gtk_text_iter_set_line_offset", libgtk.}
proc set_line_index*(iter: TextIter; byte_on_line: gint) {.
    importc: "gtk_text_iter_set_line_index", libgtk.}
proc `line_index=`*(iter: TextIter; byte_on_line: gint) {.
    importc: "gtk_text_iter_set_line_index", libgtk.}
proc forward_to_end*(iter: TextIter) {.
    importc: "gtk_text_iter_forward_to_end", libgtk.}
proc forward_to_line_end*(iter: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_to_line_end", libgtk.}
proc set_visible_line_offset*(iter: TextIter; 
    char_on_line: gint) {.importc: "gtk_text_iter_set_visible_line_offset", 
                          libgtk.}
proc `visible_line_offset=`*(iter: TextIter; 
    char_on_line: gint) {.importc: "gtk_text_iter_set_visible_line_offset", 
                          libgtk.}
proc set_visible_line_index*(iter: TextIter; 
    byte_on_line: gint) {.importc: "gtk_text_iter_set_visible_line_index", 
                          libgtk.}
proc `visible_line_index=`*(iter: TextIter; 
    byte_on_line: gint) {.importc: "gtk_text_iter_set_visible_line_index", 
                          libgtk.}
proc forward_to_tag_toggle*(iter: TextIter; 
    tag: TextTag): gboolean {.importc: "gtk_text_iter_forward_to_tag_toggle", 
                                     libgtk.}
proc backward_to_tag_toggle*(iter: TextIter; 
    tag: TextTag): gboolean {.importc: "gtk_text_iter_backward_to_tag_toggle", 
                                     libgtk.}
type 
  TextCharPredicate* = proc (ch: gunichar; user_data: gpointer): gboolean {.cdecl.}
proc forward_find_char*(iter: TextIter; 
                                      pred: TextCharPredicate; 
                                      user_data: gpointer; 
                                      limit: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_find_char", libgtk.}
proc backward_find_char*(iter: TextIter; 
    pred: TextCharPredicate; user_data: gpointer; limit: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_find_char", libgtk.}
proc forward_search*(iter: TextIter; str: cstring; 
                                   flags: TextSearchFlags; 
                                   match_start: TextIter; 
                                   match_end: TextIter; 
                                   limit: TextIter): gboolean {.
    importc: "gtk_text_iter_forward_search", libgtk.}
proc backward_search*(iter: TextIter; str: cstring; 
                                    flags: TextSearchFlags; 
                                    match_start: TextIter; 
                                    match_end: TextIter; 
                                    limit: TextIter): gboolean {.
    importc: "gtk_text_iter_backward_search", libgtk.}
proc equal*(lhs: TextIter; rhs: TextIter): gboolean {.
    importc: "gtk_text_iter_equal", libgtk.}
proc compare*(lhs: TextIter; rhs: TextIter): gint {.
    importc: "gtk_text_iter_compare", libgtk.}
proc in_range*(iter: TextIter; start: TextIter; 
                             `end`: TextIter): gboolean {.
    importc: "gtk_text_iter_in_range", libgtk.}
proc order*(first: TextIter; second: TextIter) {.
    importc: "gtk_text_iter_order", libgtk.}

type 
  TargetPair* =  ptr TargetPairObj
  TargetPairPtr* = ptr TargetPairObj
  TargetPairObj* = object 
    target*: gdk3.Atom
    flags*: guint
    info*: guint

type 
  TargetList* =  ptr TargetListObj
  TargetListPtr* = ptr TargetListObj
  TargetListObj* = object 
  
type 
  TargetEntry* =  ptr TargetEntryObj
  TargetEntryPtr* = ptr TargetEntryObj
  TargetEntryObj* = object 
    target*: cstring
    flags*: guint
    info*: guint

proc target_list_get_type*(): GType {.importc: "gtk_target_list_get_type", 
    libgtk.}
proc target_list_new*(targets: TargetEntry; ntargets: guint): TargetList {.
    importc: "gtk_target_list_new", libgtk.}
proc `ref`*(list: TargetList): TargetList {.
    importc: "gtk_target_list_ref", libgtk.}
proc unref*(list: TargetList) {.
    importc: "gtk_target_list_unref", libgtk.}
proc add*(list: TargetList; target: gdk3.Atom; 
                          flags: guint; info: guint) {.
    importc: "gtk_target_list_add", libgtk.}
proc add_text_targets*(list: TargetList; info: guint) {.
    importc: "gtk_target_list_add_text_targets", libgtk.}
proc add_rich_text_targets*(list: TargetList; 
    info: guint; deserializable: gboolean; buffer: TextBuffer) {.
    importc: "gtk_target_list_add_rich_text_targets", libgtk.}
proc add_image_targets*(list: TargetList; info: guint; 
    writable: gboolean) {.importc: "gtk_target_list_add_image_targets", 
                          libgtk.}
proc add_uri_targets*(list: TargetList; info: guint) {.
    importc: "gtk_target_list_add_uri_targets", libgtk.}
proc add_table*(list: TargetList; 
                                targets: TargetEntry; ntargets: guint) {.
    importc: "gtk_target_list_add_table", libgtk.}
proc remove*(list: TargetList; target: gdk3.Atom) {.
    importc: "gtk_target_list_remove", libgtk.}
proc find*(list: TargetList; target: gdk3.Atom; 
                           info: var guint): gboolean {.
    importc: "gtk_target_list_find", libgtk.}
proc target_table_new_from_list*(list: TargetList; 
                                     n_targets: var gint): TargetEntry {.
    importc: "gtk_target_table_new_from_list", libgtk.}
proc target_table_free*(targets: TargetEntry; n_targets: gint) {.
    importc: "gtk_target_table_free", libgtk.}
proc selection_owner_set*(widget: Widget; selection: gdk3.Atom; 
                              time: guint32): gboolean {.
    importc: "gtk_selection_owner_set", libgtk.}
proc selection_owner_set_for_display*(display: gdk3.Display; 
    widget: Widget; selection: gdk3.Atom; time: guint32): gboolean {.
    importc: "gtk_selection_owner_set_for_display", libgtk.}
proc selection_add_target*(widget: Widget; selection: gdk3.Atom; 
                               target: gdk3.Atom; info: guint) {.
    importc: "gtk_selection_add_target", libgtk.}
proc selection_add_targets*(widget: Widget; selection: gdk3.Atom; 
                                targets: TargetEntry; ntargets: guint) {.
    importc: "gtk_selection_add_targets", libgtk.}
proc selection_clear_targets*(widget: Widget; selection: gdk3.Atom) {.
    importc: "gtk_selection_clear_targets", libgtk.}
proc selection_convert*(widget: Widget; selection: gdk3.Atom; 
                            target: gdk3.Atom; time: guint32): gboolean {.
    importc: "gtk_selection_convert", libgtk.}
proc selection_remove_all*(widget: Widget) {.
    importc: "gtk_selection_remove_all", libgtk.}
proc get_selection*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_selection", libgtk.}
proc selection*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_selection", libgtk.}
proc get_target*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_target", libgtk.}
proc target*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_target", libgtk.}
proc get_data_type*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_data_type", libgtk.}
proc data_type*(selection_data: SelectionData): gdk3.Atom {.
    importc: "gtk_selection_data_get_data_type", libgtk.}
proc get_format*(selection_data: SelectionData): gint {.
    importc: "gtk_selection_data_get_format", libgtk.}
proc format*(selection_data: SelectionData): gint {.
    importc: "gtk_selection_data_get_format", libgtk.}
proc get_data*(selection_data: SelectionData): ptr guchar {.
    importc: "gtk_selection_data_get_data", libgtk.}
proc data*(selection_data: SelectionData): ptr guchar {.
    importc: "gtk_selection_data_get_data", libgtk.}
proc get_length*(selection_data: SelectionData): gint {.
    importc: "gtk_selection_data_get_length", libgtk.}
proc length*(selection_data: SelectionData): gint {.
    importc: "gtk_selection_data_get_length", libgtk.}
proc get_data_with_length*(
    selection_data: SelectionData; length: var gint): ptr guchar {.
    importc: "gtk_selection_data_get_data_with_length", libgtk.}
proc data_with_length*(
    selection_data: SelectionData; length: var gint): ptr guchar {.
    importc: "gtk_selection_data_get_data_with_length", libgtk.}
proc get_display*(selection_data: SelectionData): gdk3.Display {.
    importc: "gtk_selection_data_get_display", libgtk.}
proc display*(selection_data: SelectionData): gdk3.Display {.
    importc: "gtk_selection_data_get_display", libgtk.}
proc set*(selection_data: SelectionData; 
                             `type`: gdk3.Atom; format: gint; data: var guchar; 
                             length: gint) {.
    importc: "gtk_selection_data_set", libgtk.}
proc set_text*(selection_data: SelectionData; 
                                  str: cstring; len: gint): gboolean {.
    importc: "gtk_selection_data_set_text", libgtk.}
proc get_text*(selection_data: SelectionData): ptr guchar {.
    importc: "gtk_selection_data_get_text", libgtk.}
proc text*(selection_data: SelectionData): ptr guchar {.
    importc: "gtk_selection_data_get_text", libgtk.}
proc set_pixbuf*(selection_data: SelectionData; 
                                    pixbuf: gdk_pixbuf.GdkPixbuf): gboolean {.
    importc: "gtk_selection_data_set_pixbuf", libgtk.}
proc get_pixbuf*(selection_data: SelectionData): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_selection_data_get_pixbuf", libgtk.}
proc pixbuf*(selection_data: SelectionData): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_selection_data_get_pixbuf", libgtk.}
proc set_uris*(selection_data: SelectionData; 
                                  uris: var cstring): gboolean {.
    importc: "gtk_selection_data_set_uris", libgtk.}
proc get_uris*(selection_data: SelectionData): cstringArray {.
    importc: "gtk_selection_data_get_uris", libgtk.}
proc uris*(selection_data: SelectionData): cstringArray {.
    importc: "gtk_selection_data_get_uris", libgtk.}
proc get_targets*(selection_data: SelectionData; 
                                     targets: ptr ptr gdk3.Atom; 
                                     n_atoms: var gint): gboolean {.
    importc: "gtk_selection_data_get_targets", libgtk.}
proc targets*(selection_data: SelectionData; 
                                     targets: ptr ptr gdk3.Atom; 
                                     n_atoms: var gint): gboolean {.
    importc: "gtk_selection_data_get_targets", libgtk.}
proc targets_include_text*(
    selection_data: SelectionData): gboolean {.
    importc: "gtk_selection_data_targets_include_text", libgtk.}
proc targets_include_rich_text*(
    selection_data: SelectionData; buffer: TextBuffer): gboolean {.
    importc: "gtk_selection_data_targets_include_rich_text", libgtk.}
proc targets_include_image*(
    selection_data: SelectionData; writable: gboolean): gboolean {.
    importc: "gtk_selection_data_targets_include_image", libgtk.}
proc targets_include_uri*(
    selection_data: SelectionData): gboolean {.
    importc: "gtk_selection_data_targets_include_uri", libgtk.}
proc targets_include_text*(targets: ptr gdk3.Atom; n_targets: gint): gboolean {.
    importc: "gtk_targets_include_text", libgtk.}
proc targets_include_rich_text*(targets: ptr gdk3.Atom; n_targets: gint; 
                                    buffer: TextBuffer): gboolean {.
    importc: "gtk_targets_include_rich_text", libgtk.}
proc targets_include_image*(targets: ptr gdk3.Atom; n_targets: gint; 
                                writable: gboolean): gboolean {.
    importc: "gtk_targets_include_image", libgtk.}
proc targets_include_uri*(targets: ptr gdk3.Atom; n_targets: gint): gboolean {.
    importc: "gtk_targets_include_uri", libgtk.}
proc selection_data_get_type*(): GType {.
    importc: "gtk_selection_data_get_type", libgtk.}
proc copy*(data: SelectionData): SelectionData {.
    importc: "gtk_selection_data_copy", libgtk.}
proc free*(data: SelectionData) {.
    importc: "gtk_selection_data_free", libgtk.}
proc target_entry_get_type*(): GType {.
    importc: "gtk_target_entry_get_type", libgtk.}
proc target_entry_new*(target: cstring; flags: guint; info: guint): TargetEntry {.
    importc: "gtk_target_entry_new", libgtk.}
proc copy*(data: TargetEntry): TargetEntry {.
    importc: "gtk_target_entry_copy", libgtk.}
proc free*(data: TargetEntry) {.
    importc: "gtk_target_entry_free", libgtk.}

type 
  DestDefaults* {.size: sizeof(cint), pure.} = enum 
    MOTION = 1 shl 0, HIGHLIGHT = 1 shl 1, 
    DROP = 1 shl 2, ALL = 0x7
type 
  TargetFlags* {.size: sizeof(cint), pure.} = enum 
    SAME_APP = 1 shl 0, SAME_WIDGET = 1 shl 1, 
    OTHER_APP = 1 shl 2, OTHER_WIDGET = 1 shl 3
proc drag_get_data*(widget: Widget; context: gdk3.DragContext; 
                        target: gdk3.Atom; time: guint32) {.
    importc: "gtk_drag_get_data", libgtk.}
proc drag_finish*(context: gdk3.DragContext; success: gboolean; 
                      del: gboolean; time: guint32) {.
    importc: "gtk_drag_finish", libgtk.}
proc drag_get_source_widget*(context: gdk3.DragContext): Widget {.
    importc: "gtk_drag_get_source_widget", libgtk.}
proc drag_highlight*(widget: Widget) {.
    importc: "gtk_drag_highlight", libgtk.}
proc drag_unhighlight*(widget: Widget) {.
    importc: "gtk_drag_unhighlight", libgtk.}
proc drag_dest_set*(widget: Widget; flags: DestDefaults; 
                        targets: TargetEntry; n_targets: gint; 
                        actions: gdk3.DragAction) {.
    importc: "gtk_drag_dest_set", libgtk.}
proc drag_dest_set_proxy*(widget: Widget; 
                              proxy_window: gdk3.Window; 
                              protocol: gdk3.DragProtocol; 
                              use_coordinates: gboolean) {.
    importc: "gtk_drag_dest_set_proxy", libgtk.}
proc drag_dest_unset*(widget: Widget) {.
    importc: "gtk_drag_dest_unset", libgtk.}
proc drag_dest_find_target*(widget: Widget; 
                                context: gdk3.DragContext; 
                                target_list: TargetList): gdk3.Atom {.
    importc: "gtk_drag_dest_find_target", libgtk.}
proc drag_dest_get_target_list*(widget: Widget): TargetList {.
    importc: "gtk_drag_dest_get_target_list", libgtk.}
proc drag_dest_set_target_list*(widget: Widget; 
                                    target_list: TargetList) {.
    importc: "gtk_drag_dest_set_target_list", libgtk.}
proc drag_dest_add_text_targets*(widget: Widget) {.
    importc: "gtk_drag_dest_add_text_targets", libgtk.}
proc drag_dest_add_image_targets*(widget: Widget) {.
    importc: "gtk_drag_dest_add_image_targets", libgtk.}
proc drag_dest_add_uri_targets*(widget: Widget) {.
    importc: "gtk_drag_dest_add_uri_targets", libgtk.}
proc drag_dest_set_track_motion*(widget: Widget; 
                                     track_motion: gboolean) {.
    importc: "gtk_drag_dest_set_track_motion", libgtk.}
proc drag_dest_get_track_motion*(widget: Widget): gboolean {.
    importc: "gtk_drag_dest_get_track_motion", libgtk.}
proc drag_source_set*(widget: Widget; 
                          start_button_mask: gdk3.ModifierType; 
                          targets: TargetEntry; n_targets: gint; 
                          actions: gdk3.DragAction) {.
    importc: "gtk_drag_source_set", libgtk.}
proc drag_source_unset*(widget: Widget) {.
    importc: "gtk_drag_source_unset", libgtk.}
proc drag_source_get_target_list*(widget: Widget): TargetList {.
    importc: "gtk_drag_source_get_target_list", libgtk.}
proc drag_source_set_target_list*(widget: Widget; 
                                      target_list: TargetList) {.
    importc: "gtk_drag_source_set_target_list", libgtk.}
proc drag_source_add_text_targets*(widget: Widget) {.
    importc: "gtk_drag_source_add_text_targets", libgtk.}
proc drag_source_add_image_targets*(widget: Widget) {.
    importc: "gtk_drag_source_add_image_targets", libgtk.}
proc drag_source_add_uri_targets*(widget: Widget) {.
    importc: "gtk_drag_source_add_uri_targets", libgtk.}
proc drag_source_set_icon_pixbuf*(widget: Widget; 
                                      pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_drag_source_set_icon_pixbuf", libgtk.}
proc drag_source_set_icon_stock*(widget: Widget; 
                                     stock_id: cstring) {.
    importc: "gtk_drag_source_set_icon_stock", libgtk.}
proc drag_source_set_icon_name*(widget: Widget; 
                                    icon_name: cstring) {.
    importc: "gtk_drag_source_set_icon_name", libgtk.}
proc drag_source_set_icon_gicon*(widget: Widget; icon: gio.GIcon) {.
    importc: "gtk_drag_source_set_icon_gicon", libgtk.}
proc drag_begin_with_coordinates*(widget: Widget; 
                                      targets: TargetList; 
                                      actions: gdk3.DragAction; button: gint; 
                                      event: gdk3.Event; x: gint; y: gint): gdk3.DragContext {.
    importc: "gtk_drag_begin_with_coordinates", libgtk.}
proc drag_begin*(widget: Widget; targets: TargetList; 
                     actions: gdk3.DragAction; button: gint; event: gdk3.Event): gdk3.DragContext {.
    importc: "gtk_drag_begin", libgtk.}
proc drag_cancel*(context: gdk3.DragContext) {.
    importc: "gtk_drag_cancel", libgtk.}
proc drag_set_icon_widget*(context: gdk3.DragContext; 
                               widget: Widget; hot_x: gint; hot_y: gint) {.
    importc: "gtk_drag_set_icon_widget", libgtk.}
proc drag_set_icon_pixbuf*(context: gdk3.DragContext; 
                               pixbuf: gdk_pixbuf.GdkPixbuf; hot_x: gint; hot_y: gint) {.
    importc: "gtk_drag_set_icon_pixbuf", libgtk.}
proc drag_set_icon_stock*(context: gdk3.DragContext; 
                              stock_id: cstring; hot_x: gint; hot_y: gint) {.
    importc: "gtk_drag_set_icon_stock", libgtk.}
proc drag_set_icon_surface*(context: gdk3.DragContext; 
                                surface: cairo.Surface) {.
    importc: "gtk_drag_set_icon_surface", libgtk.}
proc drag_set_icon_name*(context: gdk3.DragContext; 
                             icon_name: cstring; hot_x: gint; hot_y: gint) {.
    importc: "gtk_drag_set_icon_name", libgtk.}
proc drag_set_icon_gicon*(context: gdk3.DragContext; icon: gio.GIcon; 
                              hot_x: gint; hot_y: gint) {.
    importc: "gtk_drag_set_icon_gicon", libgtk.}
proc drag_set_icon_default*(context: gdk3.DragContext) {.
    importc: "gtk_drag_set_icon_default", libgtk.}
proc drag_check_threshold*(widget: Widget; start_x: gint; 
                               start_y: gint; current_x: gint; current_y: gint): gboolean {.
    importc: "gtk_drag_check_threshold", libgtk.}

template gtk_editable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, editable_get_type(), EditableObj))

template gtk_is_editable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, editable_get_type()))

template gtk_editable_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, editable_get_type(), 
                                 EditableInterfaceObj))

type 
  Editable* =  ptr EditableObj
  EditablePtr* = ptr EditableObj
  EditableObj* = object 
  
type 
  EditableInterface* =  ptr EditableInterfaceObj
  EditableInterfacePtr* = ptr EditableInterfaceObj
  EditableInterfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    insert_text*: proc (editable: Editable; new_text: cstring; 
                        new_text_length: gint; position: var gint) {.cdecl.}
    delete_text*: proc (editable: Editable; start_pos: gint; 
                        end_pos: gint) {.cdecl.}
    changed*: proc (editable: Editable) {.cdecl.}
    do_insert_text*: proc (editable: Editable; new_text: cstring; 
                           new_text_length: gint; position: var gint) {.cdecl.}
    do_delete_text*: proc (editable: Editable; start_pos: gint; 
                           end_pos: gint) {.cdecl.}
    get_chars*: proc (editable: Editable; start_pos: gint; 
                      end_pos: gint): cstring {.cdecl.}
    set_selection_bounds*: proc (editable: Editable; start_pos: gint; 
                                 end_pos: gint) {.cdecl.}
    get_selection_bounds*: proc (editable: Editable; 
                                 start_pos: var gint; end_pos: var gint): gboolean {.cdecl.}
    set_position*: proc (editable: Editable; position: gint) {.cdecl.}
    get_position*: proc (editable: Editable): gint {.cdecl.}

proc editable_get_type*(): GType {.importc: "gtk_editable_get_type", 
    libgtk.}
proc select_region*(editable: Editable; start_pos: gint; 
                                 end_pos: gint) {.
    importc: "gtk_editable_select_region", libgtk.}
proc get_selection_bounds*(editable: Editable; 
    start_pos: var gint; end_pos: var gint): gboolean {.
    importc: "gtk_editable_get_selection_bounds", libgtk.}
proc selection_bounds*(editable: Editable; 
    start_pos: var gint; end_pos: var gint): gboolean {.
    importc: "gtk_editable_get_selection_bounds", libgtk.}
proc insert_text*(editable: Editable; new_text: cstring; 
                               new_text_length: gint; position: var gint) {.
    importc: "gtk_editable_insert_text", libgtk.}
proc delete_text*(editable: Editable; start_pos: gint; 
                               end_pos: gint) {.
    importc: "gtk_editable_delete_text", libgtk.}
proc get_chars*(editable: Editable; start_pos: gint; 
                             end_pos: gint): cstring {.
    importc: "gtk_editable_get_chars", libgtk.}
proc chars*(editable: Editable; start_pos: gint; 
                             end_pos: gint): cstring {.
    importc: "gtk_editable_get_chars", libgtk.}
proc cut_clipboard*(editable: Editable) {.
    importc: "gtk_editable_cut_clipboard", libgtk.}
proc copy_clipboard*(editable: Editable) {.
    importc: "gtk_editable_copy_clipboard", libgtk.}
proc paste_clipboard*(editable: Editable) {.
    importc: "gtk_editable_paste_clipboard", libgtk.}
proc delete_selection*(editable: Editable) {.
    importc: "gtk_editable_delete_selection", libgtk.}
proc set_position*(editable: Editable; position: gint) {.
    importc: "gtk_editable_set_position", libgtk.}
proc `position=`*(editable: Editable; position: gint) {.
    importc: "gtk_editable_set_position", libgtk.}
proc get_position*(editable: Editable): gint {.
    importc: "gtk_editable_get_position", libgtk.}
proc position*(editable: Editable): gint {.
    importc: "gtk_editable_get_position", libgtk.}
proc set_editable*(editable: Editable; 
                                is_editable: gboolean) {.
    importc: "gtk_editable_set_editable", libgtk.}
proc `editable=`*(editable: Editable; 
                                is_editable: gboolean) {.
    importc: "gtk_editable_set_editable", libgtk.}
proc get_editable*(editable: Editable): gboolean {.
    importc: "gtk_editable_get_editable", libgtk.}
proc editable*(editable: Editable): gboolean {.
    importc: "gtk_editable_get_editable", libgtk.}

template gtk_im_context*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, im_context_get_type(), IMContextObj))

template gtk_im_context_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, im_context_get_type(), IMContextClassObj))

template gtk_is_im_context*(obj: expr): expr = 
  (g_type_check_instance_type(obj, im_context_get_type()))

template gtk_is_im_context_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, im_context_get_type()))

template gtk_im_context_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, im_context_get_type(), IMContextClassObj))

type 
  IMContext* =  ptr IMContextObj
  IMContextPtr* = ptr IMContextObj
  IMContextObj = object of GObjectObj

type 
  IMContextClass* =  ptr IMContextClassObj
  IMContextClassPtr* = ptr IMContextClassObj
  IMContextClassObj = object of GObjectClassObj
    preedit_start*: proc (context: IMContext) {.cdecl.}
    preedit_end*: proc (context: IMContext) {.cdecl.}
    preedit_changed*: proc (context: IMContext) {.cdecl.}
    commit*: proc (context: IMContext; str: cstring) {.cdecl.}
    retrieve_surrounding*: proc (context: IMContext): gboolean {.cdecl.}
    delete_surrounding*: proc (context: IMContext; offset: gint; 
                               n_chars: gint): gboolean {.cdecl.}
    set_client_window*: proc (context: IMContext; window: gdk3.Window) {.cdecl.}
    get_preedit_string*: proc (context: IMContext; str: var cstring; 
                               attrs: var pango.AttrList; 
                               cursor_pos: var gint) {.cdecl.}
    filter_keypress*: proc (context: IMContext; event: gdk3.EventKey): gboolean {.cdecl.}
    focus_in*: proc (context: IMContext) {.cdecl.}
    focus_out*: proc (context: IMContext) {.cdecl.}
    reset*: proc (context: IMContext) {.cdecl.}
    set_cursor_location*: proc (context: IMContext; 
                                area: gdk3.Rectangle) {.cdecl.}
    set_use_preedit*: proc (context: IMContext; use_preedit: gboolean) {.cdecl.}
    set_surrounding*: proc (context: IMContext; text: cstring; 
                            len: gint; cursor_index: gint) {.cdecl.}
    get_surrounding*: proc (context: IMContext; text: var cstring; 
                            cursor_index: var gint): gboolean {.cdecl.}
    gtk_reserved221: proc () {.cdecl.}
    gtk_reserved222: proc () {.cdecl.}
    gtk_reserved223: proc () {.cdecl.}
    gtk_reserved224: proc () {.cdecl.}
    gtk_reserved225: proc () {.cdecl.}
    gtk_reserved226: proc () {.cdecl.}

proc im_context_get_type*(): GType {.importc: "gtk_im_context_get_type", 
    libgtk.}
proc set_client_window*(context: IMContext; 
    window: gdk3.Window) {.importc: "gtk_im_context_set_client_window", 
                             libgtk.}
proc `client_window=`*(context: IMContext; 
    window: gdk3.Window) {.importc: "gtk_im_context_set_client_window", 
                             libgtk.}
proc get_preedit_string*(context: IMContext; 
    str: var cstring; attrs: var pango.AttrList; cursor_pos: var gint) {.
    importc: "gtk_im_context_get_preedit_string", libgtk.}
proc filter_keypress*(context: IMContext; 
                                     event: gdk3.EventKey): gboolean {.
    importc: "gtk_im_context_filter_keypress", libgtk.}
proc focus_in*(context: IMContext) {.
    importc: "gtk_im_context_focus_in", libgtk.}
proc focus_out*(context: IMContext) {.
    importc: "gtk_im_context_focus_out", libgtk.}
proc reset*(context: IMContext) {.
    importc: "gtk_im_context_reset", libgtk.}
proc set_cursor_location*(context: IMContext; 
    area: gdk3.Rectangle) {.importc: "gtk_im_context_set_cursor_location", 
                              libgtk.}
proc `cursor_location=`*(context: IMContext; 
    area: gdk3.Rectangle) {.importc: "gtk_im_context_set_cursor_location", 
                              libgtk.}
proc set_use_preedit*(context: IMContext; 
                                     use_preedit: gboolean) {.
    importc: "gtk_im_context_set_use_preedit", libgtk.}
proc `use_preedit=`*(context: IMContext; 
                                     use_preedit: gboolean) {.
    importc: "gtk_im_context_set_use_preedit", libgtk.}
proc set_surrounding*(context: IMContext; 
                                     text: cstring; len: gint; 
                                     cursor_index: gint) {.
    importc: "gtk_im_context_set_surrounding", libgtk.}
proc `surrounding=`*(context: IMContext; 
                                     text: cstring; len: gint; 
                                     cursor_index: gint) {.
    importc: "gtk_im_context_set_surrounding", libgtk.}
proc get_surrounding*(context: IMContext; 
                                     text: var cstring; 
                                     cursor_index: var gint): gboolean {.
    importc: "gtk_im_context_get_surrounding", libgtk.}
proc surrounding*(context: IMContext; 
                                     text: var cstring; 
                                     cursor_index: var gint): gboolean {.
    importc: "gtk_im_context_get_surrounding", libgtk.}
proc delete_surrounding*(context: IMContext; 
    offset: gint; n_chars: gint): gboolean {.
    importc: "gtk_im_context_delete_surrounding", libgtk.}

const 
  ENTRY_BUFFER_MAX_SIZE* = G_MAXUSHORT
template gtk_entry_buffer*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, entry_buffer_get_type(), EntryBufferObj))

template gtk_entry_buffer_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, entry_buffer_get_type(), EntryBufferClassObj))

template gtk_is_entry_buffer*(obj: expr): expr = 
  (g_type_check_instance_type(obj, entry_buffer_get_type()))

template gtk_is_entry_buffer_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, entry_buffer_get_type()))

template gtk_entry_buffer_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, entry_buffer_get_type(), EntryBufferClassObj))

type 
  EntryBufferPrivateObj = object 
  
type 
  EntryBuffer* =  ptr EntryBufferObj
  EntryBufferPtr* = ptr EntryBufferObj
  EntryBufferObj*{.final.} = object of GObjectObj
    priv25: ptr EntryBufferPrivateObj

type 
  EntryBufferClass* =  ptr EntryBufferClassObj
  EntryBufferClassPtr* = ptr EntryBufferClassObj
  EntryBufferClassObj*{.final.} = object of GObjectClassObj
    inserted_text*: proc (buffer: EntryBuffer; position: guint; 
                          chars: cstring; n_chars: guint) {.cdecl.}
    deleted_text*: proc (buffer: EntryBuffer; position: guint; 
                         n_chars: guint) {.cdecl.}
    get_text*: proc (buffer: EntryBuffer; n_bytes: ptr gsize): cstring {.cdecl.}
    get_length*: proc (buffer: EntryBuffer): guint {.cdecl.}
    insert_text*: proc (buffer: EntryBuffer; position: guint; 
                        chars: cstring; n_chars: guint): guint {.cdecl.}
    delete_text*: proc (buffer: EntryBuffer; position: guint; 
                        n_chars: guint): guint {.cdecl.}
    gtk_reserved231: proc () {.cdecl.}
    gtk_reserved232: proc () {.cdecl.}
    gtk_reserved233: proc () {.cdecl.}
    gtk_reserved234: proc () {.cdecl.}
    gtk_reserved235: proc () {.cdecl.}
    gtk_reserved236: proc () {.cdecl.}
    gtk_reserved237: proc () {.cdecl.}
    gtk_reserved238: proc () {.cdecl.}

proc entry_buffer_get_type*(): GType {.
    importc: "gtk_entry_buffer_get_type", libgtk.}
proc entry_buffer_new*(initial_chars: cstring; n_initial_chars: gint): EntryBuffer {.
    importc: "gtk_entry_buffer_new", libgtk.}
proc get_bytes*(buffer: EntryBuffer): gsize {.
    importc: "gtk_entry_buffer_get_bytes", libgtk.}
proc bytes*(buffer: EntryBuffer): gsize {.
    importc: "gtk_entry_buffer_get_bytes", libgtk.}
proc get_length*(buffer: EntryBuffer): guint {.
    importc: "gtk_entry_buffer_get_length", libgtk.}
proc length*(buffer: EntryBuffer): guint {.
    importc: "gtk_entry_buffer_get_length", libgtk.}
proc get_text*(buffer: EntryBuffer): cstring {.
    importc: "gtk_entry_buffer_get_text", libgtk.}
proc text*(buffer: EntryBuffer): cstring {.
    importc: "gtk_entry_buffer_get_text", libgtk.}
proc set_text*(buffer: EntryBuffer; chars: cstring; 
                                n_chars: gint) {.
    importc: "gtk_entry_buffer_set_text", libgtk.}
proc `text=`*(buffer: EntryBuffer; chars: cstring; 
                                n_chars: gint) {.
    importc: "gtk_entry_buffer_set_text", libgtk.}
proc set_max_length*(buffer: EntryBuffer; 
                                      max_length: gint) {.
    importc: "gtk_entry_buffer_set_max_length", libgtk.}
proc `max_length=`*(buffer: EntryBuffer; 
                                      max_length: gint) {.
    importc: "gtk_entry_buffer_set_max_length", libgtk.}
proc get_max_length*(buffer: EntryBuffer): gint {.
    importc: "gtk_entry_buffer_get_max_length", libgtk.}
proc max_length*(buffer: EntryBuffer): gint {.
    importc: "gtk_entry_buffer_get_max_length", libgtk.}
proc insert_text*(buffer: EntryBuffer; 
                                   position: guint; chars: cstring; 
                                   n_chars: gint): guint {.
    importc: "gtk_entry_buffer_insert_text", libgtk.}
proc delete_text*(buffer: EntryBuffer; 
                                   position: guint; n_chars: gint): guint {.
    importc: "gtk_entry_buffer_delete_text", libgtk.}
proc emit_inserted_text*(buffer: EntryBuffer; 
    position: guint; chars: cstring; n_chars: guint) {.
    importc: "gtk_entry_buffer_emit_inserted_text", libgtk.}
proc emit_deleted_text*(buffer: EntryBuffer; 
    position: guint; n_chars: guint) {.
    importc: "gtk_entry_buffer_emit_deleted_text", libgtk.}

template gtk_list_store*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, list_store_get_type(), ListStoreObj))

template gtk_list_store_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, list_store_get_type(), ListStoreClassObj))

template gtk_is_list_store*(obj: expr): expr = 
  (g_type_check_instance_type(obj, list_store_get_type()))

template gtk_is_list_store_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, list_store_get_type()))

template gtk_list_store_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, list_store_get_type(), ListStoreClassObj))

type 
  ListStorePrivateObj = object 
  
type 
  ListStore* =  ptr ListStoreObj
  ListStorePtr* = ptr ListStoreObj
  ListStoreObj*{.final.} = object of GObjectObj
    priv26: ptr ListStorePrivateObj

type 
  ListStoreClass* =  ptr ListStoreClassObj
  ListStoreClassPtr* = ptr ListStoreClassObj
  ListStoreClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved241: proc () {.cdecl.}
    gtk_reserved242: proc () {.cdecl.}
    gtk_reserved243: proc () {.cdecl.}
    gtk_reserved244: proc () {.cdecl.}

proc list_store_get_type*(): GType {.importc: "gtk_list_store_get_type", 
    libgtk.}
proc list_store_new*(n_columns: gint): ListStore {.varargs, 
    importc: "gtk_list_store_new", libgtk.}
proc list_store_newv*(n_columns: gint; types: ptr GType): ListStore {.
    importc: "gtk_list_store_newv", libgtk.}
proc set_column_types*(list_store: ListStore; 
                                      n_columns: gint; types: ptr GType) {.
    importc: "gtk_list_store_set_column_types", libgtk.}
proc `column_types=`*(list_store: ListStore; 
                                      n_columns: gint; types: ptr GType) {.
    importc: "gtk_list_store_set_column_types", libgtk.}
proc set_value*(list_store: ListStore; 
                               iter: TreeIter; column: gint; 
                               value: gobject.GValue) {.
    importc: "gtk_list_store_set_value", libgtk.}
proc `value=`*(list_store: ListStore; 
                               iter: TreeIter; column: gint; 
                               value: gobject.GValue) {.
    importc: "gtk_list_store_set_value", libgtk.}
proc set*(list_store: ListStore; iter: TreeIter) {.
    varargs, importc: "gtk_list_store_set", libgtk.}
proc set_valuesv*(list_store: ListStore; 
                                 iter: TreeIter; columns: var gint; 
                                 values: gobject.GValue; n_values: gint) {.
    importc: "gtk_list_store_set_valuesv", libgtk.}
proc `valuesv=`*(list_store: ListStore; 
                                 iter: TreeIter; columns: var gint; 
                                 values: gobject.GValue; n_values: gint) {.
    importc: "gtk_list_store_set_valuesv", libgtk.}

discard """ proc "set_valist*(list_store: ListStore; 
                                iter: TreeIter; var_args: va_list) {.
    importc: "gtk_list_store_set_valist", libgtk.}"""

proc remove*(list_store: ListStore; 
                            iter: TreeIter): gboolean {.
    importc: "gtk_list_store_remove", libgtk.}
proc insert*(list_store: ListStore; 
                            iter: TreeIter; position: gint) {.
    importc: "gtk_list_store_insert", libgtk.}
proc insert_before*(list_store: ListStore; 
                                   iter: TreeIter; 
                                   sibling: TreeIter) {.
    importc: "gtk_list_store_insert_before", libgtk.}
proc insert_after*(list_store: ListStore; 
                                  iter: TreeIter; 
                                  sibling: TreeIter) {.
    importc: "gtk_list_store_insert_after", libgtk.}
proc insert_with_values*(list_store: ListStore; 
    iter: TreeIter; position: gint) {.varargs, 
    importc: "gtk_list_store_insert_with_values", libgtk.}
proc insert_with_valuesv*(list_store: ListStore; 
    iter: TreeIter; position: gint; columns: var gint; 
    values: gobject.GValue; n_values: gint) {.
    importc: "gtk_list_store_insert_with_valuesv", libgtk.}
proc prepend*(list_store: ListStore; 
                             iter: TreeIter) {.
    importc: "gtk_list_store_prepend", libgtk.}
proc append*(list_store: ListStore; 
                            iter: TreeIter) {.
    importc: "gtk_list_store_append", libgtk.}
proc clear*(list_store: ListStore) {.
    importc: "gtk_list_store_clear", libgtk.}
proc iter_is_valid*(list_store: ListStore; 
                                   iter: TreeIter): gboolean {.
    importc: "gtk_list_store_iter_is_valid", libgtk.}
proc reorder*(store: ListStore; new_order: var gint) {.
    importc: "gtk_list_store_reorder", libgtk.}
proc swap*(store: ListStore; a: TreeIter; 
                          b: TreeIter) {.
    importc: "gtk_list_store_swap", libgtk.}
proc move_after*(store: ListStore; 
                                iter: TreeIter; 
                                position: TreeIter) {.
    importc: "gtk_list_store_move_after", libgtk.}
proc move_before*(store: ListStore; 
                                 iter: TreeIter; 
                                 position: TreeIter) {.
    importc: "gtk_list_store_move_before", libgtk.}

template gtk_tree_model_filter*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_model_filter_get_type(), 
                              TreeModelFilterObj))

template gtk_tree_model_filter_class*(vtable: expr): expr = 
  (g_type_check_class_cast(vtable, tree_model_filter_get_type(), 
                           TreeModelFilterClassObj))

template gtk_is_tree_model_filter*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_model_filter_get_type()))

template gtk_is_tree_model_filter_class*(vtable: expr): expr = 
  (g_type_check_class_type(vtable, tree_model_filter_get_type()))

template gtk_tree_model_filter_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_model_filter_get_type(), 
                             TreeModelFilterClassObj))

type 
  TreeModelFilterVisibleFunc* = proc (model: TreeModel; 
      iter: TreeIter; data: gpointer): gboolean {.cdecl.}
type 
  TreeModelFilterModifyFunc* = proc (model: TreeModel; 
      iter: TreeIter; value: gobject.GValue; column: gint; data: gpointer) {.cdecl.}
  TreeModelFilterPrivateObj = object 
  
type 
  TreeModelFilter* =  ptr TreeModelFilterObj
  TreeModelFilterPtr* = ptr TreeModelFilterObj
  TreeModelFilterObj*{.final.} = object of GObjectObj
    priv27: ptr TreeModelFilterPrivateObj

type 
  TreeModelFilterClass* =  ptr TreeModelFilterClassObj
  TreeModelFilterClassPtr* = ptr TreeModelFilterClassObj
  TreeModelFilterClassObj*{.final.} = object of GObjectClassObj
    visible*: proc (self: TreeModelFilter; 
                    child_model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    modify*: proc (self: TreeModelFilter; 
                   child_model: TreeModel; iter: TreeIter; 
                   value: gobject.GValue; column: gint) {.cdecl.}
    gtk_reserved251: proc () {.cdecl.}
    gtk_reserved252: proc () {.cdecl.}
    gtk_reserved253: proc () {.cdecl.}
    gtk_reserved254: proc () {.cdecl.}

proc tree_model_filter_get_type*(): GType {.
    importc: "gtk_tree_model_filter_get_type", libgtk.}
proc filter_new*(child_model: TreeModel; 
                                root: TreePath): TreeModel {.
    importc: "gtk_tree_model_filter_new", libgtk.}
proc set_visible_func*(filter: TreeModelFilter; 
    `func`: TreeModelFilterVisibleFunc; data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_model_filter_set_visible_func", 
                               libgtk.}
proc `visible_func=`*(filter: TreeModelFilter; 
    `func`: TreeModelFilterVisibleFunc; data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_model_filter_set_visible_func", 
                               libgtk.}
proc set_modify_func*(filter: TreeModelFilter; 
    n_columns: gint; types: ptr GType; `func`: TreeModelFilterModifyFunc; 
    data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_model_filter_set_modify_func", libgtk.}
proc `modify_func=`*(filter: TreeModelFilter; 
    n_columns: gint; types: ptr GType; `func`: TreeModelFilterModifyFunc; 
    data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_model_filter_set_modify_func", libgtk.}
proc set_visible_column*(filter: TreeModelFilter; 
    column: gint) {.importc: "gtk_tree_model_filter_set_visible_column", 
                    libgtk.}
proc `visible_column=`*(filter: TreeModelFilter; 
    column: gint) {.importc: "gtk_tree_model_filter_set_visible_column", 
                    libgtk.}
proc get_model*(filter: TreeModelFilter): TreeModel {.
    importc: "gtk_tree_model_filter_get_model", libgtk.}
proc model*(filter: TreeModelFilter): TreeModel {.
    importc: "gtk_tree_model_filter_get_model", libgtk.}
proc convert_child_iter_to_iter*(
    filter: TreeModelFilter; filter_iter: TreeIter; 
    child_iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_filter_convert_child_iter_to_iter", libgtk.}
proc convert_iter_to_child_iter*(
    filter: TreeModelFilter; child_iter: TreeIter; 
    filter_iter: TreeIter) {.importc: "gtk_tree_model_filter_convert_iter_to_child_iter", 
                                    libgtk.}
proc convert_child_path_to_path*(
    filter: TreeModelFilter; child_path: TreePath): TreePath {.
    importc: "gtk_tree_model_filter_convert_child_path_to_path", libgtk.}
proc convert_path_to_child_path*(
    filter: TreeModelFilter; filter_path: TreePath): TreePath {.
    importc: "gtk_tree_model_filter_convert_path_to_child_path", libgtk.}
proc refilter*(filter: TreeModelFilter) {.
    importc: "gtk_tree_model_filter_refilter", libgtk.}
proc clear_cache*(filter: TreeModelFilter) {.
    importc: "gtk_tree_model_filter_clear_cache", libgtk.}

template gtk_entry_completion*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, entry_completion_get_type(), 
                              EntryCompletionObj))

template gtk_entry_completion_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, entry_completion_get_type(), 
                           EntryCompletionClassObj))

template gtk_is_entry_completion*(obj: expr): expr = 
  (g_type_check_instance_type(obj, entry_completion_get_type()))

template gtk_is_entry_completion_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, entry_completion_get_type()))

template gtk_entry_completion_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, entry_completion_get_type(), 
                             EntryCompletionClassObj))

type 
  EntryIconPosition* {.size: sizeof(cint), pure.} = enum 
    PRIMARY, SECONDARY
  EntryPrivateObj = object 
  
type 
  Entry* =  ptr EntryObj
  EntryPtr* = ptr EntryObj
  EntryObj = object of WidgetObj
    priv30: ptr EntryPrivateObj
type 
  EntryCompletionPrivateObj = object 
  
type 
  EntryCompletionMatchFunc* = proc (completion: EntryCompletion; 
      key: cstring; iter: TreeIter; user_data: gpointer): gboolean {.cdecl.}
  EntryCompletion* =  ptr EntryCompletionObj
  EntryCompletionPtr* = ptr EntryCompletionObj
  EntryCompletionObj*{.final.} = object of GObjectObj
    priv28: ptr EntryCompletionPrivateObj

type 
  EntryCompletionClass* =  ptr EntryCompletionClassObj
  EntryCompletionClassPtr* = ptr EntryCompletionClassObj
  EntryCompletionClassObj*{.final.} = object of GObjectClassObj
    match_selected*: proc (completion: EntryCompletion; 
                           model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    action_activated*: proc (completion: EntryCompletion; index: gint) {.cdecl.}
    insert_prefix*: proc (completion: EntryCompletion; 
                          prefix: cstring): gboolean {.cdecl.}
    cursor_on_match*: proc (completion: EntryCompletion; 
                            model: TreeModel; iter: TreeIter): gboolean {.cdecl.}
    no_matches*: proc (completion: EntryCompletion) {.cdecl.}
    gtk_reserved260: proc () {.cdecl.}
    gtk_reserved261: proc () {.cdecl.}
    gtk_reserved262: proc () {.cdecl.}

proc entry_completion_get_type*(): GType {.
    importc: "gtk_entry_completion_get_type", libgtk.}
proc entry_completion_new*(): EntryCompletion {.
    importc: "gtk_entry_completion_new", libgtk.}
proc entry_completion_new_with_area*(area: CellArea): EntryCompletion {.
    importc: "gtk_entry_completion_new_with_area", libgtk.}
proc get_entry*(completion: EntryCompletion): Entry {.
    importc: "gtk_entry_completion_get_entry", libgtk.}
proc entry*(completion: EntryCompletion): Entry {.
    importc: "gtk_entry_completion_get_entry", libgtk.}
proc set_model*(completion: EntryCompletion; 
                                     model: TreeModel) {.
    importc: "gtk_entry_completion_set_model", libgtk.}
proc `model=`*(completion: EntryCompletion; 
                                     model: TreeModel) {.
    importc: "gtk_entry_completion_set_model", libgtk.}
proc get_model*(completion: EntryCompletion): TreeModel {.
    importc: "gtk_entry_completion_get_model", libgtk.}
proc model*(completion: EntryCompletion): TreeModel {.
    importc: "gtk_entry_completion_get_model", libgtk.}
proc set_match_func*(completion: EntryCompletion; 
    `func`: EntryCompletionMatchFunc; func_data: gpointer; 
    func_notify: GDestroyNotify) {.importc: "gtk_entry_completion_set_match_func", 
                                   libgtk.}
proc `match_func=`*(completion: EntryCompletion; 
    `func`: EntryCompletionMatchFunc; func_data: gpointer; 
    func_notify: GDestroyNotify) {.importc: "gtk_entry_completion_set_match_func", 
                                   libgtk.}
proc set_minimum_key_length*(
    completion: EntryCompletion; length: gint) {.
    importc: "gtk_entry_completion_set_minimum_key_length", libgtk.}
proc `minimum_key_length=`*(
    completion: EntryCompletion; length: gint) {.
    importc: "gtk_entry_completion_set_minimum_key_length", libgtk.}
proc get_minimum_key_length*(
    completion: EntryCompletion): gint {.
    importc: "gtk_entry_completion_get_minimum_key_length", libgtk.}
proc minimum_key_length*(
    completion: EntryCompletion): gint {.
    importc: "gtk_entry_completion_get_minimum_key_length", libgtk.}
proc compute_prefix*(completion: EntryCompletion; 
    key: cstring): cstring {.importc: "gtk_entry_completion_compute_prefix", 
                               libgtk.}
proc complete*(completion: EntryCompletion) {.
    importc: "gtk_entry_completion_complete", libgtk.}
proc insert_prefix*(completion: EntryCompletion) {.
    importc: "gtk_entry_completion_insert_prefix", libgtk.}
proc insert_action_text*(
    completion: EntryCompletion; index: gint; text: cstring) {.
    importc: "gtk_entry_completion_insert_action_text", libgtk.}
proc insert_action_markup*(
    completion: EntryCompletion; index: gint; markup: cstring) {.
    importc: "gtk_entry_completion_insert_action_markup", libgtk.}
proc delete_action*(completion: EntryCompletion; 
    index: gint) {.importc: "gtk_entry_completion_delete_action", libgtk.}
proc set_inline_completion*(
    completion: EntryCompletion; inline_completion: gboolean) {.
    importc: "gtk_entry_completion_set_inline_completion", libgtk.}
proc `inline_completion=`*(
    completion: EntryCompletion; inline_completion: gboolean) {.
    importc: "gtk_entry_completion_set_inline_completion", libgtk.}
proc get_inline_completion*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_inline_completion", libgtk.}
proc inline_completion*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_inline_completion", libgtk.}
proc set_inline_selection*(
    completion: EntryCompletion; inline_selection: gboolean) {.
    importc: "gtk_entry_completion_set_inline_selection", libgtk.}
proc `inline_selection=`*(
    completion: EntryCompletion; inline_selection: gboolean) {.
    importc: "gtk_entry_completion_set_inline_selection", libgtk.}
proc get_inline_selection*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_inline_selection", libgtk.}
proc inline_selection*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_inline_selection", libgtk.}
proc set_popup_completion*(
    completion: EntryCompletion; popup_completion: gboolean) {.
    importc: "gtk_entry_completion_set_popup_completion", libgtk.}
proc `popup_completion=`*(
    completion: EntryCompletion; popup_completion: gboolean) {.
    importc: "gtk_entry_completion_set_popup_completion", libgtk.}
proc get_popup_completion*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_completion", libgtk.}
proc popup_completion*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_completion", libgtk.}
proc set_popup_set_width*(
    completion: EntryCompletion; popup_set_width: gboolean) {.
    importc: "gtk_entry_completion_set_popup_set_width", libgtk.}
proc `popup_set_width=`*(
    completion: EntryCompletion; popup_set_width: gboolean) {.
    importc: "gtk_entry_completion_set_popup_set_width", libgtk.}
proc get_popup_set_width*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_set_width", libgtk.}
proc popup_set_width*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_set_width", libgtk.}
proc set_popup_single_match*(
    completion: EntryCompletion; popup_single_match: gboolean) {.
    importc: "gtk_entry_completion_set_popup_single_match", libgtk.}
proc `popup_single_match=`*(
    completion: EntryCompletion; popup_single_match: gboolean) {.
    importc: "gtk_entry_completion_set_popup_single_match", libgtk.}
proc get_popup_single_match*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_single_match", libgtk.}
proc popup_single_match*(
    completion: EntryCompletion): gboolean {.
    importc: "gtk_entry_completion_get_popup_single_match", libgtk.}
proc get_completion_prefix*(
    completion: EntryCompletion): cstring {.
    importc: "gtk_entry_completion_get_completion_prefix", libgtk.}
proc completion_prefix*(
    completion: EntryCompletion): cstring {.
    importc: "gtk_entry_completion_get_completion_prefix", libgtk.}
proc set_text_column*(completion: EntryCompletion; 
    column: gint) {.importc: "gtk_entry_completion_set_text_column", 
                    libgtk.}
proc `text_column=`*(completion: EntryCompletion; 
    column: gint) {.importc: "gtk_entry_completion_set_text_column", 
                    libgtk.}
proc get_text_column*(completion: EntryCompletion): gint {.
    importc: "gtk_entry_completion_get_text_column", libgtk.}
proc text_column*(completion: EntryCompletion): gint {.
    importc: "gtk_entry_completion_get_text_column", libgtk.}

template gtk_image*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, image_get_type(), ImageObj))

template gtk_image_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, image_get_type(), ImageClassObj))

template gtk_is_image*(obj: expr): expr = 
  (g_type_check_instance_type(obj, image_get_type()))

template gtk_is_image_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, image_get_type()))

template gtk_image_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, image_get_type(), ImageClassObj))

type 
  ImagePrivateObj = object 
  
type 
  ImageType* {.size: sizeof(cint), pure.} = enum 
    EMPTY, PIXBUF, STOCK, ICON_SET, 
    ANIMATION, ICON_NAME, GICON, 
    SURFACE
type 
  Image* =  ptr ImageObj
  ImagePtr* = ptr ImageObj
  ImageObj*{.final.} = object of MiscObj
    priv29: ptr ImagePrivateObj

type 
  ImageClass* =  ptr ImageClassObj
  ImageClassPtr* = ptr ImageClassObj
  ImageClassObj*{.final.} = object of MiscClassObj
    gtk_reserved271: proc () {.cdecl.}
    gtk_reserved272: proc () {.cdecl.}
    gtk_reserved273: proc () {.cdecl.}
    gtk_reserved274: proc () {.cdecl.}

proc image_get_type*(): GType {.importc: "gtk_image_get_type", libgtk.}
proc image_new*(): Image {.importc: "gtk_image_new", libgtk.}
proc image_new_from_file*(filename: cstring): Image {.
    importc: "gtk_image_new_from_file", libgtk.}
proc image_new_from_resource*(resource_path: cstring): Image {.
    importc: "gtk_image_new_from_resource", libgtk.}
proc image_new_from_pixbuf*(pixbuf: gdk_pixbuf.GdkPixbuf): Image {.
    importc: "gtk_image_new_from_pixbuf", libgtk.}
proc image_new_from_stock*(stock_id: cstring; size: IconSize): Image {.
    importc: "gtk_image_new_from_stock", libgtk.}
proc image_new_from_icon_set*(icon_set: IconSet; size: IconSize): Image {.
    importc: "gtk_image_new_from_icon_set", libgtk.}
proc image_new_from_animation*(animation: gdk_pixbuf.Animation): Image {.
    importc: "gtk_image_new_from_animation", libgtk.}
proc image_new_from_icon_name*(icon_name: cstring; size: IconSize): Image {.
    importc: "gtk_image_new_from_icon_name", libgtk.}
proc image_new_from_gicon*(icon: gio.GIcon; size: IconSize): Image {.
    importc: "gtk_image_new_from_gicon", libgtk.}
proc image_new_from_surface*(surface: cairo.Surface): Image {.
    importc: "gtk_image_new_from_surface", libgtk.}
proc clear*(image: Image) {.importc: "gtk_image_clear", 
    libgtk.}
proc set_from_file*(image: Image; filename: cstring) {.
    importc: "gtk_image_set_from_file", libgtk.}
proc `from_file=`*(image: Image; filename: cstring) {.
    importc: "gtk_image_set_from_file", libgtk.}
proc set_from_resource*(image: Image; 
                                  resource_path: cstring) {.
    importc: "gtk_image_set_from_resource", libgtk.}
proc `from_resource=`*(image: Image; 
                                  resource_path: cstring) {.
    importc: "gtk_image_set_from_resource", libgtk.}
proc set_from_pixbuf*(image: Image; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_image_set_from_pixbuf", libgtk.}
proc `from_pixbuf=`*(image: Image; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_image_set_from_pixbuf", libgtk.}
proc set_from_stock*(image: Image; stock_id: cstring; 
                               size: IconSize) {.
    importc: "gtk_image_set_from_stock", libgtk.}
proc `from_stock=`*(image: Image; stock_id: cstring; 
                               size: IconSize) {.
    importc: "gtk_image_set_from_stock", libgtk.}
proc set_from_icon_set*(image: Image; 
                                  icon_set: IconSet; size: IconSize) {.
    importc: "gtk_image_set_from_icon_set", libgtk.}
proc `from_icon_set=`*(image: Image; 
                                  icon_set: IconSet; size: IconSize) {.
    importc: "gtk_image_set_from_icon_set", libgtk.}
proc set_from_animation*(image: Image; 
                                   animation: gdk_pixbuf.Animation) {.
    importc: "gtk_image_set_from_animation", libgtk.}
proc `from_animation=`*(image: Image; 
                                   animation: gdk_pixbuf.Animation) {.
    importc: "gtk_image_set_from_animation", libgtk.}
proc set_from_icon_name*(image: Image; icon_name: cstring; 
                                   size: IconSize) {.
    importc: "gtk_image_set_from_icon_name", libgtk.}
proc `from_icon_name=`*(image: Image; icon_name: cstring; 
                                   size: IconSize) {.
    importc: "gtk_image_set_from_icon_name", libgtk.}
proc set_from_gicon*(image: Image; icon: gio.GIcon; 
                               size: IconSize) {.
    importc: "gtk_image_set_from_gicon", libgtk.}
proc `from_gicon=`*(image: Image; icon: gio.GIcon; 
                               size: IconSize) {.
    importc: "gtk_image_set_from_gicon", libgtk.}
proc set_from_surface*(image: Image; 
                                 surface: cairo.Surface) {.
    importc: "gtk_image_set_from_surface", libgtk.}
proc `from_surface=`*(image: Image; 
                                 surface: cairo.Surface) {.
    importc: "gtk_image_set_from_surface", libgtk.}
proc set_pixel_size*(image: Image; pixel_size: gint) {.
    importc: "gtk_image_set_pixel_size", libgtk.}
proc `pixel_size=`*(image: Image; pixel_size: gint) {.
    importc: "gtk_image_set_pixel_size", libgtk.}
proc get_storage_type*(image: Image): ImageType {.
    importc: "gtk_image_get_storage_type", libgtk.}
proc storage_type*(image: Image): ImageType {.
    importc: "gtk_image_get_storage_type", libgtk.}
proc get_pixbuf*(image: Image): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_image_get_pixbuf", libgtk.}
proc pixbuf*(image: Image): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_image_get_pixbuf", libgtk.}
proc get_stock*(image: Image; stock_id: var cstring; 
                          size: var IconSize) {.
    importc: "gtk_image_get_stock", libgtk.}
proc get_icon_set*(image: Image; 
                             icon_set: var IconSet; 
                             size: var IconSize) {.
    importc: "gtk_image_get_icon_set", libgtk.}
proc get_animation*(image: Image): gdk_pixbuf.Animation {.
    importc: "gtk_image_get_animation", libgtk.}
proc animation*(image: Image): gdk_pixbuf.Animation {.
    importc: "gtk_image_get_animation", libgtk.}
proc get_icon_name*(image: Image; icon_name: var cstring; 
                              size: var IconSize) {.
    importc: "gtk_image_get_icon_name", libgtk.}
proc get_gicon*(image: Image; gicon: var gio.GIcon; 
                          size: var IconSize) {.
    importc: "gtk_image_get_gicon", libgtk.}
proc get_pixel_size*(image: Image): gint {.
    importc: "gtk_image_get_pixel_size", libgtk.}
proc pixel_size*(image: Image): gint {.
    importc: "gtk_image_get_pixel_size", libgtk.}

template gtk_entry*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, entry_get_type(), EntryObj))

template gtk_entry_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, entry_get_type(), EntryClassObj))

template gtk_is_entry*(obj: expr): expr = 
  (g_type_check_instance_type(obj, entry_get_type()))

template gtk_is_entry_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, entry_get_type()))

template gtk_entry_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, entry_get_type(), EntryClassObj))

type 
  EntryClass* =  ptr EntryClassObj
  EntryClassPtr* = ptr EntryClassObj
  EntryClassObj = object of WidgetClassObj
    populate_popup*: proc (entry: Entry; popup: Widget) {.cdecl.}
    activate*: proc (entry: Entry) {.cdecl.}
    move_cursor*: proc (entry: Entry; step: MovementStep; 
                        count: gint; extend_selection: gboolean) {.cdecl.}
    insert_at_cursor*: proc (entry: Entry; str: cstring) {.cdecl.}
    delete_from_cursor*: proc (entry: Entry; `type`: DeleteType; 
                               count: gint) {.cdecl.}
    backspace*: proc (entry: Entry) {.cdecl.}
    cut_clipboard*: proc (entry: Entry) {.cdecl.}
    copy_clipboard*: proc (entry: Entry) {.cdecl.}
    paste_clipboard*: proc (entry: Entry) {.cdecl.}
    toggle_overwrite*: proc (entry: Entry) {.cdecl.}
    get_text_area_size*: proc (entry: Entry; x: var gint; y: var gint; 
                               width: var gint; height: var gint) {.cdecl.}
    get_frame_size*: proc (entry: Entry; x: var gint; y: var gint; 
                           width: var gint; height: var gint) {.cdecl.}
    gtk_reserved281: proc () {.cdecl.}
    gtk_reserved282: proc () {.cdecl.}
    gtk_reserved283: proc () {.cdecl.}
    gtk_reserved284: proc () {.cdecl.}
    gtk_reserved285: proc () {.cdecl.}
    gtk_reserved286: proc () {.cdecl.}
    gtk_reserved287: proc () {.cdecl.}

proc entry_get_type*(): GType {.importc: "gtk_entry_get_type", libgtk.}
proc entry_new*(): Entry {.importc: "gtk_entry_new", libgtk.}
proc entry_new_with_buffer*(buffer: EntryBuffer): Entry {.
    importc: "gtk_entry_new_with_buffer", libgtk.}
proc get_buffer*(entry: Entry): EntryBuffer {.
    importc: "gtk_entry_get_buffer", libgtk.}
proc buffer*(entry: Entry): EntryBuffer {.
    importc: "gtk_entry_get_buffer", libgtk.}
proc set_buffer*(entry: Entry; buffer: EntryBuffer) {.
    importc: "gtk_entry_set_buffer", libgtk.}
proc `buffer=`*(entry: Entry; buffer: EntryBuffer) {.
    importc: "gtk_entry_set_buffer", libgtk.}
proc get_text_area*(entry: Entry; text_area: var gdk3.RectangleObj) {.
    importc: "gtk_entry_get_text_area", libgtk.}
proc set_visibility*(entry: Entry; visible: gboolean) {.
    importc: "gtk_entry_set_visibility", libgtk.}
proc `visibility=`*(entry: Entry; visible: gboolean) {.
    importc: "gtk_entry_set_visibility", libgtk.}
proc get_visibility*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_visibility", libgtk.}
proc visibility*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_visibility", libgtk.}
proc set_invisible_char*(entry: Entry; ch: gunichar) {.
    importc: "gtk_entry_set_invisible_char", libgtk.}
proc `invisible_char=`*(entry: Entry; ch: gunichar) {.
    importc: "gtk_entry_set_invisible_char", libgtk.}
proc get_invisible_char*(entry: Entry): gunichar {.
    importc: "gtk_entry_get_invisible_char", libgtk.}
proc invisible_char*(entry: Entry): gunichar {.
    importc: "gtk_entry_get_invisible_char", libgtk.}
proc unset_invisible_char*(entry: Entry) {.
    importc: "gtk_entry_unset_invisible_char", libgtk.}
proc set_has_frame*(entry: Entry; setting: gboolean) {.
    importc: "gtk_entry_set_has_frame", libgtk.}
proc `has_frame=`*(entry: Entry; setting: gboolean) {.
    importc: "gtk_entry_set_has_frame", libgtk.}
proc get_has_frame*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_has_frame", libgtk.}
proc has_frame*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_has_frame", libgtk.}
proc set_inner_border*(entry: Entry; border: Border) {.
    importc: "gtk_entry_set_inner_border", libgtk.}
proc `inner_border=`*(entry: Entry; border: Border) {.
    importc: "gtk_entry_set_inner_border", libgtk.}
proc get_inner_border*(entry: Entry): Border {.
    importc: "gtk_entry_get_inner_border", libgtk.}
proc inner_border*(entry: Entry): Border {.
    importc: "gtk_entry_get_inner_border", libgtk.}
proc set_overwrite_mode*(entry: Entry; overwrite: gboolean) {.
    importc: "gtk_entry_set_overwrite_mode", libgtk.}
proc `overwrite_mode=`*(entry: Entry; overwrite: gboolean) {.
    importc: "gtk_entry_set_overwrite_mode", libgtk.}
proc get_overwrite_mode*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_overwrite_mode", libgtk.}
proc overwrite_mode*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_overwrite_mode", libgtk.}
proc set_max_length*(entry: Entry; max: gint) {.
    importc: "gtk_entry_set_max_length", libgtk.}
proc `max_length=`*(entry: Entry; max: gint) {.
    importc: "gtk_entry_set_max_length", libgtk.}
proc get_max_length*(entry: Entry): gint {.
    importc: "gtk_entry_get_max_length", libgtk.}
proc max_length*(entry: Entry): gint {.
    importc: "gtk_entry_get_max_length", libgtk.}
proc get_text_length*(entry: Entry): guint16 {.
    importc: "gtk_entry_get_text_length", libgtk.}
proc text_length*(entry: Entry): guint16 {.
    importc: "gtk_entry_get_text_length", libgtk.}
proc set_activates_default*(entry: Entry; setting: gboolean) {.
    importc: "gtk_entry_set_activates_default", libgtk.}
proc `activates_default=`*(entry: Entry; setting: gboolean) {.
    importc: "gtk_entry_set_activates_default", libgtk.}
proc get_activates_default*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_activates_default", libgtk.}
proc activates_default*(entry: Entry): gboolean {.
    importc: "gtk_entry_get_activates_default", libgtk.}
proc set_width_chars*(entry: Entry; n_chars: gint) {.
    importc: "gtk_entry_set_width_chars", libgtk.}
proc `width_chars=`*(entry: Entry; n_chars: gint) {.
    importc: "gtk_entry_set_width_chars", libgtk.}
proc get_width_chars*(entry: Entry): gint {.
    importc: "gtk_entry_get_width_chars", libgtk.}
proc width_chars*(entry: Entry): gint {.
    importc: "gtk_entry_get_width_chars", libgtk.}
proc set_max_width_chars*(entry: Entry; n_chars: gint) {.
    importc: "gtk_entry_set_max_width_chars", libgtk.}
proc `max_width_chars=`*(entry: Entry; n_chars: gint) {.
    importc: "gtk_entry_set_max_width_chars", libgtk.}
proc get_max_width_chars*(entry: Entry): gint {.
    importc: "gtk_entry_get_max_width_chars", libgtk.}
proc max_width_chars*(entry: Entry): gint {.
    importc: "gtk_entry_get_max_width_chars", libgtk.}
proc set_text*(entry: Entry; text: cstring) {.
    importc: "gtk_entry_set_text", libgtk.}
proc `text=`*(entry: Entry; text: cstring) {.
    importc: "gtk_entry_set_text", libgtk.}
proc get_text*(entry: Entry): cstring {.
    importc: "gtk_entry_get_text", libgtk.}
proc text*(entry: Entry): cstring {.
    importc: "gtk_entry_get_text", libgtk.}
proc get_layout*(entry: Entry): pango.Layout {.
    importc: "gtk_entry_get_layout", libgtk.}
proc layout*(entry: Entry): pango.Layout {.
    importc: "gtk_entry_get_layout", libgtk.}
proc get_layout_offsets*(entry: Entry; x: var gint; 
                                   y: var gint) {.
    importc: "gtk_entry_get_layout_offsets", libgtk.}
proc set_alignment*(entry: Entry; xalign: gfloat) {.
    importc: "gtk_entry_set_alignment", libgtk.}
proc `alignment=`*(entry: Entry; xalign: gfloat) {.
    importc: "gtk_entry_set_alignment", libgtk.}
proc get_alignment*(entry: Entry): gfloat {.
    importc: "gtk_entry_get_alignment", libgtk.}
proc alignment*(entry: Entry): gfloat {.
    importc: "gtk_entry_get_alignment", libgtk.}
proc set_completion*(entry: Entry; 
                               completion: EntryCompletion) {.
    importc: "gtk_entry_set_completion", libgtk.}
proc `completion=`*(entry: Entry; 
                               completion: EntryCompletion) {.
    importc: "gtk_entry_set_completion", libgtk.}
proc get_completion*(entry: Entry): EntryCompletion {.
    importc: "gtk_entry_get_completion", libgtk.}
proc completion*(entry: Entry): EntryCompletion {.
    importc: "gtk_entry_get_completion", libgtk.}
proc layout_index_to_text_index*(entry: Entry; 
    layout_index: gint): gint {.importc: "gtk_entry_layout_index_to_text_index", 
                                libgtk.}
proc text_index_to_layout_index*(entry: Entry; 
    text_index: gint): gint {.importc: "gtk_entry_text_index_to_layout_index", 
                              libgtk.}
proc set_cursor_hadjustment*(entry: Entry; 
    adjustment: Adjustment) {.importc: "gtk_entry_set_cursor_hadjustment", 
                                     libgtk.}
proc `cursor_hadjustment=`*(entry: Entry; 
    adjustment: Adjustment) {.importc: "gtk_entry_set_cursor_hadjustment", 
                                     libgtk.}
proc get_cursor_hadjustment*(entry: Entry): Adjustment {.
    importc: "gtk_entry_get_cursor_hadjustment", libgtk.}
proc cursor_hadjustment*(entry: Entry): Adjustment {.
    importc: "gtk_entry_get_cursor_hadjustment", libgtk.}
proc set_progress_fraction*(entry: Entry; fraction: gdouble) {.
    importc: "gtk_entry_set_progress_fraction", libgtk.}
proc `progress_fraction=`*(entry: Entry; fraction: gdouble) {.
    importc: "gtk_entry_set_progress_fraction", libgtk.}
proc get_progress_fraction*(entry: Entry): gdouble {.
    importc: "gtk_entry_get_progress_fraction", libgtk.}
proc progress_fraction*(entry: Entry): gdouble {.
    importc: "gtk_entry_get_progress_fraction", libgtk.}
proc set_progress_pulse_step*(entry: Entry; fraction: gdouble) {.
    importc: "gtk_entry_set_progress_pulse_step", libgtk.}
proc `progress_pulse_step=`*(entry: Entry; fraction: gdouble) {.
    importc: "gtk_entry_set_progress_pulse_step", libgtk.}
proc get_progress_pulse_step*(entry: Entry): gdouble {.
    importc: "gtk_entry_get_progress_pulse_step", libgtk.}
proc progress_pulse_step*(entry: Entry): gdouble {.
    importc: "gtk_entry_get_progress_pulse_step", libgtk.}
proc progress_pulse*(entry: Entry) {.
    importc: "gtk_entry_progress_pulse", libgtk.}
proc get_placeholder_text*(entry: Entry): cstring {.
    importc: "gtk_entry_get_placeholder_text", libgtk.}
proc placeholder_text*(entry: Entry): cstring {.
    importc: "gtk_entry_get_placeholder_text", libgtk.}
proc set_placeholder_text*(entry: Entry; text: cstring) {.
    importc: "gtk_entry_set_placeholder_text", libgtk.}
proc `placeholder_text=`*(entry: Entry; text: cstring) {.
    importc: "gtk_entry_set_placeholder_text", libgtk.}
proc set_icon_from_pixbuf*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_entry_set_icon_from_pixbuf", libgtk.}
proc `icon_from_pixbuf=`*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_entry_set_icon_from_pixbuf", libgtk.}
proc set_icon_from_stock*(entry: Entry; 
                                    icon_pos: EntryIconPosition; 
                                    stock_id: cstring) {.
    importc: "gtk_entry_set_icon_from_stock", libgtk.}
proc `icon_from_stock=`*(entry: Entry; 
                                    icon_pos: EntryIconPosition; 
                                    stock_id: cstring) {.
    importc: "gtk_entry_set_icon_from_stock", libgtk.}
proc set_icon_from_icon_name*(entry: Entry; 
    icon_pos: EntryIconPosition; icon_name: cstring) {.
    importc: "gtk_entry_set_icon_from_icon_name", libgtk.}
proc `icon_from_icon_name=`*(entry: Entry; 
    icon_pos: EntryIconPosition; icon_name: cstring) {.
    importc: "gtk_entry_set_icon_from_icon_name", libgtk.}
proc set_icon_from_gicon*(entry: Entry; 
                                    icon_pos: EntryIconPosition; 
                                    icon: gio.GIcon) {.
    importc: "gtk_entry_set_icon_from_gicon", libgtk.}
proc `icon_from_gicon=`*(entry: Entry; 
                                    icon_pos: EntryIconPosition; 
                                    icon: gio.GIcon) {.
    importc: "gtk_entry_set_icon_from_gicon", libgtk.}
proc get_icon_storage_type*(entry: Entry; 
                                      icon_pos: EntryIconPosition): ImageType {.
    importc: "gtk_entry_get_icon_storage_type", libgtk.}
proc icon_storage_type*(entry: Entry; 
                                      icon_pos: EntryIconPosition): ImageType {.
    importc: "gtk_entry_get_icon_storage_type", libgtk.}
proc get_icon_pixbuf*(entry: Entry; 
                                icon_pos: EntryIconPosition): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_entry_get_icon_pixbuf", libgtk.}
proc icon_pixbuf*(entry: Entry; 
                                icon_pos: EntryIconPosition): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_entry_get_icon_pixbuf", libgtk.}
proc get_icon_stock*(entry: Entry; 
                               icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_stock", libgtk.}
proc icon_stock*(entry: Entry; 
                               icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_stock", libgtk.}
proc get_icon_name*(entry: Entry; 
                              icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_name", libgtk.}
proc icon_name*(entry: Entry; 
                              icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_name", libgtk.}
proc get_icon_gicon*(entry: Entry; 
                               icon_pos: EntryIconPosition): gio.GIcon {.
    importc: "gtk_entry_get_icon_gicon", libgtk.}
proc icon_gicon*(entry: Entry; 
                               icon_pos: EntryIconPosition): gio.GIcon {.
    importc: "gtk_entry_get_icon_gicon", libgtk.}
proc set_icon_activatable*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     activatable: gboolean) {.
    importc: "gtk_entry_set_icon_activatable", libgtk.}
proc `icon_activatable=`*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     activatable: gboolean) {.
    importc: "gtk_entry_set_icon_activatable", libgtk.}
proc get_icon_activatable*(entry: Entry; 
                                     icon_pos: EntryIconPosition): gboolean {.
    importc: "gtk_entry_get_icon_activatable", libgtk.}
proc icon_activatable*(entry: Entry; 
                                     icon_pos: EntryIconPosition): gboolean {.
    importc: "gtk_entry_get_icon_activatable", libgtk.}
proc set_icon_sensitive*(entry: Entry; 
                                   icon_pos: EntryIconPosition; 
                                   sensitive: gboolean) {.
    importc: "gtk_entry_set_icon_sensitive", libgtk.}
proc `icon_sensitive=`*(entry: Entry; 
                                   icon_pos: EntryIconPosition; 
                                   sensitive: gboolean) {.
    importc: "gtk_entry_set_icon_sensitive", libgtk.}
proc get_icon_sensitive*(entry: Entry; 
                                   icon_pos: EntryIconPosition): gboolean {.
    importc: "gtk_entry_get_icon_sensitive", libgtk.}
proc icon_sensitive*(entry: Entry; 
                                   icon_pos: EntryIconPosition): gboolean {.
    importc: "gtk_entry_get_icon_sensitive", libgtk.}
proc get_icon_at_pos*(entry: Entry; x: gint; y: gint): gint {.
    importc: "gtk_entry_get_icon_at_pos", libgtk.}
proc icon_at_pos*(entry: Entry; x: gint; y: gint): gint {.
    importc: "gtk_entry_get_icon_at_pos", libgtk.}
proc set_icon_tooltip_text*(entry: Entry; 
                                      icon_pos: EntryIconPosition; 
                                      tooltip: cstring) {.
    importc: "gtk_entry_set_icon_tooltip_text", libgtk.}
proc `icon_tooltip_text=`*(entry: Entry; 
                                      icon_pos: EntryIconPosition; 
                                      tooltip: cstring) {.
    importc: "gtk_entry_set_icon_tooltip_text", libgtk.}
proc get_icon_tooltip_text*(entry: Entry; 
                                      icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_tooltip_text", libgtk.}
proc icon_tooltip_text*(entry: Entry; 
                                      icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_tooltip_text", libgtk.}
proc set_icon_tooltip_markup*(entry: Entry; 
    icon_pos: EntryIconPosition; tooltip: cstring) {.
    importc: "gtk_entry_set_icon_tooltip_markup", libgtk.}
proc `icon_tooltip_markup=`*(entry: Entry; 
    icon_pos: EntryIconPosition; tooltip: cstring) {.
    importc: "gtk_entry_set_icon_tooltip_markup", libgtk.}
proc get_icon_tooltip_markup*(entry: Entry; 
    icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_tooltip_markup", libgtk.}
proc icon_tooltip_markup*(entry: Entry; 
    icon_pos: EntryIconPosition): cstring {.
    importc: "gtk_entry_get_icon_tooltip_markup", libgtk.}
proc set_icon_drag_source*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     target_list: TargetList; 
                                     actions: gdk3.DragAction) {.
    importc: "gtk_entry_set_icon_drag_source", libgtk.}
proc `icon_drag_source=`*(entry: Entry; 
                                     icon_pos: EntryIconPosition; 
                                     target_list: TargetList; 
                                     actions: gdk3.DragAction) {.
    importc: "gtk_entry_set_icon_drag_source", libgtk.}
proc get_current_icon_drag_source*(entry: Entry): gint {.
    importc: "gtk_entry_get_current_icon_drag_source", libgtk.}
proc current_icon_drag_source*(entry: Entry): gint {.
    importc: "gtk_entry_get_current_icon_drag_source", libgtk.}
proc get_icon_area*(entry: Entry; 
                              icon_pos: EntryIconPosition; 
                              icon_area: var gdk3.RectangleObj) {.
    importc: "gtk_entry_get_icon_area", libgtk.}
proc im_context_filter_keypress*(entry: Entry; 
    event: gdk3.EventKey): gboolean {.
    importc: "gtk_entry_im_context_filter_keypress", libgtk.}
proc reset_im_context*(entry: Entry) {.
    importc: "gtk_entry_reset_im_context", libgtk.}
proc set_input_purpose*(entry: Entry; 
                                  purpose: InputPurpose) {.
    importc: "gtk_entry_set_input_purpose", libgtk.}
proc `input_purpose=`*(entry: Entry; 
                                  purpose: InputPurpose) {.
    importc: "gtk_entry_set_input_purpose", libgtk.}
proc get_input_purpose*(entry: Entry): InputPurpose {.
    importc: "gtk_entry_get_input_purpose", libgtk.}
proc input_purpose*(entry: Entry): InputPurpose {.
    importc: "gtk_entry_get_input_purpose", libgtk.}
proc set_input_hints*(entry: Entry; hints: InputHints) {.
    importc: "gtk_entry_set_input_hints", libgtk.}
proc `input_hints=`*(entry: Entry; hints: InputHints) {.
    importc: "gtk_entry_set_input_hints", libgtk.}
proc get_input_hints*(entry: Entry): InputHints {.
    importc: "gtk_entry_get_input_hints", libgtk.}
proc input_hints*(entry: Entry): InputHints {.
    importc: "gtk_entry_get_input_hints", libgtk.}
proc set_attributes*(entry: Entry; attrs: pango.AttrList) {.
    importc: "gtk_entry_set_attributes", libgtk.}
proc `attributes=`*(entry: Entry; attrs: pango.AttrList) {.
    importc: "gtk_entry_set_attributes", libgtk.}
proc get_attributes*(entry: Entry): pango.AttrList {.
    importc: "gtk_entry_get_attributes", libgtk.}
proc attributes*(entry: Entry): pango.AttrList {.
    importc: "gtk_entry_get_attributes", libgtk.}
proc set_tabs*(entry: Entry; tabs: pango.TabArray) {.
    importc: "gtk_entry_set_tabs", libgtk.}
proc `tabs=`*(entry: Entry; tabs: pango.TabArray) {.
    importc: "gtk_entry_set_tabs", libgtk.}
proc get_tabs*(entry: Entry): pango.TabArray {.
    importc: "gtk_entry_get_tabs", libgtk.}
proc tabs*(entry: Entry): pango.TabArray {.
    importc: "gtk_entry_get_tabs", libgtk.}
proc grab_focus_without_selecting*(entry: Entry) {.
    importc: "gtk_entry_grab_focus_without_selecting", libgtk.}

type 
  TreeViewDropPosition* {.size: sizeof(cint), pure.} = enum 
    BEFORE, AFTER, 
    INTO_OR_BEFORE, INTO_OR_AFTER
template gtk_tree_view*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_view_get_type(), TreeViewObj))

template gtk_tree_view_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_view_get_type(), TreeViewClassObj))

template gtk_is_tree_view*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_view_get_type()))

template gtk_is_tree_view_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_view_get_type()))

template gtk_tree_view_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_view_get_type(), TreeViewClassObj))

type 
  TreeSelectionPrivateObj = object 
type 
  TreeSelection* =  ptr TreeSelectionObj
  TreeSelectionPtr* = ptr TreeSelectionObj
  TreeSelectionObj*{.final.} = object of GObjectObj
    priv123: ptr TreeSelectionPrivateObj

type 
  TreeViewClass* =  ptr TreeViewClassObj
  TreeViewClassPtr* = ptr TreeViewClassObj
  TreeViewClassObj*{.final.} = object of ContainerClassObj
    row_activated*: proc (tree_view: TreeView; path: TreePath; 
                          column: TreeViewColumn) {.cdecl.}
    test_expand_row*: proc (tree_view: TreeView; iter: TreeIter; 
                            path: TreePath): gboolean {.cdecl.}
    test_collapse_row*: proc (tree_view: TreeView; 
                              iter: TreeIter; path: TreePath): gboolean {.cdecl.}
    row_expanded*: proc (tree_view: TreeView; iter: TreeIter; 
                         path: TreePath) {.cdecl.}
    row_collapsed*: proc (tree_view: TreeView; iter: TreeIter; 
                          path: TreePath) {.cdecl.}
    columns_changed*: proc (tree_view: TreeView) {.cdecl.}
    cursor_changed*: proc (tree_view: TreeView) {.cdecl.}
    move_cursor*: proc (tree_view: TreeView; step: MovementStep; 
                        count: gint): gboolean {.cdecl.}
    select_all*: proc (tree_view: TreeView): gboolean {.cdecl.}
    unselect_all*: proc (tree_view: TreeView): gboolean {.cdecl.}
    select_cursor_row*: proc (tree_view: TreeView; 
                              start_editing: gboolean): gboolean {.cdecl.}
    toggle_cursor_row*: proc (tree_view: TreeView): gboolean {.cdecl.}
    expand_collapse_cursor_row*: proc (tree_view: TreeView; 
        logical: gboolean; expand: gboolean; open_all: gboolean): gboolean {.cdecl.}
    select_cursor_parent*: proc (tree_view: TreeView): gboolean {.cdecl.}
    start_interactive_search*: proc (tree_view: TreeView): gboolean {.cdecl.}
    gtk_reserved291: proc () {.cdecl.}
    gtk_reserved292: proc () {.cdecl.}
    gtk_reserved293: proc () {.cdecl.}
    gtk_reserved294: proc () {.cdecl.}
    gtk_reserved295: proc () {.cdecl.}
    gtk_reserved296: proc () {.cdecl.}
    gtk_reserved297: proc () {.cdecl.}
    gtk_reserved298: proc () {.cdecl.}

type 
  TreeViewColumnDropFunc* = proc (tree_view: TreeView; 
                                     column: TreeViewColumn; 
                                     prev_column: TreeViewColumn; 
                                     next_column: TreeViewColumn; 
                                     data: gpointer): gboolean {.cdecl.}
type 
  TreeViewMappingFunc* = proc (tree_view: TreeView; 
                                  path: TreePath; user_data: gpointer) {.cdecl.}
type 
  TreeViewSearchEqualFunc* = proc (model: TreeModel; column: gint; 
                                      key: cstring; iter: TreeIter; 
                                      search_data: gpointer): gboolean {.cdecl.}
type 
  TreeViewRowSeparatorFunc* = proc (model: TreeModel; 
      iter: TreeIter; data: gpointer): gboolean {.cdecl.}
  TreeViewSearchPositionFunc* = proc (tree_view: TreeView; 
      search_dialog: Widget; user_data: gpointer) {.cdecl.}
proc tree_view_get_type*(): GType {.importc: "gtk_tree_view_get_type", 
    libgtk.}
proc tree_view_new*(): TreeView {.importc: "gtk_tree_view_new", 
    libgtk.}
proc tree_view_new_with_model*(model: TreeModel): TreeView {.
    importc: "gtk_tree_view_new_with_model", libgtk.}
proc get_model*(tree_view: TreeView): TreeModel {.
    importc: "gtk_tree_view_get_model", libgtk.}
proc model*(tree_view: TreeView): TreeModel {.
    importc: "gtk_tree_view_get_model", libgtk.}
proc set_model*(tree_view: TreeView; 
                              model: TreeModel) {.
    importc: "gtk_tree_view_set_model", libgtk.}
proc `model=`*(tree_view: TreeView; 
                              model: TreeModel) {.
    importc: "gtk_tree_view_set_model", libgtk.}
proc get_selection*(tree_view: TreeView): TreeSelection {.
    importc: "gtk_tree_view_get_selection", libgtk.}
proc selection*(tree_view: TreeView): TreeSelection {.
    importc: "gtk_tree_view_get_selection", libgtk.}
proc get_hadjustment*(tree_view: TreeView): Adjustment {.
    importc: "gtk_tree_view_get_hadjustment", libgtk.}
proc hadjustment*(tree_view: TreeView): Adjustment {.
    importc: "gtk_tree_view_get_hadjustment", libgtk.}
proc set_hadjustment*(tree_view: TreeView; 
                                    adjustment: Adjustment) {.
    importc: "gtk_tree_view_set_hadjustment", libgtk.}
proc `hadjustment=`*(tree_view: TreeView; 
                                    adjustment: Adjustment) {.
    importc: "gtk_tree_view_set_hadjustment", libgtk.}
proc get_vadjustment*(tree_view: TreeView): Adjustment {.
    importc: "gtk_tree_view_get_vadjustment", libgtk.}
proc vadjustment*(tree_view: TreeView): Adjustment {.
    importc: "gtk_tree_view_get_vadjustment", libgtk.}
proc set_vadjustment*(tree_view: TreeView; 
                                    adjustment: Adjustment) {.
    importc: "gtk_tree_view_set_vadjustment", libgtk.}
proc `vadjustment=`*(tree_view: TreeView; 
                                    adjustment: Adjustment) {.
    importc: "gtk_tree_view_set_vadjustment", libgtk.}
proc get_headers_visible*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_headers_visible", libgtk.}
proc headers_visible*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_headers_visible", libgtk.}
proc set_headers_visible*(tree_view: TreeView; 
    headers_visible: gboolean) {.importc: "gtk_tree_view_set_headers_visible", 
                                 libgtk.}
proc `headers_visible=`*(tree_view: TreeView; 
    headers_visible: gboolean) {.importc: "gtk_tree_view_set_headers_visible", 
                                 libgtk.}
proc columns_autosize*(tree_view: TreeView) {.
    importc: "gtk_tree_view_columns_autosize", libgtk.}
proc get_headers_clickable*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_headers_clickable", libgtk.}
proc headers_clickable*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_headers_clickable", libgtk.}
proc set_headers_clickable*(tree_view: TreeView; 
    setting: gboolean) {.importc: "gtk_tree_view_set_headers_clickable", 
                         libgtk.}
proc `headers_clickable=`*(tree_view: TreeView; 
    setting: gboolean) {.importc: "gtk_tree_view_set_headers_clickable", 
                         libgtk.}
proc set_rules_hint*(tree_view: TreeView; 
                                   setting: gboolean) {.
    importc: "gtk_tree_view_set_rules_hint", libgtk.}
proc `rules_hint=`*(tree_view: TreeView; 
                                   setting: gboolean) {.
    importc: "gtk_tree_view_set_rules_hint", libgtk.}
proc get_rules_hint*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_rules_hint", libgtk.}
proc rules_hint*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_rules_hint", libgtk.}
proc get_activate_on_single_click*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_activate_on_single_click", libgtk.}
proc activate_on_single_click*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_activate_on_single_click", libgtk.}
proc set_activate_on_single_click*(tree_view: TreeView; 
    single: gboolean) {.importc: "gtk_tree_view_set_activate_on_single_click", 
                        libgtk.}
proc `activate_on_single_click=`*(tree_view: TreeView; 
    single: gboolean) {.importc: "gtk_tree_view_set_activate_on_single_click", 
                        libgtk.}
proc append_column*(tree_view: TreeView; 
                                  column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_append_column", libgtk.}
proc remove_column*(tree_view: TreeView; 
                                  column: TreeViewColumn): gint {.
    importc: "gtk_tree_view_remove_column", libgtk.}
proc insert_column*(tree_view: TreeView; 
                                  column: TreeViewColumn; 
                                  position: gint): gint {.
    importc: "gtk_tree_view_insert_column", libgtk.}
proc insert_column_with_attributes*(tree_view: TreeView; 
    position: gint; title: cstring; cell: CellRenderer): gint {.
    varargs, importc: "gtk_tree_view_insert_column_with_attributes", 
    libgtk.}
proc insert_column_with_data_func*(tree_view: TreeView; 
    position: gint; title: cstring; cell: CellRenderer; 
 fn: TreeCellDataFunc; data: gpointer; dnotify: GDestroyNotify): gint {.
    importc: "gtk_tree_view_insert_column_with_data_func", libgtk.}
proc get_n_columns*(tree_view: TreeView): guint {.
    importc: "gtk_tree_view_get_n_columns", libgtk.}
proc n_columns*(tree_view: TreeView): guint {.
    importc: "gtk_tree_view_get_n_columns", libgtk.}
proc get_column*(tree_view: TreeView; n: gint): TreeViewColumn {.
    importc: "gtk_tree_view_get_column", libgtk.}
proc column*(tree_view: TreeView; n: gint): TreeViewColumn {.
    importc: "gtk_tree_view_get_column", libgtk.}
proc get_columns*(tree_view: TreeView): glib.GList {.
    importc: "gtk_tree_view_get_columns", libgtk.}
proc columns*(tree_view: TreeView): glib.GList {.
    importc: "gtk_tree_view_get_columns", libgtk.}
proc move_column_after*(tree_view: TreeView; 
                                      column: TreeViewColumn; 
                                      base_column: TreeViewColumn) {.
    importc: "gtk_tree_view_move_column_after", libgtk.}
proc set_expander_column*(tree_view: TreeView; 
    column: TreeViewColumn) {.importc: "gtk_tree_view_set_expander_column", 
                                     libgtk.}
proc `expander_column=`*(tree_view: TreeView; 
    column: TreeViewColumn) {.importc: "gtk_tree_view_set_expander_column", 
                                     libgtk.}
proc get_expander_column*(tree_view: TreeView): TreeViewColumn {.
    importc: "gtk_tree_view_get_expander_column", libgtk.}
proc expander_column*(tree_view: TreeView): TreeViewColumn {.
    importc: "gtk_tree_view_get_expander_column", libgtk.}
proc set_column_drag_function*(tree_view: TreeView; 
    `func`: TreeViewColumnDropFunc; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_column_drag_function", 
                               libgtk.}
proc `column_drag_function=`*(tree_view: TreeView; 
    `func`: TreeViewColumnDropFunc; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_column_drag_function", 
                               libgtk.}
proc scroll_to_point*(tree_view: TreeView; tree_x: gint; 
                                    tree_y: gint) {.
    importc: "gtk_tree_view_scroll_to_point", libgtk.}
proc scroll_to_cell*(tree_view: TreeView; 
                                   path: TreePath; 
                                   column: TreeViewColumn; 
                                   use_align: gboolean; row_align: gfloat; 
                                   col_align: gfloat) {.
    importc: "gtk_tree_view_scroll_to_cell", libgtk.}
proc row_activated*(tree_view: TreeView; 
                                  path: TreePath; 
                                  column: TreeViewColumn) {.
    importc: "gtk_tree_view_row_activated", libgtk.}
proc expand_all*(tree_view: TreeView) {.
    importc: "gtk_tree_view_expand_all", libgtk.}
proc collapse_all*(tree_view: TreeView) {.
    importc: "gtk_tree_view_collapse_all", libgtk.}
proc expand_to_path*(tree_view: TreeView; 
                                   path: TreePath) {.
    importc: "gtk_tree_view_expand_to_path", libgtk.}
proc expand_row*(tree_view: TreeView; 
                               path: TreePath; open_all: gboolean): gboolean {.
    importc: "gtk_tree_view_expand_row", libgtk.}
proc collapse_row*(tree_view: TreeView; 
                                 path: TreePath): gboolean {.
    importc: "gtk_tree_view_collapse_row", libgtk.}
proc map_expanded_rows*(tree_view: TreeView; 
                                      `func`: TreeViewMappingFunc; 
                                      data: gpointer) {.
    importc: "gtk_tree_view_map_expanded_rows", libgtk.}
proc row_expanded*(tree_view: TreeView; 
                                 path: TreePath): gboolean {.
    importc: "gtk_tree_view_row_expanded", libgtk.}
proc set_reorderable*(tree_view: TreeView; 
                                    reorderable: gboolean) {.
    importc: "gtk_tree_view_set_reorderable", libgtk.}
proc `reorderable=`*(tree_view: TreeView; 
                                    reorderable: gboolean) {.
    importc: "gtk_tree_view_set_reorderable", libgtk.}
proc get_reorderable*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_reorderable", libgtk.}
proc reorderable*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_reorderable", libgtk.}
proc set_cursor*(tree_view: TreeView; 
                               path: TreePath; 
                               focus_column: TreeViewColumn; 
                               start_editing: gboolean) {.
    importc: "gtk_tree_view_set_cursor", libgtk.}
proc `cursor=`*(tree_view: TreeView; 
                               path: TreePath; 
                               focus_column: TreeViewColumn; 
                               start_editing: gboolean) {.
    importc: "gtk_tree_view_set_cursor", libgtk.}
proc set_cursor_on_cell*(tree_view: TreeView; 
    path: TreePath; focus_column: TreeViewColumn; 
    focus_cell: CellRenderer; start_editing: gboolean) {.
    importc: "gtk_tree_view_set_cursor_on_cell", libgtk.}
proc `cursor_on_cell=`*(tree_view: TreeView; 
    path: TreePath; focus_column: TreeViewColumn; 
    focus_cell: CellRenderer; start_editing: gboolean) {.
    importc: "gtk_tree_view_set_cursor_on_cell", libgtk.}
proc get_cursor*(tree_view: TreeView; 
                               path: var TreePath; 
                               focus_column: var TreeViewColumn) {.
    importc: "gtk_tree_view_get_cursor", libgtk.}
proc get_bin_window*(tree_view: TreeView): gdk3.Window {.
    importc: "gtk_tree_view_get_bin_window", libgtk.}
proc bin_window*(tree_view: TreeView): gdk3.Window {.
    importc: "gtk_tree_view_get_bin_window", libgtk.}
proc get_path_at_pos*(tree_view: TreeView; x: gint; 
                                    y: gint; path: var TreePath; 
                                    column: var TreeViewColumn; 
                                    cell_x: var gint; cell_y: var gint): gboolean {.
    importc: "gtk_tree_view_get_path_at_pos", libgtk.}
proc path_at_pos*(tree_view: TreeView; x: gint; 
                                    y: gint; path: var TreePath; 
                                    column: var TreeViewColumn; 
                                    cell_x: var gint; cell_y: var gint): gboolean {.
    importc: "gtk_tree_view_get_path_at_pos", libgtk.}
proc get_cell_area*(tree_view: TreeView; 
                                  path: TreePath; 
                                  column: TreeViewColumn; 
                                  rect: var gdk3.RectangleObj) {.
    importc: "gtk_tree_view_get_cell_area", libgtk.}
proc get_background_area*(tree_view: TreeView; 
    path: TreePath; column: TreeViewColumn; 
    rect: var gdk3.RectangleObj) {.importc: "gtk_tree_view_get_background_area", 
                              libgtk.}
proc get_visible_rect*(tree_view: TreeView; 
                                     visible_rect: var gdk3.RectangleObj) {.
    importc: "gtk_tree_view_get_visible_rect", libgtk.}
proc get_visible_range*(tree_view: TreeView; 
                                      start_path: var TreePath; 
                                      end_path: var TreePath): gboolean {.
    importc: "gtk_tree_view_get_visible_range", libgtk.}
proc visible_range*(tree_view: TreeView; 
                                      start_path: var TreePath; 
                                      end_path: var TreePath): gboolean {.
    importc: "gtk_tree_view_get_visible_range", libgtk.}
proc is_blank_at_pos*(tree_view: TreeView; x: gint; 
                                    y: gint; path: var TreePath; 
                                    column: var TreeViewColumn; 
                                    cell_x: var gint; cell_y: var gint): gboolean {.
    importc: "gtk_tree_view_is_blank_at_pos", libgtk.}
proc enable_model_drag_source*(tree_view: TreeView; 
    start_button_mask: gdk3.ModifierType; targets: TargetEntry; 
    n_targets: gint; actions: gdk3.DragAction) {.
    importc: "gtk_tree_view_enable_model_drag_source", libgtk.}
proc enable_model_drag_dest*(tree_view: TreeView; 
    targets: TargetEntry; n_targets: gint; actions: gdk3.DragAction) {.
    importc: "gtk_tree_view_enable_model_drag_dest", libgtk.}
proc unset_rows_drag_source*(tree_view: TreeView) {.
    importc: "gtk_tree_view_unset_rows_drag_source", libgtk.}
proc unset_rows_drag_dest*(tree_view: TreeView) {.
    importc: "gtk_tree_view_unset_rows_drag_dest", libgtk.}
proc set_drag_dest_row*(tree_view: TreeView; 
                                      path: TreePath; 
                                      pos: TreeViewDropPosition) {.
    importc: "gtk_tree_view_set_drag_dest_row", libgtk.}
proc `drag_dest_row=`*(tree_view: TreeView; 
                                      path: TreePath; 
                                      pos: TreeViewDropPosition) {.
    importc: "gtk_tree_view_set_drag_dest_row", libgtk.}
proc get_drag_dest_row*(tree_view: TreeView; 
                                      path: var TreePath; 
                                      pos: var TreeViewDropPosition) {.
    importc: "gtk_tree_view_get_drag_dest_row", libgtk.}
proc get_dest_row_at_pos*(tree_view: TreeView; 
    drag_x: gint; drag_y: gint; path: var TreePath; 
    pos: var TreeViewDropPosition): gboolean {.
    importc: "gtk_tree_view_get_dest_row_at_pos", libgtk.}
proc dest_row_at_pos*(tree_view: TreeView; 
    drag_x: gint; drag_y: gint; path: var TreePath; 
    pos: var TreeViewDropPosition): gboolean {.
    importc: "gtk_tree_view_get_dest_row_at_pos", libgtk.}
proc create_row_drag_icon*(tree_view: TreeView; 
    path: TreePath): cairo.Surface {.
    importc: "gtk_tree_view_create_row_drag_icon", libgtk.}
proc set_enable_search*(tree_view: TreeView; 
                                      enable_search: gboolean) {.
    importc: "gtk_tree_view_set_enable_search", libgtk.}
proc `enable_search=`*(tree_view: TreeView; 
                                      enable_search: gboolean) {.
    importc: "gtk_tree_view_set_enable_search", libgtk.}
proc get_enable_search*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_enable_search", libgtk.}
proc enable_search*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_enable_search", libgtk.}
proc get_search_column*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_search_column", libgtk.}
proc search_column*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_search_column", libgtk.}
proc set_search_column*(tree_view: TreeView; column: gint) {.
    importc: "gtk_tree_view_set_search_column", libgtk.}
proc `search_column=`*(tree_view: TreeView; column: gint) {.
    importc: "gtk_tree_view_set_search_column", libgtk.}
proc get_search_equal_func*(tree_view: TreeView): TreeViewSearchEqualFunc {.
    importc: "gtk_tree_view_get_search_equal_func", libgtk.}
proc search_equal_func*(tree_view: TreeView): TreeViewSearchEqualFunc {.
    importc: "gtk_tree_view_get_search_equal_func", libgtk.}
proc set_search_equal_func*(tree_view: TreeView; 
    search_equal_func: TreeViewSearchEqualFunc; search_user_data: gpointer; 
    search_destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_search_equal_func", 
                                      libgtk.}
proc `search_equal_func=`*(tree_view: TreeView; 
    search_equal_func: TreeViewSearchEqualFunc; search_user_data: gpointer; 
    search_destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_search_equal_func", 
                                      libgtk.}
proc get_search_entry*(tree_view: TreeView): Entry {.
    importc: "gtk_tree_view_get_search_entry", libgtk.}
proc search_entry*(tree_view: TreeView): Entry {.
    importc: "gtk_tree_view_get_search_entry", libgtk.}
proc set_search_entry*(tree_view: TreeView; 
                                     entry: Entry) {.
    importc: "gtk_tree_view_set_search_entry", libgtk.}
proc `search_entry=`*(tree_view: TreeView; 
                                     entry: Entry) {.
    importc: "gtk_tree_view_set_search_entry", libgtk.}
proc get_search_position_func*(tree_view: TreeView): TreeViewSearchPositionFunc {.
    importc: "gtk_tree_view_get_search_position_func", libgtk.}
proc search_position_func*(tree_view: TreeView): TreeViewSearchPositionFunc {.
    importc: "gtk_tree_view_get_search_position_func", libgtk.}
proc set_search_position_func*(tree_view: TreeView; 
    `func`: TreeViewSearchPositionFunc; data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_search_position_func", 
                               libgtk.}
proc `search_position_func=`*(tree_view: TreeView; 
    `func`: TreeViewSearchPositionFunc; data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_tree_view_set_search_position_func", 
                               libgtk.}
proc convert_widget_to_tree_coords*(tree_view: TreeView; 
    wx: gint; wy: gint; tx: var gint; ty: var gint) {.
    importc: "gtk_tree_view_convert_widget_to_tree_coords", libgtk.}
proc convert_tree_to_widget_coords*(tree_view: TreeView; 
    tx: gint; ty: gint; wx: var gint; wy: var gint) {.
    importc: "gtk_tree_view_convert_tree_to_widget_coords", libgtk.}
proc convert_widget_to_bin_window_coords*(
    tree_view: TreeView; wx: gint; wy: gint; bx: var gint; by: var gint) {.
    importc: "gtk_tree_view_convert_widget_to_bin_window_coords", libgtk.}
proc convert_bin_window_to_widget_coords*(
    tree_view: TreeView; bx: gint; by: gint; wx: var gint; wy: var gint) {.
    importc: "gtk_tree_view_convert_bin_window_to_widget_coords", libgtk.}
proc convert_tree_to_bin_window_coords*(
    tree_view: TreeView; tx: gint; ty: gint; bx: var gint; by: var gint) {.
    importc: "gtk_tree_view_convert_tree_to_bin_window_coords", libgtk.}
proc convert_bin_window_to_tree_coords*(
    tree_view: TreeView; bx: gint; by: gint; tx: var gint; ty: var gint) {.
    importc: "gtk_tree_view_convert_bin_window_to_tree_coords", libgtk.}
type 
  TreeDestroyCountFunc* = proc (tree_view: TreeView; 
                                   path: TreePath; children: gint; 
                                   user_data: gpointer) {.cdecl.}
proc set_destroy_count_func*(tree_view: TreeView; 
    `func`: TreeDestroyCountFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_set_destroy_count_func", libgtk.}
proc `destroy_count_func=`*(tree_view: TreeView; 
    `func`: TreeDestroyCountFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_set_destroy_count_func", libgtk.}
proc set_fixed_height_mode*(tree_view: TreeView; 
    enable: gboolean) {.importc: "gtk_tree_view_set_fixed_height_mode", 
                        libgtk.}
proc `fixed_height_mode=`*(tree_view: TreeView; 
    enable: gboolean) {.importc: "gtk_tree_view_set_fixed_height_mode", 
                        libgtk.}
proc get_fixed_height_mode*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_fixed_height_mode", libgtk.}
proc fixed_height_mode*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_fixed_height_mode", libgtk.}
proc set_hover_selection*(tree_view: TreeView; 
    hover: gboolean) {.importc: "gtk_tree_view_set_hover_selection", 
                       libgtk.}
proc `hover_selection=`*(tree_view: TreeView; 
    hover: gboolean) {.importc: "gtk_tree_view_set_hover_selection", 
                       libgtk.}
proc get_hover_selection*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_hover_selection", libgtk.}
proc hover_selection*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_hover_selection", libgtk.}
proc set_hover_expand*(tree_view: TreeView; 
                                     expand: gboolean) {.
    importc: "gtk_tree_view_set_hover_expand", libgtk.}
proc `hover_expand=`*(tree_view: TreeView; 
                                     expand: gboolean) {.
    importc: "gtk_tree_view_set_hover_expand", libgtk.}
proc get_hover_expand*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_hover_expand", libgtk.}
proc hover_expand*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_hover_expand", libgtk.}
proc set_rubber_banding*(tree_view: TreeView; 
    enable: gboolean) {.importc: "gtk_tree_view_set_rubber_banding", 
                        libgtk.}
proc `rubber_banding=`*(tree_view: TreeView; 
    enable: gboolean) {.importc: "gtk_tree_view_set_rubber_banding", 
                        libgtk.}
proc get_rubber_banding*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_rubber_banding", libgtk.}
proc rubber_banding*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_rubber_banding", libgtk.}
proc is_rubber_banding_active*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_is_rubber_banding_active", libgtk.}
proc get_row_separator_func*(tree_view: TreeView): TreeViewRowSeparatorFunc {.
    importc: "gtk_tree_view_get_row_separator_func", libgtk.}
proc row_separator_func*(tree_view: TreeView): TreeViewRowSeparatorFunc {.
    importc: "gtk_tree_view_get_row_separator_func", libgtk.}
proc set_row_separator_func*(tree_view: TreeView; 
    `func`: TreeViewRowSeparatorFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_set_row_separator_func", libgtk.}
proc `row_separator_func=`*(tree_view: TreeView; 
    `func`: TreeViewRowSeparatorFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_view_set_row_separator_func", libgtk.}
proc get_grid_lines*(tree_view: TreeView): TreeViewGridLines {.
    importc: "gtk_tree_view_get_grid_lines", libgtk.}
proc grid_lines*(tree_view: TreeView): TreeViewGridLines {.
    importc: "gtk_tree_view_get_grid_lines", libgtk.}
proc set_grid_lines*(tree_view: TreeView; 
                                   grid_lines: TreeViewGridLines) {.
    importc: "gtk_tree_view_set_grid_lines", libgtk.}
proc `grid_lines=`*(tree_view: TreeView; 
                                   grid_lines: TreeViewGridLines) {.
    importc: "gtk_tree_view_set_grid_lines", libgtk.}
proc get_enable_tree_lines*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_enable_tree_lines", libgtk.}
proc enable_tree_lines*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_enable_tree_lines", libgtk.}
proc set_enable_tree_lines*(tree_view: TreeView; 
    enabled: gboolean) {.importc: "gtk_tree_view_set_enable_tree_lines", 
                         libgtk.}
proc `enable_tree_lines=`*(tree_view: TreeView; 
    enabled: gboolean) {.importc: "gtk_tree_view_set_enable_tree_lines", 
                         libgtk.}
proc set_show_expanders*(tree_view: TreeView; 
    enabled: gboolean) {.importc: "gtk_tree_view_set_show_expanders", 
                         libgtk.}
proc `show_expanders=`*(tree_view: TreeView; 
    enabled: gboolean) {.importc: "gtk_tree_view_set_show_expanders", 
                         libgtk.}
proc get_show_expanders*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_show_expanders", libgtk.}
proc show_expanders*(tree_view: TreeView): gboolean {.
    importc: "gtk_tree_view_get_show_expanders", libgtk.}
proc set_level_indentation*(tree_view: TreeView; 
    indentation: gint) {.importc: "gtk_tree_view_set_level_indentation", 
                         libgtk.}
proc `level_indentation=`*(tree_view: TreeView; 
    indentation: gint) {.importc: "gtk_tree_view_set_level_indentation", 
                         libgtk.}
proc get_level_indentation*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_level_indentation", libgtk.}
proc level_indentation*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_level_indentation", libgtk.}
proc set_tooltip_row*(tree_view: TreeView; 
                                    tooltip: Tooltip; 
                                    path: TreePath) {.
    importc: "gtk_tree_view_set_tooltip_row", libgtk.}
proc `tooltip_row=`*(tree_view: TreeView; 
                                    tooltip: Tooltip; 
                                    path: TreePath) {.
    importc: "gtk_tree_view_set_tooltip_row", libgtk.}
proc set_tooltip_cell*(tree_view: TreeView; 
                                     tooltip: Tooltip; 
                                     path: TreePath; 
                                     column: TreeViewColumn; 
                                     cell: CellRenderer) {.
    importc: "gtk_tree_view_set_tooltip_cell", libgtk.}
proc `tooltip_cell=`*(tree_view: TreeView; 
                                     tooltip: Tooltip; 
                                     path: TreePath; 
                                     column: TreeViewColumn; 
                                     cell: CellRenderer) {.
    importc: "gtk_tree_view_set_tooltip_cell", libgtk.}
proc get_tooltip_context*(tree_view: TreeView; 
    x: var gint; y: var gint; keyboard_tip: gboolean; 
    model: var TreeModel; path: var TreePath; 
    iter: TreeIter): gboolean {.
    importc: "gtk_tree_view_get_tooltip_context", libgtk.}
proc tooltip_context*(tree_view: TreeView; 
    x: var gint; y: var gint; keyboard_tip: gboolean; 
    model: var TreeModel; path: var TreePath; 
    iter: TreeIter): gboolean {.
    importc: "gtk_tree_view_get_tooltip_context", libgtk.}
proc set_tooltip_column*(tree_view: TreeView; 
    column: gint) {.importc: "gtk_tree_view_set_tooltip_column", libgtk.}
proc `tooltip_column=`*(tree_view: TreeView; 
    column: gint) {.importc: "gtk_tree_view_set_tooltip_column", libgtk.}
proc get_tooltip_column*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_tooltip_column", libgtk.}
proc tooltip_column*(tree_view: TreeView): gint {.
    importc: "gtk_tree_view_get_tooltip_column", libgtk.}

template gtk_combo_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, combo_box_get_type(), ComboBoxObj))

template gtk_combo_box_class*(vtable: expr): expr = 
  (g_type_check_class_cast(vtable, combo_box_get_type(), ComboBoxClassObj))

template gtk_is_combo_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, combo_box_get_type()))

template gtk_is_combo_box_class*(vtable: expr): expr = 
  (g_type_check_class_type(vtable, combo_box_get_type()))

template gtk_combo_box_get_class*(inst: expr): expr = 
  (g_type_instance_get_class(inst, combo_box_get_type(), ComboBoxClassObj))

type 
  ComboBoxPrivateObj = object 
  
type 
  ComboBox* =  ptr ComboBoxObj
  ComboBoxPtr* = ptr ComboBoxObj
  ComboBoxObj = object of BinObj
    priv32: ptr ComboBoxPrivateObj

type 
  ComboBoxClass* =  ptr ComboBoxClassObj
  ComboBoxClassPtr* = ptr ComboBoxClassObj
  ComboBoxClassObj = object of BinClassObj
    changed*: proc (combo_box: ComboBox) {.cdecl.}
    format_entry_text*: proc (combo_box: ComboBox; path: cstring): cstring {.cdecl.}
    gtk_reserved301: proc () {.cdecl.}
    gtk_reserved302: proc () {.cdecl.}
    gtk_reserved303: proc () {.cdecl.}

proc combo_box_get_type*(): GType {.importc: "gtk_combo_box_get_type", 
    libgtk.}
proc combo_box_new*(): ComboBox {.importc: "gtk_combo_box_new", 
    libgtk.}
proc combo_box_new_with_area*(area: CellArea): ComboBox {.
    importc: "gtk_combo_box_new_with_area", libgtk.}
proc combo_box_new_with_area_and_entry*(area: CellArea): ComboBox {.
    importc: "gtk_combo_box_new_with_area_and_entry", libgtk.}
proc combo_box_new_with_entry*(): ComboBox {.
    importc: "gtk_combo_box_new_with_entry", libgtk.}
proc combo_box_new_with_model*(model: TreeModel): ComboBox {.
    importc: "gtk_combo_box_new_with_model", libgtk.}
proc combo_box_new_with_model_and_entry*(model: TreeModel): ComboBox {.
    importc: "gtk_combo_box_new_with_model_and_entry", libgtk.}
proc get_wrap_width*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_wrap_width", libgtk.}
proc wrap_width*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_wrap_width", libgtk.}
proc set_wrap_width*(combo_box: ComboBox; width: gint) {.
    importc: "gtk_combo_box_set_wrap_width", libgtk.}
proc `wrap_width=`*(combo_box: ComboBox; width: gint) {.
    importc: "gtk_combo_box_set_wrap_width", libgtk.}
proc get_row_span_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_row_span_column", libgtk.}
proc row_span_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_row_span_column", libgtk.}
proc set_row_span_column*(combo_box: ComboBox; 
    row_span: gint) {.importc: "gtk_combo_box_set_row_span_column", 
                      libgtk.}
proc `row_span_column=`*(combo_box: ComboBox; 
    row_span: gint) {.importc: "gtk_combo_box_set_row_span_column", 
                      libgtk.}
proc get_column_span_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_column_span_column", libgtk.}
proc column_span_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_column_span_column", libgtk.}
proc set_column_span_column*(combo_box: ComboBox; 
    column_span: gint) {.importc: "gtk_combo_box_set_column_span_column", 
                         libgtk.}
proc `column_span_column=`*(combo_box: ComboBox; 
    column_span: gint) {.importc: "gtk_combo_box_set_column_span_column", 
                         libgtk.}
proc get_add_tearoffs*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_add_tearoffs", libgtk.}
proc add_tearoffs*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_add_tearoffs", libgtk.}
proc set_add_tearoffs*(combo_box: ComboBox; 
                                     add_tearoffs: gboolean) {.
    importc: "gtk_combo_box_set_add_tearoffs", libgtk.}
proc `add_tearoffs=`*(combo_box: ComboBox; 
                                     add_tearoffs: gboolean) {.
    importc: "gtk_combo_box_set_add_tearoffs", libgtk.}
proc get_title*(combo_box: ComboBox): cstring {.
    importc: "gtk_combo_box_get_title", libgtk.}
proc title*(combo_box: ComboBox): cstring {.
    importc: "gtk_combo_box_get_title", libgtk.}
proc set_title*(combo_box: ComboBox; title: cstring) {.
    importc: "gtk_combo_box_set_title", libgtk.}
proc `title=`*(combo_box: ComboBox; title: cstring) {.
    importc: "gtk_combo_box_set_title", libgtk.}
proc get_focus_on_click*(combo: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_focus_on_click", libgtk.}
proc focus_on_click*(combo: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_focus_on_click", libgtk.}
proc set_focus_on_click*(combo: ComboBox; 
    focus_on_click: gboolean) {.importc: "gtk_combo_box_set_focus_on_click", 
                                libgtk.}
proc `focus_on_click=`*(combo: ComboBox; 
    focus_on_click: gboolean) {.importc: "gtk_combo_box_set_focus_on_click", 
                                libgtk.}
proc get_active*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_active", libgtk.}
proc active*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_active", libgtk.}
proc set_active*(combo_box: ComboBox; index: gint) {.
    importc: "gtk_combo_box_set_active", libgtk.}
proc `active=`*(combo_box: ComboBox; index: gint) {.
    importc: "gtk_combo_box_set_active", libgtk.}
proc get_active_iter*(combo_box: ComboBox; 
                                    iter: TreeIter): gboolean {.
    importc: "gtk_combo_box_get_active_iter", libgtk.}
proc active_iter*(combo_box: ComboBox; 
                                    iter: TreeIter): gboolean {.
    importc: "gtk_combo_box_get_active_iter", libgtk.}
proc set_active_iter*(combo_box: ComboBox; 
                                    iter: TreeIter) {.
    importc: "gtk_combo_box_set_active_iter", libgtk.}
proc `active_iter=`*(combo_box: ComboBox; 
                                    iter: TreeIter) {.
    importc: "gtk_combo_box_set_active_iter", libgtk.}
proc set_model*(combo_box: ComboBox; 
                              model: TreeModel) {.
    importc: "gtk_combo_box_set_model", libgtk.}
proc `model=`*(combo_box: ComboBox; 
                              model: TreeModel) {.
    importc: "gtk_combo_box_set_model", libgtk.}
proc get_model*(combo_box: ComboBox): TreeModel {.
    importc: "gtk_combo_box_get_model", libgtk.}
proc model*(combo_box: ComboBox): TreeModel {.
    importc: "gtk_combo_box_get_model", libgtk.}
proc get_row_separator_func*(combo_box: ComboBox): TreeViewRowSeparatorFunc {.
    importc: "gtk_combo_box_get_row_separator_func", libgtk.}
proc row_separator_func*(combo_box: ComboBox): TreeViewRowSeparatorFunc {.
    importc: "gtk_combo_box_get_row_separator_func", libgtk.}
proc set_row_separator_func*(combo_box: ComboBox; 
    `func`: TreeViewRowSeparatorFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_combo_box_set_row_separator_func", libgtk.}
proc `row_separator_func=`*(combo_box: ComboBox; 
    `func`: TreeViewRowSeparatorFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_combo_box_set_row_separator_func", libgtk.}
proc set_button_sensitivity*(combo_box: ComboBox; 
    sensitivity: SensitivityType) {.
    importc: "gtk_combo_box_set_button_sensitivity", libgtk.}
proc `button_sensitivity=`*(combo_box: ComboBox; 
    sensitivity: SensitivityType) {.
    importc: "gtk_combo_box_set_button_sensitivity", libgtk.}
proc get_button_sensitivity*(combo_box: ComboBox): SensitivityType {.
    importc: "gtk_combo_box_get_button_sensitivity", libgtk.}
proc button_sensitivity*(combo_box: ComboBox): SensitivityType {.
    importc: "gtk_combo_box_get_button_sensitivity", libgtk.}
proc get_has_entry*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_has_entry", libgtk.}
proc has_entry*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_has_entry", libgtk.}
proc set_entry_text_column*(combo_box: ComboBox; 
    text_column: gint) {.importc: "gtk_combo_box_set_entry_text_column", 
                         libgtk.}
proc `entry_text_column=`*(combo_box: ComboBox; 
    text_column: gint) {.importc: "gtk_combo_box_set_entry_text_column", 
                         libgtk.}
proc get_entry_text_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_entry_text_column", libgtk.}
proc entry_text_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_entry_text_column", libgtk.}
proc set_popup_fixed_width*(combo_box: ComboBox; 
    fixed: gboolean) {.importc: "gtk_combo_box_set_popup_fixed_width", 
                       libgtk.}
proc `popup_fixed_width=`*(combo_box: ComboBox; 
    fixed: gboolean) {.importc: "gtk_combo_box_set_popup_fixed_width", 
                       libgtk.}
proc get_popup_fixed_width*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_popup_fixed_width", libgtk.}
proc popup_fixed_width*(combo_box: ComboBox): gboolean {.
    importc: "gtk_combo_box_get_popup_fixed_width", libgtk.}
proc popup*(combo_box: ComboBox) {.
    importc: "gtk_combo_box_popup", libgtk.}
proc popup_for_device*(combo_box: ComboBox; 
                                     device: gdk3.Device) {.
    importc: "gtk_combo_box_popup_for_device", libgtk.}
proc popdown*(combo_box: ComboBox) {.
    importc: "gtk_combo_box_popdown", libgtk.}
proc get_popup_accessible*(combo_box: ComboBox): atk.Object {.
    importc: "gtk_combo_box_get_popup_accessible", libgtk.}
proc popup_accessible*(combo_box: ComboBox): atk.Object {.
    importc: "gtk_combo_box_get_popup_accessible", libgtk.}
proc get_id_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_id_column", libgtk.}
proc id_column*(combo_box: ComboBox): gint {.
    importc: "gtk_combo_box_get_id_column", libgtk.}
proc set_id_column*(combo_box: ComboBox; id_column: gint) {.
    importc: "gtk_combo_box_set_id_column", libgtk.}
proc `id_column=`*(combo_box: ComboBox; id_column: gint) {.
    importc: "gtk_combo_box_set_id_column", libgtk.}
proc get_active_id*(combo_box: ComboBox): cstring {.
    importc: "gtk_combo_box_get_active_id", libgtk.}
proc active_id*(combo_box: ComboBox): cstring {.
    importc: "gtk_combo_box_get_active_id", libgtk.}
proc set_active_id*(combo_box: ComboBox; 
                                  active_id: cstring): gboolean {.
    importc: "gtk_combo_box_set_active_id", libgtk.}

template gtk_app_chooser_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, app_chooser_button_get_type(), 
                              AppChooserButtonObj))

template gtk_app_chooser_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, app_chooser_button_get_type(), 
                           AppChooserButtonClassObj))

template gtk_is_app_chooser_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, app_chooser_button_get_type()))

template gtk_is_app_chooser_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, app_chooser_button_get_type()))

template gtk_app_chooser_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, app_chooser_button_get_type(), 
                             AppChooserButtonClassObj))

type 
  AppChooserButtonPrivateObj = object 
  
type 
  AppChooserButton* =  ptr AppChooserButtonObj
  AppChooserButtonPtr* = ptr AppChooserButtonObj
  AppChooserButtonObj*{.final.} = object of ComboBoxObj
    priv33: ptr AppChooserButtonPrivateObj

type 
  AppChooserButtonClass* =  ptr AppChooserButtonClassObj
  AppChooserButtonClassPtr* = ptr AppChooserButtonClassObj
  AppChooserButtonClassObj*{.final.} = object of ComboBoxClassObj
    custom_item_activated*: proc (self: AppChooserButton; 
                                  item_name: cstring) {.cdecl.}
    padding*: array[16, gpointer]

proc app_chooser_button_get_type*(): GType {.
    importc: "gtk_app_chooser_button_get_type", libgtk.}
proc app_chooser_button_new*(content_type: cstring): AppChooserButton {.
    importc: "gtk_app_chooser_button_new", libgtk.}
proc append_separator*(self: AppChooserButton) {.
    importc: "gtk_app_chooser_button_append_separator", libgtk.}
proc append_custom_item*(self: AppChooserButton; 
    name: cstring; label: cstring; icon: gio.GIcon) {.
    importc: "gtk_app_chooser_button_append_custom_item", libgtk.}
proc set_active_custom_item*(
    self: AppChooserButton; name: cstring) {.
    importc: "gtk_app_chooser_button_set_active_custom_item", libgtk.}
proc `active_custom_item=`*(
    self: AppChooserButton; name: cstring) {.
    importc: "gtk_app_chooser_button_set_active_custom_item", libgtk.}
proc set_show_dialog_item*(
    self: AppChooserButton; setting: gboolean) {.
    importc: "gtk_app_chooser_button_set_show_dialog_item", libgtk.}
proc `show_dialog_item=`*(
    self: AppChooserButton; setting: gboolean) {.
    importc: "gtk_app_chooser_button_set_show_dialog_item", libgtk.}
proc get_show_dialog_item*(
    self: AppChooserButton): gboolean {.
    importc: "gtk_app_chooser_button_get_show_dialog_item", libgtk.}
proc show_dialog_item*(
    self: AppChooserButton): gboolean {.
    importc: "gtk_app_chooser_button_get_show_dialog_item", libgtk.}
proc set_heading*(self: AppChooserButton; 
    heading: cstring) {.importc: "gtk_app_chooser_button_set_heading", 
                          libgtk.}
proc `heading=`*(self: AppChooserButton; 
    heading: cstring) {.importc: "gtk_app_chooser_button_set_heading", 
                          libgtk.}
proc get_heading*(self: AppChooserButton): cstring {.
    importc: "gtk_app_chooser_button_get_heading", libgtk.}
proc heading*(self: AppChooserButton): cstring {.
    importc: "gtk_app_chooser_button_get_heading", libgtk.}
proc set_show_default_item*(
    self: AppChooserButton; setting: gboolean) {.
    importc: "gtk_app_chooser_button_set_show_default_item", libgtk.}
proc `show_default_item=`*(
    self: AppChooserButton; setting: gboolean) {.
    importc: "gtk_app_chooser_button_set_show_default_item", libgtk.}
proc get_show_default_item*(
    self: AppChooserButton): gboolean {.
    importc: "gtk_app_chooser_button_get_show_default_item", libgtk.}
proc show_default_item*(
    self: AppChooserButton): gboolean {.
    importc: "gtk_app_chooser_button_get_show_default_item", libgtk.}

template gtk_application_window*(inst: expr): expr = 
  (g_type_check_instance_cast(inst, application_window_get_type(), 
                              ApplicationWindowObj))

template gtk_application_window_class*(class: expr): expr = 
  (g_type_check_class_cast(class, application_window_get_type(), 
                           ApplicationWindowClassObj))

template gtk_is_application_window*(inst: expr): expr = 
  (g_type_check_instance_type(inst, application_window_get_type()))

template gtk_is_application_window_class*(class: expr): expr = 
  (g_type_check_class_type(class, application_window_get_type()))

template gtk_application_window_get_class*(inst: expr): expr = 
  (g_type_instance_get_class(inst, application_window_get_type(), 
                             ApplicationWindowClassObj))

type 
  ApplicationWindowPrivateObj = object 
  
type 
  ApplicationWindow* =  ptr ApplicationWindowObj
  ApplicationWindowPtr* = ptr ApplicationWindowObj
  ApplicationWindowObj*{.final.} = object of WindowObj
    priv34: ptr ApplicationWindowPrivateObj

type 
  ApplicationWindowClass* =  ptr ApplicationWindowClassObj
  ApplicationWindowClassPtr* = ptr ApplicationWindowClassObj
  ApplicationWindowClassObj*{.final.} = object of WindowClassObj
    padding*: array[14, gpointer]

proc application_window_get_type*(): GType {.
    importc: "gtk_application_window_get_type", libgtk.}
proc window_new*(application: Application): ApplicationWindow {.
    importc: "gtk_application_window_new", libgtk.}
proc set_show_menubar*(
    window: ApplicationWindow; show_menubar: gboolean) {.
    importc: "gtk_application_window_set_show_menubar", libgtk.}
proc `show_menubar=`*(
    window: ApplicationWindow; show_menubar: gboolean) {.
    importc: "gtk_application_window_set_show_menubar", libgtk.}
proc get_show_menubar*(window: ApplicationWindow): gboolean {.
    importc: "gtk_application_window_get_show_menubar", libgtk.}
proc show_menubar*(window: ApplicationWindow): gboolean {.
    importc: "gtk_application_window_get_show_menubar", libgtk.}
proc get_id*(window: ApplicationWindow): guint {.
    importc: "gtk_application_window_get_id", libgtk.}
proc id*(window: ApplicationWindow): guint {.
    importc: "gtk_application_window_get_id", libgtk.}

template gtk_frame*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, frame_get_type(), FrameObj))

template gtk_frame_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, frame_get_type(), FrameClassObj))

template gtk_is_frame*(obj: expr): expr = 
  (g_type_check_instance_type(obj, frame_get_type()))

template gtk_is_frame_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, frame_get_type()))

template gtk_frame_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, frame_get_type(), FrameClassObj))

type 
  FramePrivateObj = object 
  
type 
  Frame* =  ptr FrameObj
  FramePtr* = ptr FrameObj
  FrameObj* = object of BinObj
    priv35: ptr FramePrivateObj

type 
  FrameClass* =  ptr FrameClassObj
  FrameClassPtr* = ptr FrameClassObj
  FrameClassObj = object of BinClassObj
    compute_child_allocation*: proc (frame: Frame; 
                                     allocation: Allocation) {.cdecl.}
    gtk_reserved311: proc () {.cdecl.}
    gtk_reserved312: proc () {.cdecl.}
    gtk_reserved313: proc () {.cdecl.}
    gtk_reserved314: proc () {.cdecl.}

proc frame_get_type*(): GType {.importc: "gtk_frame_get_type", libgtk.}
proc frame_new*(label: cstring): Frame {.
    importc: "gtk_frame_new", libgtk.}
proc set_label*(frame: Frame; label: cstring) {.
    importc: "gtk_frame_set_label", libgtk.}
proc `label=`*(frame: Frame; label: cstring) {.
    importc: "gtk_frame_set_label", libgtk.}
proc get_label*(frame: Frame): cstring {.
    importc: "gtk_frame_get_label", libgtk.}
proc label*(frame: Frame): cstring {.
    importc: "gtk_frame_get_label", libgtk.}
proc set_label_widget*(frame: Frame; 
                                 label_widget: Widget) {.
    importc: "gtk_frame_set_label_widget", libgtk.}
proc `label_widget=`*(frame: Frame; 
                                 label_widget: Widget) {.
    importc: "gtk_frame_set_label_widget", libgtk.}
proc get_label_widget*(frame: Frame): Label {.
    importc: "gtk_frame_get_label_widget", libgtk.}
proc label_widget*(frame: Frame): Label {.
    importc: "gtk_frame_get_label_widget", libgtk.}
proc set_label_align*(frame: Frame; xalign: gfloat; 
                                yalign: gfloat) {.
    importc: "gtk_frame_set_label_align", libgtk.}
proc `label_align=`*(frame: Frame; xalign: gfloat; 
                                yalign: gfloat) {.
    importc: "gtk_frame_set_label_align", libgtk.}
proc get_label_align*(frame: Frame; xalign: var gfloat; 
                                yalign: var gfloat) {.
    importc: "gtk_frame_get_label_align", libgtk.}
proc set_shadow_type*(frame: Frame; `type`: ShadowType) {.
    importc: "gtk_frame_set_shadow_type", libgtk.}
proc `shadow_type=`*(frame: Frame; `type`: ShadowType) {.
    importc: "gtk_frame_set_shadow_type", libgtk.}
proc get_shadow_type*(frame: Frame): ShadowType {.
    importc: "gtk_frame_get_shadow_type", libgtk.}
proc shadow_type*(frame: Frame): ShadowType {.
    importc: "gtk_frame_get_shadow_type", libgtk.}

template gtk_aspect_frame*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, aspect_frame_get_type(), AspectFrameObj))

template gtk_aspect_frame_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, aspect_frame_get_type(), AspectFrameClassObj))

template gtk_is_aspect_frame*(obj: expr): expr = 
  (g_type_check_instance_type(obj, aspect_frame_get_type()))

template gtk_is_aspect_frame_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, aspect_frame_get_type()))

template gtk_aspect_frame_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, aspect_frame_get_type(), AspectFrameClassObj))

type 
  AspectFramePrivateObj = object 
  
type 
  AspectFrame* =  ptr AspectFrameObj
  AspectFramePtr* = ptr AspectFrameObj
  AspectFrameObj*{.final.} = object of FrameObj
    priv36: ptr AspectFramePrivateObj

type 
  AspectFrameClass* =  ptr AspectFrameClassObj
  AspectFrameClassPtr* = ptr AspectFrameClassObj
  AspectFrameClassObj*{.final.} = object of FrameClassObj
    gtk_reserved321: proc () {.cdecl.}
    gtk_reserved322: proc () {.cdecl.}
    gtk_reserved323: proc () {.cdecl.}
    gtk_reserved324: proc () {.cdecl.}

proc aspect_frame_get_type*(): GType {.
    importc: "gtk_aspect_frame_get_type", libgtk.}
proc aspect_frame_new*(label: cstring; xalign: gfloat; yalign: gfloat; 
                           ratio: gfloat; obey_child: gboolean): AspectFrame {.
    importc: "gtk_aspect_frame_new", libgtk.}
proc set*(aspect_frame: AspectFrame; xalign: gfloat; 
                           yalign: gfloat; ratio: gfloat; obey_child: gboolean) {.
    importc: "gtk_aspect_frame_set", libgtk.}

template gtk_assistant*(o: expr): expr = 
  (g_type_check_instance_cast(o, assistant_get_type(), AssistantObj))

template gtk_assistant_class*(c: expr): expr = 
  (g_type_check_class_cast(c, assistant_get_type(), AssistantClassObj))

template gtk_is_assistant*(o: expr): expr = 
  (g_type_check_instance_type(o, assistant_get_type()))

template gtk_is_assistant_class*(c: expr): expr = 
  (g_type_check_class_type(c, assistant_get_type()))

template gtk_assistant_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, assistant_get_type(), AssistantClassObj))

type 
  AssistantPageType* {.size: sizeof(cint), pure.} = enum 
    CONTENT, INTRO, 
    CONFIRM, SUMMARY, 
    PROGRESS, CUSTOM
  AssistantPrivateObj = object 
  
type 
  Assistant* =  ptr AssistantObj
  AssistantPtr* = ptr AssistantObj
  AssistantObj*{.final.} = object of WindowObj
    priv37: ptr AssistantPrivateObj

type 
  AssistantClass* =  ptr AssistantClassObj
  AssistantClassPtr* = ptr AssistantClassObj
  AssistantClassObj*{.final.} = object of WindowClassObj
    prepare*: proc (assistant: Assistant; page: Widget) {.cdecl.}
    apply*: proc (assistant: Assistant) {.cdecl.}
    close*: proc (assistant: Assistant) {.cdecl.}
    cancel*: proc (assistant: Assistant) {.cdecl.}
    gtk_reserved331: proc () {.cdecl.}
    gtk_reserved332: proc () {.cdecl.}
    gtk_reserved333: proc () {.cdecl.}
    gtk_reserved334: proc () {.cdecl.}
    gtk_reserved335: proc () {.cdecl.}

type 
  AssistantPageFunc* = proc (current_page: gint; data: gpointer): gint {.cdecl.}
proc assistant_get_type*(): GType {.importc: "gtk_assistant_get_type", 
    libgtk.}
proc assistant_new*(): Assistant {.importc: "gtk_assistant_new", 
    libgtk.}
proc next_page*(assistant: Assistant) {.
    importc: "gtk_assistant_next_page", libgtk.}
proc previous_page*(assistant: Assistant) {.
    importc: "gtk_assistant_previous_page", libgtk.}
proc get_current_page*(assistant: Assistant): gint {.
    importc: "gtk_assistant_get_current_page", libgtk.}
proc current_page*(assistant: Assistant): gint {.
    importc: "gtk_assistant_get_current_page", libgtk.}
proc set_current_page*(assistant: Assistant; 
                                     page_num: gint) {.
    importc: "gtk_assistant_set_current_page", libgtk.}
proc `current_page=`*(assistant: Assistant; 
                                     page_num: gint) {.
    importc: "gtk_assistant_set_current_page", libgtk.}
proc get_n_pages*(assistant: Assistant): gint {.
    importc: "gtk_assistant_get_n_pages", libgtk.}
proc n_pages*(assistant: Assistant): gint {.
    importc: "gtk_assistant_get_n_pages", libgtk.}
proc get_nth_page*(assistant: Assistant; page_num: gint): Widget {.
    importc: "gtk_assistant_get_nth_page", libgtk.}
proc nth_page*(assistant: Assistant; page_num: gint): Widget {.
    importc: "gtk_assistant_get_nth_page", libgtk.}
proc prepend_page*(assistant: Assistant; 
                                 page: Widget): gint {.
    importc: "gtk_assistant_prepend_page", libgtk.}
proc append_page*(assistant: Assistant; 
                                page: Widget): gint {.
    importc: "gtk_assistant_append_page", libgtk.}
proc insert_page*(assistant: Assistant; 
                                page: Widget; position: gint): gint {.
    importc: "gtk_assistant_insert_page", libgtk.}
proc remove_page*(assistant: Assistant; page_num: gint) {.
    importc: "gtk_assistant_remove_page", libgtk.}
proc set_forward_page_func*(assistant: Assistant; 
    page_func: AssistantPageFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_assistant_set_forward_page_func", libgtk.}
proc `forward_page_func=`*(assistant: Assistant; 
    page_func: AssistantPageFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_assistant_set_forward_page_func", libgtk.}
proc set_page_type*(assistant: Assistant; 
                                  page: Widget; 
                                  `type`: AssistantPageType) {.
    importc: "gtk_assistant_set_page_type", libgtk.}
proc `page_type=`*(assistant: Assistant; 
                                  page: Widget; 
                                  `type`: AssistantPageType) {.
    importc: "gtk_assistant_set_page_type", libgtk.}
proc get_page_type*(assistant: Assistant; 
                                  page: Widget): AssistantPageType {.
    importc: "gtk_assistant_get_page_type", libgtk.}
proc page_type*(assistant: Assistant; 
                                  page: Widget): AssistantPageType {.
    importc: "gtk_assistant_get_page_type", libgtk.}
proc set_page_title*(assistant: Assistant; 
                                   page: Widget; title: cstring) {.
    importc: "gtk_assistant_set_page_title", libgtk.}
proc `page_title=`*(assistant: Assistant; 
                                   page: Widget; title: cstring) {.
    importc: "gtk_assistant_set_page_title", libgtk.}
proc get_page_title*(assistant: Assistant; 
                                   page: Widget): cstring {.
    importc: "gtk_assistant_get_page_title", libgtk.}
proc page_title*(assistant: Assistant; 
                                   page: Widget): cstring {.
    importc: "gtk_assistant_get_page_title", libgtk.}
proc set_page_header_image*(assistant: Assistant; 
    page: Widget; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_assistant_set_page_header_image", libgtk.}
proc `page_header_image=`*(assistant: Assistant; 
    page: Widget; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_assistant_set_page_header_image", libgtk.}
proc get_page_header_image*(assistant: Assistant; 
    page: Widget): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_assistant_get_page_header_image", libgtk.}
proc page_header_image*(assistant: Assistant; 
    page: Widget): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_assistant_get_page_header_image", libgtk.}
proc set_page_side_image*(assistant: Assistant; 
    page: Widget; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_assistant_set_page_side_image", libgtk.}
proc `page_side_image=`*(assistant: Assistant; 
    page: Widget; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_assistant_set_page_side_image", libgtk.}
proc get_page_side_image*(assistant: Assistant; 
    page: Widget): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_assistant_get_page_side_image", libgtk.}
proc page_side_image*(assistant: Assistant; 
    page: Widget): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_assistant_get_page_side_image", libgtk.}
proc set_page_complete*(assistant: Assistant; 
                                      page: Widget; complete: gboolean) {.
    importc: "gtk_assistant_set_page_complete", libgtk.}
proc `page_complete=`*(assistant: Assistant; 
                                      page: Widget; complete: gboolean) {.
    importc: "gtk_assistant_set_page_complete", libgtk.}
proc get_page_complete*(assistant: Assistant; 
                                      page: Widget): gboolean {.
    importc: "gtk_assistant_get_page_complete", libgtk.}
proc page_complete*(assistant: Assistant; 
                                      page: Widget): gboolean {.
    importc: "gtk_assistant_get_page_complete", libgtk.}
proc add_action_widget*(assistant: Assistant; 
                                      child: Widget) {.
    importc: "gtk_assistant_add_action_widget", libgtk.}
proc remove_action_widget*(assistant: Assistant; 
    child: Widget) {.importc: "gtk_assistant_remove_action_widget", 
                            libgtk.}
proc update_buttons_state*(assistant: Assistant) {.
    importc: "gtk_assistant_update_buttons_state", libgtk.}
proc commit*(assistant: Assistant) {.
    importc: "gtk_assistant_commit", libgtk.}

template gtk_button_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, button_box_get_type(), ButtonBoxObj))

template gtk_button_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, button_box_get_type(), ButtonBoxClassObj))

template gtk_is_button_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, button_box_get_type()))

template gtk_is_button_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, button_box_get_type()))

template gtk_button_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, button_box_get_type(), ButtonBoxClassObj))

type 
  ButtonBoxPrivateObj = object 
  
type 
  ButtonBox* =  ptr ButtonBoxObj
  ButtonBoxPtr* = ptr ButtonBoxObj
  ButtonBoxObj* = object of BoxObj
    priv38: ptr ButtonBoxPrivateObj

type 
  ButtonBoxClass* =  ptr ButtonBoxClassObj
  ButtonBoxClassPtr* = ptr ButtonBoxClassObj
  ButtonBoxClassObj = object of BoxClassObj
    gtk_reserved341: proc () {.cdecl.}
    gtk_reserved342: proc () {.cdecl.}
    gtk_reserved343: proc () {.cdecl.}
    gtk_reserved344: proc () {.cdecl.}

type 
  ButtonBoxStyle* {.size: sizeof(cint), pure.} = enum 
    SPREAD = 1, EDGE, START, 
    END, CENTER, EXPAND
proc button_box_get_type*(): GType {.importc: "gtk_button_box_get_type", 
    libgtk.}
proc button_box_new*(orientation: Orientation): ButtonBox {.
    importc: "gtk_button_box_new", libgtk.}
proc get_layout*(widget: ButtonBox): ButtonBoxStyle {.
    importc: "gtk_button_box_get_layout", libgtk.}
proc layout*(widget: ButtonBox): ButtonBoxStyle {.
    importc: "gtk_button_box_get_layout", libgtk.}
proc set_layout*(widget: ButtonBox; 
                                layout_style: ButtonBoxStyle) {.
    importc: "gtk_button_box_set_layout", libgtk.}
proc `layout=`*(widget: ButtonBox; 
                                layout_style: ButtonBoxStyle) {.
    importc: "gtk_button_box_set_layout", libgtk.}
proc get_child_secondary*(widget: ButtonBox; 
    child: Widget): gboolean {.importc: "gtk_button_box_get_child_secondary", 
                                      libgtk.}
proc child_secondary*(widget: ButtonBox; 
    child: Widget): gboolean {.importc: "gtk_button_box_get_child_secondary", 
                                      libgtk.}
proc set_child_secondary*(widget: ButtonBox; 
    child: Widget; is_secondary: gboolean) {.
    importc: "gtk_button_box_set_child_secondary", libgtk.}
proc `child_secondary=`*(widget: ButtonBox; 
    child: Widget; is_secondary: gboolean) {.
    importc: "gtk_button_box_set_child_secondary", libgtk.}
proc get_child_non_homogeneous*(widget: ButtonBox; 
    child: Widget): gboolean {.importc: "gtk_button_box_get_child_non_homogeneous", 
                                      libgtk.}
proc child_non_homogeneous*(widget: ButtonBox; 
    child: Widget): gboolean {.importc: "gtk_button_box_get_child_non_homogeneous", 
                                      libgtk.}
proc set_child_non_homogeneous*(widget: ButtonBox; 
    child: Widget; non_homogeneous: gboolean) {.
    importc: "gtk_button_box_set_child_non_homogeneous", libgtk.}
proc `child_non_homogeneous=`*(widget: ButtonBox; 
    child: Widget; non_homogeneous: gboolean) {.
    importc: "gtk_button_box_set_child_non_homogeneous", libgtk.}

type 
  BindingSet* =  ptr BindingSetObj
  BindingSetPtr* = ptr BindingSetObj
  BindingSetObj* = object 
    set_name*: cstring
    priority*: gint
    widget_path_pspecs*: glib.GSList
    widget_class_pspecs*: glib.GSList
    class_branch_pspecs*: glib.GSList
    entries*: BindingEntry
    current*: BindingEntry
    parsed*: guint

  BindingEntry* =  ptr BindingEntryObj
  BindingEntryPtr* = ptr BindingEntryObj
  BindingEntryObj* = object 
    keyval*: guint
    modifiers*: gdk3.ModifierType
    binding_set*: BindingSet
    bitfield0GtkBindingEntry*: guint
    set_next*: BindingEntry
    hash_next*: BindingEntry
    signals*: BindingSignal

  INNER_C_UNION_13196231340349930226* = object  {.union.}
    long_data*: glong
    double_data*: gdouble
    string_data*: cstring

  BindingArg* =  ptr BindingArgObj
  BindingArgPtr* = ptr BindingArgObj
  BindingArgObj* = object 
    arg_type*: GType
    d*: INNER_C_UNION_13196231340349930226

  BindingSignal* =  ptr BindingSignalObj
  BindingSignalPtr* = ptr BindingSignalObj
  BindingSignalObj* = object 
    next*: BindingSignal
    signal_name*: cstring
    n_args*: guint
    args*: BindingArg

proc binding_set_new*(set_name: cstring): BindingSet {.
    importc: "gtk_binding_set_new", libgtk.}
proc binding_set_by_class*(object_class: gpointer): BindingSet {.
    importc: "gtk_binding_set_by_class", libgtk.}
proc binding_set_find*(set_name: cstring): BindingSet {.
    importc: "gtk_binding_set_find", libgtk.}
proc bindings_activate*(`object`: GObject; keyval: guint; 
                            modifiers: gdk3.ModifierType): gboolean {.
    importc: "gtk_bindings_activate", libgtk.}
proc bindings_activate_event*(`object`: GObject; event: gdk3.EventKey): gboolean {.
    importc: "gtk_bindings_activate_event", libgtk.}
proc activate*(binding_set: BindingSet; keyval: guint; 
                               modifiers: gdk3.ModifierType; `object`: GObject): gboolean {.
    importc: "gtk_binding_set_activate", libgtk.}
proc binding_entry_skip*(binding_set: BindingSet; keyval: guint; 
                             modifiers: gdk3.ModifierType) {.
    importc: "gtk_binding_entry_skip", libgtk.}
proc binding_entry_add_signal*(binding_set: BindingSet; 
                                   keyval: guint; modifiers: gdk3.ModifierType; 
                                   signal_name: cstring; n_args: guint) {.
    varargs, importc: "gtk_binding_entry_add_signal", libgtk.}
proc binding_entry_add_signall*(binding_set: BindingSet; 
                                    keyval: guint; modifiers: gdk3.ModifierType; 
                                    signal_name: cstring; 
                                    binding_args: glib.GSList) {.
    importc: "gtk_binding_entry_add_signall", libgtk.}
proc binding_entry_add_signal_from_string*(binding_set: BindingSet; 
    signal_desc: cstring): GTokenType {.
    importc: "gtk_binding_entry_add_signal_from_string", libgtk.}
proc binding_entry_remove*(binding_set: BindingSet; keyval: guint; 
                               modifiers: gdk3.ModifierType) {.
    importc: "gtk_binding_entry_remove", libgtk.}

template gtk_builder*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, builder_get_type(), BuilderObj))

template gtk_builder_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, builder_get_type(), BuilderClassObj))

template gtk_is_builder*(obj: expr): expr = 
  (g_type_check_instance_type(obj, builder_get_type()))

template gtk_is_builder_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, builder_get_type()))

template gtk_builder_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, builder_get_type(), BuilderClassObj))

  
type 
  BuilderError* {.size: sizeof(cint), pure.} = enum 
    INVALID_TYPE_FUNCTION, UNHANDLED_TAG, 
    MISSING_ATTRIBUTE, INVALID_ATTRIBUTE, 
    INVALID_TAG, MISSING_PROPERTY_VALUE, 
    INVALID_VALUE, VERSION_MISMATCH, 
    DUPLICATE_ID, OBJECT_TYPE_REFUSED, 
    TEMPLATE_MISMATCH, INVALID_PROPERTY, 
    INVALID_SIGNAL
proc builder_error_quark*(): GQuark {.importc: "gtk_builder_error_quark", 
    libgtk.}

type 
  BuilderClass* =  ptr BuilderClassObj
  BuilderClassPtr* = ptr BuilderClassObj
  BuilderClassObj*{.final.} = object of GObjectClassObj
    get_type_from_name*: proc (builder: Builder; type_name: cstring): GType {.cdecl.}
    gtk_reserved351: proc () {.cdecl.}
    gtk_reserved352: proc () {.cdecl.}
    gtk_reserved353: proc () {.cdecl.}
    gtk_reserved354: proc () {.cdecl.}
    gtk_reserved355: proc () {.cdecl.}
    gtk_reserved356: proc () {.cdecl.}
    gtk_reserved357: proc () {.cdecl.}
    gtk_reserved358: proc () {.cdecl.}

proc builder_get_type*(): GType {.importc: "gtk_builder_get_type", 
                                      libgtk.}
proc builder_new*(): Builder {.importc: "gtk_builder_new", 
    libgtk.}
proc add_from_file*(builder: Builder; filename: cstring; 
                                error: var glib.GError): guint {.
    importc: "gtk_builder_add_from_file", libgtk.}
proc add_from_resource*(builder: Builder; 
                                    resource_path: cstring; 
                                    error: var glib.GError): guint {.
    importc: "gtk_builder_add_from_resource", libgtk.}
proc add_from_string*(builder: Builder; buffer: cstring; 
                                  length: gsize; error: var glib.GError): guint {.
    importc: "gtk_builder_add_from_string", libgtk.}
proc add_objects_from_file*(builder: Builder; 
    filename: cstring; object_ids: var cstring; error: var glib.GError): guint {.
    importc: "gtk_builder_add_objects_from_file", libgtk.}
proc add_objects_from_resource*(builder: Builder; 
    resource_path: cstring; object_ids: var cstring; error: var glib.GError): guint {.
    importc: "gtk_builder_add_objects_from_resource", libgtk.}
proc add_objects_from_string*(builder: Builder; 
    buffer: cstring; length: gsize; object_ids: var cstring; 
    error: var glib.GError): guint {.importc: "gtk_builder_add_objects_from_string", 
                                    libgtk.}
proc get_object*(builder: Builder; name: cstring): GObject {.
    importc: "gtk_builder_get_object", libgtk.}
proc `object`*(builder: Builder; name: cstring): GObject {.
    importc: "gtk_builder_get_object", libgtk.}
proc get_objects*(builder: Builder): glib.GSList {.
    importc: "gtk_builder_get_objects", libgtk.}
proc objects*(builder: Builder): glib.GSList {.
    importc: "gtk_builder_get_objects", libgtk.}
proc expose_object*(builder: Builder; name: cstring; 
                                obj: GObject) {.
    importc: "gtk_builder_expose_object", libgtk.}
proc connect_signals*(builder: Builder; user_data: gpointer) {.
    importc: "gtk_builder_connect_signals", libgtk.}
proc connect_signals_full*(builder: Builder; 
    `func`: BuilderConnectFunc; user_data: gpointer) {.
    importc: "gtk_builder_connect_signals_full", libgtk.}
proc set_translation_domain*(builder: Builder; 
    domain: cstring) {.importc: "gtk_builder_set_translation_domain", 
                         libgtk.}
proc `translation_domain=`*(builder: Builder; 
    domain: cstring) {.importc: "gtk_builder_set_translation_domain", 
                         libgtk.}
proc get_translation_domain*(builder: Builder): cstring {.
    importc: "gtk_builder_get_translation_domain", libgtk.}
proc translation_domain*(builder: Builder): cstring {.
    importc: "gtk_builder_get_translation_domain", libgtk.}
proc get_type_from_name*(builder: Builder; 
                                     type_name: cstring): GType {.
    importc: "gtk_builder_get_type_from_name", libgtk.}
proc type_from_name*(builder: Builder; 
                                     type_name: cstring): GType {.
    importc: "gtk_builder_get_type_from_name", libgtk.}
proc value_from_string*(builder: Builder; 
                                    pspec: gobject.GParamSpec; string: cstring; 
                                    value: gobject.GValue; error: var glib.GError): gboolean {.
    importc: "gtk_builder_value_from_string", libgtk.}
proc value_from_string_type*(builder: Builder; `type`: GType; 
    string: cstring; value: gobject.GValue; error: var glib.GError): gboolean {.
    importc: "gtk_builder_value_from_string_type", libgtk.}
proc builder_new_from_file*(filename: cstring): Builder {.
    importc: "gtk_builder_new_from_file", libgtk.}
proc builder_new_from_resource*(resource_path: cstring): Builder {.
    importc: "gtk_builder_new_from_resource", libgtk.}
proc builder_new_from_string*(string: cstring; length: gssize): Builder {.
    importc: "gtk_builder_new_from_string", libgtk.}
proc add_callback_symbol*(builder: Builder; 
                                      callback_name: cstring; 
                                      callback_symbol: GCallback) {.
    importc: "gtk_builder_add_callback_symbol", libgtk.}
proc add_callback_symbols*(builder: Builder; 
    first_callback_name: cstring; first_callback_symbol: GCallback) {.
    varargs, importc: "gtk_builder_add_callback_symbols", libgtk.}
proc lookup_callback_symbol*(builder: Builder; 
    callback_name: cstring): GCallback {.
    importc: "gtk_builder_lookup_callback_symbol", libgtk.}
proc set_application*(builder: Builder; 
                                  application: Application) {.
    importc: "gtk_builder_set_application", libgtk.}
proc `application=`*(builder: Builder; 
                                  application: Application) {.
    importc: "gtk_builder_set_application", libgtk.}
proc get_application*(builder: Builder): Application {.
    importc: "gtk_builder_get_application", libgtk.}
proc application*(builder: Builder): Application {.
    importc: "gtk_builder_get_application", libgtk.}
template gtk_builder_warn_invalid_child_type*(obj, `type`: expr): expr = 
  g_warning("\'%s\' is not a valid child type of \'%s\'", `type`, 
            gobject.name(G_OBJECT_TYPE(obj)))

template gtk_buildable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, buildable_get_type(), BuildableObj))

template gtk_buildable_class*(obj: expr): expr = 
  (g_type_check_class_cast(obj, buildable_get_type(), BuildableIfaceObj))

template gtk_is_buildable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, buildable_get_type()))

template gtk_buildable_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, buildable_get_type(), BuildableIfaceObj))

type 
  Buildable* =  ptr BuildableObj
  BuildablePtr* = ptr BuildableObj
  BuildableObj* = object 
  
type 
  BuildableIface* =  ptr BuildableIfaceObj
  BuildableIfacePtr* = ptr BuildableIfaceObj
  BuildableIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    set_name*: proc (buildable: Buildable; name: cstring) {.cdecl.}
    get_name*: proc (buildable: Buildable): cstring {.cdecl.}
    add_child*: proc (buildable: Buildable; builder: Builder; 
                      child: GObject; `type`: cstring) {.cdecl.}
    set_buildable_property*: proc (buildable: Buildable; 
                                   builder: Builder; name: cstring; 
                                   value: gobject.GValue) {.cdecl.}
    construct_child*: proc (buildable: Buildable; 
                            builder: Builder; name: cstring): GObject {.cdecl.}
    custom_tag_start*: proc (buildable: Buildable; 
                             builder: Builder; child: GObject; 
                             tagname: cstring; parser: glib.GMarkupParser; 
                             data: var gpointer): gboolean {.cdecl.}
    custom_tag_end*: proc (buildable: Buildable; 
                           builder: Builder; child: GObject; 
                           tagname: cstring; data: var gpointer) {.cdecl.}
    custom_finished*: proc (buildable: Buildable; 
                            builder: Builder; child: GObject; 
                            tagname: cstring; data: gpointer) {.cdecl.}
    parser_finished*: proc (buildable: Buildable; 
                            builder: Builder) {.cdecl.}
    get_internal_child*: proc (buildable: Buildable; 
                               builder: Builder; childname: cstring): GObject {.cdecl.}

proc buildable_get_type*(): GType {.importc: "gtk_buildable_get_type", 
    libgtk.}
proc set_name*(buildable: Buildable; name: cstring) {.
    importc: "gtk_buildable_set_name", libgtk.}
proc `name=`*(buildable: Buildable; name: cstring) {.
    importc: "gtk_buildable_set_name", libgtk.}
proc get_name*(buildable: Buildable): cstring {.
    importc: "gtk_buildable_get_name", libgtk.}
proc name*(buildable: Buildable): cstring {.
    importc: "gtk_buildable_get_name", libgtk.}
proc add_child*(buildable: Buildable; 
                              builder: Builder; child: GObject; 
                              `type`: cstring) {.
    importc: "gtk_buildable_add_child", libgtk.}
proc set_buildable_property*(buildable: Buildable; 
    builder: Builder; name: cstring; value: gobject.GValue) {.
    importc: "gtk_buildable_set_buildable_property", libgtk.}
proc `buildable_property=`*(buildable: Buildable; 
    builder: Builder; name: cstring; value: gobject.GValue) {.
    importc: "gtk_buildable_set_buildable_property", libgtk.}
proc construct_child*(buildable: Buildable; 
                                    builder: Builder; name: cstring): GObject {.
    importc: "gtk_buildable_construct_child", libgtk.}
proc custom_tag_start*(buildable: Buildable; 
                                     builder: Builder; 
                                     child: GObject; tagname: cstring; 
                                     parser: glib.GMarkupParser; 
                                     data: var gpointer): gboolean {.
    importc: "gtk_buildable_custom_tag_start", libgtk.}
proc custom_tag_end*(buildable: Buildable; 
                                   builder: Builder; 
                                   child: GObject; tagname: cstring; 
                                   data: var gpointer) {.
    importc: "gtk_buildable_custom_tag_end", libgtk.}
proc custom_finished*(buildable: Buildable; 
                                    builder: Builder; 
                                    child: GObject; tagname: cstring; 
                                    data: gpointer) {.
    importc: "gtk_buildable_custom_finished", libgtk.}
proc parser_finished*(buildable: Buildable; 
                                    builder: Builder) {.
    importc: "gtk_buildable_parser_finished", libgtk.}
proc get_internal_child*(buildable: Buildable; 
    builder: Builder; childname: cstring): GObject {.
    importc: "gtk_buildable_get_internal_child", libgtk.}
proc internal_child*(buildable: Buildable; 
    builder: Builder; childname: cstring): GObject {.
    importc: "gtk_buildable_get_internal_child", libgtk.}

template gtk_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, button_get_type(), ButtonObj))

template gtk_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, button_get_type(), ButtonClassObj))

template gtk_is_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, button_get_type()))

template gtk_is_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, button_get_type()))

template gtk_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, button_get_type(), ButtonClassObj))

type 
  ButtonClass* =  ptr ButtonClassObj
  ButtonClassPtr* = ptr ButtonClassObj
  ButtonClassObj* = object of BinClassObj
    pressed*: proc (button: Button) {.cdecl.}
    released*: proc (button: Button) {.cdecl.}
    clicked*: proc (button: Button) {.cdecl.}
    enter*: proc (button: Button) {.cdecl.}
    leave*: proc (button: Button) {.cdecl.}
    activate*: proc (button: Button) {.cdecl.}
    gtk_reserved361: proc () {.cdecl.}
    gtk_reserved362: proc () {.cdecl.}
    gtk_reserved363: proc () {.cdecl.}
    gtk_reserved364: proc () {.cdecl.}

proc button_get_type*(): GType {.importc: "gtk_button_get_type", 
                                     libgtk.}
proc button_new*(): Button {.importc: "gtk_button_new", libgtk.}
proc button_new_with_label*(label: cstring): Button {.
    importc: "gtk_button_new_with_label", libgtk.}
proc button_new*(label: cstring): Button {.
    importc: "gtk_button_new_with_label", libgtk.}
proc button_new_from_icon_name*(icon_name: cstring; size: IconSize): Button {.
    importc: "gtk_button_new_from_icon_name", libgtk.}
proc button_new_from_stock*(stock_id: cstring): Button {.
    importc: "gtk_button_new_from_stock", libgtk.}
proc button_new_with_mnemonic*(label: cstring): Button {.
    importc: "gtk_button_new_with_mnemonic", libgtk.}
proc clicked*(button: Button) {.
    importc: "gtk_button_clicked", libgtk.}
proc pressed*(button: Button) {.
    importc: "gtk_button_pressed", libgtk.}
proc released*(button: Button) {.
    importc: "gtk_button_released", libgtk.}
proc enter*(button: Button) {.importc: "gtk_button_enter", 
    libgtk.}
proc leave*(button: Button) {.importc: "gtk_button_leave", 
    libgtk.}
proc set_relief*(button: Button; relief: ReliefStyle) {.
    importc: "gtk_button_set_relief", libgtk.}
proc `relief=`*(button: Button; relief: ReliefStyle) {.
    importc: "gtk_button_set_relief", libgtk.}
proc get_relief*(button: Button): ReliefStyle {.
    importc: "gtk_button_get_relief", libgtk.}
proc relief*(button: Button): ReliefStyle {.
    importc: "gtk_button_get_relief", libgtk.}
proc set_label*(button: Button; label: cstring) {.
    importc: "gtk_button_set_label", libgtk.}
proc `label=`*(button: Button; label: cstring) {.
    importc: "gtk_button_set_label", libgtk.}
proc get_label*(button: Button): cstring {.
    importc: "gtk_button_get_label", libgtk.}
proc label*(button: Button): cstring {.
    importc: "gtk_button_get_label", libgtk.}
proc set_use_underline*(button: Button; 
                                   use_underline: gboolean) {.
    importc: "gtk_button_set_use_underline", libgtk.}
proc `use_underline=`*(button: Button; 
                                   use_underline: gboolean) {.
    importc: "gtk_button_set_use_underline", libgtk.}
proc get_use_underline*(button: Button): gboolean {.
    importc: "gtk_button_get_use_underline", libgtk.}
proc use_underline*(button: Button): gboolean {.
    importc: "gtk_button_get_use_underline", libgtk.}
proc set_use_stock*(button: Button; use_stock: gboolean) {.
    importc: "gtk_button_set_use_stock", libgtk.}
proc `use_stock=`*(button: Button; use_stock: gboolean) {.
    importc: "gtk_button_set_use_stock", libgtk.}
proc get_use_stock*(button: Button): gboolean {.
    importc: "gtk_button_get_use_stock", libgtk.}
proc use_stock*(button: Button): gboolean {.
    importc: "gtk_button_get_use_stock", libgtk.}
proc set_focus_on_click*(button: Button; 
                                    focus_on_click: gboolean) {.
    importc: "gtk_button_set_focus_on_click", libgtk.}
proc `focus_on_click=`*(button: Button; 
                                    focus_on_click: gboolean) {.
    importc: "gtk_button_set_focus_on_click", libgtk.}
proc get_focus_on_click*(button: Button): gboolean {.
    importc: "gtk_button_get_focus_on_click", libgtk.}
proc focus_on_click*(button: Button): gboolean {.
    importc: "gtk_button_get_focus_on_click", libgtk.}
proc set_alignment*(button: Button; xalign: gfloat; 
                               yalign: gfloat) {.
    importc: "gtk_button_set_alignment", libgtk.}
proc `alignment=`*(button: Button; xalign: gfloat; 
                               yalign: gfloat) {.
    importc: "gtk_button_set_alignment", libgtk.}
proc get_alignment*(button: Button; xalign: var gfloat; 
                               yalign: var gfloat) {.
    importc: "gtk_button_get_alignment", libgtk.}
proc set_image*(button: Button; image: Widget) {.
    importc: "gtk_button_set_image", libgtk.}
proc `image=`*(button: Button; image: Widget) {.
    importc: "gtk_button_set_image", libgtk.}
proc get_image*(button: Button): Image {.
    importc: "gtk_button_get_image", libgtk.}
proc image*(button: Button): Image {.
    importc: "gtk_button_get_image", libgtk.}
proc set_image_position*(button: Button; 
                                    position: PositionType) {.
    importc: "gtk_button_set_image_position", libgtk.}
proc `image_position=`*(button: Button; 
                                    position: PositionType) {.
    importc: "gtk_button_set_image_position", libgtk.}
proc get_image_position*(button: Button): PositionType {.
    importc: "gtk_button_get_image_position", libgtk.}
proc image_position*(button: Button): PositionType {.
    importc: "gtk_button_get_image_position", libgtk.}
proc set_always_show_image*(button: Button; 
    always_show: gboolean) {.importc: "gtk_button_set_always_show_image", 
                             libgtk.}
proc `always_show_image=`*(button: Button; 
    always_show: gboolean) {.importc: "gtk_button_set_always_show_image", 
                             libgtk.}
proc get_always_show_image*(button: Button): gboolean {.
    importc: "gtk_button_get_always_show_image", libgtk.}
proc always_show_image*(button: Button): gboolean {.
    importc: "gtk_button_get_always_show_image", libgtk.}
proc get_event_window*(button: Button): gdk3.Window {.
    importc: "gtk_button_get_event_window", libgtk.}
proc event_window*(button: Button): gdk3.Window {.
    importc: "gtk_button_get_event_window", libgtk.}

template gtk_calendar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, calendar_get_type(), CalendarObj))

template gtk_calendar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, calendar_get_type(), CalendarClassObj))

template gtk_is_calendar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, calendar_get_type()))

template gtk_is_calendar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, calendar_get_type()))

template gtk_calendar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, calendar_get_type(), CalendarClassObj))

type 
  CalendarPrivateObj = object 
  
type 
  CalendarDisplayOptions* {.size: sizeof(cint), pure.} = enum 
    SHOW_HEADING = 1 shl 0, 
    SHOW_DAY_NAMES = 1 shl 1, 
    NO_MONTH_CHANGE = 1 shl 2, 
    SHOW_WEEK_NUMBERS = 1 shl 3, 
    SHOW_DETAILS = 1 shl 5
type 
  Calendar* =  ptr CalendarObj
  CalendarPtr* = ptr CalendarObj
  CalendarObj*{.final.} = object of WidgetObj
    priv41: ptr CalendarPrivateObj
type 
  CalendarDetailFunc* = proc (calendar: Calendar; year: guint; 
                                 month: guint; day: guint; user_data: gpointer): cstring {.cdecl.}

type 
  CalendarClass* =  ptr CalendarClassObj
  CalendarClassPtr* = ptr CalendarClassObj
  CalendarClassObj*{.final.} = object of WidgetClassObj
    month_changed*: proc (calendar: Calendar) {.cdecl.}
    day_selected*: proc (calendar: Calendar) {.cdecl.}
    day_selected_double_click*: proc (calendar: Calendar) {.cdecl.}
    prev_month*: proc (calendar: Calendar) {.cdecl.}
    next_month*: proc (calendar: Calendar) {.cdecl.}
    prev_year*: proc (calendar: Calendar) {.cdecl.}
    next_year*: proc (calendar: Calendar) {.cdecl.}
    gtk_reserved371: proc () {.cdecl.}
    gtk_reserved372: proc () {.cdecl.}
    gtk_reserved373: proc () {.cdecl.}
    gtk_reserved374: proc () {.cdecl.}

proc calendar_get_type*(): GType {.importc: "gtk_calendar_get_type", 
    libgtk.}
proc calendar_new*(): Calendar {.importc: "gtk_calendar_new", 
    libgtk.}
proc select_month*(calendar: Calendar; month: guint; 
                                year: guint) {.
    importc: "gtk_calendar_select_month", libgtk.}
proc select_day*(calendar: Calendar; day: guint) {.
    importc: "gtk_calendar_select_day", libgtk.}
proc mark_day*(calendar: Calendar; day: guint) {.
    importc: "gtk_calendar_mark_day", libgtk.}
proc unmark_day*(calendar: Calendar; day: guint) {.
    importc: "gtk_calendar_unmark_day", libgtk.}
proc clear_marks*(calendar: Calendar) {.
    importc: "gtk_calendar_clear_marks", libgtk.}
proc set_display_options*(calendar: Calendar; 
    flags: CalendarDisplayOptions) {.
    importc: "gtk_calendar_set_display_options", libgtk.}
proc `display_options=`*(calendar: Calendar; 
    flags: CalendarDisplayOptions) {.
    importc: "gtk_calendar_set_display_options", libgtk.}
proc get_display_options*(calendar: Calendar): CalendarDisplayOptions {.
    importc: "gtk_calendar_get_display_options", libgtk.}
proc display_options*(calendar: Calendar): CalendarDisplayOptions {.
    importc: "gtk_calendar_get_display_options", libgtk.}
proc get_date*(calendar: Calendar; year: var guint; 
                            month: var guint; day: var guint) {.
    importc: "gtk_calendar_get_date", libgtk.}
proc set_detail_func*(calendar: Calendar; 
                                   `func`: CalendarDetailFunc; 
                                   data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_calendar_set_detail_func", libgtk.}
proc `detail_func=`*(calendar: Calendar; 
                                   `func`: CalendarDetailFunc; 
                                   data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_calendar_set_detail_func", libgtk.}
proc set_detail_width_chars*(calendar: Calendar; 
    chars: gint) {.importc: "gtk_calendar_set_detail_width_chars", libgtk.}
proc `detail_width_chars=`*(calendar: Calendar; 
    chars: gint) {.importc: "gtk_calendar_set_detail_width_chars", libgtk.}
proc set_detail_height_rows*(calendar: Calendar; 
    rows: gint) {.importc: "gtk_calendar_set_detail_height_rows", libgtk.}
proc `detail_height_rows=`*(calendar: Calendar; 
    rows: gint) {.importc: "gtk_calendar_set_detail_height_rows", libgtk.}
proc get_detail_width_chars*(calendar: Calendar): gint {.
    importc: "gtk_calendar_get_detail_width_chars", libgtk.}
proc detail_width_chars*(calendar: Calendar): gint {.
    importc: "gtk_calendar_get_detail_width_chars", libgtk.}
proc get_detail_height_rows*(calendar: Calendar): gint {.
    importc: "gtk_calendar_get_detail_height_rows", libgtk.}
proc detail_height_rows*(calendar: Calendar): gint {.
    importc: "gtk_calendar_get_detail_height_rows", libgtk.}
proc get_day_is_marked*(calendar: Calendar; day: guint): gboolean {.
    importc: "gtk_calendar_get_day_is_marked", libgtk.}
proc day_is_marked*(calendar: Calendar; day: guint): gboolean {.
    importc: "gtk_calendar_get_day_is_marked", libgtk.}

template gtk_cell_area_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_area_box_get_type(), CellAreaBoxObj))

template gtk_cell_area_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_area_box_get_type(), 
                           CellAreaBoxClassObj))

template gtk_is_cell_area_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_area_box_get_type()))

template gtk_is_cell_area_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_area_box_get_type()))

template gtk_cell_area_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_area_box_get_type(), 
                             CellAreaBoxClassObj))

type 
  CellAreaBoxPrivateObj = object 
  
type 
  CellAreaBox* =  ptr CellAreaBoxObj
  CellAreaBoxPtr* = ptr CellAreaBoxObj
  CellAreaBoxObj*{.final.} = object of CellAreaObj
    priv42: ptr CellAreaBoxPrivateObj

type 
  CellAreaBoxClass* =  ptr CellAreaBoxClassObj
  CellAreaBoxClassPtr* = ptr CellAreaBoxClassObj
  CellAreaBoxClassObj*{.final.} = object of CellAreaClassObj
    gtk_reserved381: proc () {.cdecl.}
    gtk_reserved382: proc () {.cdecl.}
    gtk_reserved383: proc () {.cdecl.}
    gtk_reserved384: proc () {.cdecl.}

proc cell_area_box_get_type*(): GType {.
    importc: "gtk_cell_area_box_get_type", libgtk.}
proc cell_area_box_new*(): CellArea {.
    importc: "gtk_cell_area_box_new", libgtk.}
proc pack_start*(box: CellAreaBox; 
                                   renderer: CellRenderer; 
                                   expand: gboolean; align: gboolean; 
                                   fixed: gboolean) {.
    importc: "gtk_cell_area_box_pack_start", libgtk.}
proc pack_end*(box: CellAreaBox; 
                                 renderer: CellRenderer; 
                                 expand: gboolean; align: gboolean; 
                                 fixed: gboolean) {.
    importc: "gtk_cell_area_box_pack_end", libgtk.}
proc get_spacing*(box: CellAreaBox): gint {.
    importc: "gtk_cell_area_box_get_spacing", libgtk.}
proc spacing*(box: CellAreaBox): gint {.
    importc: "gtk_cell_area_box_get_spacing", libgtk.}
proc set_spacing*(box: CellAreaBox; spacing: gint) {.
    importc: "gtk_cell_area_box_set_spacing", libgtk.}
proc `spacing=`*(box: CellAreaBox; spacing: gint) {.
    importc: "gtk_cell_area_box_set_spacing", libgtk.}

template gtk_cell_area_context*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_area_context_get_type(), 
                              CellAreaContextObj))

template gtk_cell_area_context_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_area_context_get_type(), 
                           CellAreaContextClassObj))

template gtk_is_cell_area_context*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_area_context_get_type()))

template gtk_is_cell_area_context_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_area_context_get_type()))

template gtk_cell_area_context_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_area_context_get_type(), 
                             CellAreaContextClassObj))

type 
  CellAreaContextClass* =  ptr CellAreaContextClassObj
  CellAreaContextClassPtr* = ptr CellAreaContextClassObj
  CellAreaContextClassObj*{.final.} = object of GObjectClassObj
    allocate*: proc (context: CellAreaContext; width: gint; 
                     height: gint) {.cdecl.}
    reset*: proc (context: CellAreaContext) {.cdecl.}
    get_preferred_height_for_width*: proc (context: CellAreaContext; 
        width: gint; minimum_height: var gint; natural_height: var gint) {.cdecl.}
    get_preferred_width_for_height*: proc (context: CellAreaContext; 
        height: gint; minimum_width: var gint; natural_width: var gint) {.cdecl.}
    gtk_reserved391: proc () {.cdecl.}
    gtk_reserved392: proc () {.cdecl.}
    gtk_reserved393: proc () {.cdecl.}
    gtk_reserved394: proc () {.cdecl.}
    gtk_reserved395: proc () {.cdecl.}
    gtk_reserved396: proc () {.cdecl.}

proc cell_area_context_get_type*(): GType {.
    importc: "gtk_cell_area_context_get_type", libgtk.}
proc get_area*(context: CellAreaContext): CellArea {.
    importc: "gtk_cell_area_context_get_area", libgtk.}
proc area*(context: CellAreaContext): CellArea {.
    importc: "gtk_cell_area_context_get_area", libgtk.}
proc allocate*(context: CellAreaContext; 
                                     width: gint; height: gint) {.
    importc: "gtk_cell_area_context_allocate", libgtk.}
proc reset*(context: CellAreaContext) {.
    importc: "gtk_cell_area_context_reset", libgtk.}
proc get_preferred_width*(
    context: CellAreaContext; minimum_width: var gint; 
    natural_width: var gint) {.importc: "gtk_cell_area_context_get_preferred_width", 
                               libgtk.}
proc get_preferred_height*(
    context: CellAreaContext; minimum_height: var gint; 
    natural_height: var gint) {.importc: "gtk_cell_area_context_get_preferred_height", 
                                libgtk.}
proc get_preferred_height_for_width*(
    context: CellAreaContext; width: gint; minimum_height: var gint; 
    natural_height: var gint) {.importc: "gtk_cell_area_context_get_preferred_height_for_width", 
                                libgtk.}
proc get_preferred_width_for_height*(
    context: CellAreaContext; height: gint; minimum_width: var gint; 
    natural_width: var gint) {.importc: "gtk_cell_area_context_get_preferred_width_for_height", 
                               libgtk.}
proc get_allocation*(context: CellAreaContext; 
    width: var gint; height: var gint) {.
    importc: "gtk_cell_area_context_get_allocation", libgtk.}
proc push_preferred_width*(
    context: CellAreaContext; minimum_width: gint; natural_width: gint) {.
    importc: "gtk_cell_area_context_push_preferred_width", libgtk.}
proc push_preferred_height*(
    context: CellAreaContext; minimum_height: gint; 
    natural_height: gint) {.importc: "gtk_cell_area_context_push_preferred_height", 
                            libgtk.}

template gtk_cell_layout*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_layout_get_type(), CellLayoutObj))

template gtk_is_cell_layout*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_layout_get_type()))

template gtk_cell_layout_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, cell_layout_get_type(), 
                                 CellLayoutIfaceObj))

type 
  CellLayout* =  ptr CellLayoutObj
  CellLayoutPtr* = ptr CellLayoutObj
  CellLayoutObj* = object 
  
type 
  CellLayoutDataFunc* = proc (cell_layout: CellLayout; 
                                 cell: CellRenderer; 
                                 tree_model: TreeModel; 
                                 iter: TreeIter; data: gpointer) {.cdecl.}
type 
  CellLayoutIface* =  ptr CellLayoutIfaceObj
  CellLayoutIfacePtr* = ptr CellLayoutIfaceObj
  CellLayoutIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    pack_start*: proc (cell_layout: CellLayout; 
                       cell: CellRenderer; expand: gboolean) {.cdecl.}
    pack_end*: proc (cell_layout: CellLayout; 
                     cell: CellRenderer; expand: gboolean) {.cdecl.}
    clear*: proc (cell_layout: CellLayout) {.cdecl.}
    add_attribute*: proc (cell_layout: CellLayout; 
                          cell: CellRenderer; attribute: cstring; 
                          column: gint) {.cdecl.}
    set_cell_data_func*: proc (cell_layout: CellLayout; 
                               cell: CellRenderer; 
                               `func`: CellLayoutDataFunc; 
                               func_data: gpointer; destroy: GDestroyNotify) {.cdecl.}
    clear_attributes*: proc (cell_layout: CellLayout; 
                             cell: CellRenderer) {.cdecl.}
    reorder*: proc (cell_layout: CellLayout; cell: CellRenderer; 
                    position: gint) {.cdecl.}
    get_cells*: proc (cell_layout: CellLayout): glib.GList {.cdecl.}
    get_area*: proc (cell_layout: CellLayout): CellArea {.cdecl.}

proc cell_layout_get_type*(): GType {.importc: "gtk_cell_layout_get_type", 
    libgtk.}
proc pack_start*(cell_layout: CellLayout; 
                                 cell: CellRenderer; expand: gboolean) {.
    importc: "gtk_cell_layout_pack_start", libgtk.}
proc pack_end*(cell_layout: CellLayout; 
                               cell: CellRenderer; expand: gboolean) {.
    importc: "gtk_cell_layout_pack_end", libgtk.}
proc get_cells*(cell_layout: CellLayout): glib.GList {.
    importc: "gtk_cell_layout_get_cells", libgtk.}
proc cells*(cell_layout: CellLayout): glib.GList {.
    importc: "gtk_cell_layout_get_cells", libgtk.}
proc clear*(cell_layout: CellLayout) {.
    importc: "gtk_cell_layout_clear", libgtk.}
proc set_attributes*(cell_layout: CellLayout; 
                                     cell: CellRenderer) {.varargs, 
    importc: "gtk_cell_layout_set_attributes", libgtk.}
proc `attributes=`*(cell_layout: CellLayout; 
                                     cell: CellRenderer) {.varargs, 
    importc: "gtk_cell_layout_set_attributes", libgtk.}
proc add_attribute*(cell_layout: CellLayout; 
                                    cell: CellRenderer; 
                                    attribute: cstring; column: gint) {.
    importc: "gtk_cell_layout_add_attribute", libgtk.}
proc set_cell_data_func*(cell_layout: CellLayout; 
    cell: CellRenderer; `func`: CellLayoutDataFunc; 
    func_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_cell_layout_set_cell_data_func", libgtk.}
proc `cell_data_func=`*(cell_layout: CellLayout; 
    cell: CellRenderer; `func`: CellLayoutDataFunc; 
    func_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_cell_layout_set_cell_data_func", libgtk.}
proc clear_attributes*(cell_layout: CellLayout; 
    cell: CellRenderer) {.importc: "gtk_cell_layout_clear_attributes", 
                                 libgtk.}
proc reorder*(cell_layout: CellLayout; 
                              cell: CellRenderer; position: gint) {.
    importc: "gtk_cell_layout_reorder", libgtk.}
proc get_area*(cell_layout: CellLayout): CellArea {.
    importc: "gtk_cell_layout_get_area", libgtk.}
proc area*(cell_layout: CellLayout): CellArea {.
    importc: "gtk_cell_layout_get_area", libgtk.}

template gtk_cell_renderer_text*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_text_get_type(), 
                              CellRendererTextObj))

template gtk_cell_renderer_text_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_text_get_type(), 
                           CellRendererTextClassObj))

template gtk_is_cell_renderer_text*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_text_get_type()))

template gtk_is_cell_renderer_text_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_text_get_type()))

template gtk_cell_renderer_text_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_text_get_type(), 
                             CellRendererTextClassObj))

type 
  CellRendererTextPrivateObj = object 
  
type 
  CellRendererText* =  ptr CellRendererTextObj
  CellRendererTextPtr* = ptr CellRendererTextObj
  CellRendererTextObj = object of CellRendererObj
    priv44: ptr CellRendererTextPrivateObj

type 
  CellRendererTextClass* =  ptr CellRendererTextClassObj
  CellRendererTextClassPtr* = ptr CellRendererTextClassObj
  CellRendererTextClassObj = object of CellRendererClassObj
    edited*: proc (cell_renderer_text: CellRendererText; 
                   path: cstring; new_text: cstring) {.cdecl.}
    gtk_reserved401: proc () {.cdecl.}
    gtk_reserved402: proc () {.cdecl.}
    gtk_reserved403: proc () {.cdecl.}
    gtk_reserved404: proc () {.cdecl.}

proc cell_renderer_text_get_type*(): GType {.
    importc: "gtk_cell_renderer_text_get_type", libgtk.}
proc cell_renderer_text_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_text_new", libgtk.}
proc set_fixed_height_from_font*(
    renderer: CellRendererText; number_of_rows: gint) {.
    importc: "gtk_cell_renderer_text_set_fixed_height_from_font", libgtk.}
proc `fixed_height_from_font=`*(
    renderer: CellRendererText; number_of_rows: gint) {.
    importc: "gtk_cell_renderer_text_set_fixed_height_from_font", libgtk.}

template gtk_cell_renderer_accel*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_accel_get_type(), 
                              CellRendererAccelObj))

template gtk_cell_renderer_accel_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_accel_get_type(), 
                           CellRendererAccelClassObj))

template gtk_is_cell_renderer_accel*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_accel_get_type()))

template gtk_is_cell_renderer_accel_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_accel_get_type()))

template gtk_cell_renderer_accel_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_accel_get_type(), 
                             CellRendererAccelClassObj))

type 
  CellRendererAccelPrivateObj = object 
  
type 
  CellRendererAccelMode* {.size: sizeof(cint), pure.} = enum 
    MODE_GTK, MODE_OTHER
type 
  CellRendererAccel* =  ptr CellRendererAccelObj
  CellRendererAccelPtr* = ptr CellRendererAccelObj
  CellRendererAccelObj*{.final.} = object of CellRendererTextObj
    priv45: ptr CellRendererAccelPrivateObj

type 
  CellRendererAccelClass* =  ptr CellRendererAccelClassObj
  CellRendererAccelClassPtr* = ptr CellRendererAccelClassObj
  CellRendererAccelClassObj*{.final.} = object of CellRendererTextClassObj
    accel_edited*: proc (accel: CellRendererAccel; 
                         path_string: cstring; accel_key: guint; 
                         accel_mods: gdk3.ModifierType; hardware_keycode: guint) {.cdecl.}
    accel_cleared*: proc (accel: CellRendererAccel; 
                          path_string: cstring) {.cdecl.}
    gtk_reserved410: proc () {.cdecl.}
    gtk_reserved411: proc () {.cdecl.}
    gtk_reserved412: proc () {.cdecl.}
    gtk_reserved413: proc () {.cdecl.}
    gtk_reserved414: proc () {.cdecl.}

proc cell_renderer_accel_get_type*(): GType {.
    importc: "gtk_cell_renderer_accel_get_type", libgtk.}
proc cell_renderer_accel_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_accel_new", libgtk.}

template gtk_cell_renderer_combo*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_combo_get_type(), 
                              CellRendererComboObj))

template gtk_cell_renderer_combo_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_combo_get_type(), 
                           CellRendererComboClassObj))

template gtk_is_cell_renderer_combo*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_combo_get_type()))

template gtk_is_cell_renderer_combo_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_combo_get_type()))

template gtk_cell_renderer_combo_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_combo_get_type(), 
                             CellRendererTextClassObj))

type 
  CellRendererComboPrivateObj = object 
  
type 
  CellRendererCombo* =  ptr CellRendererComboObj
  CellRendererComboPtr* = ptr CellRendererComboObj
  CellRendererComboObj*{.final.} = object of CellRendererTextObj
    priv46: ptr CellRendererComboPrivateObj

type 
  CellRendererComboClass* =  ptr CellRendererComboClassObj
  CellRendererComboClassPtr* = ptr CellRendererComboClassObj
  CellRendererComboClassObj*{.final.} = object of CellRendererTextClassObj
    gtk_reserved421: proc () {.cdecl.}
    gtk_reserved422: proc () {.cdecl.}
    gtk_reserved423: proc () {.cdecl.}
    gtk_reserved424: proc () {.cdecl.}

proc cell_renderer_combo_get_type*(): GType {.
    importc: "gtk_cell_renderer_combo_get_type", libgtk.}
proc cell_renderer_combo_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_combo_new", libgtk.}

template gtk_cell_renderer_pixbuf*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_pixbuf_get_type(), 
                              CellRendererPixbufObj))

template gtk_cell_renderer_pixbuf_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_pixbuf_get_type(), 
                           CellRendererPixbufClassObj))

template gtk_is_cell_renderer_pixbuf*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_pixbuf_get_type()))

template gtk_is_cell_renderer_pixbuf_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_pixbuf_get_type()))

template gtk_cell_renderer_pixbuf_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_pixbuf_get_type(), 
                             CellRendererPixbufClassObj))

type 
  CellRendererPixbufPrivateObj = object 
  
type 
  CellRendererPixbuf* =  ptr CellRendererPixbufObj
  CellRendererPixbufPtr* = ptr CellRendererPixbufObj
  CellRendererPixbufObj*{.final.} = object of CellRendererObj
    priv47: ptr CellRendererPixbufPrivateObj

type 
  CellRendererPixbufClass* =  ptr CellRendererPixbufClassObj
  CellRendererPixbufClassPtr* = ptr CellRendererPixbufClassObj
  CellRendererPixbufClassObj*{.final.} = object of CellRendererClassObj
    gtk_reserved431: proc () {.cdecl.}
    gtk_reserved432: proc () {.cdecl.}
    gtk_reserved433: proc () {.cdecl.}
    gtk_reserved434: proc () {.cdecl.}

proc cell_renderer_pixbuf_get_type*(): GType {.
    importc: "gtk_cell_renderer_pixbuf_get_type", libgtk.}
proc cell_renderer_pixbuf_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_pixbuf_new", libgtk.}

template gtk_cell_renderer_progress*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_progress_get_type(), 
                              CellRendererProgressObj))

template gtk_cell_renderer_progress_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_progress_get_type(), 
                           CellRendererProgressClassObj))

template gtk_is_cell_renderer_progress*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_progress_get_type()))

template gtk_is_cell_renderer_progress_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_progress_get_type()))

template gtk_cell_renderer_progress_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_progress_get_type(), 
                             CellRendererProgressClassObj))

type 
  CellRendererProgressPrivateObj = object 
  
type 
  CellRendererProgress* =  ptr CellRendererProgressObj
  CellRendererProgressPtr* = ptr CellRendererProgressObj
  CellRendererProgressObj*{.final.} = object of CellRendererObj
    priv48: ptr CellRendererProgressPrivateObj

type 
  CellRendererProgressClass* =  ptr CellRendererProgressClassObj
  CellRendererProgressClassPtr* = ptr CellRendererProgressClassObj
  CellRendererProgressClassObj*{.final.} = object of CellRendererClassObj
    gtk_reserved441: proc () {.cdecl.}
    gtk_reserved442: proc () {.cdecl.}
    gtk_reserved443: proc () {.cdecl.}
    gtk_reserved444: proc () {.cdecl.}

proc cell_renderer_progress_get_type*(): GType {.
    importc: "gtk_cell_renderer_progress_get_type", libgtk.}
proc cell_renderer_progress_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_progress_new", libgtk.}

template gtk_cell_renderer_spin*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_spin_get_type(), 
                              CellRendererSpinObj))

template gtk_cell_renderer_spin_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_spin_get_type(), 
                           CellRendererSpinClassObj))

template gtk_is_cell_renderer_spin*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_spin_get_type()))

template gtk_is_cell_renderer_spin_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_spin_get_type()))

template gtk_cell_renderer_spin_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_spin_get_type(), 
                             CellRendererTextClassObj))

type 
  CellRendererSpinPrivateObj = object 
  
type 
  CellRendererSpin* =  ptr CellRendererSpinObj
  CellRendererSpinPtr* = ptr CellRendererSpinObj
  CellRendererSpinObj*{.final.} = object of CellRendererTextObj
    priv49: ptr CellRendererSpinPrivateObj

type 
  CellRendererSpinClass* =  ptr CellRendererSpinClassObj
  CellRendererSpinClassPtr* = ptr CellRendererSpinClassObj
  CellRendererSpinClassObj*{.final.} = object of CellRendererTextClassObj
    gtk_reserved451: proc () {.cdecl.}
    gtk_reserved452: proc () {.cdecl.}
    gtk_reserved453: proc () {.cdecl.}
    gtk_reserved454: proc () {.cdecl.}

proc cell_renderer_spin_get_type*(): GType {.
    importc: "gtk_cell_renderer_spin_get_type", libgtk.}
proc cell_renderer_spin_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_spin_new", libgtk.}

template gtk_cell_renderer_spinner*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_spinner_get_type(), 
                              CellRendererSpinnerObj))

template gtk_cell_renderer_spinner_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_spinner_get_type(), 
                           CellRendererSpinnerClassObj))

template gtk_is_cell_renderer_spinner*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_spinner_get_type()))

template gtk_is_cell_renderer_spinner_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_spinner_get_type()))

template gtk_cell_renderer_spinner_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_spinner_get_type(), 
                             CellRendererSpinnerClassObj))

type 
  CellRendererSpinnerPrivateObj = object 
  
type 
  CellRendererSpinner* =  ptr CellRendererSpinnerObj
  CellRendererSpinnerPtr* = ptr CellRendererSpinnerObj
  CellRendererSpinnerObj*{.final.} = object of CellRendererObj
    priv50: ptr CellRendererSpinnerPrivateObj

type 
  CellRendererSpinnerClass* =  ptr CellRendererSpinnerClassObj
  CellRendererSpinnerClassPtr* = ptr CellRendererSpinnerClassObj
  CellRendererSpinnerClassObj*{.final.} = object of CellRendererClassObj
    gtk_reserved461: proc () {.cdecl.}
    gtk_reserved462: proc () {.cdecl.}
    gtk_reserved463: proc () {.cdecl.}
    gtk_reserved464: proc () {.cdecl.}

proc cell_renderer_spinner_get_type*(): GType {.
    importc: "gtk_cell_renderer_spinner_get_type", libgtk.}
proc cell_renderer_spinner_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_spinner_new", libgtk.}

template gtk_cell_renderer_toggle*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_renderer_toggle_get_type(), 
                              CellRendererToggleObj))

template gtk_cell_renderer_toggle_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_renderer_toggle_get_type(), 
                           CellRendererToggleClassObj))

template gtk_is_cell_renderer_toggle*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_renderer_toggle_get_type()))

template gtk_is_cell_renderer_toggle_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_renderer_toggle_get_type()))

template gtk_cell_renderer_toggle_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_renderer_toggle_get_type(), 
                             CellRendererToggleClassObj))

type 
  CellRendererTogglePrivateObj = object 
  
type 
  CellRendererToggle* =  ptr CellRendererToggleObj
  CellRendererTogglePtr* = ptr CellRendererToggleObj
  CellRendererToggleObj*{.final.} = object of CellRendererObj
    priv51: ptr CellRendererTogglePrivateObj

type 
  CellRendererToggleClass* =  ptr CellRendererToggleClassObj
  CellRendererToggleClassPtr* = ptr CellRendererToggleClassObj
  CellRendererToggleClassObj*{.final.} = object of CellRendererClassObj
    toggled*: proc (cell_renderer_toggle: CellRendererToggle; 
                    path: cstring) {.cdecl.}
    gtk_reserved471: proc () {.cdecl.}
    gtk_reserved472: proc () {.cdecl.}
    gtk_reserved473: proc () {.cdecl.}
    gtk_reserved474: proc () {.cdecl.}

proc cell_renderer_toggle_get_type*(): GType {.
    importc: "gtk_cell_renderer_toggle_get_type", libgtk.}
proc cell_renderer_toggle_new*(): CellRenderer {.
    importc: "gtk_cell_renderer_toggle_new", libgtk.}
proc get_radio*(toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_radio", libgtk.}
proc radio*(toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_radio", libgtk.}
proc set_radio*(toggle: CellRendererToggle; 
    radio: gboolean) {.importc: "gtk_cell_renderer_toggle_set_radio", 
                       libgtk.}
proc `radio=`*(toggle: CellRendererToggle; 
    radio: gboolean) {.importc: "gtk_cell_renderer_toggle_set_radio", 
                       libgtk.}
proc get_active*(toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_active", libgtk.}
proc active*(toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_active", libgtk.}
proc set_active*(toggle: CellRendererToggle; 
    setting: gboolean) {.importc: "gtk_cell_renderer_toggle_set_active", 
                         libgtk.}
proc `active=`*(toggle: CellRendererToggle; 
    setting: gboolean) {.importc: "gtk_cell_renderer_toggle_set_active", 
                         libgtk.}
proc get_activatable*(
    toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_activatable", libgtk.}
proc activatable*(
    toggle: CellRendererToggle): gboolean {.
    importc: "gtk_cell_renderer_toggle_get_activatable", libgtk.}
proc set_activatable*(
    toggle: CellRendererToggle; setting: gboolean) {.
    importc: "gtk_cell_renderer_toggle_set_activatable", libgtk.}
proc `activatable=`*(
    toggle: CellRendererToggle; setting: gboolean) {.
    importc: "gtk_cell_renderer_toggle_set_activatable", libgtk.}

template gtk_cell_view*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_view_get_type(), CellViewObj))

template gtk_cell_view_class*(vtable: expr): expr = 
  (g_type_check_class_cast(vtable, cell_view_get_type(), CellViewClassObj))

template gtk_is_cell_view*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_view_get_type()))

template gtk_is_cell_view_class*(vtable: expr): expr = 
  (g_type_check_class_type(vtable, cell_view_get_type()))

template gtk_cell_view_get_class*(inst: expr): expr = 
  (g_type_instance_get_class(inst, cell_view_get_type(), CellViewClassObj))

type 
  CellViewPrivateObj = object 
  
type 
  CellView* =  ptr CellViewObj
  CellViewPtr* = ptr CellViewObj
  CellViewObj*{.final.} = object of WidgetObj
    priv52: ptr CellViewPrivateObj

type 
  CellViewClass* =  ptr CellViewClassObj
  CellViewClassPtr* = ptr CellViewClassObj
  CellViewClassObj*{.final.} = object of WidgetClassObj
    gtk_reserved481: proc () {.cdecl.}
    gtk_reserved482: proc () {.cdecl.}
    gtk_reserved483: proc () {.cdecl.}
    gtk_reserved484: proc () {.cdecl.}

proc cell_view_get_type*(): GType {.importc: "gtk_cell_view_get_type", 
    libgtk.}
proc cell_view_new*(): CellView {.importc: "gtk_cell_view_new", 
    libgtk.}
proc cell_view_new_with_context*(area: CellArea; 
                                     context: CellAreaContext): CellView {.
    importc: "gtk_cell_view_new_with_context", libgtk.}
proc cell_view_new_with_text*(text: cstring): CellView {.
    importc: "gtk_cell_view_new_with_text", libgtk.}
proc cell_view_new_with_markup*(markup: cstring): CellView {.
    importc: "gtk_cell_view_new_with_markup", libgtk.}
proc cell_view_new_with_pixbuf*(pixbuf: gdk_pixbuf.GdkPixbuf): CellView {.
    importc: "gtk_cell_view_new_with_pixbuf", libgtk.}
proc set_model*(cell_view: CellView; 
                              model: TreeModel) {.
    importc: "gtk_cell_view_set_model", libgtk.}
proc `model=`*(cell_view: CellView; 
                              model: TreeModel) {.
    importc: "gtk_cell_view_set_model", libgtk.}
proc get_model*(cell_view: CellView): TreeModel {.
    importc: "gtk_cell_view_get_model", libgtk.}
proc model*(cell_view: CellView): TreeModel {.
    importc: "gtk_cell_view_get_model", libgtk.}
proc set_displayed_row*(cell_view: CellView; 
                                      path: TreePath) {.
    importc: "gtk_cell_view_set_displayed_row", libgtk.}
proc `displayed_row=`*(cell_view: CellView; 
                                      path: TreePath) {.
    importc: "gtk_cell_view_set_displayed_row", libgtk.}
proc get_displayed_row*(cell_view: CellView): TreePath {.
    importc: "gtk_cell_view_get_displayed_row", libgtk.}
proc displayed_row*(cell_view: CellView): TreePath {.
    importc: "gtk_cell_view_get_displayed_row", libgtk.}
proc set_background_rgba*(cell_view: CellView; 
    rgba: gdk3.RGBA) {.importc: "gtk_cell_view_set_background_rgba", 
                         libgtk.}
proc `background_rgba=`*(cell_view: CellView; 
    rgba: gdk3.RGBA) {.importc: "gtk_cell_view_set_background_rgba", 
                         libgtk.}
proc get_draw_sensitive*(cell_view: CellView): gboolean {.
    importc: "gtk_cell_view_get_draw_sensitive", libgtk.}
proc draw_sensitive*(cell_view: CellView): gboolean {.
    importc: "gtk_cell_view_get_draw_sensitive", libgtk.}
proc set_draw_sensitive*(cell_view: CellView; 
    draw_sensitive: gboolean) {.importc: "gtk_cell_view_set_draw_sensitive", 
                                libgtk.}
proc `draw_sensitive=`*(cell_view: CellView; 
    draw_sensitive: gboolean) {.importc: "gtk_cell_view_set_draw_sensitive", 
                                libgtk.}
proc get_fit_model*(cell_view: CellView): gboolean {.
    importc: "gtk_cell_view_get_fit_model", libgtk.}
proc fit_model*(cell_view: CellView): gboolean {.
    importc: "gtk_cell_view_get_fit_model", libgtk.}
proc set_fit_model*(cell_view: CellView; 
                                  fit_model: gboolean) {.
    importc: "gtk_cell_view_set_fit_model", libgtk.}
proc `fit_model=`*(cell_view: CellView; 
                                  fit_model: gboolean) {.
    importc: "gtk_cell_view_set_fit_model", libgtk.}
proc get_size_of_row*(cell_view: CellView; 
                                    path: TreePath; 
                                    requisition: Requisition): gboolean {.
    importc: "gtk_cell_view_get_size_of_row", libgtk.}
proc size_of_row*(cell_view: CellView; 
                                    path: TreePath; 
                                    requisition: Requisition): gboolean {.
    importc: "gtk_cell_view_get_size_of_row", libgtk.}
proc set_background_color*(cell_view: CellView; 
    color: gdk3.Color) {.importc: "gtk_cell_view_set_background_color", 
                           libgtk.}
proc `background_color=`*(cell_view: CellView; 
    color: gdk3.Color) {.importc: "gtk_cell_view_set_background_color", 
                           libgtk.}

template gtk_toggle_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toggle_button_get_type(), ToggleButtonObj))

template gtk_toggle_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toggle_button_get_type(), 
                           ToggleButtonClassObj))

template gtk_is_toggle_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toggle_button_get_type()))

template gtk_is_toggle_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toggle_button_get_type()))

template gtk_toggle_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toggle_button_get_type(), 
                             ToggleButtonClassObj))

type 
  ToggleButtonPrivateObj = object 
  
type 
  ToggleButton* =  ptr ToggleButtonObj
  ToggleButtonPtr* = ptr ToggleButtonObj
  ToggleButtonObj* = object of ButtonObj
    priv53: ptr ToggleButtonPrivateObj

type 
  ToggleButtonClass* =  ptr ToggleButtonClassObj
  ToggleButtonClassPtr* = ptr ToggleButtonClassObj
  ToggleButtonClassObj = object of ButtonClassObj
    toggled*: proc (toggle_button: ToggleButton) {.cdecl.}
    gtk_reserved491: proc () {.cdecl.}
    gtk_reserved492: proc () {.cdecl.}
    gtk_reserved493: proc () {.cdecl.}
    gtk_reserved494: proc () {.cdecl.}

proc toggle_button_get_type*(): GType {.
    importc: "gtk_toggle_button_get_type", libgtk.}
proc toggle_button_new*(): ToggleButton {.
    importc: "gtk_toggle_button_new", libgtk.}
proc toggle_button_new_with_label*(label: cstring): ToggleButton {.
    importc: "gtk_toggle_button_new_with_label", libgtk.}
proc toggle_button_new*(label: cstring): ToggleButton {.
    importc: "gtk_toggle_button_new_with_label", libgtk.}
proc toggle_button_new_with_mnemonic*(label: cstring): ToggleButton {.
    importc: "gtk_toggle_button_new_with_mnemonic", libgtk.}
proc set_mode*(toggle_button: ToggleButton; 
                                 draw_indicator: gboolean) {.
    importc: "gtk_toggle_button_set_mode", libgtk.}
proc `mode=`*(toggle_button: ToggleButton; 
                                 draw_indicator: gboolean) {.
    importc: "gtk_toggle_button_set_mode", libgtk.}
proc get_mode*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_mode", libgtk.}
proc mode*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_mode", libgtk.}
proc set_active*(toggle_button: ToggleButton; 
                                   is_active: gboolean) {.
    importc: "gtk_toggle_button_set_active", libgtk.}
proc `active=`*(toggle_button: ToggleButton; 
                                   is_active: gboolean) {.
    importc: "gtk_toggle_button_set_active", libgtk.}
proc get_active*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_active", libgtk.}
proc active*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_active", libgtk.}
proc toggled*(toggle_button: ToggleButton) {.
    importc: "gtk_toggle_button_toggled", libgtk.}
proc set_inconsistent*(toggle_button: ToggleButton; 
    setting: gboolean) {.importc: "gtk_toggle_button_set_inconsistent", 
                         libgtk.}
proc `inconsistent=`*(toggle_button: ToggleButton; 
    setting: gboolean) {.importc: "gtk_toggle_button_set_inconsistent", 
                         libgtk.}
proc get_inconsistent*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_inconsistent", libgtk.}
proc inconsistent*(toggle_button: ToggleButton): gboolean {.
    importc: "gtk_toggle_button_get_inconsistent", libgtk.}

template gtk_check_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, check_button_get_type(), CheckButtonObj))

template gtk_check_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, check_button_get_type(), CheckButtonClassObj))

template gtk_is_check_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, check_button_get_type()))

template gtk_is_check_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, check_button_get_type()))

template gtk_check_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, check_button_get_type(), CheckButtonClassObj))

type 
  CheckButton* =  ptr CheckButtonObj
  CheckButtonPtr* = ptr CheckButtonObj
  CheckButtonObj* = object of ToggleButtonObj

type 
  CheckButtonClass* =  ptr CheckButtonClassObj
  CheckButtonClassPtr* = ptr CheckButtonClassObj
  CheckButtonClassObj = object of ToggleButtonClassObj
    draw_indicator*: proc (check_button: CheckButton; cr: cairo.Context) {.cdecl.}
    gtk_reserved501: proc () {.cdecl.}
    gtk_reserved502: proc () {.cdecl.}
    gtk_reserved503: proc () {.cdecl.}
    gtk_reserved504: proc () {.cdecl.}

proc check_button_get_type*(): GType {.
    importc: "gtk_check_button_get_type", libgtk.}
proc check_button_new*(): CheckButton {.importc: "gtk_check_button_new", 
    libgtk.}
proc check_button_new_with_label*(label: cstring): CheckButton {.
    importc: "gtk_check_button_new_with_label", libgtk.}
proc check_button_new*(label: cstring): CheckButton {.
    importc: "gtk_check_button_new_with_label", libgtk.}
proc check_button_new_with_mnemonic*(label: cstring): CheckButton {.
    importc: "gtk_check_button_new_with_mnemonic", libgtk.}

template gtk_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_item_get_type(), MenuItemObj))

template gtk_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_item_get_type(), MenuItemClassObj))

template gtk_is_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_item_get_type()))

template gtk_is_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_item_get_type()))

template gtk_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_item_get_type(), MenuItemClassObj))

type 
  MenuItemClass* =  ptr MenuItemClassObj
  MenuItemClassPtr* = ptr MenuItemClassObj
  MenuItemClassObj = object of BinClassObj
    hide_on_activate*: guint
    activate*: proc (menu_item: MenuItem) {.cdecl.}
    activate_item*: proc (menu_item: MenuItem) {.cdecl.}
    toggle_size_request*: proc (menu_item: MenuItem; 
                                requisition: var gint) {.cdecl.}
    toggle_size_allocate*: proc (menu_item: MenuItem; allocation: gint) {.cdecl.}
    set_label*: proc (menu_item: MenuItem; label: cstring) {.cdecl.}
    get_label*: proc (menu_item: MenuItem): cstring {.cdecl.}
    select*: proc (menu_item: MenuItem) {.cdecl.}
    deselect*: proc (menu_item: MenuItem) {.cdecl.}
    gtk_reserved511: proc () {.cdecl.}
    gtk_reserved512: proc () {.cdecl.}
    gtk_reserved513: proc () {.cdecl.}
    gtk_reserved514: proc () {.cdecl.}

proc menu_item_get_type*(): GType {.importc: "gtk_menu_item_get_type", 
    libgtk.}
proc menu_item_new*(): MenuItem {.importc: "gtk_menu_item_new", 
    libgtk.}
proc menu_item_new_with_label*(label: cstring): MenuItem {.
    importc: "gtk_menu_item_new_with_label", libgtk.}
proc menu_item_new*(label: cstring): MenuItem {.
    importc: "gtk_menu_item_new_with_label", libgtk.}
proc menu_item_new_with_mnemonic*(label: cstring): MenuItem {.
    importc: "gtk_menu_item_new_with_mnemonic", libgtk.}
proc set_submenu*(menu_item: MenuItem; 
                                submenu: Widget) {.
    importc: "gtk_menu_item_set_submenu", libgtk.}
proc `submenu=`*(menu_item: MenuItem; 
                                submenu: Widget) {.
    importc: "gtk_menu_item_set_submenu", libgtk.}
proc get_submenu*(menu_item: MenuItem): MenuItem {.
    importc: "gtk_menu_item_get_submenu", libgtk.}
proc submenu*(menu_item: MenuItem): MenuItem {.
    importc: "gtk_menu_item_get_submenu", libgtk.}
proc select*(menu_item: MenuItem) {.
    importc: "gtk_menu_item_select", libgtk.}
proc deselect*(menu_item: MenuItem) {.
    importc: "gtk_menu_item_deselect", libgtk.}
proc activate*(menu_item: MenuItem) {.
    importc: "gtk_menu_item_activate", libgtk.}
proc toggle_size_request*(menu_item: MenuItem; 
    requisition: var gint) {.importc: "gtk_menu_item_toggle_size_request", 
                             libgtk.}
proc toggle_size_allocate*(menu_item: MenuItem; 
    allocation: gint) {.importc: "gtk_menu_item_toggle_size_allocate", 
                        libgtk.}
proc set_right_justified*(menu_item: MenuItem; 
    right_justified: gboolean) {.importc: "gtk_menu_item_set_right_justified", 
                                 libgtk.}
proc `right_justified=`*(menu_item: MenuItem; 
    right_justified: gboolean) {.importc: "gtk_menu_item_set_right_justified", 
                                 libgtk.}
proc get_right_justified*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_right_justified", libgtk.}
proc right_justified*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_right_justified", libgtk.}
proc set_accel_path*(menu_item: MenuItem; 
                                   accel_path: cstring) {.
    importc: "gtk_menu_item_set_accel_path", libgtk.}
proc `accel_path=`*(menu_item: MenuItem; 
                                   accel_path: cstring) {.
    importc: "gtk_menu_item_set_accel_path", libgtk.}
proc get_accel_path*(menu_item: MenuItem): cstring {.
    importc: "gtk_menu_item_get_accel_path", libgtk.}
proc accel_path*(menu_item: MenuItem): cstring {.
    importc: "gtk_menu_item_get_accel_path", libgtk.}
proc set_label*(menu_item: MenuItem; label: cstring) {.
    importc: "gtk_menu_item_set_label", libgtk.}
proc `label=`*(menu_item: MenuItem; label: cstring) {.
    importc: "gtk_menu_item_set_label", libgtk.}
proc get_label*(menu_item: MenuItem): cstring {.
    importc: "gtk_menu_item_get_label", libgtk.}
proc label*(menu_item: MenuItem): cstring {.
    importc: "gtk_menu_item_get_label", libgtk.}
proc set_use_underline*(menu_item: MenuItem; 
                                      setting: gboolean) {.
    importc: "gtk_menu_item_set_use_underline", libgtk.}
proc `use_underline=`*(menu_item: MenuItem; 
                                      setting: gboolean) {.
    importc: "gtk_menu_item_set_use_underline", libgtk.}
proc get_use_underline*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_use_underline", libgtk.}
proc use_underline*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_use_underline", libgtk.}
proc set_reserve_indicator*(menu_item: MenuItem; 
    reserve: gboolean) {.importc: "gtk_menu_item_set_reserve_indicator", 
                         libgtk.}
proc `reserve_indicator=`*(menu_item: MenuItem; 
    reserve: gboolean) {.importc: "gtk_menu_item_set_reserve_indicator", 
                         libgtk.}
proc get_reserve_indicator*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_reserve_indicator", libgtk.}
proc reserve_indicator*(menu_item: MenuItem): gboolean {.
    importc: "gtk_menu_item_get_reserve_indicator", libgtk.}

template gtk_check_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, check_menu_item_get_type(), 
                              CheckMenuItemObj))

template gtk_check_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, check_menu_item_get_type(), 
                           CheckMenuItemClassObj))

template gtk_is_check_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, check_menu_item_get_type()))

template gtk_is_check_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, check_menu_item_get_type()))

template gtk_check_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, check_menu_item_get_type(), 
                             CheckMenuItemClassObj))

type 
  CheckMenuItemPrivateObj = object 
  
type 
  CheckMenuItem* =  ptr CheckMenuItemObj
  CheckMenuItemPtr* = ptr CheckMenuItemObj
  CheckMenuItemObj* = object of MenuItemObj
    priv55: ptr CheckMenuItemPrivateObj

type 
  CheckMenuItemClass* =  ptr CheckMenuItemClassObj
  CheckMenuItemClassPtr* = ptr CheckMenuItemClassObj
  CheckMenuItemClassObj = object of MenuItemClassObj
    toggled*: proc (check_menu_item: CheckMenuItem) {.cdecl.}
    draw_indicator*: proc (check_menu_item: CheckMenuItem; 
                           cr: cairo.Context) {.cdecl.}
    gtk_reserved521: proc () {.cdecl.}
    gtk_reserved522: proc () {.cdecl.}
    gtk_reserved523: proc () {.cdecl.}
    gtk_reserved524: proc () {.cdecl.}

proc check_menu_item_get_type*(): GType {.
    importc: "gtk_check_menu_item_get_type", libgtk.}
proc check_menu_item_new*(): CheckMenuItem {.
    importc: "gtk_check_menu_item_new", libgtk.}
proc check_menu_item_new_with_label*(label: cstring): CheckMenuItem {.
    importc: "gtk_check_menu_item_new_with_label", libgtk.}
proc check_menu_item_new*(label: cstring): CheckMenuItem {.
    importc: "gtk_check_menu_item_new_with_label", libgtk.}
proc check_menu_item_new_with_mnemonic*(label: cstring): CheckMenuItem {.
    importc: "gtk_check_menu_item_new_with_mnemonic", libgtk.}
proc set_active*(check_menu_item: CheckMenuItem; 
                                     is_active: gboolean) {.
    importc: "gtk_check_menu_item_set_active", libgtk.}
proc `active=`*(check_menu_item: CheckMenuItem; 
                                     is_active: gboolean) {.
    importc: "gtk_check_menu_item_set_active", libgtk.}
proc get_active*(check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_active", libgtk.}
proc active*(check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_active", libgtk.}
proc toggled*(check_menu_item: CheckMenuItem) {.
    importc: "gtk_check_menu_item_toggled", libgtk.}
proc set_inconsistent*(
    check_menu_item: CheckMenuItem; setting: gboolean) {.
    importc: "gtk_check_menu_item_set_inconsistent", libgtk.}
proc `inconsistent=`*(
    check_menu_item: CheckMenuItem; setting: gboolean) {.
    importc: "gtk_check_menu_item_set_inconsistent", libgtk.}
proc get_inconsistent*(
    check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_inconsistent", libgtk.}
proc inconsistent*(
    check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_inconsistent", libgtk.}
proc set_draw_as_radio*(
    check_menu_item: CheckMenuItem; draw_as_radio: gboolean) {.
    importc: "gtk_check_menu_item_set_draw_as_radio", libgtk.}
proc `draw_as_radio=`*(
    check_menu_item: CheckMenuItem; draw_as_radio: gboolean) {.
    importc: "gtk_check_menu_item_set_draw_as_radio", libgtk.}
proc get_draw_as_radio*(
    check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_draw_as_radio", libgtk.}
proc draw_as_radio*(
    check_menu_item: CheckMenuItem): gboolean {.
    importc: "gtk_check_menu_item_get_draw_as_radio", libgtk.}

template gtk_clipboard*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, clipboard_get_type(), ClipboardObj))

template gtk_is_clipboard*(obj: expr): expr = 
  (g_type_check_instance_type(obj, clipboard_get_type()))

type 
  ClipboardReceivedFunc* = proc (clipboard: Clipboard; 
                                    selection_data: SelectionData; 
                                    data: gpointer) {.cdecl.}
type 
  ClipboardTextReceivedFunc* = proc (clipboard: Clipboard; 
      text: cstring; data: gpointer) {.cdecl.}
type 
  ClipboardRichTextReceivedFunc* = proc (clipboard: Clipboard; 
      format: gdk3.Atom; text: var guint8; length: gsize; data: gpointer) {.cdecl.}
type 
  ClipboardImageReceivedFunc* = proc (clipboard: Clipboard; 
      pixbuf: gdk_pixbuf.GdkPixbuf; data: gpointer) {.cdecl.}
type 
  ClipboardURIReceivedFunc* = proc (clipboard: Clipboard; 
      uris: var cstring; data: gpointer) {.cdecl.}
type 
  ClipboardTargetsReceivedFunc* = proc (clipboard: Clipboard; 
      atoms: ptr gdk3.Atom; n_atoms: gint; data: gpointer) {.cdecl.}
type 
  ClipboardGetFunc* = proc (clipboard: Clipboard; 
                               selection_data: SelectionData; 
                               info: guint; user_data_or_owner: gpointer) {.cdecl.}
type 
  ClipboardClearFunc* = proc (clipboard: Clipboard; 
                                 user_data_or_owner: gpointer) {.cdecl.}
proc clipboard_get_type*(): GType {.importc: "gtk_clipboard_get_type", 
    libgtk.}
proc clipboard_get_for_display*(display: gdk3.Display; 
                                    selection: gdk3.Atom): Clipboard {.
    importc: "gtk_clipboard_get_for_display", libgtk.}
proc clipboard_get*(selection: gdk3.Atom): Clipboard {.
    importc: "gtk_clipboard_get", libgtk.}
proc clipboard_get_default*(display: gdk3.Display): Clipboard {.
    importc: "gtk_clipboard_get_default", libgtk.}
proc get_display*(clipboard: Clipboard): gdk3.Display {.
    importc: "gtk_clipboard_get_display", libgtk.}
proc display*(clipboard: Clipboard): gdk3.Display {.
    importc: "gtk_clipboard_get_display", libgtk.}
proc set_with_data*(clipboard: Clipboard; 
                                  targets: TargetEntry; 
                                  n_targets: guint; 
                                  get_func: ClipboardGetFunc; 
                                  clear_func: ClipboardClearFunc; 
                                  user_data: gpointer): gboolean {.
    importc: "gtk_clipboard_set_with_data", libgtk.}
proc set_with_owner*(clipboard: Clipboard; 
                                   targets: TargetEntry; 
                                   n_targets: guint; 
                                   get_func: ClipboardGetFunc; 
                                   clear_func: ClipboardClearFunc; 
                                   owner: GObject): gboolean {.
    importc: "gtk_clipboard_set_with_owner", libgtk.}
proc get_owner*(clipboard: Clipboard): GObject {.
    importc: "gtk_clipboard_get_owner", libgtk.}
proc owner*(clipboard: Clipboard): GObject {.
    importc: "gtk_clipboard_get_owner", libgtk.}
proc clear*(clipboard: Clipboard) {.
    importc: "gtk_clipboard_clear", libgtk.}
proc set_text*(clipboard: Clipboard; text: cstring; 
                             len: gint) {.importc: "gtk_clipboard_set_text", 
    libgtk.}
proc `text=`*(clipboard: Clipboard; text: cstring; 
                             len: gint) {.importc: "gtk_clipboard_set_text", 
    libgtk.}
proc set_image*(clipboard: Clipboard; 
                              pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_clipboard_set_image", libgtk.}
proc `image=`*(clipboard: Clipboard; 
                              pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_clipboard_set_image", libgtk.}
proc request_contents*(clipboard: Clipboard; 
                                     target: gdk3.Atom; 
                                     callback: ClipboardReceivedFunc; 
                                     user_data: gpointer) {.
    importc: "gtk_clipboard_request_contents", libgtk.}
proc request_text*(clipboard: Clipboard; 
                                 callback: ClipboardTextReceivedFunc; 
                                 user_data: gpointer) {.
    importc: "gtk_clipboard_request_text", libgtk.}
proc request_rich_text*(clipboard: Clipboard; 
                                      buffer: TextBuffer; callback: ClipboardRichTextReceivedFunc; 
                                      user_data: gpointer) {.
    importc: "gtk_clipboard_request_rich_text", libgtk.}
proc request_image*(clipboard: Clipboard; 
                                  callback: ClipboardImageReceivedFunc; 
                                  user_data: gpointer) {.
    importc: "gtk_clipboard_request_image", libgtk.}
proc request_uris*(clipboard: Clipboard; 
                                 callback: ClipboardURIReceivedFunc; 
                                 user_data: gpointer) {.
    importc: "gtk_clipboard_request_uris", libgtk.}
proc request_targets*(clipboard: Clipboard; callback: ClipboardTargetsReceivedFunc; 
                                    user_data: gpointer) {.
    importc: "gtk_clipboard_request_targets", libgtk.}
proc wait_for_contents*(clipboard: Clipboard; 
                                      target: gdk3.Atom): SelectionData {.
    importc: "gtk_clipboard_wait_for_contents", libgtk.}
proc wait_for_text*(clipboard: Clipboard): cstring {.
    importc: "gtk_clipboard_wait_for_text", libgtk.}
proc wait_for_rich_text*(clipboard: Clipboard; 
    buffer: TextBuffer; format: ptr gdk3.Atom; length: ptr gsize): ptr guint8 {.
    importc: "gtk_clipboard_wait_for_rich_text", libgtk.}
proc wait_for_image*(clipboard: Clipboard): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_clipboard_wait_for_image", libgtk.}
proc wait_for_uris*(clipboard: Clipboard): cstringArray {.
    importc: "gtk_clipboard_wait_for_uris", libgtk.}
proc wait_for_targets*(clipboard: Clipboard; 
                                     targets: ptr ptr gdk3.Atom; 
                                     n_targets: var gint): gboolean {.
    importc: "gtk_clipboard_wait_for_targets", libgtk.}
proc wait_is_text_available*(clipboard: Clipboard): gboolean {.
    importc: "gtk_clipboard_wait_is_text_available", libgtk.}
proc wait_is_rich_text_available*(clipboard: Clipboard; 
    buffer: TextBuffer): gboolean {.
    importc: "gtk_clipboard_wait_is_rich_text_available", libgtk.}
proc wait_is_image_available*(clipboard: Clipboard): gboolean {.
    importc: "gtk_clipboard_wait_is_image_available", libgtk.}
proc wait_is_uris_available*(clipboard: Clipboard): gboolean {.
    importc: "gtk_clipboard_wait_is_uris_available", libgtk.}
proc wait_is_target_available*(clipboard: Clipboard; 
    target: gdk3.Atom): gboolean {.importc: "gtk_clipboard_wait_is_target_available", 
                                 libgtk.}
proc set_can_store*(clipboard: Clipboard; 
                                  targets: TargetEntry; n_targets: gint) {.
    importc: "gtk_clipboard_set_can_store", libgtk.}
proc `can_store=`*(clipboard: Clipboard; 
                                  targets: TargetEntry; n_targets: gint) {.
    importc: "gtk_clipboard_set_can_store", libgtk.}
proc store*(clipboard: Clipboard) {.
    importc: "gtk_clipboard_store", libgtk.}

template gtk_color_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_button_get_type(), ColorButtonObj))

template gtk_color_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, color_button_get_type(), ColorButtonClassObj))

template gtk_is_color_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_button_get_type()))

template gtk_is_color_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, color_button_get_type()))

template gtk_color_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, color_button_get_type(), ColorButtonClassObj))

type 
  ColorButtonPrivateObj = object 
  
type 
  ColorButton* =  ptr ColorButtonObj
  ColorButtonPtr* = ptr ColorButtonObj
  ColorButtonObj*{.final.} = object of ButtonObj
    priv56: ptr ColorButtonPrivateObj

type 
  ColorButtonClass* =  ptr ColorButtonClassObj
  ColorButtonClassPtr* = ptr ColorButtonClassObj
  ColorButtonClassObj*{.final.} = object of ButtonClassObj
    color_set*: proc (cp: ColorButton) {.cdecl.}
    gtk_reserved531: proc () {.cdecl.}
    gtk_reserved532: proc () {.cdecl.}
    gtk_reserved533: proc () {.cdecl.}
    gtk_reserved534: proc () {.cdecl.}

proc color_button_get_type*(): GType {.
    importc: "gtk_color_button_get_type", libgtk.}
proc color_button_new*(): ColorButton {.importc: "gtk_color_button_new", 
    libgtk.}
proc color_button_new_with_rgba*(rgba: gdk3.RGBA): ColorButton {.
    importc: "gtk_color_button_new_with_rgba", libgtk.}
proc set_title*(button: ColorButton; title: cstring) {.
    importc: "gtk_color_button_set_title", libgtk.}
proc `title=`*(button: ColorButton; title: cstring) {.
    importc: "gtk_color_button_set_title", libgtk.}
proc get_title*(button: ColorButton): cstring {.
    importc: "gtk_color_button_get_title", libgtk.}
proc title*(button: ColorButton): cstring {.
    importc: "gtk_color_button_get_title", libgtk.}
proc color_button_new_with_color*(color: gdk3.Color): ColorButton {.
    importc: "gtk_color_button_new_with_color", libgtk.}
proc set_color*(button: ColorButton; 
                                 color: gdk3.Color) {.
    importc: "gtk_color_button_set_color", libgtk.}
proc `color=`*(button: ColorButton; 
                                 color: gdk3.Color) {.
    importc: "gtk_color_button_set_color", libgtk.}
proc get_color*(button: ColorButton; 
                                 color: var gdk3.ColorObj) {.
    importc: "gtk_color_button_get_color", libgtk.}
proc set_alpha*(button: ColorButton; alpha: guint16) {.
    importc: "gtk_color_button_set_alpha", libgtk.}
proc `alpha=`*(button: ColorButton; alpha: guint16) {.
    importc: "gtk_color_button_set_alpha", libgtk.}
proc get_alpha*(button: ColorButton): guint16 {.
    importc: "gtk_color_button_get_alpha", libgtk.}
proc alpha*(button: ColorButton): guint16 {.
    importc: "gtk_color_button_get_alpha", libgtk.}
proc set_use_alpha*(button: ColorButton; 
                                     use_alpha: gboolean) {.
    importc: "gtk_color_button_set_use_alpha", libgtk.}
proc `use_alpha=`*(button: ColorButton; 
                                     use_alpha: gboolean) {.
    importc: "gtk_color_button_set_use_alpha", libgtk.}
proc get_use_alpha*(button: ColorButton): gboolean {.
    importc: "gtk_color_button_get_use_alpha", libgtk.}
proc use_alpha*(button: ColorButton): gboolean {.
    importc: "gtk_color_button_get_use_alpha", libgtk.}
proc set_rgba*(button: ColorButton; rgba: gdk3.RGBA) {.
    importc: "gtk_color_button_set_rgba", libgtk.}
proc `rgba=`*(button: ColorButton; rgba: gdk3.RGBA) {.
    importc: "gtk_color_button_set_rgba", libgtk.}
proc get_rgba*(button: ColorButton; rgba: var gdk3.RGBAObj) {.
    importc: "gtk_color_button_get_rgba", libgtk.}

template gtk_color_chooser*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_chooser_get_type(), ColorChooserObj))

template gtk_is_color_chooser*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_chooser_get_type()))

template gtk_color_chooser_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, color_chooser_get_type(), 
                                 ColorChooserInterfaceObj))

type 
  ColorChooser* =  ptr ColorChooserObj
  ColorChooserPtr* = ptr ColorChooserObj
  ColorChooserObj* = object 
  
type 
  ColorChooserInterface* =  ptr ColorChooserInterfaceObj
  ColorChooserInterfacePtr* = ptr ColorChooserInterfaceObj
  ColorChooserInterfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_rgba*: proc (chooser: ColorChooser; color: gdk3.RGBA) {.cdecl.}
    set_rgba*: proc (chooser: ColorChooser; color: gdk3.RGBA) {.cdecl.}
    add_palette*: proc (chooser: ColorChooser; 
                        orientation: Orientation; colors_per_line: gint; 
                        n_colors: gint; colors: gdk3.RGBA) {.cdecl.}
    color_activated*: proc (chooser: ColorChooser; color: gdk3.RGBA) {.cdecl.}
    padding*: array[12, gpointer]

proc color_chooser_get_type*(): GType {.
    importc: "gtk_color_chooser_get_type", libgtk.}
proc get_rgba*(chooser: ColorChooser; 
                                 color: var gdk3.RGBAObj) {.
    importc: "gtk_color_chooser_get_rgba", libgtk.}
proc set_rgba*(chooser: ColorChooser; 
                                 color: gdk3.RGBA) {.
    importc: "gtk_color_chooser_set_rgba", libgtk.}
proc `rgba=`*(chooser: ColorChooser; 
                                 color: gdk3.RGBA) {.
    importc: "gtk_color_chooser_set_rgba", libgtk.}
proc get_use_alpha*(chooser: ColorChooser): gboolean {.
    importc: "gtk_color_chooser_get_use_alpha", libgtk.}
proc use_alpha*(chooser: ColorChooser): gboolean {.
    importc: "gtk_color_chooser_get_use_alpha", libgtk.}
proc set_use_alpha*(chooser: ColorChooser; 
                                      use_alpha: gboolean) {.
    importc: "gtk_color_chooser_set_use_alpha", libgtk.}
proc `use_alpha=`*(chooser: ColorChooser; 
                                      use_alpha: gboolean) {.
    importc: "gtk_color_chooser_set_use_alpha", libgtk.}
proc add_palette*(chooser: ColorChooser; 
                                    orientation: Orientation; 
                                    colors_per_line: gint; n_colors: gint; 
                                    colors: gdk3.RGBA) {.
    importc: "gtk_color_chooser_add_palette", libgtk.}

template gtk_color_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_chooser_dialog_get_type(), 
                              ColorChooserDialogObj))

template gtk_color_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, color_chooser_dialog_get_type(), 
                           ColorChooserDialogClassObj))

template gtk_is_color_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_chooser_dialog_get_type()))

template gtk_is_color_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, color_chooser_dialog_get_type()))

template gtk_color_chooser_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, color_chooser_dialog_get_type(), 
                             ColorChooserDialogClassObj))

type 
  ColorChooserDialogPrivateObj = object 
  
type 
  ColorChooserDialog* =  ptr ColorChooserDialogObj
  ColorChooserDialogPtr* = ptr ColorChooserDialogObj
  ColorChooserDialogObj*{.final.} = object of DialogObj
    priv57: ptr ColorChooserDialogPrivateObj

type 
  ColorChooserDialogClass* =  ptr ColorChooserDialogClassObj
  ColorChooserDialogClassPtr* = ptr ColorChooserDialogClassObj
  ColorChooserDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved541: proc () {.cdecl.}
    gtk_reserved542: proc () {.cdecl.}
    gtk_reserved543: proc () {.cdecl.}
    gtk_reserved544: proc () {.cdecl.}

proc color_chooser_dialog_get_type*(): GType {.
    importc: "gtk_color_chooser_dialog_get_type", libgtk.}
proc color_chooser_dialog_new*(title: cstring; parent: Window): ColorChooserDialog {.
    importc: "gtk_color_chooser_dialog_new", libgtk.}

template gtk_color_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_chooser_widget_get_type(), 
                              ColorChooserWidgetObj))

template gtk_color_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, color_chooser_widget_get_type(), 
                           ColorChooserWidgetClassObj))

template gtk_is_color_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_chooser_widget_get_type()))

template gtk_is_color_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, color_chooser_widget_get_type()))

template gtk_color_chooser_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, color_chooser_widget_get_type(), 
                             ColorChooserWidgetClassObj))

type 
  ColorChooserWidgetPrivateObj = object 
  
type 
  ColorChooserWidget* =  ptr ColorChooserWidgetObj
  ColorChooserWidgetPtr* = ptr ColorChooserWidgetObj
  ColorChooserWidgetObj*{.final.} = object of BoxObj
    priv58: ptr ColorChooserWidgetPrivateObj

type 
  ColorChooserWidgetClass* =  ptr ColorChooserWidgetClassObj
  ColorChooserWidgetClassPtr* = ptr ColorChooserWidgetClassObj
  ColorChooserWidgetClassObj*{.final.} = object of BoxClassObj
    gtk_reserved551: proc () {.cdecl.}
    gtk_reserved552: proc () {.cdecl.}
    gtk_reserved553: proc () {.cdecl.}
    gtk_reserved554: proc () {.cdecl.}
    gtk_reserved555: proc () {.cdecl.}
    gtk_reserved556: proc () {.cdecl.}
    gtk_reserved557: proc () {.cdecl.}
    gtk_reserved558: proc () {.cdecl.}

proc color_chooser_widget_get_type*(): GType {.
    importc: "gtk_color_chooser_widget_get_type", libgtk.}
proc color_chooser_widget_new*(): ColorChooserWidget {.
    importc: "gtk_color_chooser_widget_new", libgtk.}

proc hsv_to_rgb*(h: gdouble; s: gdouble; v: gdouble; r: ptr gdouble; 
                     g: var gdouble; b: var gdouble) {.
    importc: "gtk_hsv_to_rgb", libgtk.}
proc rgb_to_hsv*(r: gdouble; g: gdouble; b: gdouble; h: ptr gdouble; 
                     s: var gdouble; v: var gdouble) {.
    importc: "gtk_rgb_to_hsv", libgtk.}

template gtk_combo_box_text*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, combo_box_text_get_type(), ComboBoxTextObj))

template gtk_combo_box_text_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, combo_box_text_get_type(), 
                           ComboBoxTextClassObj))

template gtk_is_combo_box_text*(obj: expr): expr = 
  (g_type_check_instance_type(obj, combo_box_text_get_type()))

template gtk_is_combo_box_text_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, combo_box_text_get_type()))

template gtk_combo_box_text_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, combo_box_text_get_type(), 
                             ComboBoxTextClassObj))

type 
  ComboBoxTextPrivateObj = object 
  
type 
  ComboBoxText* =  ptr ComboBoxTextObj
  ComboBoxTextPtr* = ptr ComboBoxTextObj
  ComboBoxTextObj*{.final.} = object of ComboBoxObj
    priv59: ptr ComboBoxTextPrivateObj

type 
  ComboBoxTextClass* =  ptr ComboBoxTextClassObj
  ComboBoxTextClassPtr* = ptr ComboBoxTextClassObj
  ComboBoxTextClassObj*{.final.} = object of ComboBoxClassObj
    gtk_reserved561: proc () {.cdecl.}
    gtk_reserved562: proc () {.cdecl.}
    gtk_reserved563: proc () {.cdecl.}
    gtk_reserved564: proc () {.cdecl.}

proc combo_box_text_get_type*(): GType {.
    importc: "gtk_combo_box_text_get_type", libgtk.}
proc combo_box_text_new*(): ComboBoxText {.
    importc: "gtk_combo_box_text_new", libgtk.}
proc combo_box_text_new_with_entry*(): ComboBoxText {.
    importc: "gtk_combo_box_text_new_with_entry", libgtk.}
proc append_text*(combo_box: ComboBoxText; 
                                     text: cstring) {.
    importc: "gtk_combo_box_text_append_text", libgtk.}
proc insert_text*(combo_box: ComboBoxText; 
                                     position: gint; text: cstring) {.
    importc: "gtk_combo_box_text_insert_text", libgtk.}
proc prepend_text*(combo_box: ComboBoxText; 
                                      text: cstring) {.
    importc: "gtk_combo_box_text_prepend_text", libgtk.}
proc remove*(combo_box: ComboBoxText; position: gint) {.
    importc: "gtk_combo_box_text_remove", libgtk.}
proc remove_all*(combo_box: ComboBoxText) {.
    importc: "gtk_combo_box_text_remove_all", libgtk.}
proc get_active_text*(combo_box: ComboBoxText): cstring {.
    importc: "gtk_combo_box_text_get_active_text", libgtk.}
proc active_text*(combo_box: ComboBoxText): cstring {.
    importc: "gtk_combo_box_text_get_active_text", libgtk.}
proc insert*(combo_box: ComboBoxText; 
                                position: gint; id: cstring; text: cstring) {.
    importc: "gtk_combo_box_text_insert", libgtk.}
proc append*(combo_box: ComboBoxText; id: cstring; 
                                text: cstring) {.
    importc: "gtk_combo_box_text_append", libgtk.}
proc prepend*(combo_box: ComboBoxText; 
                                 id: cstring; text: cstring) {.
    importc: "gtk_combo_box_text_prepend", libgtk.}

type 
  CssSectionType* {.size: sizeof(cint), pure.} = enum 
    DOCUMENT, `IMPORT`, 
    COLOR_DEFINITION, BINDING_SET, 
    RULESET, SELECTOR, 
    DECLARATION, VALUE, 
    KEYFRAMES
  CssSection* =  ptr CssSectionObj
  CssSectionPtr* = ptr CssSectionObj
  CssSectionObj* = object 
  
proc css_section_get_type*(): GType {.importc: "gtk_css_section_get_type", 
    libgtk.}
proc `ref`*(section: CssSection): CssSection {.
    importc: "gtk_css_section_ref", libgtk.}
proc unref*(section: CssSection) {.
    importc: "gtk_css_section_unref", libgtk.}
proc get_section_type*(section: CssSection): CssSectionType {.
    importc: "gtk_css_section_get_section_type", libgtk.}
proc section_type*(section: CssSection): CssSectionType {.
    importc: "gtk_css_section_get_section_type", libgtk.}
proc get_parent*(section: CssSection): CssSection {.
    importc: "gtk_css_section_get_parent", libgtk.}
proc parent*(section: CssSection): CssSection {.
    importc: "gtk_css_section_get_parent", libgtk.}
proc get_file*(section: CssSection): gio.GFile {.
    importc: "gtk_css_section_get_file", libgtk.}
proc file*(section: CssSection): gio.GFile {.
    importc: "gtk_css_section_get_file", libgtk.}
proc get_start_line*(section: CssSection): guint {.
    importc: "gtk_css_section_get_start_line", libgtk.}
proc start_line*(section: CssSection): guint {.
    importc: "gtk_css_section_get_start_line", libgtk.}
proc get_start_position*(section: CssSection): guint {.
    importc: "gtk_css_section_get_start_position", libgtk.}
proc start_position*(section: CssSection): guint {.
    importc: "gtk_css_section_get_start_position", libgtk.}
proc get_end_line*(section: CssSection): guint {.
    importc: "gtk_css_section_get_end_line", libgtk.}
proc end_line*(section: CssSection): guint {.
    importc: "gtk_css_section_get_end_line", libgtk.}
proc get_end_position*(section: CssSection): guint {.
    importc: "gtk_css_section_get_end_position", libgtk.}
proc end_position*(section: CssSection): guint {.
    importc: "gtk_css_section_get_end_position", libgtk.}

template gtk_css_provider*(o: expr): expr = 
  (g_type_check_instance_cast(o, css_provider_get_type(), CssProviderObj))

template gtk_css_provider_class*(c: expr): expr = 
  (g_type_check_class_cast(c, css_provider_get_type(), CssProviderClassObj))

template gtk_is_css_provider*(o: expr): expr = 
  (g_type_check_instance_type(o, css_provider_get_type()))

template gtk_is_css_provider_class*(c: expr): expr = 
  (g_type_check_class_type(c, css_provider_get_type()))

template gtk_css_provider_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, css_provider_get_type(), CssProviderClassObj))

type 
  CssProviderError* {.size: sizeof(cint), pure.} = enum 
    FAILED, SYNTAX, 
    `IMPORT`, NAME, 
    DEPRECATED, UNKNOWN_VALUE
proc css_provider_error_quark*(): GQuark {.
    importc: "gtk_css_provider_error_quark", libgtk.}
type 
  CssProviderPrivateObj = object 
  
type 
  CssProvider* =  ptr CssProviderObj
  CssProviderPtr* = ptr CssProviderObj
  CssProviderObj*{.final.} = object of GObjectObj
    priv60: ptr CssProviderPrivateObj

type 
  CssProviderClass* =  ptr CssProviderClassObj
  CssProviderClassPtr* = ptr CssProviderClassObj
  CssProviderClassObj*{.final.} = object of GObjectClassObj
    parsing_error*: proc (provider: CssProvider; 
                          section: CssSection; error: glib.GError) {.cdecl.}
    gtk_reserved572: proc () {.cdecl.}
    gtk_reserved573: proc () {.cdecl.}
    gtk_reserved574: proc () {.cdecl.}

proc css_provider_get_type*(): GType {.
    importc: "gtk_css_provider_get_type", libgtk.}
proc css_provider_new*(): CssProvider {.
    importc: "gtk_css_provider_new", libgtk.}
proc to_string*(provider: CssProvider): cstring {.
    importc: "gtk_css_provider_to_string", libgtk.}
proc load_from_data*(css_provider: CssProvider; 
                                      data: cstring; length: gssize; 
                                      error: var glib.GError): gboolean {.
    importc: "gtk_css_provider_load_from_data", libgtk.}
proc load_from_file*(css_provider: CssProvider; 
                                      file: gio.GFile; error: var glib.GError): gboolean {.
    importc: "gtk_css_provider_load_from_file", libgtk.}
proc load_from_path*(css_provider: CssProvider; 
                                      path: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_css_provider_load_from_path", libgtk.}
proc load_from_resource*(css_provider: CssProvider; 
    resource_path: cstring) {.importc: "gtk_css_provider_load_from_resource", 
                                libgtk.}
proc css_provider_get_default*(): CssProvider {.
    importc: "gtk_css_provider_get_default", libgtk.}
proc css_provider_get_named*(name: cstring; variant: cstring): CssProvider {.
    importc: "gtk_css_provider_get_named", libgtk.}

type 
  DebugFlag* {.size: sizeof(cint), pure.} = enum 
    MISC = 1 shl 0, PLUGSOCKET = 1 shl 1, 
    TEXT = 1 shl 2, TREE = 1 shl 3, 
    UPDATES = 1 shl 4, KEYBINDINGS = 1 shl 5, 
    MULTIHEAD = 1 shl 6, MODULES = 1 shl 7, 
    GEOMETRY = 1 shl 8, ICONTHEME = 1 shl 9, 
    PRINTING = 1 shl 10, BUILDER = 1 shl 11, 
    SIZE_REQUEST = 1 shl 12, NO_CSS_CACHE = 1 shl 13, 
    BASELINES = 1 shl 14, PIXEL_CACHE = 1 shl 15, 
    NO_PIXEL_CACHE = 1 shl 16, INTERACTIVE = 1 shl 17, 
    TOUCHSCREEN = 1 shl 18, ACTIONS = 1 shl 19
proc get_debug_flags*(): guint {.importc: "gtk_get_debug_flags", 
                                     libgtk.}
proc set_debug_flags*(flags: guint) {.importc: "gtk_set_debug_flags", 
    libgtk.}

template gtk_drawing_area*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, drawing_area_get_type(), DrawingAreaObj))

template gtk_drawing_area_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, drawing_area_get_type(), DrawingAreaClassObj))

template gtk_is_drawing_area*(obj: expr): expr = 
  (g_type_check_instance_type(obj, drawing_area_get_type()))

template gtk_is_drawing_area_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, drawing_area_get_type()))

template gtk_drawing_area_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, drawing_area_get_type(), DrawingAreaClassObj))

type 
  DrawingArea* =  ptr DrawingAreaObj
  DrawingAreaPtr* = ptr DrawingAreaObj
  DrawingAreaObj*{.final.} = object of WidgetObj
    dummy: gpointer

type 
  DrawingAreaClass* =  ptr DrawingAreaClassObj
  DrawingAreaClassPtr* = ptr DrawingAreaClassObj
  DrawingAreaClassObj*{.final.} = object of WidgetClassObj
    gtk_reserved581: proc () {.cdecl.}
    gtk_reserved582: proc () {.cdecl.}
    gtk_reserved583: proc () {.cdecl.}
    gtk_reserved584: proc () {.cdecl.}

proc drawing_area_get_type*(): GType {.
    importc: "gtk_drawing_area_get_type", libgtk.}
proc drawing_area_new*(): DrawingArea {.importc: "gtk_drawing_area_new", 
    libgtk.}

template gtk_event_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, event_box_get_type(), EventBoxObj))

template gtk_event_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, event_box_get_type(), EventBoxClassObj))

template gtk_is_event_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, event_box_get_type()))

template gtk_is_event_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, event_box_get_type()))

template gtk_event_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, event_box_get_type(), EventBoxClassObj))

type 
  EventBoxPrivateObj = object 
  
type 
  EventBox* =  ptr EventBoxObj
  EventBoxPtr* = ptr EventBoxObj
  EventBoxObj*{.final.} = object of BinObj
    priv61: ptr EventBoxPrivateObj

type 
  EventBoxClass* =  ptr EventBoxClassObj
  EventBoxClassPtr* = ptr EventBoxClassObj
  EventBoxClassObj*{.final.} = object of BinClassObj
    gtk_reserved591: proc () {.cdecl.}
    gtk_reserved592: proc () {.cdecl.}
    gtk_reserved593: proc () {.cdecl.}
    gtk_reserved594: proc () {.cdecl.}

proc event_box_get_type*(): GType {.importc: "gtk_event_box_get_type", 
    libgtk.}
proc event_box_new*(): EventBox {.importc: "gtk_event_box_new", 
    libgtk.}
proc get_visible_window*(event_box: EventBox): gboolean {.
    importc: "gtk_event_box_get_visible_window", libgtk.}
proc visible_window*(event_box: EventBox): gboolean {.
    importc: "gtk_event_box_get_visible_window", libgtk.}
proc set_visible_window*(event_box: EventBox; 
    visible_window: gboolean) {.importc: "gtk_event_box_set_visible_window", 
                                libgtk.}
proc `visible_window=`*(event_box: EventBox; 
    visible_window: gboolean) {.importc: "gtk_event_box_set_visible_window", 
                                libgtk.}
proc get_above_child*(event_box: EventBox): gboolean {.
    importc: "gtk_event_box_get_above_child", libgtk.}
proc above_child*(event_box: EventBox): gboolean {.
    importc: "gtk_event_box_get_above_child", libgtk.}
proc set_above_child*(event_box: EventBox; 
                                    above_child: gboolean) {.
    importc: "gtk_event_box_set_above_child", libgtk.}
proc `above_child=`*(event_box: EventBox; 
                                    above_child: gboolean) {.
    importc: "gtk_event_box_set_above_child", libgtk.}

type 
  EventController* =  ptr EventControllerObj
  EventControllerPtr* = ptr EventControllerObj
  EventControllerObj* = object 
  
template gtk_event_controller*(o: expr): expr = 
  (g_type_check_instance_cast(o, event_controller_get_type(), 
                              EventControllerObj))

template gtk_event_controller_class*(k: expr): expr = 
  (g_type_check_class_cast(k, event_controller_get_type(), 
                           EventControllerClass))

template gtk_is_event_controller*(o: expr): expr = 
  (g_type_check_instance_type(o, event_controller_get_type()))

template gtk_is_event_controller_class*(k: expr): expr = 
  (g_type_check_class_type(k, event_controller_get_type()))

template gtk_event_controller_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, event_controller_get_type(), 
                             EventControllerClass))

proc event_controller_get_type*(): GType {.
    importc: "gtk_event_controller_get_type", libgtk.}
proc get_widget*(controller: EventController): Widget {.
    importc: "gtk_event_controller_get_widget", libgtk.}
proc widget*(controller: EventController): Widget {.
    importc: "gtk_event_controller_get_widget", libgtk.}
proc handle_event*(controller: EventController; 
    event: gdk3.Event): gboolean {.importc: "gtk_event_controller_handle_event", 
                                     libgtk.}
proc reset*(controller: EventController) {.
    importc: "gtk_event_controller_reset", libgtk.}
proc get_propagation_phase*(
    controller: EventController): PropagationPhase {.
    importc: "gtk_event_controller_get_propagation_phase", libgtk.}
proc propagation_phase*(
    controller: EventController): PropagationPhase {.
    importc: "gtk_event_controller_get_propagation_phase", libgtk.}
proc set_propagation_phase*(
    controller: EventController; phase: PropagationPhase) {.
    importc: "gtk_event_controller_set_propagation_phase", libgtk.}
proc `propagation_phase=`*(
    controller: EventController; phase: PropagationPhase) {.
    importc: "gtk_event_controller_set_propagation_phase", libgtk.}

template gtk_expander*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, expander_get_type(), ExpanderObj))

template gtk_expander_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, expander_get_type(), ExpanderClassObj))

template gtk_is_expander*(obj: expr): expr = 
  (g_type_check_instance_type(obj, expander_get_type()))

template gtk_is_expander_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, expander_get_type()))

template gtk_expander_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, expander_get_type(), ExpanderClassObj))

type 
  ExpanderPrivateObj = object 
  
type 
  Expander* =  ptr ExpanderObj
  ExpanderPtr* = ptr ExpanderObj
  ExpanderObj*{.final.} = object of BinObj
    priv62: ptr ExpanderPrivateObj

type 
  ExpanderClass* =  ptr ExpanderClassObj
  ExpanderClassPtr* = ptr ExpanderClassObj
  ExpanderClassObj*{.final.} = object of BinClassObj
    activate*: proc (expander: Expander) {.cdecl.}
    gtk_reserved601: proc () {.cdecl.}
    gtk_reserved602: proc () {.cdecl.}
    gtk_reserved603: proc () {.cdecl.}
    gtk_reserved604: proc () {.cdecl.}

proc expander_get_type*(): GType {.importc: "gtk_expander_get_type", 
    libgtk.}
proc expander_new*(label: cstring): Expander {.
    importc: "gtk_expander_new", libgtk.}
proc expander_new_with_mnemonic*(label: cstring): Expander {.
    importc: "gtk_expander_new_with_mnemonic", libgtk.}
proc set_expanded*(expander: Expander; expanded: gboolean) {.
    importc: "gtk_expander_set_expanded", libgtk.}
proc `expanded=`*(expander: Expander; expanded: gboolean) {.
    importc: "gtk_expander_set_expanded", libgtk.}
proc get_expanded*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_expanded", libgtk.}
proc expanded*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_expanded", libgtk.}
proc set_spacing*(expander: Expander; spacing: gint) {.
    importc: "gtk_expander_set_spacing", libgtk.}
proc `spacing=`*(expander: Expander; spacing: gint) {.
    importc: "gtk_expander_set_spacing", libgtk.}
proc get_spacing*(expander: Expander): gint {.
    importc: "gtk_expander_get_spacing", libgtk.}
proc spacing*(expander: Expander): gint {.
    importc: "gtk_expander_get_spacing", libgtk.}
proc set_label*(expander: Expander; label: cstring) {.
    importc: "gtk_expander_set_label", libgtk.}
proc `label=`*(expander: Expander; label: cstring) {.
    importc: "gtk_expander_set_label", libgtk.}
proc get_label*(expander: Expander): cstring {.
    importc: "gtk_expander_get_label", libgtk.}
proc label*(expander: Expander): cstring {.
    importc: "gtk_expander_get_label", libgtk.}
proc set_use_underline*(expander: Expander; 
                                     use_underline: gboolean) {.
    importc: "gtk_expander_set_use_underline", libgtk.}
proc `use_underline=`*(expander: Expander; 
                                     use_underline: gboolean) {.
    importc: "gtk_expander_set_use_underline", libgtk.}
proc get_use_underline*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_use_underline", libgtk.}
proc use_underline*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_use_underline", libgtk.}
proc set_use_markup*(expander: Expander; 
                                  use_markup: gboolean) {.
    importc: "gtk_expander_set_use_markup", libgtk.}
proc `use_markup=`*(expander: Expander; 
                                  use_markup: gboolean) {.
    importc: "gtk_expander_set_use_markup", libgtk.}
proc get_use_markup*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_use_markup", libgtk.}
proc use_markup*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_use_markup", libgtk.}
proc set_label_widget*(expander: Expander; 
                                    label_widget: Widget) {.
    importc: "gtk_expander_set_label_widget", libgtk.}
proc `label_widget=`*(expander: Expander; 
                                    label_widget: Widget) {.
    importc: "gtk_expander_set_label_widget", libgtk.}
proc get_label_widget*(expander: Expander): Label {.
    importc: "gtk_expander_get_label_widget", libgtk.}
proc label_widget*(expander: Expander): Label {.
    importc: "gtk_expander_get_label_widget", libgtk.}
proc set_label_fill*(expander: Expander; 
                                  label_fill: gboolean) {.
    importc: "gtk_expander_set_label_fill", libgtk.}
proc `label_fill=`*(expander: Expander; 
                                  label_fill: gboolean) {.
    importc: "gtk_expander_set_label_fill", libgtk.}
proc get_label_fill*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_label_fill", libgtk.}
proc label_fill*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_label_fill", libgtk.}
proc set_resize_toplevel*(expander: Expander; 
    resize_toplevel: gboolean) {.importc: "gtk_expander_set_resize_toplevel", 
                                 libgtk.}
proc `resize_toplevel=`*(expander: Expander; 
    resize_toplevel: gboolean) {.importc: "gtk_expander_set_resize_toplevel", 
                                 libgtk.}
proc get_resize_toplevel*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_resize_toplevel", libgtk.}
proc resize_toplevel*(expander: Expander): gboolean {.
    importc: "gtk_expander_get_resize_toplevel", libgtk.}

template gtk_fixed*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, fixed_get_type(), FixedObj))

template gtk_fixed_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, fixed_get_type(), FixedClassObj))

template gtk_is_fixed*(obj: expr): expr = 
  (g_type_check_instance_type(obj, fixed_get_type()))

template gtk_is_fixed_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, fixed_get_type()))

template gtk_fixed_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, fixed_get_type(), FixedClassObj))

type 
  FixedPrivateObj = object 
  
type 
  Fixed* =  ptr FixedObj
  FixedPtr* = ptr FixedObj
  FixedObj*{.final.} = object of ContainerObj
    priv63: ptr FixedPrivateObj

type 
  FixedClass* =  ptr FixedClassObj
  FixedClassPtr* = ptr FixedClassObj
  FixedClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved611: proc () {.cdecl.}
    gtk_reserved612: proc () {.cdecl.}
    gtk_reserved613: proc () {.cdecl.}
    gtk_reserved614: proc () {.cdecl.}

type 
  FixedChild* =  ptr FixedChildObj
  FixedChildPtr* = ptr FixedChildObj
  FixedChildObj*{.final.} = object of Widget
    x*: gint
    y*: gint

proc fixed_get_type*(): GType {.importc: "gtk_fixed_get_type", libgtk.}
proc fixed_new*(): Fixed {.importc: "gtk_fixed_new", libgtk.}
proc put*(fixed: Fixed; widget: Widget; x: gint; 
                    y: gint) {.importc: "gtk_fixed_put", libgtk.}
proc move*(fixed: Fixed; widget: Widget; x: gint; 
                     y: gint) {.importc: "gtk_fixed_move", libgtk.}

template gtk_file_filter*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, file_filter_get_type(), FileFilterObj))

template gtk_is_file_filter*(obj: expr): expr = 
  (g_type_check_instance_type(obj, file_filter_get_type()))

type 
  FileFilter* =  ptr FileFilterObj
  FileFilterPtr* = ptr FileFilterObj
  FileFilterObj* = object 
  
type 
  FileFilterFlags* {.size: sizeof(cint), pure.} = enum 
    FILENAME = 1 shl 0, URI = 1 shl 1, 
    DISPLAY_NAME = 1 shl 2, 
    MIME_TYPE = 1 shl 3
type 
  FileFilterFunc* = proc (filter_info: FileFilterInfo; 
                             data: gpointer): gboolean {.cdecl.}
  FileFilterInfo* =  ptr FileFilterInfoObj
  FileFilterInfoPtr* = ptr FileFilterInfoObj
  FileFilterInfoObj* = object 
    contains*: FileFilterFlags
    filename*: cstring
    uri*: cstring
    display_name*: cstring
    mime_type*: cstring

proc file_filter_get_type*(): GType {.importc: "gtk_file_filter_get_type", 
    libgtk.}
proc file_filter_new*(): FileFilter {.
    importc: "gtk_file_filter_new", libgtk.}
proc set_name*(filter: FileFilter; name: cstring) {.
    importc: "gtk_file_filter_set_name", libgtk.}
proc `name=`*(filter: FileFilter; name: cstring) {.
    importc: "gtk_file_filter_set_name", libgtk.}
proc get_name*(filter: FileFilter): cstring {.
    importc: "gtk_file_filter_get_name", libgtk.}
proc name*(filter: FileFilter): cstring {.
    importc: "gtk_file_filter_get_name", libgtk.}
proc add_mime_type*(filter: FileFilter; 
                                    mime_type: cstring) {.
    importc: "gtk_file_filter_add_mime_type", libgtk.}
proc add_pattern*(filter: FileFilter; 
                                  pattern: cstring) {.
    importc: "gtk_file_filter_add_pattern", libgtk.}
proc add_pixbuf_formats*(filter: FileFilter) {.
    importc: "gtk_file_filter_add_pixbuf_formats", libgtk.}
proc add_custom*(filter: FileFilter; 
                                 needed: FileFilterFlags; 
                                 `func`: FileFilterFunc; data: gpointer; 
                                 notify: GDestroyNotify) {.
    importc: "gtk_file_filter_add_custom", libgtk.}
proc get_needed*(filter: FileFilter): FileFilterFlags {.
    importc: "gtk_file_filter_get_needed", libgtk.}
proc needed*(filter: FileFilter): FileFilterFlags {.
    importc: "gtk_file_filter_get_needed", libgtk.}
proc filter*(filter: FileFilter; 
                             filter_info: FileFilterInfo): gboolean {.
    importc: "gtk_file_filter_filter", libgtk.}

template gtk_file_chooser*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, file_chooser_get_type(), FileChooserObj))

template gtk_is_file_chooser*(obj: expr): expr = 
  (g_type_check_instance_type(obj, file_chooser_get_type()))

type 
  FileChooser* =  ptr FileChooserObj
  FileChooserPtr* = ptr FileChooserObj
  FileChooserObj* = object 
  
type 
  FileChooserAction* {.size: sizeof(cint), pure.} = enum 
    OPEN, SAVE, 
    SELECT_FOLDER, 
    CREATE_FOLDER
type 
  FileChooserConfirmation* {.size: sizeof(cint), pure.} = enum 
    CONFIRM, 
    ACCEPT_FILENAME, 
    SELECT_AGAIN
proc file_chooser_get_type*(): GType {.
    importc: "gtk_file_chooser_get_type", libgtk.}
type 
  FileChooserError* {.size: sizeof(cint), pure.} = enum 
    NONEXISTENT, BAD_FILENAME, 
    ALREADY_EXISTS, 
    INCOMPLETE_HOSTNAME
proc file_chooser_error_quark*(): GQuark {.
    importc: "gtk_file_chooser_error_quark", libgtk.}
proc set_action*(chooser: FileChooser; 
                                  action: FileChooserAction) {.
    importc: "gtk_file_chooser_set_action", libgtk.}
proc `action=`*(chooser: FileChooser; 
                                  action: FileChooserAction) {.
    importc: "gtk_file_chooser_set_action", libgtk.}
proc get_action*(chooser: FileChooser): FileChooserAction {.
    importc: "gtk_file_chooser_get_action", libgtk.}
proc action*(chooser: FileChooser): FileChooserAction {.
    importc: "gtk_file_chooser_get_action", libgtk.}
proc set_local_only*(chooser: FileChooser; 
                                      local_only: gboolean) {.
    importc: "gtk_file_chooser_set_local_only", libgtk.}
proc `local_only=`*(chooser: FileChooser; 
                                      local_only: gboolean) {.
    importc: "gtk_file_chooser_set_local_only", libgtk.}
proc get_local_only*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_local_only", libgtk.}
proc local_only*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_local_only", libgtk.}
proc set_select_multiple*(chooser: FileChooser; 
    select_multiple: gboolean) {.importc: "gtk_file_chooser_set_select_multiple", 
                                 libgtk.}
proc `select_multiple=`*(chooser: FileChooser; 
    select_multiple: gboolean) {.importc: "gtk_file_chooser_set_select_multiple", 
                                 libgtk.}
proc get_select_multiple*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_select_multiple", libgtk.}
proc select_multiple*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_select_multiple", libgtk.}
proc set_show_hidden*(chooser: FileChooser; 
    show_hidden: gboolean) {.importc: "gtk_file_chooser_set_show_hidden", 
                             libgtk.}
proc `show_hidden=`*(chooser: FileChooser; 
    show_hidden: gboolean) {.importc: "gtk_file_chooser_set_show_hidden", 
                             libgtk.}
proc get_show_hidden*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_show_hidden", libgtk.}
proc show_hidden*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_show_hidden", libgtk.}
proc set_do_overwrite_confirmation*(
    chooser: FileChooser; do_overwrite_confirmation: gboolean) {.
    importc: "gtk_file_chooser_set_do_overwrite_confirmation", libgtk.}
proc `do_overwrite_confirmation=`*(
    chooser: FileChooser; do_overwrite_confirmation: gboolean) {.
    importc: "gtk_file_chooser_set_do_overwrite_confirmation", libgtk.}
proc get_do_overwrite_confirmation*(
    chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_do_overwrite_confirmation", libgtk.}
proc do_overwrite_confirmation*(
    chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_do_overwrite_confirmation", libgtk.}
proc set_create_folders*(chooser: FileChooser; 
    create_folders: gboolean) {.importc: "gtk_file_chooser_set_create_folders", 
                                libgtk.}
proc `create_folders=`*(chooser: FileChooser; 
    create_folders: gboolean) {.importc: "gtk_file_chooser_set_create_folders", 
                                libgtk.}
proc get_create_folders*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_create_folders", libgtk.}
proc create_folders*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_create_folders", libgtk.}
proc set_current_name*(chooser: FileChooser; 
    name: cstring) {.importc: "gtk_file_chooser_set_current_name", 
                       libgtk.}
proc `current_name=`*(chooser: FileChooser; 
    name: cstring) {.importc: "gtk_file_chooser_set_current_name", 
                       libgtk.}
proc get_current_name*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_name", libgtk.}
proc current_name*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_name", libgtk.}
proc get_filename*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_filename", libgtk.}
proc filename*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_filename", libgtk.}
proc set_filename*(chooser: FileChooser; 
                                    filename: cstring): gboolean {.
    importc: "gtk_file_chooser_set_filename", libgtk.}
proc select_filename*(chooser: FileChooser; 
    filename: cstring): gboolean {.importc: "gtk_file_chooser_select_filename", 
                                   libgtk.}
proc unselect_filename*(chooser: FileChooser; 
    filename: cstring) {.importc: "gtk_file_chooser_unselect_filename", 
                         libgtk.}
proc select_all*(chooser: FileChooser) {.
    importc: "gtk_file_chooser_select_all", libgtk.}
proc unselect_all*(chooser: FileChooser) {.
    importc: "gtk_file_chooser_unselect_all", libgtk.}
proc get_filenames*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_filenames", libgtk.}
proc filenames*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_filenames", libgtk.}
proc set_current_folder*(chooser: FileChooser; 
    filename: cstring): gboolean {.importc: "gtk_file_chooser_set_current_folder", 
                                     libgtk.}
proc get_current_folder*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_folder", libgtk.}
proc current_folder*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_folder", libgtk.}
proc get_uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_uri", libgtk.}
proc uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_uri", libgtk.}
proc set_uri*(chooser: FileChooser; uri: cstring): gboolean {.
    importc: "gtk_file_chooser_set_uri", libgtk.}
proc select_uri*(chooser: FileChooser; uri: cstring): gboolean {.
    importc: "gtk_file_chooser_select_uri", libgtk.}
proc unselect_uri*(chooser: FileChooser; uri: cstring) {.
    importc: "gtk_file_chooser_unselect_uri", libgtk.}
proc get_uris*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_uris", libgtk.}
proc uris*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_uris", libgtk.}
proc set_current_folder_uri*(chooser: FileChooser; 
    uri: cstring): gboolean {.importc: "gtk_file_chooser_set_current_folder_uri", 
                                libgtk.}
proc get_current_folder_uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_folder_uri", libgtk.}
proc current_folder_uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_current_folder_uri", libgtk.}
proc get_file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_file", libgtk.}
proc file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_file", libgtk.}
proc set_file*(chooser: FileChooser; file: gio.GFile; 
                                error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_set_file", libgtk.}
proc select_file*(chooser: FileChooser; 
                                   file: gio.GFile; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_select_file", libgtk.}
proc unselect_file*(chooser: FileChooser; 
                                     file: gio.GFile) {.
    importc: "gtk_file_chooser_unselect_file", libgtk.}
proc get_files*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_files", libgtk.}
proc files*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_get_files", libgtk.}
proc set_current_folder_file*(chooser: FileChooser; 
    file: gio.GFile; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_set_current_folder_file", libgtk.}
proc get_current_folder_file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_current_folder_file", libgtk.}
proc current_folder_file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_current_folder_file", libgtk.}
proc set_preview_widget*(chooser: FileChooser; 
    preview_widget: Widget) {.importc: "gtk_file_chooser_set_preview_widget", 
                                     libgtk.}
proc `preview_widget=`*(chooser: FileChooser; 
    preview_widget: Widget) {.importc: "gtk_file_chooser_set_preview_widget", 
                                     libgtk.}
proc get_preview_widget*(chooser: FileChooser): Widget {.
    importc: "gtk_file_chooser_get_preview_widget", libgtk.}
proc preview_widget*(chooser: FileChooser): Widget {.
    importc: "gtk_file_chooser_get_preview_widget", libgtk.}
proc set_preview_widget_active*(chooser: FileChooser; 
    active: gboolean) {.importc: "gtk_file_chooser_set_preview_widget_active", 
                        libgtk.}
proc `preview_widget_active=`*(chooser: FileChooser; 
    active: gboolean) {.importc: "gtk_file_chooser_set_preview_widget_active", 
                        libgtk.}
proc get_preview_widget_active*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_preview_widget_active", libgtk.}
proc preview_widget_active*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_preview_widget_active", libgtk.}
proc set_use_preview_label*(chooser: FileChooser; 
    use_label: gboolean) {.importc: "gtk_file_chooser_set_use_preview_label", 
                           libgtk.}
proc `use_preview_label=`*(chooser: FileChooser; 
    use_label: gboolean) {.importc: "gtk_file_chooser_set_use_preview_label", 
                           libgtk.}
proc get_use_preview_label*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_use_preview_label", libgtk.}
proc use_preview_label*(chooser: FileChooser): gboolean {.
    importc: "gtk_file_chooser_get_use_preview_label", libgtk.}
proc get_preview_filename*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_preview_filename", libgtk.}
proc preview_filename*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_preview_filename", libgtk.}
proc get_preview_uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_preview_uri", libgtk.}
proc preview_uri*(chooser: FileChooser): cstring {.
    importc: "gtk_file_chooser_get_preview_uri", libgtk.}
proc get_preview_file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_preview_file", libgtk.}
proc preview_file*(chooser: FileChooser): gio.GFile {.
    importc: "gtk_file_chooser_get_preview_file", libgtk.}
proc set_extra_widget*(chooser: FileChooser; 
    extra_widget: Widget) {.importc: "gtk_file_chooser_set_extra_widget", 
                                   libgtk.}
proc `extra_widget=`*(chooser: FileChooser; 
    extra_widget: Widget) {.importc: "gtk_file_chooser_set_extra_widget", 
                                   libgtk.}
proc get_extra_widget*(chooser: FileChooser): Widget {.
    importc: "gtk_file_chooser_get_extra_widget", libgtk.}
proc extra_widget*(chooser: FileChooser): Widget {.
    importc: "gtk_file_chooser_get_extra_widget", libgtk.}
proc add_filter*(chooser: FileChooser; 
                                  filter: FileFilter) {.
    importc: "gtk_file_chooser_add_filter", libgtk.}
proc remove_filter*(chooser: FileChooser; 
                                     filter: FileFilter) {.
    importc: "gtk_file_chooser_remove_filter", libgtk.}
proc list_filters*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_list_filters", libgtk.}
proc set_filter*(chooser: FileChooser; 
                                  filter: FileFilter) {.
    importc: "gtk_file_chooser_set_filter", libgtk.}
proc `filter=`*(chooser: FileChooser; 
                                  filter: FileFilter) {.
    importc: "gtk_file_chooser_set_filter", libgtk.}
proc get_filter*(chooser: FileChooser): FileFilter {.
    importc: "gtk_file_chooser_get_filter", libgtk.}
proc filter*(chooser: FileChooser): FileFilter {.
    importc: "gtk_file_chooser_get_filter", libgtk.}
proc add_shortcut_folder*(chooser: FileChooser; 
    folder: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_add_shortcut_folder", libgtk.}
proc remove_shortcut_folder*(chooser: FileChooser; 
    folder: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_remove_shortcut_folder", libgtk.}
proc list_shortcut_folders*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_list_shortcut_folders", libgtk.}
proc add_shortcut_folder_uri*(chooser: FileChooser; 
    uri: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_add_shortcut_folder_uri", libgtk.}
proc remove_shortcut_folder_uri*(chooser: FileChooser; 
    uri: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_file_chooser_remove_shortcut_folder_uri", libgtk.}
proc list_shortcut_folder_uris*(chooser: FileChooser): glib.GSList {.
    importc: "gtk_file_chooser_list_shortcut_folder_uris", libgtk.}

template gtk_file_chooser_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, file_chooser_button_get_type(), 
                              FileChooserButtonObj))

template gtk_file_chooser_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, file_chooser_button_get_type(), 
                           FileChooserButtonClassObj))

template gtk_is_file_chooser_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, file_chooser_button_get_type()))

template gtk_is_file_chooser_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, file_chooser_button_get_type()))

template gtk_file_chooser_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, file_chooser_button_get_type(), 
                             FileChooserButtonClassObj))

type 
  FileChooserButtonPrivateObj = object 
  
type 
  FileChooserButton* =  ptr FileChooserButtonObj
  FileChooserButtonPtr* = ptr FileChooserButtonObj
  FileChooserButtonObj*{.final.} = object of BoxObj
    priv64: ptr FileChooserButtonPrivateObj

type 
  FileChooserButtonClass* =  ptr FileChooserButtonClassObj
  FileChooserButtonClassPtr* = ptr FileChooserButtonClassObj
  FileChooserButtonClassObj*{.final.} = object of BoxClassObj
    file_set*: proc (fc: FileChooserButton) {.cdecl.}
    gtk_reserved1: proc () {.cdecl.}
    gtk_reserved2: proc () {.cdecl.}
    gtk_reserved3: proc () {.cdecl.}
    gtk_reserved4: proc () {.cdecl.}

proc file_chooser_button_get_type*(): GType {.
    importc: "gtk_file_chooser_button_get_type", libgtk.}
proc file_chooser_button_new*(title: cstring; 
                                  action: FileChooserAction): FileChooserButton {.
    importc: "gtk_file_chooser_button_new", libgtk.}
proc file_chooser_button_new_with_dialog*(dialog: Widget): FileChooserButton {.
    importc: "gtk_file_chooser_button_new_with_dialog", libgtk.}
proc get_title*(button: FileChooserButton): cstring {.
    importc: "gtk_file_chooser_button_get_title", libgtk.}
proc title*(button: FileChooserButton): cstring {.
    importc: "gtk_file_chooser_button_get_title", libgtk.}
proc set_title*(button: FileChooserButton; 
    title: cstring) {.importc: "gtk_file_chooser_button_set_title", 
                        libgtk.}
proc `title=`*(button: FileChooserButton; 
    title: cstring) {.importc: "gtk_file_chooser_button_set_title", 
                        libgtk.}
proc get_width_chars*(button: FileChooserButton): gint {.
    importc: "gtk_file_chooser_button_get_width_chars", libgtk.}
proc width_chars*(button: FileChooserButton): gint {.
    importc: "gtk_file_chooser_button_get_width_chars", libgtk.}
proc set_width_chars*(
    button: FileChooserButton; n_chars: gint) {.
    importc: "gtk_file_chooser_button_set_width_chars", libgtk.}
proc `width_chars=`*(
    button: FileChooserButton; n_chars: gint) {.
    importc: "gtk_file_chooser_button_set_width_chars", libgtk.}
proc get_focus_on_click*(
    button: FileChooserButton): gboolean {.
    importc: "gtk_file_chooser_button_get_focus_on_click", libgtk.}
proc focus_on_click*(
    button: FileChooserButton): gboolean {.
    importc: "gtk_file_chooser_button_get_focus_on_click", libgtk.}
proc set_focus_on_click*(
    button: FileChooserButton; focus_on_click: gboolean) {.
    importc: "gtk_file_chooser_button_set_focus_on_click", libgtk.}
proc `focus_on_click=`*(
    button: FileChooserButton; focus_on_click: gboolean) {.
    importc: "gtk_file_chooser_button_set_focus_on_click", libgtk.}

template gtk_file_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, file_chooser_dialog_get_type(), 
                              FileChooserDialogObj))

template gtk_file_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, file_chooser_dialog_get_type(), 
                           FileChooserDialogClassObj))

template gtk_is_file_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, file_chooser_dialog_get_type()))

template gtk_is_file_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, file_chooser_dialog_get_type()))

template gtk_file_chooser_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, file_chooser_dialog_get_type(), 
                             FileChooserDialogClassObj))

type 
  FileChooserDialogPrivateObj = object 
  
type 
  FileChooserDialog* =  ptr FileChooserDialogObj
  FileChooserDialogPtr* = ptr FileChooserDialogObj
  FileChooserDialogObj*{.final.} = object of DialogObj
    priv65: ptr FileChooserDialogPrivateObj

type 
  FileChooserDialogClass* =  ptr FileChooserDialogClassObj
  FileChooserDialogClassPtr* = ptr FileChooserDialogClassObj
  FileChooserDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved621: proc () {.cdecl.}
    gtk_reserved622: proc () {.cdecl.}
    gtk_reserved623: proc () {.cdecl.}
    gtk_reserved624: proc () {.cdecl.}

proc file_chooser_dialog_get_type*(): GType {.
    importc: "gtk_file_chooser_dialog_get_type", libgtk.}
proc file_chooser_dialog_new*(title: cstring; parent: Window; 
                                  action: FileChooserAction; 
                                  first_button_text: cstring): FileChooserDialog {.
    varargs, importc: "gtk_file_chooser_dialog_new", libgtk.}

template gtk_file_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, file_chooser_widget_get_type(), 
                              FileChooserWidgetObj))

template gtk_file_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, file_chooser_widget_get_type(), 
                           FileChooserWidgetClassObj))

template gtk_is_file_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_type(obj, file_chooser_widget_get_type()))

template gtk_is_file_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, file_chooser_widget_get_type()))

template gtk_file_chooser_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, file_chooser_widget_get_type(), 
                             FileChooserWidgetClassObj))

type 
  FileChooserWidgetPrivateObj = object 
  
type 
  FileChooserWidget* =  ptr FileChooserWidgetObj
  FileChooserWidgetPtr* = ptr FileChooserWidgetObj
  FileChooserWidgetObj*{.final.} = object of BoxObj
    priv66: ptr FileChooserWidgetPrivateObj

type 
  FileChooserWidgetClass* =  ptr FileChooserWidgetClassObj
  FileChooserWidgetClassPtr* = ptr FileChooserWidgetClassObj
  FileChooserWidgetClassObj*{.final.} = object of BoxClassObj
    gtk_reserved631: proc () {.cdecl.}
    gtk_reserved632: proc () {.cdecl.}
    gtk_reserved633: proc () {.cdecl.}
    gtk_reserved634: proc () {.cdecl.}

proc file_chooser_widget_get_type*(): GType {.
    importc: "gtk_file_chooser_widget_get_type", libgtk.}
proc file_chooser_widget_new*(action: FileChooserAction): FileChooserWidget {.
    importc: "gtk_file_chooser_widget_new", libgtk.}

template gtk_flow_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, flow_box_get_type(), FlowBoxObj))

template gtk_flow_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, flow_box_get_type(), FlowBoxClassObj))

template gtk_is_flow_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, flow_box_get_type()))

template gtk_is_flow_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, flow_box_get_type()))

template gtk_flow_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, flow_box_get_type(), FlowBoxClassObj))

type 
  FlowBox* =  ptr FlowBoxObj
  FlowBoxPtr* = ptr FlowBoxObj
  FlowBoxObj*{.final.} = object of ContainerObj
type 
  FlowBoxChild* =  ptr FlowBoxChildObj
  FlowBoxChildPtr* = ptr FlowBoxChildObj
  FlowBoxChildObj*{.final.} = object of BinObj

type 
  FlowBoxClass* =  ptr FlowBoxClassObj
  FlowBoxClassPtr* = ptr FlowBoxClassObj
  FlowBoxClassObj*{.final.} = object of ContainerClassObj
    child_activated*: proc (box: FlowBox; child: FlowBoxChild) {.cdecl.}
    selected_children_changed*: proc (box: FlowBox) {.cdecl.}
    activate_cursor_child*: proc (box: FlowBox) {.cdecl.}
    toggle_cursor_child*: proc (box: FlowBox) {.cdecl.}
    move_cursor*: proc (box: FlowBox; step: MovementStep; 
                        count: gint) {.cdecl.}
    select_all*: proc (box: FlowBox) {.cdecl.}
    unselect_all*: proc (box: FlowBox) {.cdecl.}
    gtk_reserved641: proc () {.cdecl.}
    gtk_reserved642: proc () {.cdecl.}
    gtk_reserved643: proc () {.cdecl.}
    gtk_reserved644: proc () {.cdecl.}
    gtk_reserved645: proc () {.cdecl.}
    gtk_reserved646: proc () {.cdecl.}

template gtk_flow_box_child*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, flow_box_child_get_type(), FlowBoxChildObj))

template gtk_flow_box_child_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, flow_box_child_get_type(), 
                           FlowBoxChildClassObj))

template gtk_is_flow_box_child*(obj: expr): expr = 
  (g_type_check_instance_type(obj, flow_box_child_get_type()))

template gtk_is_flow_box_child_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, flow_box_child_get_type()))

template gtk_flow_box_child_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, EG_TYPE_FLOW_BOX_CHILD, 
                             FlowBoxChildClassObj))

type 
  FlowBoxChildClass* =  ptr FlowBoxChildClassObj
  FlowBoxChildClassPtr* = ptr FlowBoxChildClassObj
  FlowBoxChildClassObj*{.final.} = object of BinClassObj
    activate*: proc (child: FlowBoxChild) {.cdecl.}
    gtk_reserved651: proc () {.cdecl.}
    gtk_reserved652: proc () {.cdecl.}

proc flow_box_child_get_type*(): GType {.
    importc: "gtk_flow_box_child_get_type", libgtk.}
proc flow_box_child_new*(): FlowBoxChild {.
    importc: "gtk_flow_box_child_new", libgtk.}
proc get_index*(child: FlowBoxChild): gint {.
    importc: "gtk_flow_box_child_get_index", libgtk.}
proc index*(child: FlowBoxChild): gint {.
    importc: "gtk_flow_box_child_get_index", libgtk.}
proc is_selected*(child: FlowBoxChild): gboolean {.
    importc: "gtk_flow_box_child_is_selected", libgtk.}
proc changed*(child: FlowBoxChild) {.
    importc: "gtk_flow_box_child_changed", libgtk.}
proc flow_box_get_type*(): GType {.importc: "gtk_flow_box_get_type", 
    libgtk.}
proc flow_box_new*(): FlowBox {.importc: "gtk_flow_box_new", 
    libgtk.}
proc set_homogeneous*(box: FlowBox; homogeneous: gboolean) {.
    importc: "gtk_flow_box_set_homogeneous", libgtk.}
proc `homogeneous=`*(box: FlowBox; homogeneous: gboolean) {.
    importc: "gtk_flow_box_set_homogeneous", libgtk.}
proc get_homogeneous*(box: FlowBox): gboolean {.
    importc: "gtk_flow_box_get_homogeneous", libgtk.}
proc homogeneous*(box: FlowBox): gboolean {.
    importc: "gtk_flow_box_get_homogeneous", libgtk.}
proc set_row_spacing*(box: FlowBox; spacing: guint) {.
    importc: "gtk_flow_box_set_row_spacing", libgtk.}
proc `row_spacing=`*(box: FlowBox; spacing: guint) {.
    importc: "gtk_flow_box_set_row_spacing", libgtk.}
proc get_row_spacing*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_row_spacing", libgtk.}
proc row_spacing*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_row_spacing", libgtk.}
proc set_column_spacing*(box: FlowBox; spacing: guint) {.
    importc: "gtk_flow_box_set_column_spacing", libgtk.}
proc `column_spacing=`*(box: FlowBox; spacing: guint) {.
    importc: "gtk_flow_box_set_column_spacing", libgtk.}
proc get_column_spacing*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_column_spacing", libgtk.}
proc column_spacing*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_column_spacing", libgtk.}
proc set_min_children_per_line*(box: FlowBox; 
    n_children: guint) {.importc: "gtk_flow_box_set_min_children_per_line", 
                         libgtk.}
proc `min_children_per_line=`*(box: FlowBox; 
    n_children: guint) {.importc: "gtk_flow_box_set_min_children_per_line", 
                         libgtk.}
proc get_min_children_per_line*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_min_children_per_line", libgtk.}
proc min_children_per_line*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_min_children_per_line", libgtk.}
proc set_max_children_per_line*(box: FlowBox; 
    n_children: guint) {.importc: "gtk_flow_box_set_max_children_per_line", 
                         libgtk.}
proc `max_children_per_line=`*(box: FlowBox; 
    n_children: guint) {.importc: "gtk_flow_box_set_max_children_per_line", 
                         libgtk.}
proc get_max_children_per_line*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_max_children_per_line", libgtk.}
proc max_children_per_line*(box: FlowBox): guint {.
    importc: "gtk_flow_box_get_max_children_per_line", libgtk.}
proc set_activate_on_single_click*(box: FlowBox; 
    single: gboolean) {.importc: "gtk_flow_box_set_activate_on_single_click", 
                        libgtk.}
proc `activate_on_single_click=`*(box: FlowBox; 
    single: gboolean) {.importc: "gtk_flow_box_set_activate_on_single_click", 
                        libgtk.}
proc get_activate_on_single_click*(box: FlowBox): gboolean {.
    importc: "gtk_flow_box_get_activate_on_single_click", libgtk.}
proc activate_on_single_click*(box: FlowBox): gboolean {.
    importc: "gtk_flow_box_get_activate_on_single_click", libgtk.}
proc insert*(box: FlowBox; widget: Widget; 
                          position: gint) {.importc: "gtk_flow_box_insert", 
    libgtk.}
proc get_child_at_index*(box: FlowBox; idx: gint): FlowBoxChild {.
    importc: "gtk_flow_box_get_child_at_index", libgtk.}
proc child_at_index*(box: FlowBox; idx: gint): FlowBoxChild {.
    importc: "gtk_flow_box_get_child_at_index", libgtk.}
type 
  FlowBoxForeachFunc* = proc (box: FlowBox; 
                                 child: FlowBoxChild; 
                                 user_data: gpointer) {.cdecl.}
proc selected_foreach*(box: FlowBox; 
                                    `func`: FlowBoxForeachFunc; 
                                    data: gpointer) {.
    importc: "gtk_flow_box_selected_foreach", libgtk.}
proc get_selected_children*(box: FlowBox): glib.GList {.
    importc: "gtk_flow_box_get_selected_children", libgtk.}
proc selected_children*(box: FlowBox): glib.GList {.
    importc: "gtk_flow_box_get_selected_children", libgtk.}
proc select_child*(box: FlowBox; 
                                child: FlowBoxChild) {.
    importc: "gtk_flow_box_select_child", libgtk.}
proc unselect_child*(box: FlowBox; 
                                  child: FlowBoxChild) {.
    importc: "gtk_flow_box_unselect_child", libgtk.}
proc select_all*(box: FlowBox) {.
    importc: "gtk_flow_box_select_all", libgtk.}
proc unselect_all*(box: FlowBox) {.
    importc: "gtk_flow_box_unselect_all", libgtk.}
proc set_selection_mode*(box: FlowBox; 
                                      mode: SelectionMode) {.
    importc: "gtk_flow_box_set_selection_mode", libgtk.}
proc `selection_mode=`*(box: FlowBox; 
                                      mode: SelectionMode) {.
    importc: "gtk_flow_box_set_selection_mode", libgtk.}
proc get_selection_mode*(box: FlowBox): SelectionMode {.
    importc: "gtk_flow_box_get_selection_mode", libgtk.}
proc selection_mode*(box: FlowBox): SelectionMode {.
    importc: "gtk_flow_box_get_selection_mode", libgtk.}
proc set_hadjustment*(box: FlowBox; 
                                   adjustment: Adjustment) {.
    importc: "gtk_flow_box_set_hadjustment", libgtk.}
proc `hadjustment=`*(box: FlowBox; 
                                   adjustment: Adjustment) {.
    importc: "gtk_flow_box_set_hadjustment", libgtk.}
proc set_vadjustment*(box: FlowBox; 
                                   adjustment: Adjustment) {.
    importc: "gtk_flow_box_set_vadjustment", libgtk.}
proc `vadjustment=`*(box: FlowBox; 
                                   adjustment: Adjustment) {.
    importc: "gtk_flow_box_set_vadjustment", libgtk.}
type 
  FlowBoxFilterFunc* = proc (child: FlowBoxChild; 
                                user_data: gpointer): gboolean {.cdecl.}
proc set_filter_func*(box: FlowBox; 
                                   filter_func: FlowBoxFilterFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_flow_box_set_filter_func", libgtk.}
proc `filter_func=`*(box: FlowBox; 
                                   filter_func: FlowBoxFilterFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_flow_box_set_filter_func", libgtk.}
proc invalidate_filter*(box: FlowBox) {.
    importc: "gtk_flow_box_invalidate_filter", libgtk.}
type 
  FlowBoxSortFunc* = proc (child1: FlowBoxChild; 
                              child2: FlowBoxChild; user_data: gpointer): gint {.cdecl.}
proc set_sort_func*(box: FlowBox; 
                                 sort_func: FlowBoxSortFunc; 
                                 user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_flow_box_set_sort_func", libgtk.}
proc `sort_func=`*(box: FlowBox; 
                                 sort_func: FlowBoxSortFunc; 
                                 user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_flow_box_set_sort_func", libgtk.}
proc invalidate_sort*(box: FlowBox) {.
    importc: "gtk_flow_box_invalidate_sort", libgtk.}

template gtk_font_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_button_get_type(), FontButtonObj))

template gtk_font_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, font_button_get_type(), FontButtonClassObj))

template gtk_is_font_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_button_get_type()))

template gtk_is_font_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, font_button_get_type()))

template gtk_font_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, font_button_get_type(), FontButtonClassObj))

type 
  FontButtonPrivateObj = object 
  
type 
  FontButton* =  ptr FontButtonObj
  FontButtonPtr* = ptr FontButtonObj
  FontButtonObj*{.final.} = object of ButtonObj
    priv67: ptr FontButtonPrivateObj

type 
  FontButtonClass* =  ptr FontButtonClassObj
  FontButtonClassPtr* = ptr FontButtonClassObj
  FontButtonClassObj*{.final.} = object of ButtonClassObj
    font_set*: proc (gfp: FontButton) {.cdecl.}
    gtk_reserved661: proc () {.cdecl.}
    gtk_reserved662: proc () {.cdecl.}
    gtk_reserved663: proc () {.cdecl.}
    gtk_reserved664: proc () {.cdecl.}

proc font_button_get_type*(): GType {.importc: "gtk_font_button_get_type", 
    libgtk.}
proc font_button_new*(): FontButton {.importc: "gtk_font_button_new", 
    libgtk.}
proc font_button_new_with_font*(fontname: cstring): FontButton {.
    importc: "gtk_font_button_new_with_font", libgtk.}
proc get_title*(font_button: FontButton): cstring {.
    importc: "gtk_font_button_get_title", libgtk.}
proc title*(font_button: FontButton): cstring {.
    importc: "gtk_font_button_get_title", libgtk.}
proc set_title*(font_button: FontButton; 
                                title: cstring) {.
    importc: "gtk_font_button_set_title", libgtk.}
proc `title=`*(font_button: FontButton; 
                                title: cstring) {.
    importc: "gtk_font_button_set_title", libgtk.}
proc get_use_font*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_use_font", libgtk.}
proc use_font*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_use_font", libgtk.}
proc set_use_font*(font_button: FontButton; 
                                   use_font: gboolean) {.
    importc: "gtk_font_button_set_use_font", libgtk.}
proc `use_font=`*(font_button: FontButton; 
                                   use_font: gboolean) {.
    importc: "gtk_font_button_set_use_font", libgtk.}
proc get_use_size*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_use_size", libgtk.}
proc use_size*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_use_size", libgtk.}
proc set_use_size*(font_button: FontButton; 
                                   use_size: gboolean) {.
    importc: "gtk_font_button_set_use_size", libgtk.}
proc `use_size=`*(font_button: FontButton; 
                                   use_size: gboolean) {.
    importc: "gtk_font_button_set_use_size", libgtk.}
proc get_font_name*(font_button: FontButton): cstring {.
    importc: "gtk_font_button_get_font_name", libgtk.}
proc font_name*(font_button: FontButton): cstring {.
    importc: "gtk_font_button_get_font_name", libgtk.}
proc set_font_name*(font_button: FontButton; 
                                    fontname: cstring): gboolean {.
    importc: "gtk_font_button_set_font_name", libgtk.}
proc get_show_style*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_show_style", libgtk.}
proc show_style*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_show_style", libgtk.}
proc set_show_style*(font_button: FontButton; 
                                     show_style: gboolean) {.
    importc: "gtk_font_button_set_show_style", libgtk.}
proc `show_style=`*(font_button: FontButton; 
                                     show_style: gboolean) {.
    importc: "gtk_font_button_set_show_style", libgtk.}
proc get_show_size*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_show_size", libgtk.}
proc show_size*(font_button: FontButton): gboolean {.
    importc: "gtk_font_button_get_show_size", libgtk.}
proc set_show_size*(font_button: FontButton; 
                                    show_size: gboolean) {.
    importc: "gtk_font_button_set_show_size", libgtk.}
proc `show_size=`*(font_button: FontButton; 
                                    show_size: gboolean) {.
    importc: "gtk_font_button_set_show_size", libgtk.}

type 
  FontFilterFunc* = proc (family: pango.FontFamily; 
                             face: pango.FontFace; data: gpointer): gboolean {.cdecl.}
template gtk_font_chooser*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_chooser_get_type(), FontChooserObj))

template gtk_is_font_chooser*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_chooser_get_type()))

template gtk_font_chooser_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, font_chooser_get_type(), 
                                 FontChooserIfaceObj))

type 
  FontChooser* =  ptr FontChooserObj
  FontChooserPtr* = ptr FontChooserObj
  FontChooserObj* = object 
  
type 
  FontChooserIface* =  ptr FontChooserIfaceObj
  FontChooserIfacePtr* = ptr FontChooserIfaceObj
  FontChooserIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_font_family*: proc (fontchooser: FontChooser): pango.FontFamily {.cdecl.}
    get_font_face*: proc (fontchooser: FontChooser): pango.FontFace {.cdecl.}
    get_font_size*: proc (fontchooser: FontChooser): gint {.cdecl.}
    set_filter_func*: proc (fontchooser: FontChooser; 
                            filter: FontFilterFunc; user_data: gpointer; 
                            destroy: GDestroyNotify) {.cdecl.}
    font_activated*: proc (chooser: FontChooser; fontname: cstring) {.cdecl.}
    padding*: array[12, gpointer]

proc font_chooser_get_type*(): GType {.
    importc: "gtk_font_chooser_get_type", libgtk.}
proc get_font_family*(fontchooser: FontChooser): pango.FontFamily {.
    importc: "gtk_font_chooser_get_font_family", libgtk.}
proc font_family*(fontchooser: FontChooser): pango.FontFamily {.
    importc: "gtk_font_chooser_get_font_family", libgtk.}
proc get_font_face*(fontchooser: FontChooser): pango.FontFace {.
    importc: "gtk_font_chooser_get_font_face", libgtk.}
proc font_face*(fontchooser: FontChooser): pango.FontFace {.
    importc: "gtk_font_chooser_get_font_face", libgtk.}
proc get_font_size*(fontchooser: FontChooser): gint {.
    importc: "gtk_font_chooser_get_font_size", libgtk.}
proc font_size*(fontchooser: FontChooser): gint {.
    importc: "gtk_font_chooser_get_font_size", libgtk.}
proc get_font_desc*(fontchooser: FontChooser): pango.FontDescription {.
    importc: "gtk_font_chooser_get_font_desc", libgtk.}
proc font_desc*(fontchooser: FontChooser): pango.FontDescription {.
    importc: "gtk_font_chooser_get_font_desc", libgtk.}
proc set_font_desc*(fontchooser: FontChooser; 
                                     font_desc: pango.FontDescription) {.
    importc: "gtk_font_chooser_set_font_desc", libgtk.}
proc `font_desc=`*(fontchooser: FontChooser; 
                                     font_desc: pango.FontDescription) {.
    importc: "gtk_font_chooser_set_font_desc", libgtk.}
proc get_font*(fontchooser: FontChooser): cstring {.
    importc: "gtk_font_chooser_get_font", libgtk.}
proc font*(fontchooser: FontChooser): cstring {.
    importc: "gtk_font_chooser_get_font", libgtk.}
proc set_font*(fontchooser: FontChooser; 
                                fontname: cstring) {.
    importc: "gtk_font_chooser_set_font", libgtk.}
proc `font=`*(fontchooser: FontChooser; 
                                fontname: cstring) {.
    importc: "gtk_font_chooser_set_font", libgtk.}
proc get_preview_text*(fontchooser: FontChooser): cstring {.
    importc: "gtk_font_chooser_get_preview_text", libgtk.}
proc preview_text*(fontchooser: FontChooser): cstring {.
    importc: "gtk_font_chooser_get_preview_text", libgtk.}
proc set_preview_text*(fontchooser: FontChooser; 
    text: cstring) {.importc: "gtk_font_chooser_set_preview_text", 
                       libgtk.}
proc `preview_text=`*(fontchooser: FontChooser; 
    text: cstring) {.importc: "gtk_font_chooser_set_preview_text", 
                       libgtk.}
proc get_show_preview_entry*(fontchooser: FontChooser): gboolean {.
    importc: "gtk_font_chooser_get_show_preview_entry", libgtk.}
proc show_preview_entry*(fontchooser: FontChooser): gboolean {.
    importc: "gtk_font_chooser_get_show_preview_entry", libgtk.}
proc set_show_preview_entry*(fontchooser: FontChooser; 
    show_preview_entry: gboolean) {.importc: "gtk_font_chooser_set_show_preview_entry", 
                                    libgtk.}
proc `show_preview_entry=`*(fontchooser: FontChooser; 
    show_preview_entry: gboolean) {.importc: "gtk_font_chooser_set_show_preview_entry", 
                                    libgtk.}
proc set_filter_func*(fontchooser: FontChooser; 
    filter: FontFilterFunc; user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_font_chooser_set_filter_func", libgtk.}
proc `filter_func=`*(fontchooser: FontChooser; 
    filter: FontFilterFunc; user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_font_chooser_set_filter_func", libgtk.}

template gtk_font_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_chooser_dialog_get_type(), 
                              FontChooserDialogObj))

template gtk_font_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, font_chooser_dialog_get_type(), 
                           FontChooserDialogClassObj))

template gtk_is_font_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_chooser_dialog_get_type()))

template gtk_is_font_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, font_chooser_dialog_get_type()))

template gtk_font_chooser_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, font_chooser_dialog_get_type(), 
                             FontChooserDialogClassObj))

type 
  FontChooserDialogPrivateObj = object 
  
type 
  FontChooserDialog* =  ptr FontChooserDialogObj
  FontChooserDialogPtr* = ptr FontChooserDialogObj
  FontChooserDialogObj*{.final.} = object of DialogObj
    priv68: ptr FontChooserDialogPrivateObj

type 
  FontChooserDialogClass* =  ptr FontChooserDialogClassObj
  FontChooserDialogClassPtr* = ptr FontChooserDialogClassObj
  FontChooserDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved671: proc () {.cdecl.}
    gtk_reserved672: proc () {.cdecl.}
    gtk_reserved673: proc () {.cdecl.}
    gtk_reserved674: proc () {.cdecl.}

proc font_chooser_dialog_get_type*(): GType {.
    importc: "gtk_font_chooser_dialog_get_type", libgtk.}
proc font_chooser_dialog_new*(title: cstring; parent: Window): FontChooserDialog {.
    importc: "gtk_font_chooser_dialog_new", libgtk.}

template gtk_font_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_chooser_widget_get_type(), 
                              FontChooserWidgetObj))

template gtk_font_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, font_chooser_widget_get_type(), 
                           FontChooserWidgetClassObj))

template gtk_is_font_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_chooser_widget_get_type()))

template gtk_is_font_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, font_chooser_widget_get_type()))

template gtk_font_chooser_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, font_chooser_widget_get_type(), 
                             FontChooserWidgetClassObj))

type 
  FontChooserWidgetPrivateObj = object 
  
type 
  FontChooserWidget* =  ptr FontChooserWidgetObj
  FontChooserWidgetPtr* = ptr FontChooserWidgetObj
  FontChooserWidgetObj*{.final.} = object of BoxObj
    priv69: ptr FontChooserWidgetPrivateObj

type 
  FontChooserWidgetClass* =  ptr FontChooserWidgetClassObj
  FontChooserWidgetClassPtr* = ptr FontChooserWidgetClassObj
  FontChooserWidgetClassObj*{.final.} = object of BoxClassObj
    gtk_reserved681: proc () {.cdecl.}
    gtk_reserved682: proc () {.cdecl.}
    gtk_reserved683: proc () {.cdecl.}
    gtk_reserved684: proc () {.cdecl.}
    gtk_reserved685: proc () {.cdecl.}
    gtk_reserved686: proc () {.cdecl.}
    gtk_reserved687: proc () {.cdecl.}
    gtk_reserved688: proc () {.cdecl.}

proc font_chooser_widget_get_type*(): GType {.
    importc: "gtk_font_chooser_widget_get_type", libgtk.}
proc font_chooser_widget_new*(): FontChooserWidget {.
    importc: "gtk_font_chooser_widget_new", libgtk.}

template gtk_gesture*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_get_type(), GestureObj))

template gtk_gesture_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_get_type(), GestureClass))

template gtk_is_gesture*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_get_type()))

template gtk_is_gesture_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_get_type()))

template gtk_gesture_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_get_type(), GestureClass))

type 
  Gesture* =  ptr GestureObj
  GesturePtr* = ptr GestureObj
  GestureObj* = object 
  
proc gesture_get_type*(): GType {.importc: "gtk_gesture_get_type", 
                                      libgtk.}
proc get_device*(gesture: Gesture): gdk3.Device {.
    importc: "gtk_gesture_get_device", libgtk.}
proc device*(gesture: Gesture): gdk3.Device {.
    importc: "gtk_gesture_get_device", libgtk.}
proc set_state*(gesture: Gesture; 
                            state: EventSequenceState): gboolean {.
    importc: "gtk_gesture_set_state", libgtk.}
proc get_sequence_state*(gesture: Gesture; 
                                     sequence: gdk3.EventSequence): EventSequenceState {.
    importc: "gtk_gesture_get_sequence_state", libgtk.}
proc sequence_state*(gesture: Gesture; 
                                     sequence: gdk3.EventSequence): EventSequenceState {.
    importc: "gtk_gesture_get_sequence_state", libgtk.}
proc set_sequence_state*(gesture: Gesture; 
                                     sequence: gdk3.EventSequence; 
                                     state: EventSequenceState): gboolean {.
    importc: "gtk_gesture_set_sequence_state", libgtk.}
proc get_sequences*(gesture: Gesture): glib.GList {.
    importc: "gtk_gesture_get_sequences", libgtk.}
proc sequences*(gesture: Gesture): glib.GList {.
    importc: "gtk_gesture_get_sequences", libgtk.}
proc get_last_updated_sequence*(gesture: Gesture): gdk3.EventSequence {.
    importc: "gtk_gesture_get_last_updated_sequence", libgtk.}
proc last_updated_sequence*(gesture: Gesture): gdk3.EventSequence {.
    importc: "gtk_gesture_get_last_updated_sequence", libgtk.}
proc handles_sequence*(gesture: Gesture; 
                                   sequence: gdk3.EventSequence): gboolean {.
    importc: "gtk_gesture_handles_sequence", libgtk.}
proc get_last_event*(gesture: Gesture; 
                                 sequence: gdk3.EventSequence): gdk3.Event {.
    importc: "gtk_gesture_get_last_event", libgtk.}
proc last_event*(gesture: Gesture; 
                                 sequence: gdk3.EventSequence): gdk3.Event {.
    importc: "gtk_gesture_get_last_event", libgtk.}
proc get_point*(gesture: Gesture; 
                            sequence: gdk3.EventSequence; x: var gdouble; 
                            y: var gdouble): gboolean {.
    importc: "gtk_gesture_get_point", libgtk.}
proc point*(gesture: Gesture; 
                            sequence: gdk3.EventSequence; x: var gdouble; 
                            y: var gdouble): gboolean {.
    importc: "gtk_gesture_get_point", libgtk.}
proc get_bounding_box*(gesture: Gesture; 
                                   rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_gesture_get_bounding_box", libgtk.}
proc bounding_box*(gesture: Gesture; 
                                   rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_gesture_get_bounding_box", libgtk.}
proc get_bounding_box_center*(gesture: Gesture; 
    x: var gdouble; y: var gdouble): gboolean {.
    importc: "gtk_gesture_get_bounding_box_center", libgtk.}
proc bounding_box_center*(gesture: Gesture; 
    x: var gdouble; y: var gdouble): gboolean {.
    importc: "gtk_gesture_get_bounding_box_center", libgtk.}
proc is_active*(gesture: Gesture): gboolean {.
    importc: "gtk_gesture_is_active", libgtk.}
proc is_recognized*(gesture: Gesture): gboolean {.
    importc: "gtk_gesture_is_recognized", libgtk.}
proc get_window*(gesture: Gesture): gdk3.Window {.
    importc: "gtk_gesture_get_window", libgtk.}
proc window*(gesture: Gesture): gdk3.Window {.
    importc: "gtk_gesture_get_window", libgtk.}
proc set_window*(gesture: Gesture; window: gdk3.Window) {.
    importc: "gtk_gesture_set_window", libgtk.}
proc `window=`*(gesture: Gesture; window: gdk3.Window) {.
    importc: "gtk_gesture_set_window", libgtk.}
proc group*(group_gesture: Gesture; gesture: Gesture) {.
    importc: "gtk_gesture_group", libgtk.}
proc ungroup*(gesture: Gesture) {.
    importc: "gtk_gesture_ungroup", libgtk.}
proc get_group*(gesture: Gesture): glib.GList {.
    importc: "gtk_gesture_get_group", libgtk.}
proc group*(gesture: Gesture): glib.GList {.
    importc: "gtk_gesture_get_group", libgtk.}
proc is_grouped_with*(gesture: Gesture; 
                                  other: Gesture): gboolean {.
    importc: "gtk_gesture_is_grouped_with", libgtk.}

template gtk_gesture_single*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_single_get_type(), GestureSingleObj))

template gtk_gesture_single_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_single_get_type(), GestureSingleClass))

template gtk_is_gesture_single*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_single_get_type()))

template gtk_is_gesture_single_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_single_get_type()))

template gtk_gesture_single_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_single_get_type(), 
                             GestureSingleClass))

type 
  GestureSingle* =  ptr GestureSingleObj
  GestureSinglePtr* = ptr GestureSingleObj
  GestureSingleObj* = object 
  
proc gesture_single_get_type*(): GType {.
    importc: "gtk_gesture_single_get_type", libgtk.}
proc get_touch_only*(gesture: GestureSingle): gboolean {.
    importc: "gtk_gesture_single_get_touch_only", libgtk.}
proc touch_only*(gesture: GestureSingle): gboolean {.
    importc: "gtk_gesture_single_get_touch_only", libgtk.}
proc set_touch_only*(gesture: GestureSingle; 
    touch_only: gboolean) {.importc: "gtk_gesture_single_set_touch_only", 
                            libgtk.}
proc `touch_only=`*(gesture: GestureSingle; 
    touch_only: gboolean) {.importc: "gtk_gesture_single_set_touch_only", 
                            libgtk.}
proc get_exclusive*(gesture: GestureSingle): gboolean {.
    importc: "gtk_gesture_single_get_exclusive", libgtk.}
proc exclusive*(gesture: GestureSingle): gboolean {.
    importc: "gtk_gesture_single_get_exclusive", libgtk.}
proc set_exclusive*(gesture: GestureSingle; 
    exclusive: gboolean) {.importc: "gtk_gesture_single_set_exclusive", 
                           libgtk.}
proc `exclusive=`*(gesture: GestureSingle; 
    exclusive: gboolean) {.importc: "gtk_gesture_single_set_exclusive", 
                           libgtk.}
proc get_button*(gesture: GestureSingle): guint {.
    importc: "gtk_gesture_single_get_button", libgtk.}
proc button*(gesture: GestureSingle): guint {.
    importc: "gtk_gesture_single_get_button", libgtk.}
proc set_button*(gesture: GestureSingle; 
                                    button: guint) {.
    importc: "gtk_gesture_single_set_button", libgtk.}
proc `button=`*(gesture: GestureSingle; 
                                    button: guint) {.
    importc: "gtk_gesture_single_set_button", libgtk.}
proc get_current_button*(gesture: GestureSingle): guint {.
    importc: "gtk_gesture_single_get_current_button", libgtk.}
proc current_button*(gesture: GestureSingle): guint {.
    importc: "gtk_gesture_single_get_current_button", libgtk.}
proc get_current_sequence*(gesture: GestureSingle): gdk3.EventSequence {.
    importc: "gtk_gesture_single_get_current_sequence", libgtk.}
proc current_sequence*(gesture: GestureSingle): gdk3.EventSequence {.
    importc: "gtk_gesture_single_get_current_sequence", libgtk.}

template gtk_gesture_drag*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_drag_get_type(), GestureDragObj))

template gtk_gesture_drag_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_drag_get_type(), GestureDragClass))

template gtk_is_gesture_drag*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_drag_get_type()))

template gtk_is_gesture_drag_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_drag_get_type()))

template gtk_gesture_drag_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_drag_get_type(), GestureDragClass))

type 
  GestureDrag* =  ptr GestureDragObj
  GestureDragPtr* = ptr GestureDragObj
  GestureDragObj* = object 
  
proc gesture_drag_get_type*(): GType {.
    importc: "gtk_gesture_drag_get_type", libgtk.}
proc gesture_drag_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_drag_new", libgtk.}
proc get_start_point*(gesture: GestureDrag; 
    x: var gdouble; y: var gdouble): gboolean {.
    importc: "gtk_gesture_drag_get_start_point", libgtk.}
proc start_point*(gesture: GestureDrag; 
    x: var gdouble; y: var gdouble): gboolean {.
    importc: "gtk_gesture_drag_get_start_point", libgtk.}
proc get_offset*(gesture: GestureDrag; x: var gdouble; 
                                  y: var gdouble): gboolean {.
    importc: "gtk_gesture_drag_get_offset", libgtk.}
proc offset*(gesture: GestureDrag; x: var gdouble; 
                                  y: var gdouble): gboolean {.
    importc: "gtk_gesture_drag_get_offset", libgtk.}

template gtk_gesture_long_press*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_long_press_get_type(), 
                              GestureLongPress))

template gtk_gesture_long_press_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_long_press_get_type(), 
                           GestureLongPressClass))

template gtk_is_gesture_long_press*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_long_press_get_type()))

template gtk_is_gesture_long_press_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_long_press_get_type()))

template gtk_gesture_long_press_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_long_press_get_type(), 
                             GestureLongPressClass))

proc gesture_long_press_get_type*(): GType {.
    importc: "gtk_gesture_long_press_get_type", libgtk.}
proc gesture_long_press_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_long_press_new", libgtk.}

template gtk_gesture_multi_press*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_multi_press_get_type(), 
                              GestureMultiPressObj))

template gtk_gesture_multi_press_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_multi_press_get_type(), 
                           GestureMultiPressClass))

template gtk_is_gesture_multi_press*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_multi_press_get_type()))

template gtk_is_gesture_multi_press_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_multi_press_get_type()))

template gtk_gesture_multi_press_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_multi_press_get_type(), 
                             GestureMultiPressClass))

type 
  GestureMultiPress* =  ptr GestureMultiPressObj
  GestureMultiPressPtr* = ptr GestureMultiPressObj
  GestureMultiPressObj* = object 
  
proc gesture_multi_press_get_type*(): GType {.
    importc: "gtk_gesture_multi_press_get_type", libgtk.}
proc gesture_multi_press_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_multi_press_new", libgtk.}
proc set_area*(gesture: GestureMultiPress; 
    rect: gdk3.Rectangle) {.importc: "gtk_gesture_multi_press_set_area", 
                              libgtk.}
proc `area=`*(gesture: GestureMultiPress; 
    rect: gdk3.Rectangle) {.importc: "gtk_gesture_multi_press_set_area", 
                              libgtk.}
proc get_area*(gesture: GestureMultiPress; 
    rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_gesture_multi_press_get_area", libgtk.}
proc area*(gesture: GestureMultiPress; 
    rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_gesture_multi_press_get_area", libgtk.}

template gtk_gesture_pan*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_pan_get_type(), GesturePanObj))

template gtk_gesture_pan_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_pan_get_type(), GesturePanClass))

template gtk_is_gesture_pan*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_pan_get_type()))

template gtk_is_gesture_pan_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_pan_get_type()))

template gtk_gesture_pan_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_pan_get_type(), GesturePanClass))

type 
  GesturePan* =  ptr GesturePanObj
  GesturePanPtr* = ptr GesturePanObj
  GesturePanObj* = object 
  
proc gesture_pan_get_type*(): GType {.importc: "gtk_gesture_pan_get_type", 
    libgtk.}
proc gesture_pan_new*(widget: Widget; orientation: Orientation): Gesture {.
    importc: "gtk_gesture_pan_new", libgtk.}
proc get_orientation*(gesture: GesturePan): Orientation {.
    importc: "gtk_gesture_pan_get_orientation", libgtk.}
proc orientation*(gesture: GesturePan): Orientation {.
    importc: "gtk_gesture_pan_get_orientation", libgtk.}
proc set_orientation*(gesture: GesturePan; 
                                      orientation: Orientation) {.
    importc: "gtk_gesture_pan_set_orientation", libgtk.}
proc `orientation=`*(gesture: GesturePan; 
                                      orientation: Orientation) {.
    importc: "gtk_gesture_pan_set_orientation", libgtk.}

template gtk_gesture_rotate*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_rotate_get_type(), GestureRotateObj))

template gtk_gesture_rotate_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_rotate_get_type(), GestureRotateClass))

template gtk_is_gesture_rotate*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_rotate_get_type()))

template gtk_is_gesture_rotate_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_rotate_get_type()))

template gtk_gesture_rotate_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_rotate_get_type(), 
                             GestureRotateClass))

type 
  GestureRotate* =  ptr GestureRotateObj
  GestureRotatePtr* = ptr GestureRotateObj
  GestureRotateObj* = object 
  
proc gesture_rotate_get_type*(): GType {.
    importc: "gtk_gesture_rotate_get_type", libgtk.}
proc gesture_rotate_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_rotate_new", libgtk.}
proc get_angle_delta*(gesture: GestureRotate): gdouble {.
    importc: "gtk_gesture_rotate_get_angle_delta", libgtk.}
proc angle_delta*(gesture: GestureRotate): gdouble {.
    importc: "gtk_gesture_rotate_get_angle_delta", libgtk.}

template gtk_gesture_swipe*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_swipe_get_type(), GestureSwipeObj))

template gtk_gesture_swipe_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_swipe_get_type(), GestureSwipeClass))

template gtk_is_gesture_swipe*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_swipe_get_type()))

template gtk_is_gesture_swipe_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_swipe_get_type()))

template gtk_gesture_swipe_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_swipe_get_type(), GestureSwipeClass))

type 
  GestureSwipe* =  ptr GestureSwipeObj
  GestureSwipePtr* = ptr GestureSwipeObj
  GestureSwipeObj* = object 
  
proc gesture_swipe_get_type*(): GType {.
    importc: "gtk_gesture_swipe_get_type", libgtk.}
proc gesture_swipe_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_swipe_new", libgtk.}
proc get_velocity*(gesture: GestureSwipe; 
                                     velocity_x: var gdouble; 
                                     velocity_y: var gdouble): gboolean {.
    importc: "gtk_gesture_swipe_get_velocity", libgtk.}
proc velocity*(gesture: GestureSwipe; 
                                     velocity_x: var gdouble; 
                                     velocity_y: var gdouble): gboolean {.
    importc: "gtk_gesture_swipe_get_velocity", libgtk.}

template gtk_gesture_zoom*(o: expr): expr = 
  (g_type_check_instance_cast(o, gesture_zoom_get_type(), GestureZoomObj))

template gtk_gesture_zoom_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gesture_zoom_get_type(), GestureZoomClass))

template gtk_is_gesture_zoom*(o: expr): expr = 
  (g_type_check_instance_type(o, gesture_zoom_get_type()))

template gtk_is_gesture_zoom_class*(k: expr): expr = 
  (g_type_check_class_type(k, gesture_zoom_get_type()))

template gtk_gesture_zoom_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, gesture_zoom_get_type(), GestureZoomClass))

type 
  GestureZoom* =  ptr GestureZoomObj
  GestureZoomPtr* = ptr GestureZoomObj
  GestureZoomObj* = object 
  
proc gesture_zoom_get_type*(): GType {.
    importc: "gtk_gesture_zoom_get_type", libgtk.}
proc gesture_zoom_new*(widget: Widget): Gesture {.
    importc: "gtk_gesture_zoom_new", libgtk.}
proc get_scale_delta*(gesture: GestureZoom): gdouble {.
    importc: "gtk_gesture_zoom_get_scale_delta", libgtk.}
proc scale_delta*(gesture: GestureZoom): gdouble {.
    importc: "gtk_gesture_zoom_get_scale_delta", libgtk.}

template gtk_gl_area*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, gl_area_get_type(), GLAreaObj))

template gtk_is_gl_area*(obj: expr): expr = 
  (g_type_check_instance_type(obj, gl_area_get_type()))

template gtk_gl_area_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, gl_area_get_type(), GLAreaClassObj))

template gtk_is_gl_area_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, gl_area_get_type()))

template gtk_gl_area_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, gl_area_get_type(), GLAreaClassObj))

type 
  GLArea* =  ptr GLAreaObj
  GLAreaPtr* = ptr GLAreaObj
  GLAreaObj*{.final.} = object of WidgetObj

type 
  GLAreaClass* =  ptr GLAreaClassObj
  GLAreaClassPtr* = ptr GLAreaClassObj
  GLAreaClassObj*{.final.} = object of WidgetClassObj
    render*: proc (area: GLArea; context: gdk3.GLContext): gboolean {.cdecl.}
    resize*: proc (area: GLArea; width: cint; height: cint) {.cdecl.}
    create_context*: proc (area: GLArea): gdk3.GLContext {.cdecl.}
    padding: array[6, gpointer]

proc gl_area_get_type*(): GType {.importc: "gtk_gl_area_get_type", 
                                      libgtk.}
proc gl_area_new*(): GlArea {.importc: "gtk_gl_area_new", 
    libgtk.}
proc get_profile*(area: GLArea): gdk3.GLProfile {.
    importc: "gtk_gl_area_get_profile", libgtk.}
proc profile*(area: GLArea): gdk3.GLProfile {.
    importc: "gtk_gl_area_get_profile", libgtk.}
proc set_profile*(area: GLArea; profile: gdk3.GLProfile) {.
    importc: "gtk_gl_area_set_profile", libgtk.}
proc `profile=`*(area: GLArea; profile: gdk3.GLProfile) {.
    importc: "gtk_gl_area_set_profile", libgtk.}
proc get_has_alpha*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_alpha", libgtk.}
proc has_alpha*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_alpha", libgtk.}
proc set_has_alpha*(area: GLArea; has_alpha: gboolean) {.
    importc: "gtk_gl_area_set_has_alpha", libgtk.}
proc `has_alpha=`*(area: GLArea; has_alpha: gboolean) {.
    importc: "gtk_gl_area_set_has_alpha", libgtk.}
proc get_has_depth_buffer*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_depth_buffer", libgtk.}
proc has_depth_buffer*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_depth_buffer", libgtk.}
proc set_has_depth_buffer*(area: GLArea; 
    has_depth_buffer: gboolean) {.importc: "gtk_gl_area_set_has_depth_buffer", 
                                  libgtk.}
proc `has_depth_buffer=`*(area: GLArea; 
    has_depth_buffer: gboolean) {.importc: "gtk_gl_area_set_has_depth_buffer", 
                                  libgtk.}
proc get_has_stencil_buffer*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_stencil_buffer", libgtk.}
proc has_stencil_buffer*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_has_stencil_buffer", libgtk.}
proc set_has_stencil_buffer*(area: GLArea; 
    has_stencil_buffer: gboolean) {.importc: "gtk_gl_area_set_has_stencil_buffer", 
                                    libgtk.}
proc `has_stencil_buffer=`*(area: GLArea; 
    has_stencil_buffer: gboolean) {.importc: "gtk_gl_area_set_has_stencil_buffer", 
                                    libgtk.}
proc get_auto_render*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_auto_render", libgtk.}
proc auto_render*(area: GLArea): gboolean {.
    importc: "gtk_gl_area_get_auto_render", libgtk.}
proc set_auto_render*(area: GLArea; auto_render: gboolean) {.
    importc: "gtk_gl_area_set_auto_render", libgtk.}
proc `auto_render=`*(area: GLArea; auto_render: gboolean) {.
    importc: "gtk_gl_area_set_auto_render", libgtk.}
proc queue_render*(area: GLArea) {.
    importc: "gtk_gl_area_queue_render", libgtk.}
proc get_context*(area: GLArea): gdk3.GLContext {.
    importc: "gtk_gl_area_get_context", libgtk.}
proc context*(area: GLArea): gdk3.GLContext {.
    importc: "gtk_gl_area_get_context", libgtk.}
proc make_current*(area: GLArea) {.
    importc: "gtk_gl_area_make_current", libgtk.}
proc attach_buffers*(area: GLArea) {.
    importc: "gtk_gl_area_attach_buffers", libgtk.}
proc set_error*(area: GLArea; error: glib.GError) {.
    importc: "gtk_gl_area_set_error", libgtk.}
proc `error=`*(area: GLArea; error: glib.GError) {.
    importc: "gtk_gl_area_set_error", libgtk.}
proc get_error*(area: GLArea): glib.GError {.
    importc: "gtk_gl_area_get_error", libgtk.}
proc error*(area: GLArea): glib.GError {.
    importc: "gtk_gl_area_get_error", libgtk.}

template gtk_grid*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, grid_get_type(), GridObj))

template gtk_grid_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, grid_get_type(), GridClassObj))

template gtk_is_grid*(obj: expr): expr = 
  (g_type_check_instance_type(obj, grid_get_type()))

template gtk_is_grid_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, grid_get_type()))

template gtk_grid_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, grid_get_type(), GridClassObj))

type 
  GridPrivateObj = object 
  
type 
  Grid* =  ptr GridObj
  GridPtr* = ptr GridObj
  GridObj*{.final.} = object of ContainerObj
    priv70: ptr GridPrivateObj

type 
  GridClass* =  ptr GridClassObj
  GridClassPtr* = ptr GridClassObj
  GridClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved691: proc () {.cdecl.}
    gtk_reserved692: proc () {.cdecl.}
    gtk_reserved693: proc () {.cdecl.}
    gtk_reserved694: proc () {.cdecl.}
    gtk_reserved695: proc () {.cdecl.}
    gtk_reserved696: proc () {.cdecl.}
    gtk_reserved697: proc () {.cdecl.}
    gtk_reserved698: proc () {.cdecl.}

proc grid_get_type*(): GType {.importc: "gtk_grid_get_type", libgtk.}
proc grid_new*(): Grid {.importc: "gtk_grid_new", libgtk.}
proc attach*(grid: Grid; child: Widget; left: gint; 
                      top: gint; width: gint; height: gint) {.
    importc: "gtk_grid_attach", libgtk.}
proc attach_next_to*(grid: Grid; child: Widget; 
                              sibling: Widget; side: PositionType; 
                              width: gint; height: gint) {.
    importc: "gtk_grid_attach_next_to", libgtk.}
proc get_child_at*(grid: Grid; left: gint; top: gint): Widget {.
    importc: "gtk_grid_get_child_at", libgtk.}
proc child_at*(grid: Grid; left: gint; top: gint): Widget {.
    importc: "gtk_grid_get_child_at", libgtk.}
proc insert_row*(grid: Grid; position: gint) {.
    importc: "gtk_grid_insert_row", libgtk.}
proc insert_column*(grid: Grid; position: gint) {.
    importc: "gtk_grid_insert_column", libgtk.}
proc remove_row*(grid: Grid; position: gint) {.
    importc: "gtk_grid_remove_row", libgtk.}
proc remove_column*(grid: Grid; position: gint) {.
    importc: "gtk_grid_remove_column", libgtk.}
proc insert_next_to*(grid: Grid; sibling: Widget; 
                              side: PositionType) {.
    importc: "gtk_grid_insert_next_to", libgtk.}
proc set_row_homogeneous*(grid: Grid; homogeneous: gboolean) {.
    importc: "gtk_grid_set_row_homogeneous", libgtk.}
proc `row_homogeneous=`*(grid: Grid; homogeneous: gboolean) {.
    importc: "gtk_grid_set_row_homogeneous", libgtk.}
proc get_row_homogeneous*(grid: Grid): gboolean {.
    importc: "gtk_grid_get_row_homogeneous", libgtk.}
proc row_homogeneous*(grid: Grid): gboolean {.
    importc: "gtk_grid_get_row_homogeneous", libgtk.}
proc set_row_spacing*(grid: Grid; spacing: guint) {.
    importc: "gtk_grid_set_row_spacing", libgtk.}
proc `row_spacing=`*(grid: Grid; spacing: guint) {.
    importc: "gtk_grid_set_row_spacing", libgtk.}
proc get_row_spacing*(grid: Grid): guint {.
    importc: "gtk_grid_get_row_spacing", libgtk.}
proc row_spacing*(grid: Grid): guint {.
    importc: "gtk_grid_get_row_spacing", libgtk.}
proc set_column_homogeneous*(grid: Grid; homogeneous: gboolean) {.
    importc: "gtk_grid_set_column_homogeneous", libgtk.}
proc `column_homogeneous=`*(grid: Grid; homogeneous: gboolean) {.
    importc: "gtk_grid_set_column_homogeneous", libgtk.}
proc get_column_homogeneous*(grid: Grid): gboolean {.
    importc: "gtk_grid_get_column_homogeneous", libgtk.}
proc column_homogeneous*(grid: Grid): gboolean {.
    importc: "gtk_grid_get_column_homogeneous", libgtk.}
proc set_column_spacing*(grid: Grid; spacing: guint) {.
    importc: "gtk_grid_set_column_spacing", libgtk.}
proc `column_spacing=`*(grid: Grid; spacing: guint) {.
    importc: "gtk_grid_set_column_spacing", libgtk.}
proc get_column_spacing*(grid: Grid): guint {.
    importc: "gtk_grid_get_column_spacing", libgtk.}
proc column_spacing*(grid: Grid): guint {.
    importc: "gtk_grid_get_column_spacing", libgtk.}
proc set_row_baseline_position*(grid: Grid; row: gint; 
    pos: BaselinePosition) {.importc: "gtk_grid_set_row_baseline_position", 
                                libgtk.}
proc `row_baseline_position=`*(grid: Grid; row: gint; 
    pos: BaselinePosition) {.importc: "gtk_grid_set_row_baseline_position", 
                                libgtk.}
proc get_row_baseline_position*(grid: Grid; row: gint): BaselinePosition {.
    importc: "gtk_grid_get_row_baseline_position", libgtk.}
proc row_baseline_position*(grid: Grid; row: gint): BaselinePosition {.
    importc: "gtk_grid_get_row_baseline_position", libgtk.}
proc set_baseline_row*(grid: Grid; row: gint) {.
    importc: "gtk_grid_set_baseline_row", libgtk.}
proc `baseline_row=`*(grid: Grid; row: gint) {.
    importc: "gtk_grid_set_baseline_row", libgtk.}
proc get_baseline_row*(grid: Grid): gint {.
    importc: "gtk_grid_get_baseline_row", libgtk.}
proc baseline_row*(grid: Grid): gint {.
    importc: "gtk_grid_get_baseline_row", libgtk.}

template gtk_header_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, header_bar_get_type(), HeaderBarObj))

template gtk_header_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, header_bar_get_type(), HeaderBarClassObj))

template gtk_is_header_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, header_bar_get_type()))

template gtk_is_header_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, header_bar_get_type()))

template gtk_header_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, header_bar_get_type(), HeaderBarClassObj))

type 
  HeaderBarClass* =  ptr HeaderBarClassObj
  HeaderBarClassPtr* = ptr HeaderBarClassObj
  HeaderBarClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved701: proc () {.cdecl.}
    gtk_reserved702: proc () {.cdecl.}
    gtk_reserved703: proc () {.cdecl.}
    gtk_reserved704: proc () {.cdecl.}

proc header_bar_get_type*(): GType {.importc: "gtk_header_bar_get_type", 
    libgtk.}
proc header_bar_new*(): HeaderBar {.importc: "gtk_header_bar_new", 
    libgtk.}
proc set_title*(bar: HeaderBar; title: cstring) {.
    importc: "gtk_header_bar_set_title", libgtk.}
proc `title=`*(bar: HeaderBar; title: cstring) {.
    importc: "gtk_header_bar_set_title", libgtk.}
proc get_title*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_title", libgtk.}
proc title*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_title", libgtk.}
proc set_subtitle*(bar: HeaderBar; subtitle: cstring) {.
    importc: "gtk_header_bar_set_subtitle", libgtk.}
proc `subtitle=`*(bar: HeaderBar; subtitle: cstring) {.
    importc: "gtk_header_bar_set_subtitle", libgtk.}
proc get_subtitle*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_subtitle", libgtk.}
proc subtitle*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_subtitle", libgtk.}
proc set_custom_title*(bar: HeaderBar; 
                                      title_widget: Widget) {.
    importc: "gtk_header_bar_set_custom_title", libgtk.}
proc `custom_title=`*(bar: HeaderBar; 
                                      title_widget: Widget) {.
    importc: "gtk_header_bar_set_custom_title", libgtk.}
proc get_custom_title*(bar: HeaderBar): Widget {.
    importc: "gtk_header_bar_get_custom_title", libgtk.}
proc custom_title*(bar: HeaderBar): Widget {.
    importc: "gtk_header_bar_get_custom_title", libgtk.}
proc pack_start*(bar: HeaderBar; child: Widget) {.
    importc: "gtk_header_bar_pack_start", libgtk.}
proc pack_end*(bar: HeaderBar; child: Widget) {.
    importc: "gtk_header_bar_pack_end", libgtk.}
proc get_show_close_button*(bar: HeaderBar): gboolean {.
    importc: "gtk_header_bar_get_show_close_button", libgtk.}
proc show_close_button*(bar: HeaderBar): gboolean {.
    importc: "gtk_header_bar_get_show_close_button", libgtk.}
proc set_show_close_button*(bar: HeaderBar; 
    setting: gboolean) {.importc: "gtk_header_bar_set_show_close_button", 
                         libgtk.}
proc `show_close_button=`*(bar: HeaderBar; 
    setting: gboolean) {.importc: "gtk_header_bar_set_show_close_button", 
                         libgtk.}
proc set_has_subtitle*(bar: HeaderBar; setting: gboolean) {.
    importc: "gtk_header_bar_set_has_subtitle", libgtk.}
proc `has_subtitle=`*(bar: HeaderBar; setting: gboolean) {.
    importc: "gtk_header_bar_set_has_subtitle", libgtk.}
proc get_has_subtitle*(bar: HeaderBar): gboolean {.
    importc: "gtk_header_bar_get_has_subtitle", libgtk.}
proc has_subtitle*(bar: HeaderBar): gboolean {.
    importc: "gtk_header_bar_get_has_subtitle", libgtk.}
proc set_decoration_layout*(bar: HeaderBar; 
    layout: cstring) {.importc: "gtk_header_bar_set_decoration_layout", 
                         libgtk.}
proc `decoration_layout=`*(bar: HeaderBar; 
    layout: cstring) {.importc: "gtk_header_bar_set_decoration_layout", 
                         libgtk.}
proc get_decoration_layout*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_decoration_layout", libgtk.}
proc decoration_layout*(bar: HeaderBar): cstring {.
    importc: "gtk_header_bar_get_decoration_layout", libgtk.}

template gtk_icon_factory*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, icon_factory_get_type(), IconFactoryObj))

template gtk_icon_factory_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, icon_factory_get_type(), IconFactoryClassObj))

template gtk_is_icon_factory*(obj: expr): expr = 
  (g_type_check_instance_type(obj, icon_factory_get_type()))

template gtk_is_icon_factory_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, icon_factory_get_type()))

template gtk_icon_factory_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, icon_factory_get_type(), IconFactoryClassObj))

type 
  IconFactoryPrivateObj = object 
  
type 
  IconFactory* =  ptr IconFactoryObj
  IconFactoryPtr* = ptr IconFactoryObj
  IconFactoryObj*{.final.} = object of GObjectObj
    priv71: ptr IconFactoryPrivateObj

type 
  IconFactoryClass* =  ptr IconFactoryClassObj
  IconFactoryClassPtr* = ptr IconFactoryClassObj
  IconFactoryClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved711: proc () {.cdecl.}
    gtk_reserved712: proc () {.cdecl.}
    gtk_reserved713: proc () {.cdecl.}
    gtk_reserved714: proc () {.cdecl.}

proc icon_factory_get_type*(): GType {.
    importc: "gtk_icon_factory_get_type", libgtk.}
proc icon_factory_new*(): IconFactory {.
    importc: "gtk_icon_factory_new", libgtk.}
proc add*(factory: IconFactory; stock_id: cstring; 
                           icon_set: IconSet) {.
    importc: "gtk_icon_factory_add", libgtk.}
proc lookup*(factory: IconFactory; stock_id: cstring): IconSet {.
    importc: "gtk_icon_factory_lookup", libgtk.}
proc add_default*(factory: IconFactory) {.
    importc: "gtk_icon_factory_add_default", libgtk.}
proc remove_default*(factory: IconFactory) {.
    importc: "gtk_icon_factory_remove_default", libgtk.}
proc icon_factory_lookup_default*(stock_id: cstring): IconSet {.
    importc: "gtk_icon_factory_lookup_default", libgtk.}
when not GDK_MULTIHEAD_SAFE: 
  proc lookup*(size: IconSize; width: var gint; 
                             height: var gint): gboolean {.
      importc: "gtk_icon_size_lookup", libgtk.}
proc icon_size_lookup_for_settings*(settings: Settings; 
    size: IconSize; width: var gint; height: var gint): gboolean {.
    importc: "gtk_icon_size_lookup_for_settings", libgtk.}
proc icon_size_register*(name: cstring; width: gint; height: gint): IconSize {.
    importc: "gtk_icon_size_register", libgtk.}
proc icon_size_register_alias*(alias: cstring; target: IconSize) {.
    importc: "gtk_icon_size_register_alias", libgtk.}
proc icon_size_from_name*(name: cstring): IconSize {.
    importc: "gtk_icon_size_from_name", libgtk.}
proc get_name*(size: IconSize): cstring {.
    importc: "gtk_icon_size_get_name", libgtk.}
proc name*(size: IconSize): cstring {.
    importc: "gtk_icon_size_get_name", libgtk.}
proc icon_set_get_type*(): GType {.importc: "gtk_icon_set_get_type", 
    libgtk.}
proc icon_set_new*(): IconSet {.importc: "gtk_icon_set_new", 
    libgtk.}
proc icon_set_new_from_pixbuf*(pixbuf: gdk_pixbuf.GdkPixbuf): IconSet {.
    importc: "gtk_icon_set_new_from_pixbuf", libgtk.}
proc `ref`*(icon_set: IconSet): IconSet {.
    importc: "gtk_icon_set_ref", libgtk.}
proc unref*(icon_set: IconSet) {.
    importc: "gtk_icon_set_unref", libgtk.}
proc copy*(icon_set: IconSet): IconSet {.
    importc: "gtk_icon_set_copy", libgtk.}
proc render_icon*(icon_set: IconSet; style: Style; 
                               direction: TextDirection; 
                               state: StateType; size: IconSize; 
                               widget: Widget; detail: cstring): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_set_render_icon", libgtk.}
proc add_source*(icon_set: IconSet; 
                              source: IconSource) {.
    importc: "gtk_icon_set_add_source", libgtk.}
proc get_sizes*(icon_set: IconSet; 
                             sizes: var ptr IconSize; n_sizes: var gint) {.
    importc: "gtk_icon_set_get_sizes", libgtk.}
proc icon_source_get_type*(): GType {.importc: "gtk_icon_source_get_type", 
    libgtk.}
proc icon_source_new*(): IconSource {.
    importc: "gtk_icon_source_new", libgtk.}
proc copy*(source: IconSource): IconSource {.
    importc: "gtk_icon_source_copy", libgtk.}
proc free*(source: IconSource) {.
    importc: "gtk_icon_source_free", libgtk.}
proc set_filename*(source: IconSource; 
                                   filename: cstring) {.
    importc: "gtk_icon_source_set_filename", libgtk.}
proc `filename=`*(source: IconSource; 
                                   filename: cstring) {.
    importc: "gtk_icon_source_set_filename", libgtk.}
proc set_icon_name*(source: IconSource; 
                                    icon_name: cstring) {.
    importc: "gtk_icon_source_set_icon_name", libgtk.}
proc `icon_name=`*(source: IconSource; 
                                    icon_name: cstring) {.
    importc: "gtk_icon_source_set_icon_name", libgtk.}
proc set_pixbuf*(source: IconSource; 
                                 pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_icon_source_set_pixbuf", libgtk.}
proc `pixbuf=`*(source: IconSource; 
                                 pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_icon_source_set_pixbuf", libgtk.}
proc get_filename*(source: IconSource): cstring {.
    importc: "gtk_icon_source_get_filename", libgtk.}
proc filename*(source: IconSource): cstring {.
    importc: "gtk_icon_source_get_filename", libgtk.}
proc get_icon_name*(source: IconSource): cstring {.
    importc: "gtk_icon_source_get_icon_name", libgtk.}
proc icon_name*(source: IconSource): cstring {.
    importc: "gtk_icon_source_get_icon_name", libgtk.}
proc get_pixbuf*(source: IconSource): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_source_get_pixbuf", libgtk.}
proc pixbuf*(source: IconSource): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_source_get_pixbuf", libgtk.}
proc set_direction_wildcarded*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_direction_wildcarded", 
                         libgtk.}
proc `direction_wildcarded=`*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_direction_wildcarded", 
                         libgtk.}
proc set_state_wildcarded*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_state_wildcarded", 
                         libgtk.}
proc `state_wildcarded=`*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_state_wildcarded", 
                         libgtk.}
proc set_size_wildcarded*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_size_wildcarded", 
                         libgtk.}
proc `size_wildcarded=`*(source: IconSource; 
    setting: gboolean) {.importc: "gtk_icon_source_set_size_wildcarded", 
                         libgtk.}
proc get_size_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_size_wildcarded", libgtk.}
proc size_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_size_wildcarded", libgtk.}
proc get_state_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_state_wildcarded", libgtk.}
proc state_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_state_wildcarded", libgtk.}
proc get_direction_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_direction_wildcarded", libgtk.}
proc direction_wildcarded*(source: IconSource): gboolean {.
    importc: "gtk_icon_source_get_direction_wildcarded", libgtk.}
proc set_direction*(source: IconSource; 
                                    direction: TextDirection) {.
    importc: "gtk_icon_source_set_direction", libgtk.}
proc `direction=`*(source: IconSource; 
                                    direction: TextDirection) {.
    importc: "gtk_icon_source_set_direction", libgtk.}
proc set_state*(source: IconSource; state: StateType) {.
    importc: "gtk_icon_source_set_state", libgtk.}
proc `state=`*(source: IconSource; state: StateType) {.
    importc: "gtk_icon_source_set_state", libgtk.}
proc set_size*(source: IconSource; size: IconSize) {.
    importc: "gtk_icon_source_set_size", libgtk.}
proc `size=`*(source: IconSource; size: IconSize) {.
    importc: "gtk_icon_source_set_size", libgtk.}
proc get_direction*(source: IconSource): TextDirection {.
    importc: "gtk_icon_source_get_direction", libgtk.}
proc direction*(source: IconSource): TextDirection {.
    importc: "gtk_icon_source_get_direction", libgtk.}
proc get_state*(source: IconSource): StateType {.
    importc: "gtk_icon_source_get_state", libgtk.}
proc state*(source: IconSource): StateType {.
    importc: "gtk_icon_source_get_state", libgtk.}
proc get_size*(source: IconSource): IconSize {.
    importc: "gtk_icon_source_get_size", libgtk.}
proc size*(source: IconSource): IconSize {.
    importc: "gtk_icon_source_get_size", libgtk.}

template gtk_style_properties*(o: expr): expr = 
  (g_type_check_instance_cast(o, style_properties_get_type(), 
                              StylePropertiesObj))

template gtk_style_properties_class*(c: expr): expr = 
  (g_type_check_class_cast(c, style_properties_get_type(), 
                           StylePropertiesClassObj))

template gtk_is_style_properties*(o: expr): expr = 
  (g_type_check_instance_type(o, style_properties_get_type()))

template gtk_is_style_properties_class*(c: expr): expr = 
  (g_type_check_class_type(c, style_properties_get_type()))

template gtk_style_properties_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, style_properties_get_type(), 
                             StylePropertiesClassObj))

type 
  StylePropertiesPrivateObj = object 
  
  SymbolicColor* =  ptr SymbolicColorObj
  SymbolicColorPtr* = ptr SymbolicColorObj
  SymbolicColorObj* = object 
  
  Gradient* =  ptr GradientObj
  GradientPtr* = ptr GradientObj
  GradientObj* = object 
  
type 
  StyleProperties* =  ptr StylePropertiesObj
  StylePropertiesPtr* = ptr StylePropertiesObj
  StylePropertiesObj*{.final.} = object of GObjectObj
    priv72: ptr StylePropertiesPrivateObj

type 
  StylePropertiesClass* =  ptr StylePropertiesClassObj
  StylePropertiesClassPtr* = ptr StylePropertiesClassObj
  StylePropertiesClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved721: proc () {.cdecl.}
    gtk_reserved722: proc () {.cdecl.}
    gtk_reserved723: proc () {.cdecl.}
    gtk_reserved724: proc () {.cdecl.}

type 
  StylePropertyParser* = proc (string: cstring; value: gobject.GValue; 
                                  error: var glib.GError): gboolean {.cdecl.}
proc style_properties_get_type*(): GType {.
    importc: "gtk_style_properties_get_type", libgtk.}
proc style_properties_register_property*(
    parse_func: StylePropertyParser; pspec: gobject.GParamSpec) {.
    importc: "gtk_style_properties_register_property", libgtk.}
proc style_properties_lookup_property*(property_name: cstring; 
    parse_func: ptr StylePropertyParser; pspec: var gobject.GParamSpec): gboolean {.
    importc: "gtk_style_properties_lookup_property", libgtk.}
proc style_properties_new*(): StyleProperties {.
    importc: "gtk_style_properties_new", libgtk.}
proc map_color*(props: StyleProperties; 
                                     name: cstring; 
                                     color: SymbolicColor) {.
    importc: "gtk_style_properties_map_color", libgtk.}
proc lookup_color*(props: StyleProperties; 
    name: cstring): SymbolicColor {.
    importc: "gtk_style_properties_lookup_color", libgtk.}
proc set_property*(props: StyleProperties; 
    property: cstring; state: StateFlags; value: gobject.GValue) {.
    importc: "gtk_style_properties_set_property", libgtk.}
proc `property=`*(props: StyleProperties; 
    property: cstring; state: StateFlags; value: gobject.GValue) {.
    importc: "gtk_style_properties_set_property", libgtk.}

discard """ proc "set_valist*(props: StyleProperties; 
                                      state: StateFlags; args: va_list) {.
    importc: "gtk_style_properties_set_valist", libgtk.}"""

proc set*(props: StyleProperties; 
                               state: StateFlags) {.varargs, 
    importc: "gtk_style_properties_set", libgtk.}
proc get_property*(props: StyleProperties; 
    property: cstring; state: StateFlags; value: gobject.GValue): gboolean {.
    importc: "gtk_style_properties_get_property", libgtk.}
proc property*(props: StyleProperties; 
    property: cstring; state: StateFlags; value: gobject.GValue): gboolean {.
    importc: "gtk_style_properties_get_property", libgtk.}

discard """ proc "get_valist*(props: StyleProperties; 
                                      state: StateFlags; args: va_list) {.
    importc: "gtk_style_properties_get_valist", libgtk.}"""

proc get*(props: StyleProperties; 
                               state: StateFlags) {.varargs, 
    importc: "gtk_style_properties_get", libgtk.}
proc unset_property*(props: StyleProperties; 
    property: cstring; state: StateFlags) {.
    importc: "gtk_style_properties_unset_property", libgtk.}
proc clear*(props: StyleProperties) {.
    importc: "gtk_style_properties_clear", libgtk.}
proc merge*(props: StyleProperties; 
                                 props_to_merge: StyleProperties; 
                                 replace: gboolean) {.
    importc: "gtk_style_properties_merge", libgtk.}

template gtk_style_provider*(o: expr): expr = 
  (g_type_check_instance_cast(o, style_provider_get_type(), StyleProviderObj))

template gtk_is_style_provider*(o: expr): expr = 
  (g_type_check_instance_type(o, style_provider_get_type()))

template gtk_style_provider_get_iface*(o: expr): expr = 
  (g_type_instance_get_interface(o, style_provider_get_type(), 
                                 StyleProviderIfaceObj))

const 
  STYLE_PROVIDER_PRIORITY_FALLBACK* = 1
const 
  STYLE_PROVIDER_PRIORITY_THEME* = 200
const 
  STYLE_PROVIDER_PRIORITY_SETTINGS* = 400
const 
  STYLE_PROVIDER_PRIORITY_APPLICATION* = 600
const 
  STYLE_PROVIDER_PRIORITY_USER* = 800
type 
  StyleProvider* =  ptr StyleProviderObj
  StyleProviderPtr* = ptr StyleProviderObj
  StyleProviderObj* = object 
  
type 
  StyleProviderIface* =  ptr StyleProviderIfaceObj
  StyleProviderIfacePtr* = ptr StyleProviderIfaceObj
  StyleProviderIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_style*: proc (provider: StyleProvider; path: WidgetPath): StyleProperties {.cdecl.}
    get_style_property*: proc (provider: StyleProvider; 
                               path: WidgetPath; state: StateFlags; 
                               pspec: gobject.GParamSpec; value: gobject.GValue): gboolean {.cdecl.}
    get_icon_factory*: proc (provider: StyleProvider; 
                             path: WidgetPath): IconFactory {.cdecl.}

proc style_provider_get_type*(): GType {.
    importc: "gtk_style_provider_get_type", libgtk.}
proc get_style*(provider: StyleProvider; 
                                   path: WidgetPath): StyleProperties {.
    importc: "gtk_style_provider_get_style", libgtk.}
proc style*(provider: StyleProvider; 
                                   path: WidgetPath): StyleProperties {.
    importc: "gtk_style_provider_get_style", libgtk.}
proc get_style_property*(provider: StyleProvider; 
    path: WidgetPath; state: StateFlags; pspec: gobject.GParamSpec; 
    value: gobject.GValue): gboolean {.importc: "gtk_style_provider_get_style_property", 
                                   libgtk.}
proc style_property*(provider: StyleProvider; 
    path: WidgetPath; state: StateFlags; pspec: gobject.GParamSpec; 
    value: gobject.GValue): gboolean {.importc: "gtk_style_provider_get_style_property", 
                                   libgtk.}
proc get_icon_factory*(provider: StyleProvider; 
    path: WidgetPath): IconFactory {.
    importc: "gtk_style_provider_get_icon_factory", libgtk.}
proc icon_factory*(provider: StyleProvider; 
    path: WidgetPath): IconFactory {.
    importc: "gtk_style_provider_get_icon_factory", libgtk.}

template gtk_style_context*(o: expr): expr = 
  (g_type_check_instance_cast(o, style_context_get_type(), StyleContextObj))

template gtk_style_context_class*(c: expr): expr = 
  (g_type_check_class_cast(c, style_context_get_type(), StyleContextClassObj))

template gtk_is_style_context*(o: expr): expr = 
  (g_type_check_instance_type(o, style_context_get_type()))

template gtk_is_style_context_class*(c: expr): expr = 
  (g_type_check_class_type(c, style_context_get_type()))

template gtk_style_context_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, style_context_get_type(), StyleContextClassObj))

type 
  StyleContextClass* =  ptr StyleContextClassObj
  StyleContextClassPtr* = ptr StyleContextClassObj
  StyleContextClassObj*{.final.} = object of GObjectClassObj
    changed*: proc (context: StyleContext) {.cdecl.}
    gtk_reserved731: proc () {.cdecl.}
    gtk_reserved732: proc () {.cdecl.}
    gtk_reserved733: proc () {.cdecl.}
    gtk_reserved734: proc () {.cdecl.}

const 
  STYLE_PROPERTY_BACKGROUND_COLOR* = "background-color"
const 
  STYLE_PROPERTY_COLOR* = "color"
const 
  STYLE_PROPERTY_FONT* = "font"
const 
  STYLE_PROPERTY_PADDING* = "padding"
const 
  STYLE_PROPERTY_BORDER_WIDTH* = "border-width"
const 
  STYLE_PROPERTY_MARGIN* = "margin"
const 
  STYLE_PROPERTY_BORDER_RADIUS* = "border-radius"
const 
  STYLE_PROPERTY_BORDER_STYLE* = "border-style"
const 
  STYLE_PROPERTY_BORDER_COLOR* = "border-color"
const 
  STYLE_PROPERTY_BACKGROUND_IMAGE* = "background-image"
const 
  STYLE_CLASS_CELL* = "cell"
const 
  STYLE_CLASS_DIM_LABEL* = "dim-label"
const 
  STYLE_CLASS_ENTRY* = "entry"
const 
  STYLE_CLASS_LABEL* = "label"
const 
  STYLE_CLASS_COMBOBOX_ENTRY* = "combobox-entry"
const 
  STYLE_CLASS_BUTTON* = "button"
const 
  STYLE_CLASS_LIST* = "list"
const 
  STYLE_CLASS_LIST_ROW* = "list-row"
const 
  STYLE_CLASS_CALENDAR* = "calendar"
const 
  STYLE_CLASS_SLIDER* = "slider"
const 
  STYLE_CLASS_BACKGROUND* = "background"
const 
  STYLE_CLASS_RUBBERBAND* = "rubberband"
const 
  STYLE_CLASS_CSD* = "csd"
const 
  STYLE_CLASS_TOOLTIP* = "tooltip"
const 
  STYLE_CLASS_MENU* = "menu"
const 
  STYLE_CLASS_CONTEXT_MENU* = "context-menu"
const 
  STYLE_CLASS_TOUCH_SELECTION* = "touch-selection"
const 
  STYLE_CLASS_MENUBAR* = "menubar"
const 
  STYLE_CLASS_MENUITEM* = "menuitem"
const 
  STYLE_CLASS_TOOLBAR* = "toolbar"
const 
  STYLE_CLASS_PRIMARY_TOOLBAR* = "primary-toolbar"
const 
  STYLE_CLASS_INLINE_TOOLBAR* = "inline-toolbar"
const 
  STYLE_CLASS_STATUSBAR* = "statusbar"
const 
  STYLE_CLASS_RADIO* = "radio"
const 
  STYLE_CLASS_CHECK* = "check"
const 
  STYLE_CLASS_DEFAULT* = "default"
const 
  STYLE_CLASS_TROUGH* = "trough"
const 
  STYLE_CLASS_SCROLLBAR* = "scrollbar"
const 
  STYLE_CLASS_SCROLLBARS_JUNCTION* = "scrollbars-junction"
const 
  STYLE_CLASS_SCALE* = "scale"
const 
  STYLE_CLASS_SCALE_HAS_MARKS_ABOVE* = "scale-has-marks-above"
const 
  STYLE_CLASS_SCALE_HAS_MARKS_BELOW* = "scale-has-marks-below"
const 
  STYLE_CLASS_HEADER* = "header"
const 
  STYLE_CLASS_ACCELERATOR* = "accelerator"
const 
  STYLE_CLASS_RAISED* = "raised"
const 
  STYLE_CLASS_LINKED* = "linked"
const 
  STYLE_CLASS_GRIP* = "grip"
const 
  STYLE_CLASS_DOCK* = "dock"
const 
  STYLE_CLASS_PROGRESSBAR* = "progressbar"
const 
  STYLE_CLASS_SPINNER* = "spinner"
const 
  STYLE_CLASS_MARK* = "mark"
const 
  STYLE_CLASS_EXPANDER* = "expander"
const 
  STYLE_CLASS_SPINBUTTON* = "spinbutton"
const 
  STYLE_CLASS_NOTEBOOK* = "notebook"
const 
  STYLE_CLASS_VIEW* = "view"
const 
  STYLE_CLASS_SIDEBAR* = "sidebar"
const 
  STYLE_CLASS_IMAGE* = "image"
const 
  STYLE_CLASS_HIGHLIGHT* = "highlight"
const 
  STYLE_CLASS_FRAME* = "frame"
const 
  STYLE_CLASS_DND* = "dnd"
const 
  STYLE_CLASS_PANE_SEPARATOR* = "pane-separator"
const 
  STYLE_CLASS_SEPARATOR* = "separator"
const 
  STYLE_CLASS_INFO* = "info"
const 
  STYLE_CLASS_WARNING* = "warning"
const 
  STYLE_CLASS_QUESTION* = "question"
const 
  STYLE_CLASS_ERROR* = "error"
const 
  STYLE_CLASS_HORIZONTAL* = "horizontal"
const 
  STYLE_CLASS_VERTICAL* = "vertical"
const 
  STYLE_CLASS_TOP* = "top"
const 
  STYLE_CLASS_BOTTOM* = "bottom"
const 
  STYLE_CLASS_LEFT* = "left"
const 
  STYLE_CLASS_RIGHT* = "right"
const 
  STYLE_CLASS_PULSE* = "pulse"
const 
  STYLE_CLASS_ARROW* = "arrow"
const 
  STYLE_CLASS_OSD* = "osd"
const 
  STYLE_CLASS_LEVEL_BAR* = "level-bar"
const 
  STYLE_CLASS_CURSOR_HANDLE* = "cursor-handle"
const 
  STYLE_CLASS_INSERTION_CURSOR* = "insertion-cursor"
const 
  STYLE_CLASS_TITLEBAR* = "titlebar"
const 
  STYLE_CLASS_TITLE* = "title"
const 
  STYLE_CLASS_SUBTITLE* = "subtitle"
const 
  STYLE_CLASS_NEEDS_ATTENTION* = "needs-attention"
const 
  STYLE_CLASS_SUGGESTED_ACTION* = "suggested-action"
const 
  STYLE_CLASS_DESTRUCTIVE_ACTION* = "destructive-action"
const 
  STYLE_CLASS_POPOVER* = "popover"
const 
  STYLE_CLASS_POPUP* = "popup"
const 
  STYLE_CLASS_MESSAGE_DIALOG* = "message-dialog"
const 
  STYLE_CLASS_FLAT* = "flat"
const 
  STYLE_CLASS_READ_ONLY* = "read-only"
const 
  STYLE_CLASS_OVERSHOOT* = "overshoot"
const 
  STYLE_CLASS_UNDERSHOOT* = "undershoot"
const 
  STYLE_CLASS_PAPER* = "paper"
const 
  STYLE_CLASS_MONOSPACE* = "monospace"
const 
  STYLE_CLASS_WIDE* = "wide"
const 
  STYLE_REGION_ROW* = "row"
const 
  STYLE_REGION_COLUMN* = "column"
const 
  STYLE_REGION_COLUMN_HEADER* = "column-header"
const 
  STYLE_REGION_TAB* = "tab"
proc style_context_get_type*(): GType {.
    importc: "gtk_style_context_get_type", libgtk.}
proc style_context_new*(): StyleContext {.
    importc: "gtk_style_context_new", libgtk.}
proc style_context_add_provider_for_screen*(screen: gdk3.Screen; 
    provider: StyleProvider; priority: guint) {.
    importc: "gtk_style_context_add_provider_for_screen", libgtk.}
proc style_context_remove_provider_for_screen*(screen: gdk3.Screen; 
    provider: StyleProvider) {.importc: "gtk_style_context_remove_provider_for_screen", 
                                      libgtk.}
proc add_provider*(context: StyleContext; 
                                     provider: StyleProvider; 
                                     priority: guint) {.
    importc: "gtk_style_context_add_provider", libgtk.}
proc remove_provider*(context: StyleContext; 
    provider: StyleProvider) {.importc: "gtk_style_context_remove_provider", 
                                      libgtk.}
proc save*(context: StyleContext) {.
    importc: "gtk_style_context_save", libgtk.}
proc restore*(context: StyleContext) {.
    importc: "gtk_style_context_restore", libgtk.}
proc get_section*(context: StyleContext; 
                                    property: cstring): CssSection {.
    importc: "gtk_style_context_get_section", libgtk.}
proc section*(context: StyleContext; 
                                    property: cstring): CssSection {.
    importc: "gtk_style_context_get_section", libgtk.}
proc get_property*(context: StyleContext; 
                                     property: cstring; 
                                     state: StateFlags; value: var gobject.GValueObj) {.
    importc: "gtk_style_context_get_property", libgtk.}

discard """ proc "get_valist*(context: StyleContext; 
                                   state: StateFlags; args: va_list) {.
    importc: "gtk_style_context_get_valist", libgtk.}"""

proc get*(context: StyleContext; state: StateFlags) {.
    varargs, importc: "gtk_style_context_get", libgtk.}
proc set_state*(context: StyleContext; 
                                  flags: StateFlags) {.
    importc: "gtk_style_context_set_state", libgtk.}
proc `state=`*(context: StyleContext; 
                                  flags: StateFlags) {.
    importc: "gtk_style_context_set_state", libgtk.}
proc get_state*(context: StyleContext): StateFlags {.
    importc: "gtk_style_context_get_state", libgtk.}
proc state*(context: StyleContext): StateFlags {.
    importc: "gtk_style_context_get_state", libgtk.}
proc set_scale*(context: StyleContext; scale: gint) {.
    importc: "gtk_style_context_set_scale", libgtk.}
proc `scale=`*(context: StyleContext; scale: gint) {.
    importc: "gtk_style_context_set_scale", libgtk.}
proc get_scale*(context: StyleContext): gint {.
    importc: "gtk_style_context_get_scale", libgtk.}
proc scale*(context: StyleContext): gint {.
    importc: "gtk_style_context_get_scale", libgtk.}
proc state_is_running*(context: StyleContext; 
    state: StateType; progress: var gdouble): gboolean {.
    importc: "gtk_style_context_state_is_running", libgtk.}
proc set_path*(context: StyleContext; 
                                 path: WidgetPath) {.
    importc: "gtk_style_context_set_path", libgtk.}
proc `path=`*(context: StyleContext; 
                                 path: WidgetPath) {.
    importc: "gtk_style_context_set_path", libgtk.}
proc get_path*(context: StyleContext): WidgetPath {.
    importc: "gtk_style_context_get_path", libgtk.}
proc path*(context: StyleContext): WidgetPath {.
    importc: "gtk_style_context_get_path", libgtk.}
proc set_parent*(context: StyleContext; 
                                   parent: StyleContext) {.
    importc: "gtk_style_context_set_parent", libgtk.}
proc `parent=`*(context: StyleContext; 
                                   parent: StyleContext) {.
    importc: "gtk_style_context_set_parent", libgtk.}
proc get_parent*(context: StyleContext): StyleContext {.
    importc: "gtk_style_context_get_parent", libgtk.}
proc parent*(context: StyleContext): StyleContext {.
    importc: "gtk_style_context_get_parent", libgtk.}
proc list_classes*(context: StyleContext): glib.GList {.
    importc: "gtk_style_context_list_classes", libgtk.}
proc add_class*(context: StyleContext; 
                                  class_name: cstring) {.
    importc: "gtk_style_context_add_class", libgtk.}
proc remove_class*(context: StyleContext; 
                                     class_name: cstring) {.
    importc: "gtk_style_context_remove_class", libgtk.}
proc has_class*(context: StyleContext; 
                                  class_name: cstring): gboolean {.
    importc: "gtk_style_context_has_class", libgtk.}
proc list_regions*(context: StyleContext): glib.GList {.
    importc: "gtk_style_context_list_regions", libgtk.}
proc add_region*(context: StyleContext; 
                                   region_name: cstring; 
                                   flags: RegionFlags) {.
    importc: "gtk_style_context_add_region", libgtk.}
proc remove_region*(context: StyleContext; 
                                      region_name: cstring) {.
    importc: "gtk_style_context_remove_region", libgtk.}
proc has_region*(context: StyleContext; 
                                   region_name: cstring; 
                                   flags_return: ptr RegionFlags): gboolean {.
    importc: "gtk_style_context_has_region", libgtk.}
proc get_style_property*(context: StyleContext; 
    property_name: cstring; value: var gobject.GValueObj) {.
    importc: "gtk_style_context_get_style_property", libgtk.}

discard """ proc "get_style_valist*(context: StyleContext; 
    args: va_list) {.importc: "gtk_style_context_get_style_valist", 
                     libgtk.}"""

proc get_style*(context: StyleContext) {.varargs, 
    importc: "gtk_style_context_get_style", libgtk.}
proc lookup_icon_set*(context: StyleContext; 
    stock_id: cstring): IconSet {.
    importc: "gtk_style_context_lookup_icon_set", libgtk.}
proc render_icon_pixbuf*(icon_set: IconSet; 
                                      context: StyleContext; 
                                      size: IconSize): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_set_render_icon_pixbuf", libgtk.}
proc render_icon_surface*(icon_set: IconSet; 
    context: StyleContext; size: IconSize; scale: cint; 
    for_window: gdk3.Window): cairo.Surface {.
    importc: "gtk_icon_set_render_icon_surface", libgtk.}
proc set_screen*(context: StyleContext; 
                                   screen: gdk3.Screen) {.
    importc: "gtk_style_context_set_screen", libgtk.}
proc `screen=`*(context: StyleContext; 
                                   screen: gdk3.Screen) {.
    importc: "gtk_style_context_set_screen", libgtk.}
proc get_screen*(context: StyleContext): gdk3.Screen {.
    importc: "gtk_style_context_get_screen", libgtk.}
proc screen*(context: StyleContext): gdk3.Screen {.
    importc: "gtk_style_context_get_screen", libgtk.}
proc set_frame_clock*(context: StyleContext; 
    frame_clock: gdk3.FrameClock) {.importc: "gtk_style_context_set_frame_clock", 
                                      libgtk.}
proc `frame_clock=`*(context: StyleContext; 
    frame_clock: gdk3.FrameClock) {.importc: "gtk_style_context_set_frame_clock", 
                                      libgtk.}
proc get_frame_clock*(context: StyleContext): gdk3.FrameClock {.
    importc: "gtk_style_context_get_frame_clock", libgtk.}
proc frame_clock*(context: StyleContext): gdk3.FrameClock {.
    importc: "gtk_style_context_get_frame_clock", libgtk.}
proc set_direction*(context: StyleContext; 
                                      direction: TextDirection) {.
    importc: "gtk_style_context_set_direction", libgtk.}
proc `direction=`*(context: StyleContext; 
                                      direction: TextDirection) {.
    importc: "gtk_style_context_set_direction", libgtk.}
proc get_direction*(context: StyleContext): TextDirection {.
    importc: "gtk_style_context_get_direction", libgtk.}
proc direction*(context: StyleContext): TextDirection {.
    importc: "gtk_style_context_get_direction", libgtk.}
proc set_junction_sides*(context: StyleContext; 
    sides: JunctionSides) {.importc: "gtk_style_context_set_junction_sides", 
                               libgtk.}
proc `junction_sides=`*(context: StyleContext; 
    sides: JunctionSides) {.importc: "gtk_style_context_set_junction_sides", 
                               libgtk.}
proc get_junction_sides*(context: StyleContext): JunctionSides {.
    importc: "gtk_style_context_get_junction_sides", libgtk.}
proc junction_sides*(context: StyleContext): JunctionSides {.
    importc: "gtk_style_context_get_junction_sides", libgtk.}
proc lookup_color*(context: StyleContext; 
                                     color_name: cstring; color: gdk3.RGBA): gboolean {.
    importc: "gtk_style_context_lookup_color", libgtk.}
proc notify_state_change*(context: StyleContext; 
    window: gdk3.Window; region_id: gpointer; state: StateType; 
    state_value: gboolean) {.importc: "gtk_style_context_notify_state_change", 
                             libgtk.}
proc cancel_animations*(context: StyleContext; 
    region_id: gpointer) {.importc: "gtk_style_context_cancel_animations", 
                           libgtk.}
proc scroll_animations*(context: StyleContext; 
    window: gdk3.Window; dx: gint; dy: gint) {.
    importc: "gtk_style_context_scroll_animations", libgtk.}
proc push_animatable_region*(context: StyleContext; 
    region_id: gpointer) {.importc: "gtk_style_context_push_animatable_region", 
                           libgtk.}
proc pop_animatable_region*(context: StyleContext) {.
    importc: "gtk_style_context_pop_animatable_region", libgtk.}
proc get_color*(context: StyleContext; 
                                  state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_style_context_get_color", libgtk.}
proc get_background_color*(context: StyleContext; 
    state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_style_context_get_background_color", libgtk.}
proc get_border_color*(context: StyleContext; 
    state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_style_context_get_border_color", libgtk.}
proc get_font*(context: StyleContext; 
                                 state: StateFlags): pango.FontDescription {.
    importc: "gtk_style_context_get_font", libgtk.}
proc font*(context: StyleContext; 
                                 state: StateFlags): pango.FontDescription {.
    importc: "gtk_style_context_get_font", libgtk.}
proc get_border*(context: StyleContext; 
                                   state: StateFlags; border: var BorderObj) {.
    importc: "gtk_style_context_get_border", libgtk.}
proc get_padding*(context: StyleContext; 
                                    state: StateFlags; 
                                    padding: var BorderObj) {.
    importc: "gtk_style_context_get_padding", libgtk.}
proc get_margin*(context: StyleContext; 
                                   state: StateFlags; margin: var BorderObj) {.
    importc: "gtk_style_context_get_margin", libgtk.}
proc invalidate*(context: StyleContext) {.
    importc: "gtk_style_context_invalidate", libgtk.}
proc style_context_reset_widgets*(screen: gdk3.Screen) {.
    importc: "gtk_style_context_reset_widgets", libgtk.}
proc set_background*(context: StyleContext; 
    window: gdk3.Window) {.importc: "gtk_style_context_set_background", 
                             libgtk.}
proc `background=`*(context: StyleContext; 
    window: gdk3.Window) {.importc: "gtk_style_context_set_background", 
                             libgtk.}
proc render_insertion_cursor*(context: StyleContext; 
                                  cr: cairo.Context; x: gdouble; y: gdouble; 
                                  layout: pango.Layout; index: cint; 
                                  direction: pango.Direction) {.
    importc: "gtk_render_insertion_cursor", libgtk.}
proc draw_insertion_cursor*(widget: Widget; cr: cairo.Context; 
                                location: gdk3.Rectangle; 
                                is_primary: gboolean; 
                                direction: TextDirection; 
                                draw_arrow: gboolean) {.
    importc: "gtk_draw_insertion_cursor", libgtk.}

template gtk_icon_info*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, icon_info_get_type(), IconInfoObj))

template gtk_icon_info_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, icon_info_get_type(), IconInfoClass))

template gtk_is_icon_info*(obj: expr): expr = 
  (g_type_check_instance_type(obj, icon_info_get_type()))

template gtk_is_icon_info_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, icon_info_get_type()))

template gtk_icon_info_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, icon_info_get_type(), IconInfoClass))

template gtk_icon_theme*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, icon_theme_get_type(), IconThemeObj))

template gtk_icon_theme_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, icon_theme_get_type(), IconThemeClassObj))

template gtk_is_icon_theme*(obj: expr): expr = 
  (g_type_check_instance_type(obj, icon_theme_get_type()))

template gtk_is_icon_theme_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, icon_theme_get_type()))

template gtk_icon_theme_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, icon_theme_get_type(), IconThemeClassObj))

type 
  IconInfo* =  ptr IconInfoObj
  IconInfoPtr* = ptr IconInfoObj
  IconInfoObj* = object 
  
  IconThemePrivateObj = object 
  
type 
  IconTheme* =  ptr IconThemeObj
  IconThemePtr* = ptr IconThemeObj
  IconThemeObj*{.final.} = object of GObjectObj
    priv74: ptr IconThemePrivateObj

type 
  IconThemeClass* =  ptr IconThemeClassObj
  IconThemeClassPtr* = ptr IconThemeClassObj
  IconThemeClassObj*{.final.} = object of GObjectClassObj
    changed*: proc (icon_theme: IconTheme) {.cdecl.}
    gtk_reserved741: proc () {.cdecl.}
    gtk_reserved742: proc () {.cdecl.}
    gtk_reserved743: proc () {.cdecl.}
    gtk_reserved744: proc () {.cdecl.}

type 
  IconLookupFlags* {.size: sizeof(cint), pure.} = enum 
    NO_SVG = 1 shl 0, FORCE_SVG = 1 shl 1, 
    USE_BUILTIN = 1 shl 2, 
    GENERIC_FALLBACK = 1 shl 3, 
    FORCE_SIZE = 1 shl 4, 
    FORCE_REGULAR = 1 shl 5, 
    FORCE_SYMBOLIC = 1 shl 6, 
    DIR_LTR = 1 shl 7, DIR_RTL = 1 shl 8
type 
  IconThemeError* {.size: sizeof(cint), pure.} = enum 
    NOT_FOUND, FAILED
proc icon_theme_error_quark*(): GQuark {.
    importc: "gtk_icon_theme_error_quark", libgtk.}
proc icon_theme_get_type*(): GType {.importc: "gtk_icon_theme_get_type", 
    libgtk.}
proc icon_theme_new*(): IconTheme {.importc: "gtk_icon_theme_new", 
    libgtk.}
proc icon_theme_get_default*(): IconTheme {.
    importc: "gtk_icon_theme_get_default", libgtk.}
proc icon_theme_get_for_screen*(screen: gdk3.Screen): IconTheme {.
    importc: "gtk_icon_theme_get_for_screen", libgtk.}
proc set_screen*(icon_theme: IconTheme; 
                                screen: gdk3.Screen) {.
    importc: "gtk_icon_theme_set_screen", libgtk.}
proc `screen=`*(icon_theme: IconTheme; 
                                screen: gdk3.Screen) {.
    importc: "gtk_icon_theme_set_screen", libgtk.}
proc set_search_path*(icon_theme: IconTheme; 
                                     path: var cstring; n_elements: gint) {.
    importc: "gtk_icon_theme_set_search_path", libgtk.}
proc `search_path=`*(icon_theme: IconTheme; 
                                     path: var cstring; n_elements: gint) {.
    importc: "gtk_icon_theme_set_search_path", libgtk.}
proc get_search_path*(icon_theme: IconTheme; 
                                     path: var cstringArray; 
                                     n_elements: var gint) {.
    importc: "gtk_icon_theme_get_search_path", libgtk.}
proc append_search_path*(icon_theme: IconTheme; 
    path: cstring) {.importc: "gtk_icon_theme_append_search_path", 
                       libgtk.}
proc prepend_search_path*(icon_theme: IconTheme; 
    path: cstring) {.importc: "gtk_icon_theme_prepend_search_path", 
                       libgtk.}
proc add_resource_path*(icon_theme: IconTheme; 
    path: cstring) {.importc: "gtk_icon_theme_add_resource_path", 
                       libgtk.}
proc set_custom_theme*(icon_theme: IconTheme; 
                                      theme_name: cstring) {.
    importc: "gtk_icon_theme_set_custom_theme", libgtk.}
proc `custom_theme=`*(icon_theme: IconTheme; 
                                      theme_name: cstring) {.
    importc: "gtk_icon_theme_set_custom_theme", libgtk.}
proc has_icon*(icon_theme: IconTheme; 
                              icon_name: cstring): gboolean {.
    importc: "gtk_icon_theme_has_icon", libgtk.}
proc get_icon_sizes*(icon_theme: IconTheme; 
                                    icon_name: cstring): ptr gint {.
    importc: "gtk_icon_theme_get_icon_sizes", libgtk.}
proc icon_sizes*(icon_theme: IconTheme; 
                                    icon_name: cstring): ptr gint {.
    importc: "gtk_icon_theme_get_icon_sizes", libgtk.}
proc lookup_icon*(icon_theme: IconTheme; 
                                 icon_name: cstring; size: gint; 
                                 flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_lookup_icon", libgtk.}
proc lookup_icon_for_scale*(icon_theme: IconTheme; 
    icon_name: cstring; size: gint; scale: gint; flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_lookup_icon_for_scale", libgtk.}
proc choose_icon*(icon_theme: IconTheme; 
                                 icon_names: var cstring; size: gint; 
                                 flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_choose_icon", libgtk.}
proc choose_icon_for_scale*(icon_theme: IconTheme; 
    icon_names: var cstring; size: gint; scale: gint; 
    flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_choose_icon_for_scale", libgtk.}
proc load_icon*(icon_theme: IconTheme; 
                               icon_name: cstring; size: gint; 
                               flags: IconLookupFlags; 
                               error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_theme_load_icon", libgtk.}
proc load_icon_for_scale*(icon_theme: IconTheme; 
    icon_name: cstring; size: gint; scale: gint; flags: IconLookupFlags; 
    error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_theme_load_icon_for_scale", libgtk.}
proc load_surface*(icon_theme: IconTheme; 
                                  icon_name: cstring; size: gint; 
                                  scale: gint; for_window: gdk3.Window; 
                                  flags: IconLookupFlags; 
                                  error: var glib.GError): cairo.Surface {.
    importc: "gtk_icon_theme_load_surface", libgtk.}
proc lookup_by_gicon*(icon_theme: IconTheme; 
                                     icon: gio.GIcon; size: gint; 
                                     flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_lookup_by_gicon", libgtk.}
proc lookup_by_gicon_for_scale*(icon_theme: IconTheme; 
    icon: gio.GIcon; size: gint; scale: gint; flags: IconLookupFlags): IconInfo {.
    importc: "gtk_icon_theme_lookup_by_gicon_for_scale", libgtk.}
proc list_icons*(icon_theme: IconTheme; 
                                context: cstring): glib.GList {.
    importc: "gtk_icon_theme_list_icons", libgtk.}
proc list_contexts*(icon_theme: IconTheme): glib.GList {.
    importc: "gtk_icon_theme_list_contexts", libgtk.}
proc get_example_icon_name*(icon_theme: IconTheme): cstring {.
    importc: "gtk_icon_theme_get_example_icon_name", libgtk.}
proc example_icon_name*(icon_theme: IconTheme): cstring {.
    importc: "gtk_icon_theme_get_example_icon_name", libgtk.}
proc rescan_if_needed*(icon_theme: IconTheme): gboolean {.
    importc: "gtk_icon_theme_rescan_if_needed", libgtk.}
proc icon_theme_add_builtin_icon*(icon_name: cstring; size: gint; 
                                      pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_icon_theme_add_builtin_icon", libgtk.}
proc icon_info_get_type*(): GType {.importc: "gtk_icon_info_get_type", 
    libgtk.}
proc copy*(icon_info: IconInfo): IconInfo {.
    importc: "gtk_icon_info_copy", libgtk.}
proc free*(icon_info: IconInfo) {.
    importc: "gtk_icon_info_free", libgtk.}
proc icon_info_new_for_pixbuf*(icon_theme: IconTheme; 
                                   pixbuf: gdk_pixbuf.GdkPixbuf): IconInfo {.
    importc: "gtk_icon_info_new_for_pixbuf", libgtk.}
proc get_base_size*(icon_info: IconInfo): gint {.
    importc: "gtk_icon_info_get_base_size", libgtk.}
proc base_size*(icon_info: IconInfo): gint {.
    importc: "gtk_icon_info_get_base_size", libgtk.}
proc get_base_scale*(icon_info: IconInfo): gint {.
    importc: "gtk_icon_info_get_base_scale", libgtk.}
proc base_scale*(icon_info: IconInfo): gint {.
    importc: "gtk_icon_info_get_base_scale", libgtk.}
proc get_filename*(icon_info: IconInfo): cstring {.
    importc: "gtk_icon_info_get_filename", libgtk.}
proc filename*(icon_info: IconInfo): cstring {.
    importc: "gtk_icon_info_get_filename", libgtk.}
proc get_builtin_pixbuf*(icon_info: IconInfo): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_get_builtin_pixbuf", libgtk.}
proc builtin_pixbuf*(icon_info: IconInfo): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_get_builtin_pixbuf", libgtk.}
proc is_symbolic*(icon_info: IconInfo): gboolean {.
    importc: "gtk_icon_info_is_symbolic", libgtk.}
proc load_icon*(icon_info: IconInfo; 
                              error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_icon", libgtk.}
proc load_surface*(icon_info: IconInfo; 
                                 for_window: gdk3.Window; 
                                 error: var glib.GError): cairo.Surface {.
    importc: "gtk_icon_info_load_surface", libgtk.}
proc load_icon_async*(icon_info: IconInfo; 
                                    cancellable: gio.GCancellable; 
                                    callback: GAsyncReadyCallback; 
                                    user_data: gpointer) {.
    importc: "gtk_icon_info_load_icon_async", libgtk.}
proc load_icon_finish*(icon_info: IconInfo; 
                                     res: gio.GAsyncResult; 
                                     error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_icon_finish", libgtk.}
proc load_symbolic*(icon_info: IconInfo; fg: gdk3.RGBA; 
                                  success_color: gdk3.RGBA; 
                                  warning_color: gdk3.RGBA; 
                                  error_color: gdk3.RGBA; 
                                  was_symbolic: var gboolean; 
                                  error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_symbolic", libgtk.}
proc load_symbolic_async*(icon_info: IconInfo; 
    fg: gdk3.RGBA; success_color: gdk3.RGBA; warning_color: gdk3.RGBA; 
    error_color: gdk3.RGBA; cancellable: gio.GCancellable; 
    callback: GAsyncReadyCallback; user_data: gpointer) {.
    importc: "gtk_icon_info_load_symbolic_async", libgtk.}
proc load_symbolic_finish*(icon_info: IconInfo; 
    res: gio.GAsyncResult; was_symbolic: var gboolean; error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_symbolic_finish", libgtk.}
proc load_symbolic_for_context*(icon_info: IconInfo; 
    context: StyleContext; was_symbolic: var gboolean; 
    error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_symbolic_for_context", libgtk.}
proc load_symbolic_for_context_async*(
    icon_info: IconInfo; context: StyleContext; 
    cancellable: gio.GCancellable; callback: GAsyncReadyCallback; 
    user_data: gpointer) {.importc: "gtk_icon_info_load_symbolic_for_context_async", 
                           libgtk.}
proc load_symbolic_for_context_finish*(
    icon_info: IconInfo; res: gio.GAsyncResult; 
    was_symbolic: var gboolean; error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_symbolic_for_context_finish", libgtk.}
proc load_symbolic_for_style*(icon_info: IconInfo; 
    style: Style; state: StateType; was_symbolic: var gboolean; 
    error: var glib.GError): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_icon_info_load_symbolic_for_style", libgtk.}
proc set_raw_coordinates*(icon_info: IconInfo; 
    raw_coordinates: gboolean) {.importc: "gtk_icon_info_set_raw_coordinates", 
                                 libgtk.}
proc `raw_coordinates=`*(icon_info: IconInfo; 
    raw_coordinates: gboolean) {.importc: "gtk_icon_info_set_raw_coordinates", 
                                 libgtk.}
proc get_embedded_rect*(icon_info: IconInfo; 
                                      rectangle: gdk3.Rectangle): gboolean {.
    importc: "gtk_icon_info_get_embedded_rect", libgtk.}
proc embedded_rect*(icon_info: IconInfo; 
                                      rectangle: gdk3.Rectangle): gboolean {.
    importc: "gtk_icon_info_get_embedded_rect", libgtk.}
proc get_attach_points*(icon_info: IconInfo; 
                                      points: var gdk3.Point; 
                                      n_points: var gint): gboolean {.
    importc: "gtk_icon_info_get_attach_points", libgtk.}
proc attach_points*(icon_info: IconInfo; 
                                      points: var gdk3.Point; 
                                      n_points: var gint): gboolean {.
    importc: "gtk_icon_info_get_attach_points", libgtk.}
proc get_display_name*(icon_info: IconInfo): cstring {.
    importc: "gtk_icon_info_get_display_name", libgtk.}
proc display_name*(icon_info: IconInfo): cstring {.
    importc: "gtk_icon_info_get_display_name", libgtk.}

template gtk_tooltip*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tooltip_get_type(), TooltipObj))

template gtk_is_tooltip*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tooltip_get_type()))

proc tooltip_get_type*(): GType {.importc: "gtk_tooltip_get_type", 
                                      libgtk.}
proc set_markup*(tooltip: Tooltip; markup: cstring) {.
    importc: "gtk_tooltip_set_markup", libgtk.}
proc `markup=`*(tooltip: Tooltip; markup: cstring) {.
    importc: "gtk_tooltip_set_markup", libgtk.}
proc set_text*(tooltip: Tooltip; text: cstring) {.
    importc: "gtk_tooltip_set_text", libgtk.}
proc `text=`*(tooltip: Tooltip; text: cstring) {.
    importc: "gtk_tooltip_set_text", libgtk.}
proc set_icon*(tooltip: Tooltip; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_tooltip_set_icon", libgtk.}
proc `icon=`*(tooltip: Tooltip; pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_tooltip_set_icon", libgtk.}
proc set_icon_from_stock*(tooltip: Tooltip; 
                                      stock_id: cstring; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_stock", libgtk.}
proc `icon_from_stock=`*(tooltip: Tooltip; 
                                      stock_id: cstring; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_stock", libgtk.}
proc set_icon_from_icon_name*(tooltip: Tooltip; 
    icon_name: cstring; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_icon_name", libgtk.}
proc `icon_from_icon_name=`*(tooltip: Tooltip; 
    icon_name: cstring; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_icon_name", libgtk.}
proc set_icon_from_gicon*(tooltip: Tooltip; 
                                      gicon: gio.GIcon; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_gicon", libgtk.}
proc `icon_from_gicon=`*(tooltip: Tooltip; 
                                      gicon: gio.GIcon; size: IconSize) {.
    importc: "gtk_tooltip_set_icon_from_gicon", libgtk.}
proc set_custom*(tooltip: Tooltip; 
                             custom_widget: Widget) {.
    importc: "gtk_tooltip_set_custom", libgtk.}
proc `custom=`*(tooltip: Tooltip; 
                             custom_widget: Widget) {.
    importc: "gtk_tooltip_set_custom", libgtk.}
proc set_tip_area*(tooltip: Tooltip; rect: gdk3.Rectangle) {.
    importc: "gtk_tooltip_set_tip_area", libgtk.}
proc `tip_area=`*(tooltip: Tooltip; rect: gdk3.Rectangle) {.
    importc: "gtk_tooltip_set_tip_area", libgtk.}
proc tooltip_trigger_tooltip_query*(display: gdk3.Display) {.
    importc: "gtk_tooltip_trigger_tooltip_query", libgtk.}

template gtk_icon_view*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, icon_view_get_type(), IconViewObj))

template gtk_icon_view_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, icon_view_get_type(), IconViewClassObj))

template gtk_is_icon_view*(obj: expr): expr = 
  (g_type_check_instance_type(obj, icon_view_get_type()))

template gtk_is_icon_view_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, icon_view_get_type()))

template gtk_icon_view_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, icon_view_get_type(), IconViewClassObj))

type 
  IconViewPrivateObj = object 
  
type 
  IconViewForeachFunc* = proc (icon_view: IconView; 
                                  path: TreePath; data: gpointer) {.cdecl.}
  IconViewDropPosition* {.size: sizeof(cint), pure.} = enum 
    NO_DROP, INTO, LEFT, 
    RIGHT, ABOVE, 
    BELOW
  IconView* =  ptr IconViewObj
  IconViewPtr* = ptr IconViewObj
  IconViewObj*{.final.} = object of ContainerObj
    priv75: ptr IconViewPrivateObj

type 
  IconViewClass* =  ptr IconViewClassObj
  IconViewClassPtr* = ptr IconViewClassObj
  IconViewClassObj*{.final.} = object of ContainerClassObj
    item_activated*: proc (icon_view: IconView; path: TreePath) {.cdecl.}
    selection_changed*: proc (icon_view: IconView) {.cdecl.}
    select_all*: proc (icon_view: IconView) {.cdecl.}
    unselect_all*: proc (icon_view: IconView) {.cdecl.}
    select_cursor_item*: proc (icon_view: IconView) {.cdecl.}
    toggle_cursor_item*: proc (icon_view: IconView) {.cdecl.}
    move_cursor*: proc (icon_view: IconView; step: MovementStep; 
                        count: gint): gboolean {.cdecl.}
    activate_cursor_item*: proc (icon_view: IconView): gboolean {.cdecl.}
    gtk_reserved751: proc () {.cdecl.}
    gtk_reserved752: proc () {.cdecl.}
    gtk_reserved753: proc () {.cdecl.}
    gtk_reserved754: proc () {.cdecl.}

proc icon_view_get_type*(): GType {.importc: "gtk_icon_view_get_type", 
    libgtk.}
proc icon_view_new*(): IconView {.importc: "gtk_icon_view_new", 
    libgtk.}
proc icon_view_new_with_area*(area: CellArea): IconView {.
    importc: "gtk_icon_view_new_with_area", libgtk.}
proc icon_view_new_with_model*(model: TreeModel): IconView {.
    importc: "gtk_icon_view_new_with_model", libgtk.}
proc set_model*(icon_view: IconView; 
                              model: TreeModel) {.
    importc: "gtk_icon_view_set_model", libgtk.}
proc `model=`*(icon_view: IconView; 
                              model: TreeModel) {.
    importc: "gtk_icon_view_set_model", libgtk.}
proc get_model*(icon_view: IconView): TreeModel {.
    importc: "gtk_icon_view_get_model", libgtk.}
proc model*(icon_view: IconView): TreeModel {.
    importc: "gtk_icon_view_get_model", libgtk.}
proc set_text_column*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_text_column", libgtk.}
proc `text_column=`*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_text_column", libgtk.}
proc get_text_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_text_column", libgtk.}
proc text_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_text_column", libgtk.}
proc set_markup_column*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_markup_column", libgtk.}
proc `markup_column=`*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_markup_column", libgtk.}
proc get_markup_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_markup_column", libgtk.}
proc markup_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_markup_column", libgtk.}
proc set_pixbuf_column*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_pixbuf_column", libgtk.}
proc `pixbuf_column=`*(icon_view: IconView; column: gint) {.
    importc: "gtk_icon_view_set_pixbuf_column", libgtk.}
proc get_pixbuf_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_pixbuf_column", libgtk.}
proc pixbuf_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_pixbuf_column", libgtk.}
proc set_item_orientation*(icon_view: IconView; 
    orientation: Orientation) {.importc: "gtk_icon_view_set_item_orientation", 
                                   libgtk.}
proc `item_orientation=`*(icon_view: IconView; 
    orientation: Orientation) {.importc: "gtk_icon_view_set_item_orientation", 
                                   libgtk.}
proc get_item_orientation*(icon_view: IconView): Orientation {.
    importc: "gtk_icon_view_get_item_orientation", libgtk.}
proc item_orientation*(icon_view: IconView): Orientation {.
    importc: "gtk_icon_view_get_item_orientation", libgtk.}
proc set_columns*(icon_view: IconView; columns: gint) {.
    importc: "gtk_icon_view_set_columns", libgtk.}
proc `columns=`*(icon_view: IconView; columns: gint) {.
    importc: "gtk_icon_view_set_columns", libgtk.}
proc get_columns*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_columns", libgtk.}
proc columns*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_columns", libgtk.}
proc set_item_width*(icon_view: IconView; 
                                   item_width: gint) {.
    importc: "gtk_icon_view_set_item_width", libgtk.}
proc `item_width=`*(icon_view: IconView; 
                                   item_width: gint) {.
    importc: "gtk_icon_view_set_item_width", libgtk.}
proc get_item_width*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_item_width", libgtk.}
proc item_width*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_item_width", libgtk.}
proc set_spacing*(icon_view: IconView; spacing: gint) {.
    importc: "gtk_icon_view_set_spacing", libgtk.}
proc `spacing=`*(icon_view: IconView; spacing: gint) {.
    importc: "gtk_icon_view_set_spacing", libgtk.}
proc get_spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_spacing", libgtk.}
proc spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_spacing", libgtk.}
proc set_row_spacing*(icon_view: IconView; 
                                    row_spacing: gint) {.
    importc: "gtk_icon_view_set_row_spacing", libgtk.}
proc `row_spacing=`*(icon_view: IconView; 
                                    row_spacing: gint) {.
    importc: "gtk_icon_view_set_row_spacing", libgtk.}
proc get_row_spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_row_spacing", libgtk.}
proc row_spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_row_spacing", libgtk.}
proc set_column_spacing*(icon_view: IconView; 
    column_spacing: gint) {.importc: "gtk_icon_view_set_column_spacing", 
                            libgtk.}
proc `column_spacing=`*(icon_view: IconView; 
    column_spacing: gint) {.importc: "gtk_icon_view_set_column_spacing", 
                            libgtk.}
proc get_column_spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_column_spacing", libgtk.}
proc column_spacing*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_column_spacing", libgtk.}
proc set_margin*(icon_view: IconView; margin: gint) {.
    importc: "gtk_icon_view_set_margin", libgtk.}
proc `margin=`*(icon_view: IconView; margin: gint) {.
    importc: "gtk_icon_view_set_margin", libgtk.}
proc get_margin*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_margin", libgtk.}
proc margin*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_margin", libgtk.}
proc set_item_padding*(icon_view: IconView; 
                                     item_padding: gint) {.
    importc: "gtk_icon_view_set_item_padding", libgtk.}
proc `item_padding=`*(icon_view: IconView; 
                                     item_padding: gint) {.
    importc: "gtk_icon_view_set_item_padding", libgtk.}
proc get_item_padding*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_item_padding", libgtk.}
proc item_padding*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_item_padding", libgtk.}
proc get_path_at_pos*(icon_view: IconView; x: gint; 
                                    y: gint): TreePath {.
    importc: "gtk_icon_view_get_path_at_pos", libgtk.}
proc path_at_pos*(icon_view: IconView; x: gint; 
                                    y: gint): TreePath {.
    importc: "gtk_icon_view_get_path_at_pos", libgtk.}
proc get_item_at_pos*(icon_view: IconView; x: gint; 
                                    y: gint; path: var TreePath; 
                                    cell: var CellRenderer): gboolean {.
    importc: "gtk_icon_view_get_item_at_pos", libgtk.}
proc item_at_pos*(icon_view: IconView; x: gint; 
                                    y: gint; path: var TreePath; 
                                    cell: var CellRenderer): gboolean {.
    importc: "gtk_icon_view_get_item_at_pos", libgtk.}
proc get_visible_range*(icon_view: IconView; 
                                      start_path: var TreePath; 
                                      end_path: var TreePath): gboolean {.
    importc: "gtk_icon_view_get_visible_range", libgtk.}
proc visible_range*(icon_view: IconView; 
                                      start_path: var TreePath; 
                                      end_path: var TreePath): gboolean {.
    importc: "gtk_icon_view_get_visible_range", libgtk.}
proc set_activate_on_single_click*(icon_view: IconView; 
    single: gboolean) {.importc: "gtk_icon_view_set_activate_on_single_click", 
                        libgtk.}
proc `activate_on_single_click=`*(icon_view: IconView; 
    single: gboolean) {.importc: "gtk_icon_view_set_activate_on_single_click", 
                        libgtk.}
proc get_activate_on_single_click*(icon_view: IconView): gboolean {.
    importc: "gtk_icon_view_get_activate_on_single_click", libgtk.}
proc activate_on_single_click*(icon_view: IconView): gboolean {.
    importc: "gtk_icon_view_get_activate_on_single_click", libgtk.}
proc selected_foreach*(icon_view: IconView; 
                                     `func`: IconViewForeachFunc; 
                                     data: gpointer) {.
    importc: "gtk_icon_view_selected_foreach", libgtk.}
proc set_selection_mode*(icon_view: IconView; 
    mode: SelectionMode) {.importc: "gtk_icon_view_set_selection_mode", 
                              libgtk.}
proc `selection_mode=`*(icon_view: IconView; 
    mode: SelectionMode) {.importc: "gtk_icon_view_set_selection_mode", 
                              libgtk.}
proc get_selection_mode*(icon_view: IconView): SelectionMode {.
    importc: "gtk_icon_view_get_selection_mode", libgtk.}
proc selection_mode*(icon_view: IconView): SelectionMode {.
    importc: "gtk_icon_view_get_selection_mode", libgtk.}
proc select_path*(icon_view: IconView; 
                                path: TreePath) {.
    importc: "gtk_icon_view_select_path", libgtk.}
proc unselect_path*(icon_view: IconView; 
                                  path: TreePath) {.
    importc: "gtk_icon_view_unselect_path", libgtk.}
proc path_is_selected*(icon_view: IconView; 
                                     path: TreePath): gboolean {.
    importc: "gtk_icon_view_path_is_selected", libgtk.}
proc get_item_row*(icon_view: IconView; 
                                 path: TreePath): gint {.
    importc: "gtk_icon_view_get_item_row", libgtk.}
proc item_row*(icon_view: IconView; 
                                 path: TreePath): gint {.
    importc: "gtk_icon_view_get_item_row", libgtk.}
proc get_item_column*(icon_view: IconView; 
                                    path: TreePath): gint {.
    importc: "gtk_icon_view_get_item_column", libgtk.}
proc item_column*(icon_view: IconView; 
                                    path: TreePath): gint {.
    importc: "gtk_icon_view_get_item_column", libgtk.}
proc get_selected_items*(icon_view: IconView): glib.GList {.
    importc: "gtk_icon_view_get_selected_items", libgtk.}
proc selected_items*(icon_view: IconView): glib.GList {.
    importc: "gtk_icon_view_get_selected_items", libgtk.}
proc select_all*(icon_view: IconView) {.
    importc: "gtk_icon_view_select_all", libgtk.}
proc unselect_all*(icon_view: IconView) {.
    importc: "gtk_icon_view_unselect_all", libgtk.}
proc item_activated*(icon_view: IconView; 
                                   path: TreePath) {.
    importc: "gtk_icon_view_item_activated", libgtk.}
proc set_cursor*(icon_view: IconView; 
                               path: TreePath; 
                               cell: CellRenderer; 
                               start_editing: gboolean) {.
    importc: "gtk_icon_view_set_cursor", libgtk.}
proc `cursor=`*(icon_view: IconView; 
                               path: TreePath; 
                               cell: CellRenderer; 
                               start_editing: gboolean) {.
    importc: "gtk_icon_view_set_cursor", libgtk.}
proc get_cursor*(icon_view: IconView; 
                               path: var TreePath; 
                               cell: var CellRenderer): gboolean {.
    importc: "gtk_icon_view_get_cursor", libgtk.}
proc cursor*(icon_view: IconView; 
                               path: var TreePath; 
                               cell: var CellRenderer): gboolean {.
    importc: "gtk_icon_view_get_cursor", libgtk.}
proc scroll_to_path*(icon_view: IconView; 
                                   path: TreePath; use_align: gboolean; 
                                   row_align: gfloat; col_align: gfloat) {.
    importc: "gtk_icon_view_scroll_to_path", libgtk.}
proc enable_model_drag_source*(icon_view: IconView; 
    start_button_mask: gdk3.ModifierType; targets: TargetEntry; 
    n_targets: gint; actions: gdk3.DragAction) {.
    importc: "gtk_icon_view_enable_model_drag_source", libgtk.}
proc enable_model_drag_dest*(icon_view: IconView; 
    targets: TargetEntry; n_targets: gint; actions: gdk3.DragAction) {.
    importc: "gtk_icon_view_enable_model_drag_dest", libgtk.}
proc unset_model_drag_source*(icon_view: IconView) {.
    importc: "gtk_icon_view_unset_model_drag_source", libgtk.}
proc unset_model_drag_dest*(icon_view: IconView) {.
    importc: "gtk_icon_view_unset_model_drag_dest", libgtk.}
proc set_reorderable*(icon_view: IconView; 
                                    reorderable: gboolean) {.
    importc: "gtk_icon_view_set_reorderable", libgtk.}
proc `reorderable=`*(icon_view: IconView; 
                                    reorderable: gboolean) {.
    importc: "gtk_icon_view_set_reorderable", libgtk.}
proc get_reorderable*(icon_view: IconView): gboolean {.
    importc: "gtk_icon_view_get_reorderable", libgtk.}
proc reorderable*(icon_view: IconView): gboolean {.
    importc: "gtk_icon_view_get_reorderable", libgtk.}
proc set_drag_dest_item*(icon_view: IconView; 
    path: TreePath; pos: IconViewDropPosition) {.
    importc: "gtk_icon_view_set_drag_dest_item", libgtk.}
proc `drag_dest_item=`*(icon_view: IconView; 
    path: TreePath; pos: IconViewDropPosition) {.
    importc: "gtk_icon_view_set_drag_dest_item", libgtk.}
proc get_drag_dest_item*(icon_view: IconView; 
    path: var TreePath; pos: ptr IconViewDropPosition) {.
    importc: "gtk_icon_view_get_drag_dest_item", libgtk.}
proc get_dest_item_at_pos*(icon_view: IconView; 
    drag_x: gint; drag_y: gint; path: var TreePath; 
    pos: ptr IconViewDropPosition): gboolean {.
    importc: "gtk_icon_view_get_dest_item_at_pos", libgtk.}
proc dest_item_at_pos*(icon_view: IconView; 
    drag_x: gint; drag_y: gint; path: var TreePath; 
    pos: ptr IconViewDropPosition): gboolean {.
    importc: "gtk_icon_view_get_dest_item_at_pos", libgtk.}
proc create_drag_icon*(icon_view: IconView; 
                                     path: TreePath): cairo.Surface {.
    importc: "gtk_icon_view_create_drag_icon", libgtk.}
proc convert_widget_to_bin_window_coords*(
    icon_view: IconView; wx: gint; wy: gint; bx: var gint; by: var gint) {.
    importc: "gtk_icon_view_convert_widget_to_bin_window_coords", libgtk.}
proc get_cell_rect*(icon_view: IconView; 
                                  path: TreePath; 
                                  cell: CellRenderer; 
                                  rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_icon_view_get_cell_rect", libgtk.}
proc cell_rect*(icon_view: IconView; 
                                  path: TreePath; 
                                  cell: CellRenderer; 
                                  rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_icon_view_get_cell_rect", libgtk.}
proc set_tooltip_item*(icon_view: IconView; 
                                     tooltip: Tooltip; 
                                     path: TreePath) {.
    importc: "gtk_icon_view_set_tooltip_item", libgtk.}
proc `tooltip_item=`*(icon_view: IconView; 
                                     tooltip: Tooltip; 
                                     path: TreePath) {.
    importc: "gtk_icon_view_set_tooltip_item", libgtk.}
proc set_tooltip_cell*(icon_view: IconView; 
                                     tooltip: Tooltip; 
                                     path: TreePath; 
                                     cell: CellRenderer) {.
    importc: "gtk_icon_view_set_tooltip_cell", libgtk.}
proc `tooltip_cell=`*(icon_view: IconView; 
                                     tooltip: Tooltip; 
                                     path: TreePath; 
                                     cell: CellRenderer) {.
    importc: "gtk_icon_view_set_tooltip_cell", libgtk.}
proc get_tooltip_context*(icon_view: IconView; 
    x: var gint; y: var gint; keyboard_tip: gboolean; 
    model: var TreeModel; path: var TreePath; 
    iter: TreeIter): gboolean {.
    importc: "gtk_icon_view_get_tooltip_context", libgtk.}
proc tooltip_context*(icon_view: IconView; 
    x: var gint; y: var gint; keyboard_tip: gboolean; 
    model: var TreeModel; path: var TreePath; 
    iter: TreeIter): gboolean {.
    importc: "gtk_icon_view_get_tooltip_context", libgtk.}
proc set_tooltip_column*(icon_view: IconView; 
    column: gint) {.importc: "gtk_icon_view_set_tooltip_column", libgtk.}
proc `tooltip_column=`*(icon_view: IconView; 
    column: gint) {.importc: "gtk_icon_view_set_tooltip_column", libgtk.}
proc get_tooltip_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_tooltip_column", libgtk.}
proc tooltip_column*(icon_view: IconView): gint {.
    importc: "gtk_icon_view_get_tooltip_column", libgtk.}

type 
  IMContextInfo* =  ptr IMContextInfoObj
  IMContextInfoPtr* = ptr IMContextInfoObj
  IMContextInfoObj* = object 
    context_id*: cstring
    context_name*: cstring
    domain*: cstring
    domain_dirname*: cstring
    default_locales*: cstring

const 
  MAX_COMPOSE_LEN* = 7
template gtk_im_context_simple*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, im_context_simple_get_type(), 
                              IMContextSimpleObj))

template gtk_im_context_simple_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, im_context_simple_get_type(), 
                           IMContextSimpleClassObj))

template gtk_is_im_context_simple*(obj: expr): expr = 
  (g_type_check_instance_type(obj, im_context_simple_get_type()))

template gtk_is_im_context_simple_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, im_context_simple_get_type()))

template gtk_im_context_simple_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, im_context_simple_get_type(), 
                             IMContextSimpleClassObj))

type 
  IMContextSimplePrivateObj = object 
  
type 
  IMContextSimple* =  ptr IMContextSimpleObj
  IMContextSimplePtr* = ptr IMContextSimpleObj
  IMContextSimpleObj*{.final.} = object of IMContextObj
    priv76: ptr IMContextSimplePrivateObj

type 
  IMContextSimpleClass* =  ptr IMContextSimpleClassObj
  IMContextSimpleClassPtr* = ptr IMContextSimpleClassObj
  IMContextSimpleClassObj*{.final.} = object of IMContextClassObj

proc im_context_simple_get_type*(): GType {.
    importc: "gtk_im_context_simple_get_type", libgtk.}
proc im_context_simple_new*(): IMContext {.
    importc: "gtk_im_context_simple_new", libgtk.}
proc add_table*(context_simple: IMContextSimple; 
                                      data: var guint16; max_seq_len: gint; 
                                      n_seqs: gint) {.
    importc: "gtk_im_context_simple_add_table", libgtk.}

template gtk_im_multicontext*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, im_multicontext_get_type(), 
                              IMMulticontextObj))

template gtk_im_multicontext_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, im_multicontext_get_type(), 
                           IMMulticontextClassObj))

template gtk_is_im_multicontext*(obj: expr): expr = 
  (g_type_check_instance_type(obj, im_multicontext_get_type()))

template gtk_is_im_multicontext_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, im_multicontext_get_type()))

template gtk_im_multicontext_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, im_multicontext_get_type(), 
                             IMMulticontextClassObj))

type 
  IMMulticontextPrivateObj = object 
  
type 
  IMMulticontext* =  ptr IMMulticontextObj
  IMMulticontextPtr* = ptr IMMulticontextObj
  IMMulticontextObj*{.final.} = object of IMContextObj
    priv77: ptr IMMulticontextPrivateObj

type 
  IMMulticontextClass* =  ptr IMMulticontextClassObj
  IMMulticontextClassPtr* = ptr IMMulticontextClassObj
  IMMulticontextClassObj*{.final.} = object of IMContextClassObj
    gtk_reserved761: proc () {.cdecl.}
    gtk_reserved762: proc () {.cdecl.}
    gtk_reserved763: proc () {.cdecl.}
    gtk_reserved764: proc () {.cdecl.}

proc im_multicontext_get_type*(): GType {.
    importc: "gtk_im_multicontext_get_type", libgtk.}
proc im_multicontext_new*(): IMContext {.
    importc: "gtk_im_multicontext_new", libgtk.}
proc append_menuitems*(context: IMMulticontext; 
    menushell: MenuShell) {.importc: "gtk_im_multicontext_append_menuitems", 
                                   libgtk.}
proc get_context_id*(context: IMMulticontext): cstring {.
    importc: "gtk_im_multicontext_get_context_id", libgtk.}
proc context_id*(context: IMMulticontext): cstring {.
    importc: "gtk_im_multicontext_get_context_id", libgtk.}
proc set_context_id*(context: IMMulticontext; 
    context_id: cstring) {.importc: "gtk_im_multicontext_set_context_id", 
                           libgtk.}
proc `context_id=`*(context: IMMulticontext; 
    context_id: cstring) {.importc: "gtk_im_multicontext_set_context_id", 
                           libgtk.}

template gtk_info_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, info_bar_get_type(), InfoBarObj))

template gtk_info_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, info_bar_get_type(), InfoBarClassObj))

template gtk_is_info_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, info_bar_get_type()))

template gtk_is_info_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, info_bar_get_type()))

template gtk_info_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, info_bar_get_type(), InfoBarClassObj))

type 
  InfoBarPrivateObj = object 
  
type 
  InfoBar* =  ptr InfoBarObj
  InfoBarPtr* = ptr InfoBarObj
  InfoBarObj*{.final.} = object of BoxObj
    priv78: ptr InfoBarPrivateObj

type 
  InfoBarClass* =  ptr InfoBarClassObj
  InfoBarClassPtr* = ptr InfoBarClassObj
  InfoBarClassObj*{.final.} = object of BoxClassObj
    response*: proc (info_bar: InfoBar; response_id: gint) {.cdecl.}
    close*: proc (info_bar: InfoBar) {.cdecl.}
    gtk_reserved771: proc () {.cdecl.}
    gtk_reserved772: proc () {.cdecl.}
    gtk_reserved773: proc () {.cdecl.}
    gtk_reserved774: proc () {.cdecl.}

proc info_bar_get_type*(): GType {.importc: "gtk_info_bar_get_type", 
    libgtk.}
proc info_bar_new*(): InfoBar {.importc: "gtk_info_bar_new", 
    libgtk.}
proc info_bar_new_with_buttons*(first_button_text: cstring): InfoBar {.
    varargs, importc: "gtk_info_bar_new_with_buttons", libgtk.}
proc get_action_area*(info_bar: InfoBar): Widget {.
    importc: "gtk_info_bar_get_action_area", libgtk.}
proc action_area*(info_bar: InfoBar): Widget {.
    importc: "gtk_info_bar_get_action_area", libgtk.}
proc get_content_area*(info_bar: InfoBar): Widget {.
    importc: "gtk_info_bar_get_content_area", libgtk.}
proc content_area*(info_bar: InfoBar): Widget {.
    importc: "gtk_info_bar_get_content_area", libgtk.}
proc add_action_widget*(info_bar: InfoBar; 
                                     child: Widget; response_id: gint) {.
    importc: "gtk_info_bar_add_action_widget", libgtk.}
proc add_button*(info_bar: InfoBar; 
                              button_text: cstring; response_id: gint): Button {.
    importc: "gtk_info_bar_add_button", libgtk.}
proc add_buttons*(info_bar: InfoBar; 
                               first_button_text: cstring) {.varargs, 
    importc: "gtk_info_bar_add_buttons", libgtk.}
proc set_response_sensitive*(info_bar: InfoBar; 
    response_id: gint; setting: gboolean) {.
    importc: "gtk_info_bar_set_response_sensitive", libgtk.}
proc `response_sensitive=`*(info_bar: InfoBar; 
    response_id: gint; setting: gboolean) {.
    importc: "gtk_info_bar_set_response_sensitive", libgtk.}
proc set_default_response*(info_bar: InfoBar; 
    response_id: gint) {.importc: "gtk_info_bar_set_default_response", 
                         libgtk.}
proc `default_response=`*(info_bar: InfoBar; 
    response_id: gint) {.importc: "gtk_info_bar_set_default_response", 
                         libgtk.}
proc response*(info_bar: InfoBar; response_id: gint) {.
    importc: "gtk_info_bar_response", libgtk.}
proc set_message_type*(info_bar: InfoBar; 
                                    message_type: MessageType) {.
    importc: "gtk_info_bar_set_message_type", libgtk.}
proc `message_type=`*(info_bar: InfoBar; 
                                    message_type: MessageType) {.
    importc: "gtk_info_bar_set_message_type", libgtk.}
proc get_message_type*(info_bar: InfoBar): MessageType {.
    importc: "gtk_info_bar_get_message_type", libgtk.}
proc message_type*(info_bar: InfoBar): MessageType {.
    importc: "gtk_info_bar_get_message_type", libgtk.}
proc set_show_close_button*(info_bar: InfoBar; 
    setting: gboolean) {.importc: "gtk_info_bar_set_show_close_button", 
                         libgtk.}
proc `show_close_button=`*(info_bar: InfoBar; 
    setting: gboolean) {.importc: "gtk_info_bar_set_show_close_button", 
                         libgtk.}
proc get_show_close_button*(info_bar: InfoBar): gboolean {.
    importc: "gtk_info_bar_get_show_close_button", libgtk.}
proc show_close_button*(info_bar: InfoBar): gboolean {.
    importc: "gtk_info_bar_get_show_close_button", libgtk.}

template gtk_invisible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, invisible_get_type(), InvisibleObj))

template gtk_invisible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, invisible_get_type(), InvisibleClassObj))

template gtk_is_invisible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, invisible_get_type()))

template gtk_is_invisible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, invisible_get_type()))

template gtk_invisible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, invisible_get_type(), InvisibleClassObj))

type 
  InvisiblePrivateObj = object 
  
type 
  Invisible* =  ptr InvisibleObj
  InvisiblePtr* = ptr InvisibleObj
  InvisibleObj*{.final.} = object of WidgetObj
    priv79: ptr InvisiblePrivateObj

type 
  InvisibleClass* =  ptr InvisibleClassObj
  InvisibleClassPtr* = ptr InvisibleClassObj
  InvisibleClassObj*{.final.} = object of WidgetClassObj
    gtk_reserved781: proc () {.cdecl.}
    gtk_reserved782: proc () {.cdecl.}
    gtk_reserved783: proc () {.cdecl.}
    gtk_reserved784: proc () {.cdecl.}

proc invisible_get_type*(): GType {.importc: "gtk_invisible_get_type", 
    libgtk.}
proc invisible_new*(): Invisible {.importc: "gtk_invisible_new", 
    libgtk.}
proc invisible_new_for_screen*(screen: gdk3.Screen): Invisible {.
    importc: "gtk_invisible_new_for_screen", libgtk.}
proc set_screen*(invisible: Invisible; 
                               screen: gdk3.Screen) {.
    importc: "gtk_invisible_set_screen", libgtk.}
proc `screen=`*(invisible: Invisible; 
                               screen: gdk3.Screen) {.
    importc: "gtk_invisible_set_screen", libgtk.}
proc get_screen*(invisible: Invisible): gdk3.Screen {.
    importc: "gtk_invisible_get_screen", libgtk.}
proc screen*(invisible: Invisible): gdk3.Screen {.
    importc: "gtk_invisible_get_screen", libgtk.}

template gtk_layout*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, layout_get_type(), LayoutObj))

template gtk_layout_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, layout_get_type(), LayoutClassObj))

template gtk_is_layout*(obj: expr): expr = 
  (g_type_check_instance_type(obj, layout_get_type()))

template gtk_is_layout_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, layout_get_type()))

template gtk_layout_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, layout_get_type(), LayoutClassObj))

type 
  LayoutPrivateObj = object 
  
type 
  Layout* =  ptr LayoutObj
  LayoutPtr* = ptr LayoutObj
  LayoutObj*{.final.} = object of ContainerObj
    priv80: ptr LayoutPrivateObj

type 
  LayoutClass* =  ptr LayoutClassObj
  LayoutClassPtr* = ptr LayoutClassObj
  LayoutClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved791: proc () {.cdecl.}
    gtk_reserved792: proc () {.cdecl.}
    gtk_reserved793: proc () {.cdecl.}
    gtk_reserved794: proc () {.cdecl.}

proc layout_get_type*(): GType {.importc: "gtk_layout_get_type", 
                                     libgtk.}
proc layout_new*(hadjustment: Adjustment; 
                     vadjustment: Adjustment): Layout {.
    importc: "gtk_layout_new", libgtk.}
proc get_bin_window*(layout: Layout): gdk3.Window {.
    importc: "gtk_layout_get_bin_window", libgtk.}
proc bin_window*(layout: Layout): gdk3.Window {.
    importc: "gtk_layout_get_bin_window", libgtk.}
proc put*(layout: Layout; child_widget: Widget; 
                     x: gint; y: gint) {.importc: "gtk_layout_put", 
    libgtk.}
proc move*(layout: Layout; child_widget: Widget; 
                      x: gint; y: gint) {.importc: "gtk_layout_move", 
    libgtk.}
proc set_size*(layout: Layout; width: guint; height: guint) {.
    importc: "gtk_layout_set_size", libgtk.}
proc `size=`*(layout: Layout; width: guint; height: guint) {.
    importc: "gtk_layout_set_size", libgtk.}
proc get_size*(layout: Layout; width: var guint; 
                          height: var guint) {.importc: "gtk_layout_get_size", 
    libgtk.}
proc get_hadjustment*(layout: Layout): Adjustment {.
    importc: "gtk_layout_get_hadjustment", libgtk.}
proc hadjustment*(layout: Layout): Adjustment {.
    importc: "gtk_layout_get_hadjustment", libgtk.}
proc get_vadjustment*(layout: Layout): Adjustment {.
    importc: "gtk_layout_get_vadjustment", libgtk.}
proc vadjustment*(layout: Layout): Adjustment {.
    importc: "gtk_layout_get_vadjustment", libgtk.}
proc set_hadjustment*(layout: Layout; 
                                 adjustment: Adjustment) {.
    importc: "gtk_layout_set_hadjustment", libgtk.}
proc `hadjustment=`*(layout: Layout; 
                                 adjustment: Adjustment) {.
    importc: "gtk_layout_set_hadjustment", libgtk.}
proc set_vadjustment*(layout: Layout; 
                                 adjustment: Adjustment) {.
    importc: "gtk_layout_set_vadjustment", libgtk.}
proc `vadjustment=`*(layout: Layout; 
                                 adjustment: Adjustment) {.
    importc: "gtk_layout_set_vadjustment", libgtk.}

template gtk_level_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, level_bar_get_type(), LevelBarObj))

template gtk_level_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, level_bar_get_type(), LevelBarClassObj))

template gtk_is_level_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, level_bar_get_type()))

template gtk_is_level_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, level_bar_get_type()))

template gtk_level_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, level_bar_get_type(), LevelBarClassObj))

const 
  LEVEL_BAR_OFFSET_LOW* = "low"
const 
  LEVEL_BAR_OFFSET_HIGH* = "high"
type 
  LevelBarPrivateObj = object 
  
type 
  LevelBar* =  ptr LevelBarObj
  LevelBarPtr* = ptr LevelBarObj
  LevelBarObj*{.final.} = object of WidgetObj
    priv81: ptr LevelBarPrivateObj

type 
  LevelBarClass* =  ptr LevelBarClassObj
  LevelBarClassPtr* = ptr LevelBarClassObj
  LevelBarClassObj*{.final.} = object of WidgetClassObj
    offset_changed*: proc (self: LevelBar; name: cstring) {.cdecl.}
    padding*: array[16, gpointer]

proc level_bar_get_type*(): GType {.importc: "gtk_level_bar_get_type", 
    libgtk.}
proc level_bar_new*(): LevelBar {.importc: "gtk_level_bar_new", 
    libgtk.}
proc level_bar_new_for_interval*(min_value: gdouble; max_value: gdouble): LevelBar {.
    importc: "gtk_level_bar_new_for_interval", libgtk.}
proc set_mode*(self: LevelBar; mode: LevelBarMode) {.
    importc: "gtk_level_bar_set_mode", libgtk.}
proc `mode=`*(self: LevelBar; mode: LevelBarMode) {.
    importc: "gtk_level_bar_set_mode", libgtk.}
proc get_mode*(self: LevelBar): LevelBarMode {.
    importc: "gtk_level_bar_get_mode", libgtk.}
proc mode*(self: LevelBar): LevelBarMode {.
    importc: "gtk_level_bar_get_mode", libgtk.}
proc set_value*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_value", libgtk.}
proc `value=`*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_value", libgtk.}
proc get_value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_value", libgtk.}
proc value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_value", libgtk.}
proc set_min_value*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_min_value", libgtk.}
proc `min_value=`*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_min_value", libgtk.}
proc get_min_value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_min_value", libgtk.}
proc min_value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_min_value", libgtk.}
proc set_max_value*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_max_value", libgtk.}
proc `max_value=`*(self: LevelBar; value: gdouble) {.
    importc: "gtk_level_bar_set_max_value", libgtk.}
proc get_max_value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_max_value", libgtk.}
proc max_value*(self: LevelBar): gdouble {.
    importc: "gtk_level_bar_get_max_value", libgtk.}
proc set_inverted*(self: LevelBar; inverted: gboolean) {.
    importc: "gtk_level_bar_set_inverted", libgtk.}
proc `inverted=`*(self: LevelBar; inverted: gboolean) {.
    importc: "gtk_level_bar_set_inverted", libgtk.}
proc get_inverted*(self: LevelBar): gboolean {.
    importc: "gtk_level_bar_get_inverted", libgtk.}
proc inverted*(self: LevelBar): gboolean {.
    importc: "gtk_level_bar_get_inverted", libgtk.}
proc add_offset_value*(self: LevelBar; name: cstring; 
                                     value: gdouble) {.
    importc: "gtk_level_bar_add_offset_value", libgtk.}
proc remove_offset_value*(self: LevelBar; name: cstring) {.
    importc: "gtk_level_bar_remove_offset_value", libgtk.}
proc get_offset_value*(self: LevelBar; name: cstring; 
                                     value: var gdouble): gboolean {.
    importc: "gtk_level_bar_get_offset_value", libgtk.}
proc offset_value*(self: LevelBar; name: cstring; 
                                     value: var gdouble): gboolean {.
    importc: "gtk_level_bar_get_offset_value", libgtk.}

template gtk_link_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, link_button_get_type(), LinkButtonObj))

template gtk_is_link_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, link_button_get_type()))

template gtk_link_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, link_button_get_type(), LinkButtonClassObj))

template gtk_is_link_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, link_button_get_type()))

template gtk_link_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, link_button_get_type(), LinkButtonClassObj))

type 
  LinkButtonPrivateObj = object 
  
type 
  LinkButton* =  ptr LinkButtonObj
  LinkButtonPtr* = ptr LinkButtonObj
  LinkButtonObj*{.final.} = object of ButtonObj
    priv82: ptr LinkButtonPrivateObj

type 
  LinkButtonClass* =  ptr LinkButtonClassObj
  LinkButtonClassPtr* = ptr LinkButtonClassObj
  LinkButtonClassObj*{.final.} = object of ButtonClassObj
    activate_link*: proc (button: LinkButton): gboolean {.cdecl.}
    gtk_padding1: proc () {.cdecl.}
    gtk_padding2: proc () {.cdecl.}
    gtk_padding3: proc () {.cdecl.}
    gtk_padding4: proc () {.cdecl.}

proc link_button_get_type*(): GType {.importc: "gtk_link_button_get_type", 
    libgtk.}
proc link_button_new*(uri: cstring): LinkButton {.
    importc: "gtk_link_button_new", libgtk.}
proc link_button_new_with_label*(uri: cstring; label: cstring): LinkButton {.
    importc: "gtk_link_button_new_with_label", libgtk.}
proc link_button_new*(uri: cstring; label: cstring): LinkButton {.
    importc: "gtk_link_button_new_with_label", libgtk.}
proc get_uri*(link_button: LinkButton): cstring {.
    importc: "gtk_link_button_get_uri", libgtk.}
proc uri*(link_button: LinkButton): cstring {.
    importc: "gtk_link_button_get_uri", libgtk.}
proc set_uri*(link_button: LinkButton; uri: cstring) {.
    importc: "gtk_link_button_set_uri", libgtk.}
proc `uri=`*(link_button: LinkButton; uri: cstring) {.
    importc: "gtk_link_button_set_uri", libgtk.}
proc get_visited*(link_button: LinkButton): gboolean {.
    importc: "gtk_link_button_get_visited", libgtk.}
proc visited*(link_button: LinkButton): gboolean {.
    importc: "gtk_link_button_get_visited", libgtk.}
proc set_visited*(link_button: LinkButton; 
                                  visited: gboolean) {.
    importc: "gtk_link_button_set_visited", libgtk.}
proc `visited=`*(link_button: LinkButton; 
                                  visited: gboolean) {.
    importc: "gtk_link_button_set_visited", libgtk.}

template gtk_list_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, list_box_get_type(), ListBoxObj))

template gtk_list_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, list_box_get_type(), ListBoxClassObj))

template gtk_is_list_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, list_box_get_type()))

template gtk_is_list_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, list_box_get_type()))

template gtk_list_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, list_box_get_type(), ListBoxClassObj))

type 
  ListBox* =  ptr ListBoxObj
  ListBoxPtr* = ptr ListBoxObj
  ListBoxObj*{.final.} = object of ContainerObj
type 
  ListBoxRow* =  ptr ListBoxRowObj
  ListBoxRowPtr* = ptr ListBoxRowObj
  ListBoxRowObj*{.final.} = object of BinObj

type 
  ListBoxClass* =  ptr ListBoxClassObj
  ListBoxClassPtr* = ptr ListBoxClassObj
  ListBoxClassObj*{.final.} = object of ContainerClassObj
    row_selected*: proc (box: ListBox; row: ListBoxRow) {.cdecl.}
    row_activated*: proc (box: ListBox; row: ListBoxRow) {.cdecl.}
    activate_cursor_row*: proc (box: ListBox) {.cdecl.}
    toggle_cursor_row*: proc (box: ListBox) {.cdecl.}
    move_cursor*: proc (box: ListBox; step: MovementStep; 
                        count: gint) {.cdecl.}
    selected_rows_changed*: proc (box: ListBox) {.cdecl.}
    select_all*: proc (box: ListBox) {.cdecl.}
    unselect_all*: proc (box: ListBox) {.cdecl.}
    gtk_reserved801: proc () {.cdecl.}
    gtk_reserved802: proc () {.cdecl.}
    gtk_reserved803: proc () {.cdecl.}

template gtk_list_box_row*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, list_box_row_get_type(), ListBoxRowObj))

template gtk_list_box_row_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, list_box_row_get_type(), ListBoxRowClassObj))

template gtk_is_list_box_row*(obj: expr): expr = 
  (g_type_check_instance_type(obj, list_box_row_get_type()))

template gtk_is_list_box_row_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, list_box_row_get_type()))

template gtk_list_box_row_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, list_box_row_get_type(), ListBoxRowClassObj))

type 
  ListBoxRowClass* =  ptr ListBoxRowClassObj
  ListBoxRowClassPtr* = ptr ListBoxRowClassObj
  ListBoxRowClassObj*{.final.} = object of BinClassObj
    activate*: proc (row: ListBoxRow) {.cdecl.}
    gtk_reserved811: proc () {.cdecl.}
    gtk_reserved812: proc () {.cdecl.}

type 
  ListBoxFilterFunc* = proc (row: ListBoxRow; user_data: gpointer): gboolean {.cdecl.}
type 
  ListBoxSortFunc* = proc (row1: ListBoxRow; 
                              row2: ListBoxRow; user_data: gpointer): gint {.cdecl.}
type 
  ListBoxUpdateHeaderFunc* = proc (row: ListBoxRow; 
                                      before: ListBoxRow; 
                                      user_data: gpointer) {.cdecl.}
proc list_box_row_get_type*(): GType {.
    importc: "gtk_list_box_row_get_type", libgtk.}
proc list_box_row_new*(): ListBoxRow {.importc: "gtk_list_box_row_new", 
    libgtk.}
proc get_header*(row: ListBoxRow): Widget {.
    importc: "gtk_list_box_row_get_header", libgtk.}
proc header*(row: ListBoxRow): Widget {.
    importc: "gtk_list_box_row_get_header", libgtk.}
proc set_header*(row: ListBoxRow; 
                                  header: Widget) {.
    importc: "gtk_list_box_row_set_header", libgtk.}
proc `header=`*(row: ListBoxRow; 
                                  header: Widget) {.
    importc: "gtk_list_box_row_set_header", libgtk.}
proc get_index*(row: ListBoxRow): gint {.
    importc: "gtk_list_box_row_get_index", libgtk.}
proc index*(row: ListBoxRow): gint {.
    importc: "gtk_list_box_row_get_index", libgtk.}
proc changed*(row: ListBoxRow) {.
    importc: "gtk_list_box_row_changed", libgtk.}
proc is_selected*(row: ListBoxRow): gboolean {.
    importc: "gtk_list_box_row_is_selected", libgtk.}
proc set_selectable*(row: ListBoxRow; 
                                      selectable: gboolean) {.
    importc: "gtk_list_box_row_set_selectable", libgtk.}
proc `selectable=`*(row: ListBoxRow; 
                                      selectable: gboolean) {.
    importc: "gtk_list_box_row_set_selectable", libgtk.}
proc get_selectable*(row: ListBoxRow): gboolean {.
    importc: "gtk_list_box_row_get_selectable", libgtk.}
proc selectable*(row: ListBoxRow): gboolean {.
    importc: "gtk_list_box_row_get_selectable", libgtk.}
proc set_activatable*(row: ListBoxRow; 
    activatable: gboolean) {.importc: "gtk_list_box_row_set_activatable", 
                             libgtk.}
proc `activatable=`*(row: ListBoxRow; 
    activatable: gboolean) {.importc: "gtk_list_box_row_set_activatable", 
                             libgtk.}
proc get_activatable*(row: ListBoxRow): gboolean {.
    importc: "gtk_list_box_row_get_activatable", libgtk.}
proc activatable*(row: ListBoxRow): gboolean {.
    importc: "gtk_list_box_row_get_activatable", libgtk.}
proc list_box_get_type*(): GType {.importc: "gtk_list_box_get_type", 
    libgtk.}
proc prepend*(box: ListBox; child: Widget) {.
    importc: "gtk_list_box_prepend", libgtk.}
proc insert*(box: ListBox; child: Widget; 
                          position: gint) {.importc: "gtk_list_box_insert", 
    libgtk.}
proc get_selected_row*(box: ListBox): ListBoxRow {.
    importc: "gtk_list_box_get_selected_row", libgtk.}
proc selected_row*(box: ListBox): ListBoxRow {.
    importc: "gtk_list_box_get_selected_row", libgtk.}
proc get_row_at_index*(box: ListBox; index: gint): ListBoxRow {.
    importc: "gtk_list_box_get_row_at_index", libgtk.}
proc row_at_index*(box: ListBox; index: gint): ListBoxRow {.
    importc: "gtk_list_box_get_row_at_index", libgtk.}
proc get_row_at_y*(box: ListBox; y: gint): ListBoxRow {.
    importc: "gtk_list_box_get_row_at_y", libgtk.}
proc row_at_y*(box: ListBox; y: gint): ListBoxRow {.
    importc: "gtk_list_box_get_row_at_y", libgtk.}
proc select_row*(box: ListBox; row: ListBoxRow) {.
    importc: "gtk_list_box_select_row", libgtk.}
proc set_placeholder*(box: ListBox; 
                                   placeholder: Widget) {.
    importc: "gtk_list_box_set_placeholder", libgtk.}
proc `placeholder=`*(box: ListBox; 
                                   placeholder: Widget) {.
    importc: "gtk_list_box_set_placeholder", libgtk.}
proc set_adjustment*(box: ListBox; 
                                  adjustment: Adjustment) {.
    importc: "gtk_list_box_set_adjustment", libgtk.}
proc `adjustment=`*(box: ListBox; 
                                  adjustment: Adjustment) {.
    importc: "gtk_list_box_set_adjustment", libgtk.}
proc get_adjustment*(box: ListBox): Adjustment {.
    importc: "gtk_list_box_get_adjustment", libgtk.}
proc adjustment*(box: ListBox): Adjustment {.
    importc: "gtk_list_box_get_adjustment", libgtk.}
type 
  ListBoxForeachFunc* = proc (box: ListBox; row: ListBoxRow; 
                                 user_data: gpointer) {.cdecl.}
proc selected_foreach*(box: ListBox; 
                                    `func`: ListBoxForeachFunc; 
                                    data: gpointer) {.
    importc: "gtk_list_box_selected_foreach", libgtk.}
proc get_selected_rows*(box: ListBox): glib.GList {.
    importc: "gtk_list_box_get_selected_rows", libgtk.}
proc selected_rows*(box: ListBox): glib.GList {.
    importc: "gtk_list_box_get_selected_rows", libgtk.}
proc unselect_row*(box: ListBox; row: ListBoxRow) {.
    importc: "gtk_list_box_unselect_row", libgtk.}
proc select_all*(box: ListBox) {.
    importc: "gtk_list_box_select_all", libgtk.}
proc unselect_all*(box: ListBox) {.
    importc: "gtk_list_box_unselect_all", libgtk.}
proc set_selection_mode*(box: ListBox; 
                                      mode: SelectionMode) {.
    importc: "gtk_list_box_set_selection_mode", libgtk.}
proc `selection_mode=`*(box: ListBox; 
                                      mode: SelectionMode) {.
    importc: "gtk_list_box_set_selection_mode", libgtk.}
proc get_selection_mode*(box: ListBox): SelectionMode {.
    importc: "gtk_list_box_get_selection_mode", libgtk.}
proc selection_mode*(box: ListBox): SelectionMode {.
    importc: "gtk_list_box_get_selection_mode", libgtk.}
proc set_filter_func*(box: ListBox; 
                                   filter_func: ListBoxFilterFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_filter_func", libgtk.}
proc `filter_func=`*(box: ListBox; 
                                   filter_func: ListBoxFilterFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_filter_func", libgtk.}
proc set_header_func*(box: ListBox; 
                                   update_header: ListBoxUpdateHeaderFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_header_func", libgtk.}
proc `header_func=`*(box: ListBox; 
                                   update_header: ListBoxUpdateHeaderFunc; 
                                   user_data: gpointer; 
                                   destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_header_func", libgtk.}
proc invalidate_filter*(box: ListBox) {.
    importc: "gtk_list_box_invalidate_filter", libgtk.}
proc invalidate_sort*(box: ListBox) {.
    importc: "gtk_list_box_invalidate_sort", libgtk.}
proc invalidate_headers*(box: ListBox) {.
    importc: "gtk_list_box_invalidate_headers", libgtk.}
proc set_sort_func*(box: ListBox; 
                                 sort_func: ListBoxSortFunc; 
                                 user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_sort_func", libgtk.}
proc `sort_func=`*(box: ListBox; 
                                 sort_func: ListBoxSortFunc; 
                                 user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_list_box_set_sort_func", libgtk.}
proc set_activate_on_single_click*(box: ListBox; 
    single: gboolean) {.importc: "gtk_list_box_set_activate_on_single_click", 
                        libgtk.}
proc `activate_on_single_click=`*(box: ListBox; 
    single: gboolean) {.importc: "gtk_list_box_set_activate_on_single_click", 
                        libgtk.}
proc get_activate_on_single_click*(box: ListBox): gboolean {.
    importc: "gtk_list_box_get_activate_on_single_click", libgtk.}
proc activate_on_single_click*(box: ListBox): gboolean {.
    importc: "gtk_list_box_get_activate_on_single_click", libgtk.}
proc drag_unhighlight_row*(box: ListBox) {.
    importc: "gtk_list_box_drag_unhighlight_row", libgtk.}
proc drag_highlight_row*(box: ListBox; 
                                      row: ListBoxRow) {.
    importc: "gtk_list_box_drag_highlight_row", libgtk.}
proc list_box_new*(): ListBox {.importc: "gtk_list_box_new", 
    libgtk.}

template gtk_lock_button*(o: expr): expr = 
  (g_type_check_instance_cast(o, lock_button_get_type(), LockButtonObj))

template gtk_lock_button_class*(k: expr): expr = 
  (g_type_check_class_cast(k, gtk_lock_button, LockButtonClassObj))

template gtk_is_lock_button*(o: expr): expr = 
  (g_type_check_instance_type(o, lock_button_get_type()))

template gtk_is_lock_button_class*(k: expr): expr = 
  (g_type_check_class_type(k, lock_button_get_type()))

template gtk_lock_button_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, lock_button_get_type(), LockButtonClassObj))

type 
  LockButtonPrivateObj = object 
  
type 
  LockButton* =  ptr LockButtonObj
  LockButtonPtr* = ptr LockButtonObj
  LockButtonObj*{.final.} = object of ButtonObj
    priv83: ptr LockButtonPrivateObj

type 
  LockButtonClass* =  ptr LockButtonClassObj
  LockButtonClassPtr* = ptr LockButtonClassObj
  LockButtonClassObj*{.final.} = object of ButtonClassObj
    reserved0: proc () {.cdecl.}
    reserved1: proc () {.cdecl.}
    reserved2: proc () {.cdecl.}
    reserved3: proc () {.cdecl.}
    reserved4: proc () {.cdecl.}
    reserved5: proc () {.cdecl.}
    reserved6: proc () {.cdecl.}
    reserved7: proc () {.cdecl.}

proc lock_button_get_type*(): GType {.importc: "gtk_lock_button_get_type", 
    libgtk.}
proc lock_button_new*(permission: gio.GPermission): LockButton {.
    importc: "gtk_lock_button_new", libgtk.}
proc get_permission*(button: LockButton): gio.GPermission {.
    importc: "gtk_lock_button_get_permission", libgtk.}
proc permission*(button: LockButton): gio.GPermission {.
    importc: "gtk_lock_button_get_permission", libgtk.}
proc set_permission*(button: LockButton; 
                                     permission: gio.GPermission) {.
    importc: "gtk_lock_button_set_permission", libgtk.}
proc `permission=`*(button: LockButton; 
                                     permission: gio.GPermission) {.
    importc: "gtk_lock_button_set_permission", libgtk.}

const 
  PRIORITY_RESIZE* = (G_PRIORITY_HIGH_IDLE + 10)
type 
  KeySnoopFunc* = proc (grab_widget: Widget; event: gdk3.EventKey; 
                           func_data: gpointer): gint {.cdecl.}
proc get_major_version*(): guint {.importc: "gtk_get_major_version", 
    libgtk.}
proc get_minor_version*(): guint {.importc: "gtk_get_minor_version", 
    libgtk.}
proc get_micro_version*(): guint {.importc: "gtk_get_micro_version", 
    libgtk.}
proc get_binary_age*(): guint {.importc: "gtk_get_binary_age", libgtk.}
proc get_interface_age*(): guint {.importc: "gtk_get_interface_age", 
    libgtk.}
proc check_version*(required_major: guint; required_minor: guint; 
                        required_micro: guint): cstring {.
    importc: "gtk_check_version", libgtk.}
proc parse_args*(argc: var cint; argv: var cstringArray): gboolean {.
    importc: "gtk_parse_args", libgtk.}
proc init*(argc: var cint; argv: var cstringArray) {.importc: "gtk_init", 
    libgtk.}
proc init_with_argv*() =
  var
    cmdLine{.importc.}: cstringArray
    cmdCount{.importc.}: cint
  init(cmdCount, cmdLine)
proc init_check*(argc: var cint; argv: var cstringArray): gboolean {.
    importc: "gtk_init_check", libgtk.}
proc init_with_args*(argc: var gint; argv: var cstringArray; 
                         parameter_string: cstring; 
                         entries: glib.GOptionEntry; 
                         translation_domain: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_init_with_args", libgtk.}
proc get_option_group*(open_default_display: gboolean): glib.GOptionGroup {.
    importc: "gtk_get_option_group", libgtk.}
when defined(Windows): 
  proc init_abi_check*(argc: var cint; argv: var cstringArray; 
                           num_checks: cint; sizeofGtkWindow: csize; 
                           sizeofGtkBox: csize) {.
      importc: "gtk_init_abi_check", libgtk.}
  proc init_check_abi_check*(argc: var cint; argv: var cstringArray; 
                                 num_checks: cint; sizeofGtkWindow: csize; 
                                 sizeofGtkBox: csize): gboolean {.
      importc: "gtk_init_check_abi_check", libgtk.}
  template gtk_init*(argc, argv: expr): expr = 
    gtk_init_abi_check(argc, argv, 2, sizeof(WindowObj), sizeof(BoxObj))

  template gtk_init_check*(argc, argv: expr): expr = 
    gtk_init_check_abi_check(argc, argv, 2, sizeof(WindowObj), 
                             sizeof(BoxObj))

proc disable_setlocale*() {.importc: "gtk_disable_setlocale", libgtk.}
proc get_default_language*(): pango.Language {.
    importc: "gtk_get_default_language", libgtk.}
proc get_locale_direction*(): TextDirection {.
    importc: "gtk_get_locale_direction", libgtk.}
proc events_pending*(): gboolean {.importc: "gtk_events_pending", 
    libgtk.}
proc main_do_event*(event: gdk3.Event) {.importc: "gtk_main_do_event", 
    libgtk.}
proc main*() {.importc: "gtk_main", libgtk.}
proc main_level*(): guint {.importc: "gtk_main_level", libgtk.}
proc main_quit*() {.importc: "gtk_main_quit", libgtk.}
proc main_iteration*(): gboolean {.importc: "gtk_main_iteration", 
    libgtk.}
proc main_iteration_do*(blocking: gboolean): gboolean {.
    importc: "gtk_main_iteration_do", libgtk.}
proc gtk_true*(): gboolean {.importc: "gtk_true", libgtk.}
proc gtk_false*(): gboolean {.importc: "gtk_false", libgtk.}
proc grab_add*(widget: Widget) {.importc: "gtk_grab_add", 
    libgtk.}
proc grab_get_current*(): Widget {.importc: "gtk_grab_get_current", 
    libgtk.}
proc grab_remove*(widget: Widget) {.importc: "gtk_grab_remove", 
    libgtk.}
proc device_grab_add*(widget: Widget; device: gdk3.Device; 
                          block_others: gboolean) {.
    importc: "gtk_device_grab_add", libgtk.}
proc device_grab_remove*(widget: Widget; device: gdk3.Device) {.
    importc: "gtk_device_grab_remove", libgtk.}
proc key_snooper_install*(snooper: KeySnoopFunc; func_data: gpointer): guint {.
    importc: "gtk_key_snooper_install", libgtk.}
proc key_snooper_remove*(snooper_handler_id: guint) {.
    importc: "gtk_key_snooper_remove", libgtk.}
proc get_current_event*(): gdk3.Event {.
    importc: "gtk_get_current_event", libgtk.}
proc get_current_event_time*(): guint32 {.
    importc: "gtk_get_current_event_time", libgtk.}
proc get_current_event_state*(state: var gdk3.ModifierType): gboolean {.
    importc: "gtk_get_current_event_state", libgtk.}
proc get_current_event_device*(): gdk3.Device {.
    importc: "gtk_get_current_event_device", libgtk.}
proc get_event_widget*(event: gdk3.Event): Widget {.
    importc: "gtk_get_event_widget", libgtk.}
proc propagate_event*(widget: Widget; event: gdk3.Event) {.
    importc: "gtk_propagate_event", libgtk.}

template gtk_menu_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_bar_get_type(), MenuBarObj))

template gtk_menu_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_bar_get_type(), MenuBarClassObj))

template gtk_is_menu_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_bar_get_type()))

template gtk_is_menu_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_bar_get_type()))

template gtk_menu_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_bar_get_type(), MenuBarClassObj))

type 
  MenuBarPrivateObj = object 
  
type 
  MenuBar* =  ptr MenuBarObj
  MenuBarPtr* = ptr MenuBarObj
  MenuBarObj*{.final.} = object of MenuShellObj
    priv84: ptr MenuBarPrivateObj

type 
  MenuBarClass* =  ptr MenuBarClassObj
  MenuBarClassPtr* = ptr MenuBarClassObj
  MenuBarClassObj*{.final.} = object of MenuShellClassObj
    gtk_reserved821: proc () {.cdecl.}
    gtk_reserved822: proc () {.cdecl.}
    gtk_reserved823: proc () {.cdecl.}
    gtk_reserved824: proc () {.cdecl.}

proc menu_bar_get_type*(): GType {.importc: "gtk_menu_bar_get_type", 
    libgtk.}
proc menu_bar_new*(): MenuBar {.importc: "gtk_menu_bar_new", 
    libgtk.}
proc menu_bar_new_from_model*(model: gio.GMenuModel): MenuBar {.
    importc: "gtk_menu_bar_new_from_model", libgtk.}
proc get_pack_direction*(menubar: MenuBar): PackDirection {.
    importc: "gtk_menu_bar_get_pack_direction", libgtk.}
proc pack_direction*(menubar: MenuBar): PackDirection {.
    importc: "gtk_menu_bar_get_pack_direction", libgtk.}
proc set_pack_direction*(menubar: MenuBar; 
                                      pack_dir: PackDirection) {.
    importc: "gtk_menu_bar_set_pack_direction", libgtk.}
proc `pack_direction=`*(menubar: MenuBar; 
                                      pack_dir: PackDirection) {.
    importc: "gtk_menu_bar_set_pack_direction", libgtk.}
proc get_child_pack_direction*(menubar: MenuBar): PackDirection {.
    importc: "gtk_menu_bar_get_child_pack_direction", libgtk.}
proc child_pack_direction*(menubar: MenuBar): PackDirection {.
    importc: "gtk_menu_bar_get_child_pack_direction", libgtk.}
proc set_child_pack_direction*(menubar: MenuBar; 
    child_pack_dir: PackDirection) {.
    importc: "gtk_menu_bar_set_child_pack_direction", libgtk.}
proc `child_pack_direction=`*(menubar: MenuBar; 
    child_pack_dir: PackDirection) {.
    importc: "gtk_menu_bar_set_child_pack_direction", libgtk.}

template gtk_popover*(o: expr): expr = 
  (g_type_check_instance_cast(o, popover_get_type(), PopoverObj))

template gtk_popover_class*(c: expr): expr = 
  (g_type_check_class_cast(c, popover_get_type(), PopoverClassObj))

template gtk_is_popover*(o: expr): expr = 
  (g_type_check_instance_type(o, popover_get_type()))

template gtk_is_popover_class*(o: expr): expr = 
  (g_type_check_class_type(o, popover_get_type()))

template gtk_popover_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, popover_get_type(), PopoverClassObj))

type 
  PopoverPrivateObj = object 
  
type 
  Popover* =  ptr PopoverObj
  PopoverPtr* = ptr PopoverObj
  PopoverObj*{.final.} = object of BinObj
    priv85: ptr PopoverPrivateObj

type 
  PopoverClass* =  ptr PopoverClassObj
  PopoverClassPtr* = ptr PopoverClassObj
  PopoverClassObj = object of BinClassObj
    closed*: proc (popover: Popover) {.cdecl.}
    reserved: array[10, gpointer]

proc popover_get_type*(): GType {.importc: "gtk_popover_get_type", 
                                      libgtk.}
proc popover_new*(relative_to: Widget): Popover {.
    importc: "gtk_popover_new", libgtk.}
proc popover_new_from_model*(relative_to: Widget; 
                                 model: gio.GMenuModel): Popover {.
    importc: "gtk_popover_new_from_model", libgtk.}
proc set_relative_to*(popover: Popover; 
                                  relative_to: Widget) {.
    importc: "gtk_popover_set_relative_to", libgtk.}
proc `relative_to=`*(popover: Popover; 
                                  relative_to: Widget) {.
    importc: "gtk_popover_set_relative_to", libgtk.}
proc get_relative_to*(popover: Popover): Widget {.
    importc: "gtk_popover_get_relative_to", libgtk.}
proc relative_to*(popover: Popover): Widget {.
    importc: "gtk_popover_get_relative_to", libgtk.}
proc set_pointing_to*(popover: Popover; 
                                  rect: gdk3.Rectangle) {.
    importc: "gtk_popover_set_pointing_to", libgtk.}
proc `pointing_to=`*(popover: Popover; 
                                  rect: gdk3.Rectangle) {.
    importc: "gtk_popover_set_pointing_to", libgtk.}
proc get_pointing_to*(popover: Popover; 
                                  rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_popover_get_pointing_to", libgtk.}
proc pointing_to*(popover: Popover; 
                                  rect: gdk3.Rectangle): gboolean {.
    importc: "gtk_popover_get_pointing_to", libgtk.}
proc set_position*(popover: Popover; 
                               position: PositionType) {.
    importc: "gtk_popover_set_position", libgtk.}
proc `position=`*(popover: Popover; 
                               position: PositionType) {.
    importc: "gtk_popover_set_position", libgtk.}
proc get_position*(popover: Popover): PositionType {.
    importc: "gtk_popover_get_position", libgtk.}
proc position*(popover: Popover): PositionType {.
    importc: "gtk_popover_get_position", libgtk.}
proc set_modal*(popover: Popover; modal: gboolean) {.
    importc: "gtk_popover_set_modal", libgtk.}
proc `modal=`*(popover: Popover; modal: gboolean) {.
    importc: "gtk_popover_set_modal", libgtk.}
proc get_modal*(popover: Popover): gboolean {.
    importc: "gtk_popover_get_modal", libgtk.}
proc modal*(popover: Popover): gboolean {.
    importc: "gtk_popover_get_modal", libgtk.}
proc bind_model*(popover: Popover; model: gio.GMenuModel; 
                             action_namespace: cstring) {.
    importc: "gtk_popover_bind_model", libgtk.}

template gtk_menu_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_button_get_type(), MenuButtonObj))

template gtk_menu_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_button_get_type(), MenuButtonClassObj))

template gtk_is_menu_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_button_get_type()))

template gtk_is_menu_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_button_get_type()))

template gtk_menu_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_button_get_type(), MenuButtonClassObj))

type 
  MenuButtonPrivateObj = object 
  
type 
  MenuButton* =  ptr MenuButtonObj
  MenuButtonPtr* = ptr MenuButtonObj
  MenuButtonObj*{.final.} = object of ToggleButtonObj
    priv86: ptr MenuButtonPrivateObj

type 
  MenuButtonClass* =  ptr MenuButtonClassObj
  MenuButtonClassPtr* = ptr MenuButtonClassObj
  MenuButtonClassObj*{.final.} = object of ToggleButtonClassObj
    gtk_reserved831: proc () {.cdecl.}
    gtk_reserved832: proc () {.cdecl.}
    gtk_reserved833: proc () {.cdecl.}
    gtk_reserved834: proc () {.cdecl.}

proc menu_button_get_type*(): GType {.importc: "gtk_menu_button_get_type", 
    libgtk.}
proc menu_button_new*(): MenuButton {.importc: "gtk_menu_button_new", 
    libgtk.}
proc set_popup*(menu_button: MenuButton; 
                                menu: Widget) {.
    importc: "gtk_menu_button_set_popup", libgtk.}
proc `popup=`*(menu_button: MenuButton; 
                                menu: Widget) {.
    importc: "gtk_menu_button_set_popup", libgtk.}
proc get_popup*(menu_button: MenuButton): Menu {.
    importc: "gtk_menu_button_get_popup", libgtk.}
proc popup*(menu_button: MenuButton): Menu {.
    importc: "gtk_menu_button_get_popup", libgtk.}
proc set_popover*(menu_button: MenuButton; 
                                  popover: Widget) {.
    importc: "gtk_menu_button_set_popover", libgtk.}
proc `popover=`*(menu_button: MenuButton; 
                                  popover: Widget) {.
    importc: "gtk_menu_button_set_popover", libgtk.}
proc get_popover*(menu_button: MenuButton): Popover {.
    importc: "gtk_menu_button_get_popover", libgtk.}
proc popover*(menu_button: MenuButton): Popover {.
    importc: "gtk_menu_button_get_popover", libgtk.}
proc set_direction*(menu_button: MenuButton; 
                                    direction: ArrowType) {.
    importc: "gtk_menu_button_set_direction", libgtk.}
proc `direction=`*(menu_button: MenuButton; 
                                    direction: ArrowType) {.
    importc: "gtk_menu_button_set_direction", libgtk.}
proc get_direction*(menu_button: MenuButton): ArrowType {.
    importc: "gtk_menu_button_get_direction", libgtk.}
proc direction*(menu_button: MenuButton): ArrowType {.
    importc: "gtk_menu_button_get_direction", libgtk.}
proc set_menu_model*(menu_button: MenuButton; 
                                     menu_model: gio.GMenuModel) {.
    importc: "gtk_menu_button_set_menu_model", libgtk.}
proc `menu_model=`*(menu_button: MenuButton; 
                                     menu_model: gio.GMenuModel) {.
    importc: "gtk_menu_button_set_menu_model", libgtk.}
proc get_menu_model*(menu_button: MenuButton): gio.GMenuModel {.
    importc: "gtk_menu_button_get_menu_model", libgtk.}
proc menu_model*(menu_button: MenuButton): gio.GMenuModel {.
    importc: "gtk_menu_button_get_menu_model", libgtk.}
proc set_align_widget*(menu_button: MenuButton; 
    align_widget: Widget) {.importc: "gtk_menu_button_set_align_widget", 
                                   libgtk.}
proc `align_widget=`*(menu_button: MenuButton; 
    align_widget: Widget) {.importc: "gtk_menu_button_set_align_widget", 
                                   libgtk.}
proc get_align_widget*(menu_button: MenuButton): Widget {.
    importc: "gtk_menu_button_get_align_widget", libgtk.}
proc align_widget*(menu_button: MenuButton): Widget {.
    importc: "gtk_menu_button_get_align_widget", libgtk.}
proc set_use_popover*(menu_button: MenuButton; 
                                      use_popover: gboolean) {.
    importc: "gtk_menu_button_set_use_popover", libgtk.}
proc `use_popover=`*(menu_button: MenuButton; 
                                      use_popover: gboolean) {.
    importc: "gtk_menu_button_set_use_popover", libgtk.}
proc get_use_popover*(menu_button: MenuButton): gboolean {.
    importc: "gtk_menu_button_get_use_popover", libgtk.}
proc use_popover*(menu_button: MenuButton): gboolean {.
    importc: "gtk_menu_button_get_use_popover", libgtk.}

template gtk_size_group*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, size_group_get_type(), SizeGroupObj))

template gtk_size_group_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, size_group_get_type(), SizeGroupClassObj))

template gtk_is_size_group*(obj: expr): expr = 
  (g_type_check_instance_type(obj, size_group_get_type()))

template gtk_is_size_group_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, size_group_get_type()))

template gtk_size_group_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, size_group_get_type(), SizeGroupClassObj))

type 
  SizeGroupPrivateObj = object 
  
type 
  SizeGroup* =  ptr SizeGroupObj
  SizeGroupPtr* = ptr SizeGroupObj
  SizeGroupObj*{.final.} = object of GObjectObj
    priv87: ptr SizeGroupPrivateObj

type 
  SizeGroupClass* =  ptr SizeGroupClassObj
  SizeGroupClassPtr* = ptr SizeGroupClassObj
  SizeGroupClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved841: proc () {.cdecl.}
    gtk_reserved842: proc () {.cdecl.}
    gtk_reserved843: proc () {.cdecl.}
    gtk_reserved844: proc () {.cdecl.}

proc size_group_get_type*(): GType {.importc: "gtk_size_group_get_type", 
    libgtk.}
proc size_group_new*(mode: SizeGroupMode): SizeGroup {.
    importc: "gtk_size_group_new", libgtk.}
proc set_mode*(size_group: SizeGroup; 
                              mode: SizeGroupMode) {.
    importc: "gtk_size_group_set_mode", libgtk.}
proc `mode=`*(size_group: SizeGroup; 
                              mode: SizeGroupMode) {.
    importc: "gtk_size_group_set_mode", libgtk.}
proc get_mode*(size_group: SizeGroup): SizeGroupMode {.
    importc: "gtk_size_group_get_mode", libgtk.}
proc mode*(size_group: SizeGroup): SizeGroupMode {.
    importc: "gtk_size_group_get_mode", libgtk.}
proc set_ignore_hidden*(size_group: SizeGroup; 
    ignore_hidden: gboolean) {.importc: "gtk_size_group_set_ignore_hidden", 
                               libgtk.}
proc `ignore_hidden=`*(size_group: SizeGroup; 
    ignore_hidden: gboolean) {.importc: "gtk_size_group_set_ignore_hidden", 
                               libgtk.}
proc get_ignore_hidden*(size_group: SizeGroup): gboolean {.
    importc: "gtk_size_group_get_ignore_hidden", libgtk.}
proc ignore_hidden*(size_group: SizeGroup): gboolean {.
    importc: "gtk_size_group_get_ignore_hidden", libgtk.}
proc add_widget*(size_group: SizeGroup; 
                                widget: Widget) {.
    importc: "gtk_size_group_add_widget", libgtk.}
proc remove_widget*(size_group: SizeGroup; 
                                   widget: Widget) {.
    importc: "gtk_size_group_remove_widget", libgtk.}
proc get_widgets*(size_group: SizeGroup): glib.GSList {.
    importc: "gtk_size_group_get_widgets", libgtk.}
proc widgets*(size_group: SizeGroup): glib.GSList {.
    importc: "gtk_size_group_get_widgets", libgtk.}

template gtk_tool_item*(o: expr): expr = 
  (g_type_check_instance_cast(o, tool_item_get_type(), ToolItemObj))

template gtk_tool_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tool_item_get_type(), ToolItemClassObj))

template gtk_is_tool_item*(o: expr): expr = 
  (g_type_check_instance_type(o, tool_item_get_type()))

template gtk_is_tool_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tool_item_get_type()))

template gtk_tool_item_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, tool_item_get_type(), ToolItemClassObj))

type 
  ToolItemPrivateObj = object 
  
type 
  ToolItem* =  ptr ToolItemObj
  ToolItemPtr* = ptr ToolItemObj
  ToolItemObj = object of BinObj
    priv88: ptr ToolItemPrivateObj

type 
  ToolItemClass* =  ptr ToolItemClassObj
  ToolItemClassPtr* = ptr ToolItemClassObj
  ToolItemClassObj = object of BinClassObj
    create_menu_proxy*: proc (tool_item: ToolItem): gboolean {.cdecl.}
    toolbar_reconfigured*: proc (tool_item: ToolItem) {.cdecl.}
    gtk_reserved851: proc () {.cdecl.}
    gtk_reserved852: proc () {.cdecl.}
    gtk_reserved853: proc () {.cdecl.}
    gtk_reserved854: proc () {.cdecl.}

proc tool_item_get_type*(): GType {.importc: "gtk_tool_item_get_type", 
    libgtk.}
proc tool_item_new*(): ToolItem {.importc: "gtk_tool_item_new", 
    libgtk.}
proc set_homogeneous*(tool_item: ToolItem; 
                                    homogeneous: gboolean) {.
    importc: "gtk_tool_item_set_homogeneous", libgtk.}
proc `homogeneous=`*(tool_item: ToolItem; 
                                    homogeneous: gboolean) {.
    importc: "gtk_tool_item_set_homogeneous", libgtk.}
proc get_homogeneous*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_homogeneous", libgtk.}
proc homogeneous*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_homogeneous", libgtk.}
proc set_expand*(tool_item: ToolItem; expand: gboolean) {.
    importc: "gtk_tool_item_set_expand", libgtk.}
proc `expand=`*(tool_item: ToolItem; expand: gboolean) {.
    importc: "gtk_tool_item_set_expand", libgtk.}
proc get_expand*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_expand", libgtk.}
proc expand*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_expand", libgtk.}
proc set_tooltip_text*(tool_item: ToolItem; 
                                     text: cstring) {.
    importc: "gtk_tool_item_set_tooltip_text", libgtk.}
proc `tooltip_text=`*(tool_item: ToolItem; 
                                     text: cstring) {.
    importc: "gtk_tool_item_set_tooltip_text", libgtk.}
proc set_tooltip_markup*(tool_item: ToolItem; 
    markup: cstring) {.importc: "gtk_tool_item_set_tooltip_markup", 
                         libgtk.}
proc `tooltip_markup=`*(tool_item: ToolItem; 
    markup: cstring) {.importc: "gtk_tool_item_set_tooltip_markup", 
                         libgtk.}
proc set_use_drag_window*(tool_item: ToolItem; 
    use_drag_window: gboolean) {.importc: "gtk_tool_item_set_use_drag_window", 
                                 libgtk.}
proc `use_drag_window=`*(tool_item: ToolItem; 
    use_drag_window: gboolean) {.importc: "gtk_tool_item_set_use_drag_window", 
                                 libgtk.}
proc get_use_drag_window*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_use_drag_window", libgtk.}
proc use_drag_window*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_use_drag_window", libgtk.}
proc set_visible_horizontal*(tool_item: ToolItem; 
    visible_horizontal: gboolean) {.importc: "gtk_tool_item_set_visible_horizontal", 
                                    libgtk.}
proc `visible_horizontal=`*(tool_item: ToolItem; 
    visible_horizontal: gboolean) {.importc: "gtk_tool_item_set_visible_horizontal", 
                                    libgtk.}
proc get_visible_horizontal*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_visible_horizontal", libgtk.}
proc visible_horizontal*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_visible_horizontal", libgtk.}
proc set_visible_vertical*(tool_item: ToolItem; 
    visible_vertical: gboolean) {.importc: "gtk_tool_item_set_visible_vertical", 
                                  libgtk.}
proc `visible_vertical=`*(tool_item: ToolItem; 
    visible_vertical: gboolean) {.importc: "gtk_tool_item_set_visible_vertical", 
                                  libgtk.}
proc get_visible_vertical*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_visible_vertical", libgtk.}
proc visible_vertical*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_visible_vertical", libgtk.}
proc get_is_important*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_is_important", libgtk.}
proc is_important*(tool_item: ToolItem): gboolean {.
    importc: "gtk_tool_item_get_is_important", libgtk.}
proc set_is_important*(tool_item: ToolItem; 
                                     is_important: gboolean) {.
    importc: "gtk_tool_item_set_is_important", libgtk.}
proc `is_important=`*(tool_item: ToolItem; 
                                     is_important: gboolean) {.
    importc: "gtk_tool_item_set_is_important", libgtk.}
proc get_ellipsize_mode*(tool_item: ToolItem): pango.EllipsizeMode {.
    importc: "gtk_tool_item_get_ellipsize_mode", libgtk.}
proc ellipsize_mode*(tool_item: ToolItem): pango.EllipsizeMode {.
    importc: "gtk_tool_item_get_ellipsize_mode", libgtk.}
proc get_icon_size*(tool_item: ToolItem): IconSize {.
    importc: "gtk_tool_item_get_icon_size", libgtk.}
proc icon_size*(tool_item: ToolItem): IconSize {.
    importc: "gtk_tool_item_get_icon_size", libgtk.}
proc get_orientation*(tool_item: ToolItem): Orientation {.
    importc: "gtk_tool_item_get_orientation", libgtk.}
proc orientation*(tool_item: ToolItem): Orientation {.
    importc: "gtk_tool_item_get_orientation", libgtk.}
proc get_toolbar_style*(tool_item: ToolItem): ToolbarStyle {.
    importc: "gtk_tool_item_get_toolbar_style", libgtk.}
proc toolbar_style*(tool_item: ToolItem): ToolbarStyle {.
    importc: "gtk_tool_item_get_toolbar_style", libgtk.}
proc get_relief_style*(tool_item: ToolItem): ReliefStyle {.
    importc: "gtk_tool_item_get_relief_style", libgtk.}
proc relief_style*(tool_item: ToolItem): ReliefStyle {.
    importc: "gtk_tool_item_get_relief_style", libgtk.}
proc get_text_alignment*(tool_item: ToolItem): gfloat {.
    importc: "gtk_tool_item_get_text_alignment", libgtk.}
proc text_alignment*(tool_item: ToolItem): gfloat {.
    importc: "gtk_tool_item_get_text_alignment", libgtk.}
proc get_text_orientation*(tool_item: ToolItem): Orientation {.
    importc: "gtk_tool_item_get_text_orientation", libgtk.}
proc text_orientation*(tool_item: ToolItem): Orientation {.
    importc: "gtk_tool_item_get_text_orientation", libgtk.}
proc get_text_size_group*(tool_item: ToolItem): SizeGroup {.
    importc: "gtk_tool_item_get_text_size_group", libgtk.}
proc text_size_group*(tool_item: ToolItem): SizeGroup {.
    importc: "gtk_tool_item_get_text_size_group", libgtk.}
proc retrieve_proxy_menu_item*(tool_item: ToolItem): MenuItem {.
    importc: "gtk_tool_item_retrieve_proxy_menu_item", libgtk.}
proc get_proxy_menu_item*(tool_item: ToolItem; 
    menu_item_id: cstring): MenuItem {.
    importc: "gtk_tool_item_get_proxy_menu_item", libgtk.}
proc proxy_menu_item*(tool_item: ToolItem; 
    menu_item_id: cstring): MenuItem {.
    importc: "gtk_tool_item_get_proxy_menu_item", libgtk.}
proc set_proxy_menu_item*(tool_item: ToolItem; 
    menu_item_id: cstring; menu_item: Widget) {.
    importc: "gtk_tool_item_set_proxy_menu_item", libgtk.}
proc `proxy_menu_item=`*(tool_item: ToolItem; 
    menu_item_id: cstring; menu_item: Widget) {.
    importc: "gtk_tool_item_set_proxy_menu_item", libgtk.}
proc rebuild_menu*(tool_item: ToolItem) {.
    importc: "gtk_tool_item_rebuild_menu", libgtk.}
proc toolbar_reconfigured*(tool_item: ToolItem) {.
    importc: "gtk_tool_item_toolbar_reconfigured", libgtk.}

template gtk_tool_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tool_button_get_type(), ToolButtonObj))

template gtk_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tool_button_get_type(), ToolButtonClassObj))

template gtk_is_tool_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tool_button_get_type()))

template gtk_is_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tool_button_get_type()))

template gtk_tool_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tool_button_get_type(), ToolButtonClassObj))

type 
  ToolButtonPrivateObj = object 
  
type 
  ToolButton* =  ptr ToolButtonObj
  ToolButtonPtr* = ptr ToolButtonObj
  ToolButtonObj = object of ToolItemObj
    priv89: ptr ToolButtonPrivateObj

type 
  ToolButtonClass* =  ptr ToolButtonClassObj
  ToolButtonClassPtr* = ptr ToolButtonClassObj
  ToolButtonClassObj = object of ToolItemClassObj
    button_type*: GType
    clicked*: proc (tool_item: ToolButton) {.cdecl.}
    gtk_reserved861: proc () {.cdecl.}
    gtk_reserved862: proc () {.cdecl.}
    gtk_reserved863: proc () {.cdecl.}
    gtk_reserved864: proc () {.cdecl.}

proc tool_button_get_type*(): GType {.importc: "gtk_tool_button_get_type", 
    libgtk.}
proc tool_button_new*(icon_widget: Widget; label: cstring): ToolItem {.
    importc: "gtk_tool_button_new", libgtk.}
proc tool_button_new_from_stock*(stock_id: cstring): ToolItem {.
    importc: "gtk_tool_button_new_from_stock", libgtk.}
proc set_label*(button: ToolButton; label: cstring) {.
    importc: "gtk_tool_button_set_label", libgtk.}
proc `label=`*(button: ToolButton; label: cstring) {.
    importc: "gtk_tool_button_set_label", libgtk.}
proc get_label*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_label", libgtk.}
proc label*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_label", libgtk.}
proc set_use_underline*(button: ToolButton; 
    use_underline: gboolean) {.importc: "gtk_tool_button_set_use_underline", 
                               libgtk.}
proc `use_underline=`*(button: ToolButton; 
    use_underline: gboolean) {.importc: "gtk_tool_button_set_use_underline", 
                               libgtk.}
proc get_use_underline*(button: ToolButton): gboolean {.
    importc: "gtk_tool_button_get_use_underline", libgtk.}
proc use_underline*(button: ToolButton): gboolean {.
    importc: "gtk_tool_button_get_use_underline", libgtk.}
proc set_stock_id*(button: ToolButton; 
                                   stock_id: cstring) {.
    importc: "gtk_tool_button_set_stock_id", libgtk.}
proc `stock_id=`*(button: ToolButton; 
                                   stock_id: cstring) {.
    importc: "gtk_tool_button_set_stock_id", libgtk.}
proc get_stock_id*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_stock_id", libgtk.}
proc stock_id*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_stock_id", libgtk.}
proc set_icon_name*(button: ToolButton; 
                                    icon_name: cstring) {.
    importc: "gtk_tool_button_set_icon_name", libgtk.}
proc `icon_name=`*(button: ToolButton; 
                                    icon_name: cstring) {.
    importc: "gtk_tool_button_set_icon_name", libgtk.}
proc get_icon_name*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_icon_name", libgtk.}
proc icon_name*(button: ToolButton): cstring {.
    importc: "gtk_tool_button_get_icon_name", libgtk.}
proc set_icon_widget*(button: ToolButton; 
                                      icon_widget: Widget) {.
    importc: "gtk_tool_button_set_icon_widget", libgtk.}
proc `icon_widget=`*(button: ToolButton; 
                                      icon_widget: Widget) {.
    importc: "gtk_tool_button_set_icon_widget", libgtk.}
proc get_icon_widget*(button: ToolButton): Image {.
    importc: "gtk_tool_button_get_icon_widget", libgtk.}
proc icon_widget*(button: ToolButton): Image {.
    importc: "gtk_tool_button_get_icon_widget", libgtk.}
proc set_label_widget*(button: ToolButton; 
    label_widget: Widget) {.importc: "gtk_tool_button_set_label_widget", 
                                   libgtk.}
proc `label_widget=`*(button: ToolButton; 
    label_widget: Widget) {.importc: "gtk_tool_button_set_label_widget", 
                                   libgtk.}
proc get_label_widget*(button: ToolButton): Label {.
    importc: "gtk_tool_button_get_label_widget", libgtk.}
proc label_widget*(button: ToolButton): Label {.
    importc: "gtk_tool_button_get_label_widget", libgtk.}

template gtk_menu_tool_button*(o: expr): expr = 
  (g_type_check_instance_cast(o, menu_tool_button_get_type(), 
                              MenuToolButtonObj))

template gtk_menu_tool_button_class*(k: expr): expr = 
  (g_type_check_class_cast(k, menu_tool_button_get_type(), 
                           MenuToolButtonClassObj))

template gtk_is_menu_tool_button*(o: expr): expr = 
  (g_type_check_instance_type(o, menu_tool_button_get_type()))

template gtk_is_menu_tool_button_class*(k: expr): expr = 
  (g_type_check_class_type(k, menu_tool_button_get_type()))

template gtk_menu_tool_button_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, menu_tool_button_get_type(), 
                             MenuToolButtonClassObj))

type 
  MenuToolButtonPrivateObj = object 
  
type 
  MenuToolButton* =  ptr MenuToolButtonObj
  MenuToolButtonPtr* = ptr MenuToolButtonObj
  MenuToolButtonObj*{.final.} = object of ToolButtonObj
    priv90: ptr MenuToolButtonPrivateObj

type 
  MenuToolButtonClass* =  ptr MenuToolButtonClassObj
  MenuToolButtonClassPtr* = ptr MenuToolButtonClassObj
  MenuToolButtonClassObj*{.final.} = object of ToolButtonClassObj
    show_menu*: proc (button: MenuToolButton) {.cdecl.}
    gtk_reserved871: proc () {.cdecl.}
    gtk_reserved872: proc () {.cdecl.}
    gtk_reserved873: proc () {.cdecl.}
    gtk_reserved874: proc () {.cdecl.}

proc menu_tool_button_get_type*(): GType {.
    importc: "gtk_menu_tool_button_get_type", libgtk.}
proc menu_tool_button_new*(icon_widget: Widget; label: cstring): ToolItem {.
    importc: "gtk_menu_tool_button_new", libgtk.}
proc menu_tool_button_new_from_stock*(stock_id: cstring): ToolItem {.
    importc: "gtk_menu_tool_button_new_from_stock", libgtk.}
proc set_menu*(button: MenuToolButton; 
                                    menu: Widget) {.
    importc: "gtk_menu_tool_button_set_menu", libgtk.}
proc `menu=`*(button: MenuToolButton; 
                                    menu: Widget) {.
    importc: "gtk_menu_tool_button_set_menu", libgtk.}
proc get_menu*(button: MenuToolButton): Menu {.
    importc: "gtk_menu_tool_button_get_menu", libgtk.}
proc menu*(button: MenuToolButton): Menu {.
    importc: "gtk_menu_tool_button_get_menu", libgtk.}
proc set_arrow_tooltip_text*(
    button: MenuToolButton; text: cstring) {.
    importc: "gtk_menu_tool_button_set_arrow_tooltip_text", libgtk.}
proc `arrow_tooltip_text=`*(
    button: MenuToolButton; text: cstring) {.
    importc: "gtk_menu_tool_button_set_arrow_tooltip_text", libgtk.}
proc set_arrow_tooltip_markup*(
    button: MenuToolButton; markup: cstring) {.
    importc: "gtk_menu_tool_button_set_arrow_tooltip_markup", libgtk.}
proc `arrow_tooltip_markup=`*(
    button: MenuToolButton; markup: cstring) {.
    importc: "gtk_menu_tool_button_set_arrow_tooltip_markup", libgtk.}

template gtk_message_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, message_dialog_get_type(), MessageDialogObj))

template gtk_message_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, message_dialog_get_type(), 
                           MessageDialogClassObj))

template gtk_is_message_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, message_dialog_get_type()))

template gtk_is_message_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, message_dialog_get_type()))

template gtk_message_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, message_dialog_get_type(), 
                             MessageDialogClassObj))

type 
  MessageDialogPrivateObj = object 
  
type 
  MessageDialog* =  ptr MessageDialogObj
  MessageDialogPtr* = ptr MessageDialogObj
  MessageDialogObj*{.final.} = object of DialogObj
    priv91: ptr MessageDialogPrivateObj

type 
  MessageDialogClass* =  ptr MessageDialogClassObj
  MessageDialogClassPtr* = ptr MessageDialogClassObj
  MessageDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved881: proc () {.cdecl.}
    gtk_reserved882: proc () {.cdecl.}
    gtk_reserved883: proc () {.cdecl.}
    gtk_reserved884: proc () {.cdecl.}

type 
  ButtonsType* {.size: sizeof(cint), pure.} = enum 
    NONE, OK, CLOSE, CANCEL, 
    YES_NO, OK_CANCEL
proc message_dialog_get_type*(): GType {.
    importc: "gtk_message_dialog_get_type", libgtk.}
proc message_dialog_new*(parent: Window; flags: DialogFlags; 
                             `type`: MessageType; buttons: ButtonsType; 
                             message_format: cstring): MessageDialog {.
    varargs, importc: "gtk_message_dialog_new", libgtk.}
proc message_dialog_new_with_markup*(parent: Window; 
    flags: DialogFlags; `type`: MessageType; buttons: ButtonsType; 
    message_format: cstring): MessageDialog {.varargs, 
    importc: "gtk_message_dialog_new_with_markup", libgtk.}
proc set_image*(dialog: MessageDialog; 
                                   image: Widget) {.
    importc: "gtk_message_dialog_set_image", libgtk.}
proc `image=`*(dialog: MessageDialog; 
                                   image: Widget) {.
    importc: "gtk_message_dialog_set_image", libgtk.}
proc get_image*(dialog: MessageDialog): Image {.
    importc: "gtk_message_dialog_get_image", libgtk.}
proc image*(dialog: MessageDialog): Image {.
    importc: "gtk_message_dialog_get_image", libgtk.}
proc set_markup*(message_dialog: MessageDialog; 
                                    str: cstring) {.
    importc: "gtk_message_dialog_set_markup", libgtk.}
proc `markup=`*(message_dialog: MessageDialog; 
                                    str: cstring) {.
    importc: "gtk_message_dialog_set_markup", libgtk.}
proc format_secondary_text*(
    message_dialog: MessageDialog; message_format: cstring) {.
    varargs, importc: "gtk_message_dialog_format_secondary_text", libgtk.}
proc format_secondary_markup*(
    message_dialog: MessageDialog; message_format: cstring) {.
    varargs, importc: "gtk_message_dialog_format_secondary_markup", 
    libgtk.}
proc get_message_area*(message_dialog: MessageDialog): Widget {.
    importc: "gtk_message_dialog_get_message_area", libgtk.}
proc message_area*(message_dialog: MessageDialog): Widget {.
    importc: "gtk_message_dialog_get_message_area", libgtk.}

template gtk_model_button*(inst: expr): expr = 
  (g_type_check_instance_cast(inst, model_button_get_type(), ModelButtonObj))

template gtk_is_model_button*(inst: expr): expr = 
  (g_type_check_instance_type(inst, model_button_get_type()))

type 
  ModelButton* =  ptr ModelButtonObj
  ModelButtonPtr* = ptr ModelButtonObj
  ModelButtonObj* = object 
  
type 
  ButtonRole* {.size: sizeof(cint), pure.} = enum 
    NORMAL, CHECK, RADIO
proc model_button_get_type*(): GType {.
    importc: "gtk_model_button_get_type", libgtk.}
proc model_button_new*(): ModelButton {.importc: "gtk_model_button_new", 
    libgtk.}

type 
  ModuleInitFunc* = proc (argc: var gint; argv: var cstringArray) {.cdecl.}
type 
  ModuleDisplayInitFunc* = proc (display: gdk3.Display) {.cdecl.}

template gtk_mount_operation*(o: expr): expr = 
  (g_type_check_instance_cast(o, mount_operation_get_type(), MountOperationObj))

template gtk_mount_operation_class*(k: expr): expr = 
  (g_type_check_class_cast(k, mount_operation_get_type(), 
                           MountOperationClassObj))

template gtk_is_mount_operation*(o: expr): expr = 
  (g_type_check_instance_type(o, mount_operation_get_type()))

template gtk_is_mount_operation_class*(k: expr): expr = 
  (g_type_check_class_type(k, mount_operation_get_type()))

template gtk_mount_operation_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, mount_operation_get_type(), 
                             MountOperationClassObj))

type 
  MountOperationPrivateObj = object 
  
type 
  MountOperation* =  ptr MountOperationObj
  MountOperationPtr* = ptr MountOperationObj
  MountOperationObj*{.final.} = object of gio.GMountOperationObj
    priv92: ptr MountOperationPrivateObj

type 
  MountOperationClass* =  ptr MountOperationClassObj
  MountOperationClassPtr* = ptr MountOperationClassObj
  MountOperationClassObj*{.final.} = object of gio.GMountOperationClassObj
    gtk_reserved891: proc () {.cdecl.}
    gtk_reserved892: proc () {.cdecl.}
    gtk_reserved893: proc () {.cdecl.}
    gtk_reserved894: proc () {.cdecl.}

proc mount_operation_get_type*(): GType {.
    importc: "gtk_mount_operation_get_type", libgtk.}
proc mount_operation_new*(parent: Window): gio.GMountOperation {.
    importc: "gtk_mount_operation_new", libgtk.}
proc is_showing*(op: MountOperation): gboolean {.
    importc: "gtk_mount_operation_is_showing", libgtk.}
proc set_parent*(op: MountOperation; 
                                     parent: Window) {.
    importc: "gtk_mount_operation_set_parent", libgtk.}
proc `parent=`*(op: MountOperation; 
                                     parent: Window) {.
    importc: "gtk_mount_operation_set_parent", libgtk.}
proc get_parent*(op: MountOperation): Window {.
    importc: "gtk_mount_operation_get_parent", libgtk.}
proc parent*(op: MountOperation): Window {.
    importc: "gtk_mount_operation_get_parent", libgtk.}
proc set_screen*(op: MountOperation; 
                                     screen: gdk3.Screen) {.
    importc: "gtk_mount_operation_set_screen", libgtk.}
proc `screen=`*(op: MountOperation; 
                                     screen: gdk3.Screen) {.
    importc: "gtk_mount_operation_set_screen", libgtk.}
proc get_screen*(op: MountOperation): gdk3.Screen {.
    importc: "gtk_mount_operation_get_screen", libgtk.}
proc screen*(op: MountOperation): gdk3.Screen {.
    importc: "gtk_mount_operation_get_screen", libgtk.}

template gtk_notebook*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, notebook_get_type(), NotebookObj))

template gtk_notebook_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, notebook_get_type(), NotebookClassObj))

template gtk_is_notebook*(obj: expr): expr = 
  (g_type_check_instance_type(obj, notebook_get_type()))

template gtk_is_notebook_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, notebook_get_type()))

template gtk_notebook_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, notebook_get_type(), NotebookClassObj))

type 
  NotebookTab* {.size: sizeof(cint), pure.} = enum 
    FIRST, LAST
  NotebookPrivateObj = object 
  
type 
  Notebook* =  ptr NotebookObj
  NotebookPtr* = ptr NotebookObj
  NotebookObj*{.final.} = object of ContainerObj
    priv93: ptr NotebookPrivateObj

type 
  NotebookClass* =  ptr NotebookClassObj
  NotebookClassPtr* = ptr NotebookClassObj
  NotebookClassObj*{.final.} = object of ContainerClassObj
    switch_page*: proc (notebook: Notebook; page: Widget; 
                        page_num: guint) {.cdecl.}
    select_page*: proc (notebook: Notebook; move_focus: gboolean): gboolean {.cdecl.}
    focus_tab*: proc (notebook: Notebook; `type`: NotebookTab): gboolean {.cdecl.}
    change_current_page*: proc (notebook: Notebook; offset: gint): gboolean {.cdecl.}
    move_focus_out*: proc (notebook: Notebook; 
                           direction: DirectionType) {.cdecl.}
    reorder_tab*: proc (notebook: Notebook; 
                        direction: DirectionType; move_to_last: gboolean): gboolean {.cdecl.}
    insert_page*: proc (notebook: Notebook; child: Widget; 
                        tab_label: Widget; menu_label: Widget; 
                        position: gint): gint {.cdecl.}
    create_window*: proc (notebook: Notebook; page: Widget; 
                          x: gint; y: gint): Notebook {.cdecl.}
    page_reordered*: proc (notebook: Notebook; child: Widget; 
                           page_num: guint) {.cdecl.}
    page_removed*: proc (notebook: Notebook; child: Widget; 
                         page_num: guint) {.cdecl.}
    page_added*: proc (notebook: Notebook; child: Widget; 
                       page_num: guint) {.cdecl.}
    gtk_reserved901: proc () {.cdecl.}
    gtk_reserved902: proc () {.cdecl.}
    gtk_reserved903: proc () {.cdecl.}
    gtk_reserved904: proc () {.cdecl.}
    gtk_reserved905: proc () {.cdecl.}
    gtk_reserved906: proc () {.cdecl.}
    gtk_reserved907: proc () {.cdecl.}
    gtk_reserved908: proc () {.cdecl.}

proc notebook_get_type*(): GType {.importc: "gtk_notebook_get_type", 
    libgtk.}
proc notebook_new*(): Notebook {.importc: "gtk_notebook_new", 
    libgtk.}
proc append_page*(notebook: Notebook; 
                               child: Widget; tab_label: Widget): gint {.
    importc: "gtk_notebook_append_page", libgtk.}
proc append_page_menu*(notebook: Notebook; 
                                    child: Widget; 
                                    tab_label: Widget; 
                                    menu_label: Widget): gint {.
    importc: "gtk_notebook_append_page_menu", libgtk.}
proc prepend_page*(notebook: Notebook; 
                                child: Widget; tab_label: Widget): gint {.
    importc: "gtk_notebook_prepend_page", libgtk.}
proc prepend_page_menu*(notebook: Notebook; 
                                     child: Widget; 
                                     tab_label: Widget; 
                                     menu_label: Widget): gint {.
    importc: "gtk_notebook_prepend_page_menu", libgtk.}
proc insert_page*(notebook: Notebook; 
                               child: Widget; tab_label: Widget; 
                               position: gint): gint {.
    importc: "gtk_notebook_insert_page", libgtk.}
proc insert_page_menu*(notebook: Notebook; 
                                    child: Widget; 
                                    tab_label: Widget; 
                                    menu_label: Widget; position: gint): gint {.
    importc: "gtk_notebook_insert_page_menu", libgtk.}
proc remove_page*(notebook: Notebook; page_num: gint) {.
    importc: "gtk_notebook_remove_page", libgtk.}
proc set_group_name*(notebook: Notebook; 
                                  group_name: cstring) {.
    importc: "gtk_notebook_set_group_name", libgtk.}
proc `group_name=`*(notebook: Notebook; 
                                  group_name: cstring) {.
    importc: "gtk_notebook_set_group_name", libgtk.}
proc get_group_name*(notebook: Notebook): cstring {.
    importc: "gtk_notebook_get_group_name", libgtk.}
proc group_name*(notebook: Notebook): cstring {.
    importc: "gtk_notebook_get_group_name", libgtk.}
proc get_current_page*(notebook: Notebook): gint {.
    importc: "gtk_notebook_get_current_page", libgtk.}
proc current_page*(notebook: Notebook): gint {.
    importc: "gtk_notebook_get_current_page", libgtk.}
proc get_nth_page*(notebook: Notebook; page_num: gint): Widget {.
    importc: "gtk_notebook_get_nth_page", libgtk.}
proc nth_page*(notebook: Notebook; page_num: gint): Widget {.
    importc: "gtk_notebook_get_nth_page", libgtk.}
proc get_n_pages*(notebook: Notebook): gint {.
    importc: "gtk_notebook_get_n_pages", libgtk.}
proc n_pages*(notebook: Notebook): gint {.
    importc: "gtk_notebook_get_n_pages", libgtk.}
proc page_num*(notebook: Notebook; child: Widget): gint {.
    importc: "gtk_notebook_page_num", libgtk.}
proc set_current_page*(notebook: Notebook; page_num: gint) {.
    importc: "gtk_notebook_set_current_page", libgtk.}
proc `current_page=`*(notebook: Notebook; page_num: gint) {.
    importc: "gtk_notebook_set_current_page", libgtk.}
proc next_page*(notebook: Notebook) {.
    importc: "gtk_notebook_next_page", libgtk.}
proc prev_page*(notebook: Notebook) {.
    importc: "gtk_notebook_prev_page", libgtk.}
proc set_show_border*(notebook: Notebook; 
                                   show_border: gboolean) {.
    importc: "gtk_notebook_set_show_border", libgtk.}
proc `show_border=`*(notebook: Notebook; 
                                   show_border: gboolean) {.
    importc: "gtk_notebook_set_show_border", libgtk.}
proc get_show_border*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_show_border", libgtk.}
proc show_border*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_show_border", libgtk.}
proc set_show_tabs*(notebook: Notebook; 
                                 show_tabs: gboolean) {.
    importc: "gtk_notebook_set_show_tabs", libgtk.}
proc `show_tabs=`*(notebook: Notebook; 
                                 show_tabs: gboolean) {.
    importc: "gtk_notebook_set_show_tabs", libgtk.}
proc get_show_tabs*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_show_tabs", libgtk.}
proc show_tabs*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_show_tabs", libgtk.}
proc set_tab_pos*(notebook: Notebook; pos: PositionType) {.
    importc: "gtk_notebook_set_tab_pos", libgtk.}
proc `tab_pos=`*(notebook: Notebook; pos: PositionType) {.
    importc: "gtk_notebook_set_tab_pos", libgtk.}
proc get_tab_pos*(notebook: Notebook): PositionType {.
    importc: "gtk_notebook_get_tab_pos", libgtk.}
proc tab_pos*(notebook: Notebook): PositionType {.
    importc: "gtk_notebook_get_tab_pos", libgtk.}
proc set_scrollable*(notebook: Notebook; 
                                  scrollable: gboolean) {.
    importc: "gtk_notebook_set_scrollable", libgtk.}
proc `scrollable=`*(notebook: Notebook; 
                                  scrollable: gboolean) {.
    importc: "gtk_notebook_set_scrollable", libgtk.}
proc get_scrollable*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_scrollable", libgtk.}
proc scrollable*(notebook: Notebook): gboolean {.
    importc: "gtk_notebook_get_scrollable", libgtk.}
proc get_tab_hborder*(notebook: Notebook): guint16 {.
    importc: "gtk_notebook_get_tab_hborder", libgtk.}
proc tab_hborder*(notebook: Notebook): guint16 {.
    importc: "gtk_notebook_get_tab_hborder", libgtk.}
proc get_tab_vborder*(notebook: Notebook): guint16 {.
    importc: "gtk_notebook_get_tab_vborder", libgtk.}
proc tab_vborder*(notebook: Notebook): guint16 {.
    importc: "gtk_notebook_get_tab_vborder", libgtk.}
proc popup_enable*(notebook: Notebook) {.
    importc: "gtk_notebook_popup_enable", libgtk.}
proc popup_disable*(notebook: Notebook) {.
    importc: "gtk_notebook_popup_disable", libgtk.}
proc get_tab_label*(notebook: Notebook; 
                                 child: Widget): Label {.
    importc: "gtk_notebook_get_tab_label", libgtk.}
proc tab_label*(notebook: Notebook; 
                                 child: Widget): Label {.
    importc: "gtk_notebook_get_tab_label", libgtk.}
proc set_tab_label*(notebook: Notebook; 
                                 child: Widget; 
                                 tab_label: Widget) {.
    importc: "gtk_notebook_set_tab_label", libgtk.}
proc `tab_label=`*(notebook: Notebook; 
                                 child: Widget; 
                                 tab_label: Widget) {.
    importc: "gtk_notebook_set_tab_label", libgtk.}
proc set_tab_label_text*(notebook: Notebook; 
                                      child: Widget; 
                                      tab_text: cstring) {.
    importc: "gtk_notebook_set_tab_label_text", libgtk.}
proc `tab_label_text=`*(notebook: Notebook; 
                                      child: Widget; 
                                      tab_text: cstring) {.
    importc: "gtk_notebook_set_tab_label_text", libgtk.}
proc get_tab_label_text*(notebook: Notebook; 
                                      child: Widget): cstring {.
    importc: "gtk_notebook_get_tab_label_text", libgtk.}
proc tab_label_text*(notebook: Notebook; 
                                      child: Widget): cstring {.
    importc: "gtk_notebook_get_tab_label_text", libgtk.}
proc get_menu_label*(notebook: Notebook; 
                                  child: Widget): Label {.
    importc: "gtk_notebook_get_menu_label", libgtk.}
proc menu_label*(notebook: Notebook; 
                                  child: Widget): Label {.
    importc: "gtk_notebook_get_menu_label", libgtk.}
proc set_menu_label*(notebook: Notebook; 
                                  child: Widget; 
                                  menu_label: Widget) {.
    importc: "gtk_notebook_set_menu_label", libgtk.}
proc `menu_label=`*(notebook: Notebook; 
                                  child: Widget; 
                                  menu_label: Widget) {.
    importc: "gtk_notebook_set_menu_label", libgtk.}
proc set_menu_label_text*(notebook: Notebook; 
    child: Widget; menu_text: cstring) {.
    importc: "gtk_notebook_set_menu_label_text", libgtk.}
proc `menu_label_text=`*(notebook: Notebook; 
    child: Widget; menu_text: cstring) {.
    importc: "gtk_notebook_set_menu_label_text", libgtk.}
proc get_menu_label_text*(notebook: Notebook; 
    child: Widget): cstring {.
    importc: "gtk_notebook_get_menu_label_text", libgtk.}
proc menu_label_text*(notebook: Notebook; 
    child: Widget): cstring {.
    importc: "gtk_notebook_get_menu_label_text", libgtk.}
proc reorder_child*(notebook: Notebook; 
                                 child: Widget; position: gint) {.
    importc: "gtk_notebook_reorder_child", libgtk.}
proc get_tab_reorderable*(notebook: Notebook; 
    child: Widget): gboolean {.importc: "gtk_notebook_get_tab_reorderable", 
                                      libgtk.}
proc tab_reorderable*(notebook: Notebook; 
    child: Widget): gboolean {.importc: "gtk_notebook_get_tab_reorderable", 
                                      libgtk.}
proc set_tab_reorderable*(notebook: Notebook; 
    child: Widget; reorderable: gboolean) {.
    importc: "gtk_notebook_set_tab_reorderable", libgtk.}
proc `tab_reorderable=`*(notebook: Notebook; 
    child: Widget; reorderable: gboolean) {.
    importc: "gtk_notebook_set_tab_reorderable", libgtk.}
proc get_tab_detachable*(notebook: Notebook; 
                                      child: Widget): gboolean {.
    importc: "gtk_notebook_get_tab_detachable", libgtk.}
proc tab_detachable*(notebook: Notebook; 
                                      child: Widget): gboolean {.
    importc: "gtk_notebook_get_tab_detachable", libgtk.}
proc set_tab_detachable*(notebook: Notebook; 
                                      child: Widget; 
                                      detachable: gboolean) {.
    importc: "gtk_notebook_set_tab_detachable", libgtk.}
proc `tab_detachable=`*(notebook: Notebook; 
                                      child: Widget; 
                                      detachable: gboolean) {.
    importc: "gtk_notebook_set_tab_detachable", libgtk.}
proc get_action_widget*(notebook: Notebook; 
                                     pack_type: PackType): Widget {.
    importc: "gtk_notebook_get_action_widget", libgtk.}
proc action_widget*(notebook: Notebook; 
                                     pack_type: PackType): Widget {.
    importc: "gtk_notebook_get_action_widget", libgtk.}
proc set_action_widget*(notebook: Notebook; 
                                     widget: Widget; 
                                     pack_type: PackType) {.
    importc: "gtk_notebook_set_action_widget", libgtk.}
proc `action_widget=`*(notebook: Notebook; 
                                     widget: Widget; 
                                     pack_type: PackType) {.
    importc: "gtk_notebook_set_action_widget", libgtk.}

template gtk_offscreen_window*(o: expr): expr = 
  (g_type_check_instance_cast(o, offscreen_window_get_type(), 
                              OffscreenWindowObj))

template gtk_offscreen_window_class*(k: expr): expr = 
  (g_type_check_class_cast(k, offscreen_window_get_type(), 
                           OffscreenWindowClassObj))

template gtk_is_offscreen_window*(o: expr): expr = 
  (g_type_check_instance_type(o, offscreen_window_get_type()))

template gtk_is_offscreen_window_class*(k: expr): expr = 
  (g_type_check_class_type(k, offscreen_window_get_type()))

template gtk_offscreen_window_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, offscreen_window_get_type(), 
                             OffscreenWindowClassObj))

type 
  OffscreenWindow* =  ptr OffscreenWindowObj
  OffscreenWindowPtr* = ptr OffscreenWindowObj
  OffscreenWindowObj*{.final.} = object of WindowObj

type 
  OffscreenWindowClass* =  ptr OffscreenWindowClassObj
  OffscreenWindowClassPtr* = ptr OffscreenWindowClassObj
  OffscreenWindowClassObj*{.final.} = object of WindowClassObj
    gtk_reserved911: proc () {.cdecl.}
    gtk_reserved912: proc () {.cdecl.}
    gtk_reserved913: proc () {.cdecl.}
    gtk_reserved914: proc () {.cdecl.}

proc offscreen_window_get_type*(): GType {.
    importc: "gtk_offscreen_window_get_type", libgtk.}
proc offscreen_window_new*(): OffscreenWindow {.
    importc: "gtk_offscreen_window_new", libgtk.}
proc get_surface*(offscreen: OffscreenWindow): cairo.Surface {.
    importc: "gtk_offscreen_window_get_surface", libgtk.}
proc surface*(offscreen: OffscreenWindow): cairo.Surface {.
    importc: "gtk_offscreen_window_get_surface", libgtk.}
proc get_pixbuf*(offscreen: OffscreenWindow): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_offscreen_window_get_pixbuf", libgtk.}
proc pixbuf*(offscreen: OffscreenWindow): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_offscreen_window_get_pixbuf", libgtk.}

template gtk_orientable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, orientable_get_type(), OrientableObj))

template gtk_orientable_class*(vtable: expr): expr = 
  (g_type_check_class_cast(vtable, orientable_get_type(), OrientableIfaceObj))

template gtk_is_orientable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, orientable_get_type()))

template gtk_is_orientable_class*(vtable: expr): expr = 
  (g_type_check_class_type(vtable, orientable_get_type()))

template gtk_orientable_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, orientable_get_type(), 
                                 OrientableIfaceObj))

type 
  Orientable* =  ptr OrientableObj
  OrientablePtr* = ptr OrientableObj
  OrientableObj* = object 
  
type 
  OrientableIface* =  ptr OrientableIfaceObj
  OrientableIfacePtr* = ptr OrientableIfaceObj
  OrientableIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj

proc orientable_get_type*(): GType {.importc: "gtk_orientable_get_type", 
    libgtk.}
proc set_orientation*(orientable: Orientable; 
                                     orientation: Orientation) {.
    importc: "gtk_orientable_set_orientation", libgtk.}
proc `orientation=`*(orientable: Orientable; 
                                     orientation: Orientation) {.
    importc: "gtk_orientable_set_orientation", libgtk.}
proc get_orientation*(orientable: Orientable): Orientation {.
    importc: "gtk_orientable_get_orientation", libgtk.}
proc orientation*(orientable: Orientable): Orientation {.
    importc: "gtk_orientable_get_orientation", libgtk.}

template gtk_overlay*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, overlay_get_type(), OverlayObj))

template gtk_overlay_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, overlay_get_type(), OverlayClassObj))

template gtk_is_overlay*(obj: expr): expr = 
  (g_type_check_instance_type(obj, overlay_get_type()))

template gtk_is_overlay_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, overlay_get_type()))

template gtk_overlay_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, overlay_get_type(), OverlayClassObj))

type 
  OverlayPrivateObj = object 
  
type 
  Overlay* =  ptr OverlayObj
  OverlayPtr* = ptr OverlayObj
  OverlayObj*{.final.} = object of BinObj
    priv94: ptr OverlayPrivateObj

type 
  OverlayClass* =  ptr OverlayClassObj
  OverlayClassPtr* = ptr OverlayClassObj
  OverlayClassObj*{.final.} = object of BinClassObj
    get_child_position*: proc (overlay: Overlay; widget: Widget; 
                               allocation: Allocation): gboolean {.cdecl.}
    gtk_reserved921: proc () {.cdecl.}
    gtk_reserved922: proc () {.cdecl.}
    gtk_reserved923: proc () {.cdecl.}
    gtk_reserved924: proc () {.cdecl.}
    gtk_reserved925: proc () {.cdecl.}
    gtk_reserved926: proc () {.cdecl.}
    gtk_reserved927: proc () {.cdecl.}
    gtk_reserved928: proc () {.cdecl.}

proc overlay_get_type*(): GType {.importc: "gtk_overlay_get_type", 
                                      libgtk.}
proc overlay_new*(): Overlay {.importc: "gtk_overlay_new", 
    libgtk.}
proc add_overlay*(overlay: Overlay; widget: Widget) {.
    importc: "gtk_overlay_add_overlay", libgtk.}

type 
  PaperSize* =  ptr PaperSizeObj
  PaperSizePtr* = ptr PaperSizeObj
  PaperSizeObj* = object 
  
const 
  PAPER_NAME_A3* = "iso_a3"
const 
  PAPER_NAME_A4* = "iso_a4"
const 
  PAPER_NAME_A5* = "iso_a5"
const 
  PAPER_NAME_B5* = "iso_b5"
const 
  PAPER_NAME_LETTER* = "na_letter"
const 
  PAPER_NAME_EXECUTIVE* = "na_executive"
const 
  PAPER_NAME_LEGAL* = "na_legal"
proc paper_size_get_type*(): GType {.importc: "gtk_paper_size_get_type", 
    libgtk.}
proc paper_size_new*(name: cstring): PaperSize {.
    importc: "gtk_paper_size_new", libgtk.}
proc paper_size_new_from_ppd*(ppd_name: cstring; 
                                  ppd_display_name: cstring; width: gdouble; 
                                  height: gdouble): PaperSize {.
    importc: "gtk_paper_size_new_from_ppd", libgtk.}
proc paper_size_new_from_ipp*(ipp_name: cstring; width: gdouble; 
                                  height: gdouble): PaperSize {.
    importc: "gtk_paper_size_new_from_ipp", libgtk.}
proc paper_size_new_custom*(name: cstring; display_name: cstring; 
                                width: gdouble; height: gdouble; unit: Unit): PaperSize {.
    importc: "gtk_paper_size_new_custom", libgtk.}
proc copy*(other: PaperSize): PaperSize {.
    importc: "gtk_paper_size_copy", libgtk.}
proc free*(size: PaperSize) {.
    importc: "gtk_paper_size_free", libgtk.}
proc is_equal*(size1: PaperSize; size2: PaperSize): gboolean {.
    importc: "gtk_paper_size_is_equal", libgtk.}
proc paper_size_get_paper_sizes*(include_custom: gboolean): glib.GList {.
    importc: "gtk_paper_size_get_paper_sizes", libgtk.}
proc get_name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_name", libgtk.}
proc name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_name", libgtk.}
proc get_display_name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_display_name", libgtk.}
proc display_name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_display_name", libgtk.}
proc get_ppd_name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_ppd_name", libgtk.}
proc ppd_name*(size: PaperSize): cstring {.
    importc: "gtk_paper_size_get_ppd_name", libgtk.}
proc get_width*(size: PaperSize; unit: Unit): gdouble {.
    importc: "gtk_paper_size_get_width", libgtk.}
proc width*(size: PaperSize; unit: Unit): gdouble {.
    importc: "gtk_paper_size_get_width", libgtk.}
proc get_height*(size: PaperSize; unit: Unit): gdouble {.
    importc: "gtk_paper_size_get_height", libgtk.}
proc height*(size: PaperSize; unit: Unit): gdouble {.
    importc: "gtk_paper_size_get_height", libgtk.}
proc is_custom*(size: PaperSize): gboolean {.
    importc: "gtk_paper_size_is_custom", libgtk.}
proc is_ipp*(size: PaperSize): gboolean {.
    importc: "gtk_paper_size_is_ipp", libgtk.}
proc set_size*(size: PaperSize; width: gdouble; 
                              height: gdouble; unit: Unit) {.
    importc: "gtk_paper_size_set_size", libgtk.}
proc `size=`*(size: PaperSize; width: gdouble; 
                              height: gdouble; unit: Unit) {.
    importc: "gtk_paper_size_set_size", libgtk.}
proc get_default_top_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_top_margin", 
                              libgtk.}
proc default_top_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_top_margin", 
                              libgtk.}
proc get_default_bottom_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_bottom_margin", 
                              libgtk.}
proc default_bottom_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_bottom_margin", 
                              libgtk.}
proc get_default_left_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_left_margin", 
                              libgtk.}
proc default_left_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_left_margin", 
                              libgtk.}
proc get_default_right_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_right_margin", 
                              libgtk.}
proc default_right_margin*(size: PaperSize; 
    unit: Unit): gdouble {.importc: "gtk_paper_size_get_default_right_margin", 
                              libgtk.}
proc paper_size_get_default*(): cstring {.
    importc: "gtk_paper_size_get_default", libgtk.}
proc paper_size_new_from_key_file*(key_file: glib.GKeyFile; 
    group_name: cstring; error: var glib.GError): PaperSize {.
    importc: "gtk_paper_size_new_from_key_file", libgtk.}
proc to_key_file*(size: PaperSize; 
                                 key_file: glib.GKeyFile; group_name: cstring) {.
    importc: "gtk_paper_size_to_key_file", libgtk.}

type 
  PageSetup* =  ptr PageSetupObj
  PageSetupPtr* = ptr PageSetupObj
  PageSetupObj* = object 
  
template gtk_page_setup*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, page_setup_get_type(), PageSetupObj))

template gtk_is_page_setup*(obj: expr): expr = 
  (g_type_check_instance_type(obj, page_setup_get_type()))

proc page_setup_get_type*(): GType {.importc: "gtk_page_setup_get_type", 
    libgtk.}
proc page_setup_new*(): PageSetup {.importc: "gtk_page_setup_new", 
    libgtk.}
proc copy*(other: PageSetup): PageSetup {.
    importc: "gtk_page_setup_copy", libgtk.}
proc get_orientation*(setup: PageSetup): PageOrientation {.
    importc: "gtk_page_setup_get_orientation", libgtk.}
proc orientation*(setup: PageSetup): PageOrientation {.
    importc: "gtk_page_setup_get_orientation", libgtk.}
proc set_orientation*(setup: PageSetup; 
                                     orientation: PageOrientation) {.
    importc: "gtk_page_setup_set_orientation", libgtk.}
proc `orientation=`*(setup: PageSetup; 
                                     orientation: PageOrientation) {.
    importc: "gtk_page_setup_set_orientation", libgtk.}
proc get_paper_size*(setup: PageSetup): PaperSize {.
    importc: "gtk_page_setup_get_paper_size", libgtk.}
proc paper_size*(setup: PageSetup): PaperSize {.
    importc: "gtk_page_setup_get_paper_size", libgtk.}
proc set_paper_size*(setup: PageSetup; 
                                    size: PaperSize) {.
    importc: "gtk_page_setup_set_paper_size", libgtk.}
proc `paper_size=`*(setup: PageSetup; 
                                    size: PaperSize) {.
    importc: "gtk_page_setup_set_paper_size", libgtk.}
proc get_top_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_top_margin", libgtk.}
proc top_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_top_margin", libgtk.}
proc set_top_margin*(setup: PageSetup; margin: gdouble; 
                                    unit: Unit) {.
    importc: "gtk_page_setup_set_top_margin", libgtk.}
proc `top_margin=`*(setup: PageSetup; margin: gdouble; 
                                    unit: Unit) {.
    importc: "gtk_page_setup_set_top_margin", libgtk.}
proc get_bottom_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_bottom_margin", libgtk.}
proc bottom_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_bottom_margin", libgtk.}
proc set_bottom_margin*(setup: PageSetup; 
    margin: gdouble; unit: Unit) {.importc: "gtk_page_setup_set_bottom_margin", 
                                      libgtk.}
proc `bottom_margin=`*(setup: PageSetup; 
    margin: gdouble; unit: Unit) {.importc: "gtk_page_setup_set_bottom_margin", 
                                      libgtk.}
proc get_left_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_left_margin", libgtk.}
proc left_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_left_margin", libgtk.}
proc set_left_margin*(setup: PageSetup; margin: gdouble; 
                                     unit: Unit) {.
    importc: "gtk_page_setup_set_left_margin", libgtk.}
proc `left_margin=`*(setup: PageSetup; margin: gdouble; 
                                     unit: Unit) {.
    importc: "gtk_page_setup_set_left_margin", libgtk.}
proc get_right_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_right_margin", libgtk.}
proc right_margin*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_right_margin", libgtk.}
proc set_right_margin*(setup: PageSetup; 
                                      margin: gdouble; unit: Unit) {.
    importc: "gtk_page_setup_set_right_margin", libgtk.}
proc `right_margin=`*(setup: PageSetup; 
                                      margin: gdouble; unit: Unit) {.
    importc: "gtk_page_setup_set_right_margin", libgtk.}
proc set_paper_size_and_default_margins*(
    setup: PageSetup; size: PaperSize) {.
    importc: "gtk_page_setup_set_paper_size_and_default_margins", libgtk.}
proc `paper_size_and_default_margins=`*(
    setup: PageSetup; size: PaperSize) {.
    importc: "gtk_page_setup_set_paper_size_and_default_margins", libgtk.}
proc get_paper_width*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_paper_width", libgtk.}
proc paper_width*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_paper_width", libgtk.}
proc get_paper_height*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_paper_height", libgtk.}
proc paper_height*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_paper_height", libgtk.}
proc get_page_width*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_page_width", libgtk.}
proc page_width*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_page_width", libgtk.}
proc get_page_height*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_page_height", libgtk.}
proc page_height*(setup: PageSetup; unit: Unit): gdouble {.
    importc: "gtk_page_setup_get_page_height", libgtk.}
proc page_setup_new_from_file*(file_name: cstring; error: var glib.GError): PageSetup {.
    importc: "gtk_page_setup_new_from_file", libgtk.}
proc load_file*(setup: PageSetup; file_name: cstring; 
                               error: var glib.GError): gboolean {.
    importc: "gtk_page_setup_load_file", libgtk.}
proc to_file*(setup: PageSetup; file_name: cstring; 
                             error: var glib.GError): gboolean {.
    importc: "gtk_page_setup_to_file", libgtk.}
proc page_setup_new_from_key_file*(key_file: glib.GKeyFile; 
    group_name: cstring; error: var glib.GError): PageSetup {.
    importc: "gtk_page_setup_new_from_key_file", libgtk.}
proc load_key_file*(setup: PageSetup; 
                                   key_file: glib.GKeyFile; 
                                   group_name: cstring; 
                                   error: var glib.GError): gboolean {.
    importc: "gtk_page_setup_load_key_file", libgtk.}
proc to_key_file*(setup: PageSetup; 
                                 key_file: glib.GKeyFile; group_name: cstring) {.
    importc: "gtk_page_setup_to_key_file", libgtk.}

template gtk_paned*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, paned_get_type(), PanedObj))

template gtk_paned_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, paned_get_type(), PanedClassObj))

template gtk_is_paned*(obj: expr): expr = 
  (g_type_check_instance_type(obj, paned_get_type()))

template gtk_is_paned_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, paned_get_type()))

template gtk_paned_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, paned_get_type(), PanedClassObj))

type 
  PanedPrivateObj = object 
  
type 
  Paned* =  ptr PanedObj
  PanedPtr* = ptr PanedObj
  PanedObj* = object of ContainerObj
    priv95: ptr PanedPrivateObj

type 
  PanedClass* =  ptr PanedClassObj
  PanedClassPtr* = ptr PanedClassObj
  PanedClassObj = object of ContainerClassObj
    cycle_child_focus*: proc (paned: Paned; reverse: gboolean): gboolean {.cdecl.}
    toggle_handle_focus*: proc (paned: Paned): gboolean {.cdecl.}
    move_handle*: proc (paned: Paned; scroll: ScrollType): gboolean {.cdecl.}
    cycle_handle_focus*: proc (paned: Paned; reverse: gboolean): gboolean {.cdecl.}
    accept_position*: proc (paned: Paned): gboolean {.cdecl.}
    cancel_position*: proc (paned: Paned): gboolean {.cdecl.}
    gtk_reserved931: proc () {.cdecl.}
    gtk_reserved932: proc () {.cdecl.}
    gtk_reserved933: proc () {.cdecl.}
    gtk_reserved934: proc () {.cdecl.}

proc paned_get_type*(): GType {.importc: "gtk_paned_get_type", libgtk.}
proc paned_new*(orientation: Orientation): Paned {.
    importc: "gtk_paned_new", libgtk.}
proc add1*(paned: Paned; child: Widget) {.
    importc: "gtk_paned_add1", libgtk.}
proc add2*(paned: Paned; child: Widget) {.
    importc: "gtk_paned_add2", libgtk.}
proc pack1*(paned: Paned; child: Widget; 
                      resize: gboolean; shrink: gboolean) {.
    importc: "gtk_paned_pack1", libgtk.}
proc pack2*(paned: Paned; child: Widget; 
                      resize: gboolean; shrink: gboolean) {.
    importc: "gtk_paned_pack2", libgtk.}
proc get_position*(paned: Paned): gint {.
    importc: "gtk_paned_get_position", libgtk.}
proc position*(paned: Paned): gint {.
    importc: "gtk_paned_get_position", libgtk.}
proc set_position*(paned: Paned; position: gint) {.
    importc: "gtk_paned_set_position", libgtk.}
proc `position=`*(paned: Paned; position: gint) {.
    importc: "gtk_paned_set_position", libgtk.}
proc get_child1*(paned: Paned): Widget {.
    importc: "gtk_paned_get_child1", libgtk.}
proc child1*(paned: Paned): Widget {.
    importc: "gtk_paned_get_child1", libgtk.}
proc get_child2*(paned: Paned): Widget {.
    importc: "gtk_paned_get_child2", libgtk.}
proc child2*(paned: Paned): Widget {.
    importc: "gtk_paned_get_child2", libgtk.}
proc get_handle_window*(paned: Paned): gdk3.Window {.
    importc: "gtk_paned_get_handle_window", libgtk.}
proc handle_window*(paned: Paned): gdk3.Window {.
    importc: "gtk_paned_get_handle_window", libgtk.}
proc set_wide_handle*(paned: Paned; wide: gboolean) {.
    importc: "gtk_paned_set_wide_handle", libgtk.}
proc `wide_handle=`*(paned: Paned; wide: gboolean) {.
    importc: "gtk_paned_set_wide_handle", libgtk.}
proc get_wide_handle*(paned: Paned): gboolean {.
    importc: "gtk_paned_get_wide_handle", libgtk.}
proc wide_handle*(paned: Paned): gboolean {.
    importc: "gtk_paned_get_wide_handle", libgtk.}

template gtk_places_sidebar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, places_sidebar_get_type(), PlacesSidebarObj))

template gtk_places_sidebar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, places_sidebar_get_type(), 
                           PlacesSidebarClass))

template gtk_is_places_sidebar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, places_sidebar_get_type()))

template gtk_is_places_sidebar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, places_sidebar_get_type()))

template gtk_places_sidebar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, places_sidebar_get_type(), 
                             PlacesSidebarClass))

type 
  PlacesSidebar* =  ptr PlacesSidebarObj
  PlacesSidebarPtr* = ptr PlacesSidebarObj
  PlacesSidebarObj* = object 
  
type 
  PlacesOpenFlags* {.size: sizeof(cint), pure.} = enum 
    NORMAL = 1 shl 0, NEW_TAB = 1 shl 1, 
    NEW_WINDOW = 1 shl 2
proc places_sidebar_get_type*(): GType {.
    importc: "gtk_places_sidebar_get_type", libgtk.}
proc places_sidebar_new*(): PlacesSidebar {.
    importc: "gtk_places_sidebar_new", libgtk.}
proc get_open_flags*(sidebar: PlacesSidebar): PlacesOpenFlags {.
    importc: "gtk_places_sidebar_get_open_flags", libgtk.}
proc open_flags*(sidebar: PlacesSidebar): PlacesOpenFlags {.
    importc: "gtk_places_sidebar_get_open_flags", libgtk.}
proc set_open_flags*(sidebar: PlacesSidebar; 
    flags: PlacesOpenFlags) {.importc: "gtk_places_sidebar_set_open_flags", 
                                 libgtk.}
proc `open_flags=`*(sidebar: PlacesSidebar; 
    flags: PlacesOpenFlags) {.importc: "gtk_places_sidebar_set_open_flags", 
                                 libgtk.}
proc get_location*(sidebar: PlacesSidebar): gio.GFile {.
    importc: "gtk_places_sidebar_get_location", libgtk.}
proc location*(sidebar: PlacesSidebar): gio.GFile {.
    importc: "gtk_places_sidebar_get_location", libgtk.}
proc set_location*(sidebar: PlacesSidebar; 
                                      location: gio.GFile) {.
    importc: "gtk_places_sidebar_set_location", libgtk.}
proc `location=`*(sidebar: PlacesSidebar; 
                                      location: gio.GFile) {.
    importc: "gtk_places_sidebar_set_location", libgtk.}
proc get_show_desktop*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_desktop", libgtk.}
proc show_desktop*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_desktop", libgtk.}
proc set_show_desktop*(sidebar: PlacesSidebar; 
    show_desktop: gboolean) {.importc: "gtk_places_sidebar_set_show_desktop", 
                              libgtk.}
proc `show_desktop=`*(sidebar: PlacesSidebar; 
    show_desktop: gboolean) {.importc: "gtk_places_sidebar_set_show_desktop", 
                              libgtk.}
proc get_show_connect_to_server*(
    sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_connect_to_server", libgtk.}
proc show_connect_to_server*(
    sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_connect_to_server", libgtk.}
proc set_show_connect_to_server*(
    sidebar: PlacesSidebar; show_connect_to_server: gboolean) {.
    importc: "gtk_places_sidebar_set_show_connect_to_server", libgtk.}
proc `show_connect_to_server=`*(
    sidebar: PlacesSidebar; show_connect_to_server: gboolean) {.
    importc: "gtk_places_sidebar_set_show_connect_to_server", libgtk.}
proc get_show_enter_location*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_enter_location", libgtk.}
proc show_enter_location*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_show_enter_location", libgtk.}
proc set_show_enter_location*(
    sidebar: PlacesSidebar; show_enter_location: gboolean) {.
    importc: "gtk_places_sidebar_set_show_enter_location", libgtk.}
proc `show_enter_location=`*(
    sidebar: PlacesSidebar; show_enter_location: gboolean) {.
    importc: "gtk_places_sidebar_set_show_enter_location", libgtk.}
proc set_local_only*(sidebar: PlacesSidebar; 
    local_only: gboolean) {.importc: "gtk_places_sidebar_set_local_only", 
                            libgtk.}
proc `local_only=`*(sidebar: PlacesSidebar; 
    local_only: gboolean) {.importc: "gtk_places_sidebar_set_local_only", 
                            libgtk.}
proc get_local_only*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_local_only", libgtk.}
proc local_only*(sidebar: PlacesSidebar): gboolean {.
    importc: "gtk_places_sidebar_get_local_only", libgtk.}
proc add_shortcut*(sidebar: PlacesSidebar; 
                                      location: gio.GFile) {.
    importc: "gtk_places_sidebar_add_shortcut", libgtk.}
proc remove_shortcut*(sidebar: PlacesSidebar; 
    location: gio.GFile) {.importc: "gtk_places_sidebar_remove_shortcut", 
                           libgtk.}
proc list_shortcuts*(sidebar: PlacesSidebar): glib.GSList {.
    importc: "gtk_places_sidebar_list_shortcuts", libgtk.}
proc get_nth_bookmark*(sidebar: PlacesSidebar; 
    n: gint): gio.GFile {.importc: "gtk_places_sidebar_get_nth_bookmark", 
                          libgtk.}
proc nth_bookmark*(sidebar: PlacesSidebar; 
    n: gint): gio.GFile {.importc: "gtk_places_sidebar_get_nth_bookmark", 
                          libgtk.}

template gtk_popover_menu*(o: expr): expr = 
  (g_type_check_instance_cast(o, popover_menu_get_type(), PopoverMenuObj))

template gtk_popover_menu_class*(c: expr): expr = 
  (g_type_check_class_cast(c, popover_menu_get_type(), PopoverMenuClassObj))

template gtk_is_popover_menu*(o: expr): expr = 
  (g_type_check_instance_type(o, popover_menu_get_type()))

template gtk_is_popover_menu_class*(o: expr): expr = 
  (g_type_check_class_type(o, popover_menu_get_type()))

template gtk_popover_menu_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, popover_menu_get_type(), PopoverMenuClassObj))

type 
  PopoverMenu* =  ptr PopoverMenuObj
  PopoverMenuPtr* = ptr PopoverMenuObj
  PopoverMenuObj* = object 
  
type 
  PopoverMenuClass* =  ptr PopoverMenuClassObj
  PopoverMenuClassPtr* = ptr PopoverMenuClassObj
  PopoverMenuClassObj*{.final.} = object of PopoverClassObj
    reserved00: array[10, gpointer]

proc popover_menu_get_type*(): GType {.
    importc: "gtk_popover_menu_get_type", libgtk.}
proc popover_menu_new*(): PopoverMenu {.importc: "gtk_popover_menu_new", 
    libgtk.}
proc open_submenu*(popover: PopoverMenu; 
                                    name: cstring) {.
    importc: "gtk_popover_menu_open_submenu", libgtk.}

type 
  PrintContext* =  ptr PrintContextObj
  PrintContextPtr* = ptr PrintContextObj
  PrintContextObj* = object 
  
template gtk_print_context*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_context_get_type(), PrintContextObj))

template gtk_is_print_context*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_context_get_type()))

proc print_context_get_type*(): GType {.
    importc: "gtk_print_context_get_type", libgtk.}
proc get_cairo_context*(context: PrintContext): cairo.Context {.
    importc: "gtk_print_context_get_cairo_context", libgtk.}
proc cairo_context*(context: PrintContext): cairo.Context {.
    importc: "gtk_print_context_get_cairo_context", libgtk.}
proc get_page_setup*(context: PrintContext): PageSetup {.
    importc: "gtk_print_context_get_page_setup", libgtk.}
proc page_setup*(context: PrintContext): PageSetup {.
    importc: "gtk_print_context_get_page_setup", libgtk.}
proc get_width*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_width", libgtk.}
proc width*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_width", libgtk.}
proc get_height*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_height", libgtk.}
proc height*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_height", libgtk.}
proc get_dpi_x*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_dpi_x", libgtk.}
proc dpi_x*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_dpi_x", libgtk.}
proc get_dpi_y*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_dpi_y", libgtk.}
proc dpi_y*(context: PrintContext): gdouble {.
    importc: "gtk_print_context_get_dpi_y", libgtk.}
proc get_hard_margins*(context: PrintContext; 
    top: ptr gdouble; bottom: ptr gdouble; left: var gdouble; 
    right: var gdouble): gboolean {.importc: "gtk_print_context_get_hard_margins", 
                                    libgtk.}
proc hard_margins*(context: PrintContext; 
    top: ptr gdouble; bottom: ptr gdouble; left: var gdouble; 
    right: var gdouble): gboolean {.importc: "gtk_print_context_get_hard_margins", 
                                    libgtk.}
proc get_pango_fontmap*(context: PrintContext): pango.FontMap {.
    importc: "gtk_print_context_get_pango_fontmap", libgtk.}
proc pango_fontmap*(context: PrintContext): pango.FontMap {.
    importc: "gtk_print_context_get_pango_fontmap", libgtk.}
proc create_pango_context*(context: PrintContext): pango.Context {.
    importc: "gtk_print_context_create_pango_context", libgtk.}
proc create_pango_layout*(context: PrintContext): pango.Layout {.
    importc: "gtk_print_context_create_pango_layout", libgtk.}
proc set_cairo_context*(context: PrintContext; 
    cr: cairo.Context; dpi_x: cdouble; dpi_y: cdouble) {.
    importc: "gtk_print_context_set_cairo_context", libgtk.}
proc `cairo_context=`*(context: PrintContext; 
    cr: cairo.Context; dpi_x: cdouble; dpi_y: cdouble) {.
    importc: "gtk_print_context_set_cairo_context", libgtk.}

type 
  PrintSettings* =  ptr PrintSettingsObj
  PrintSettingsPtr* = ptr PrintSettingsObj
  PrintSettingsObj* = object 
  
template gtk_print_settings*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_settings_get_type(), PrintSettingsObj))

template gtk_is_print_settings*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_settings_get_type()))

type 
  PrintSettingsFunc* = proc (key: cstring; value: cstring; 
                                user_data: gpointer) {.cdecl.}
type 
  PageRange* =  ptr PageRangeObj
  PageRangePtr* = ptr PageRangeObj
  PageRangeObj* = object 
    start*: gint
    `end`*: gint

proc print_settings_get_type*(): GType {.
    importc: "gtk_print_settings_get_type", libgtk.}
proc print_settings_new*(): PrintSettings {.
    importc: "gtk_print_settings_new", libgtk.}
proc copy*(other: PrintSettings): PrintSettings {.
    importc: "gtk_print_settings_copy", libgtk.}
proc print_settings_new_from_file*(file_name: cstring; 
    error: var glib.GError): PrintSettings {.
    importc: "gtk_print_settings_new_from_file", libgtk.}
proc load_file*(settings: PrintSettings; 
                                   file_name: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_print_settings_load_file", libgtk.}
proc to_file*(settings: PrintSettings; 
                                 file_name: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_print_settings_to_file", libgtk.}
proc print_settings_new_from_key_file*(key_file: glib.GKeyFile; 
    group_name: cstring; error: var glib.GError): PrintSettings {.
    importc: "gtk_print_settings_new_from_key_file", libgtk.}
proc load_key_file*(settings: PrintSettings; 
    key_file: glib.GKeyFile; group_name: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_print_settings_load_key_file", libgtk.}
proc to_key_file*(settings: PrintSettings; 
                                     key_file: glib.GKeyFile; 
                                     group_name: cstring) {.
    importc: "gtk_print_settings_to_key_file", libgtk.}
proc has_key*(settings: PrintSettings; 
                                 key: cstring): gboolean {.
    importc: "gtk_print_settings_has_key", libgtk.}
proc get*(settings: PrintSettings; key: cstring): cstring {.
    importc: "gtk_print_settings_get", libgtk.}
proc set*(settings: PrintSettings; key: cstring; 
                             value: cstring) {.
    importc: "gtk_print_settings_set", libgtk.}
proc unset*(settings: PrintSettings; key: cstring) {.
    importc: "gtk_print_settings_unset", libgtk.}
proc foreach*(settings: PrintSettings; 
                                 `func`: PrintSettingsFunc; 
                                 user_data: gpointer) {.
    importc: "gtk_print_settings_foreach", libgtk.}
proc get_bool*(settings: PrintSettings; 
                                  key: cstring): gboolean {.
    importc: "gtk_print_settings_get_bool", libgtk.}
proc bool*(settings: PrintSettings; 
                                  key: cstring): gboolean {.
    importc: "gtk_print_settings_get_bool", libgtk.}
proc set_bool*(settings: PrintSettings; 
                                  key: cstring; value: gboolean) {.
    importc: "gtk_print_settings_set_bool", libgtk.}
proc `bool=`*(settings: PrintSettings; 
                                  key: cstring; value: gboolean) {.
    importc: "gtk_print_settings_set_bool", libgtk.}
proc get_double*(settings: PrintSettings; 
                                    key: cstring): gdouble {.
    importc: "gtk_print_settings_get_double", libgtk.}
proc double*(settings: PrintSettings; 
                                    key: cstring): gdouble {.
    importc: "gtk_print_settings_get_double", libgtk.}
proc get_double_with_default*(
    settings: PrintSettings; key: cstring; def: gdouble): gdouble {.
    importc: "gtk_print_settings_get_double_with_default", libgtk.}
proc double_with_default*(
    settings: PrintSettings; key: cstring; def: gdouble): gdouble {.
    importc: "gtk_print_settings_get_double_with_default", libgtk.}
proc set_double*(settings: PrintSettings; 
                                    key: cstring; value: gdouble) {.
    importc: "gtk_print_settings_set_double", libgtk.}
proc `double=`*(settings: PrintSettings; 
                                    key: cstring; value: gdouble) {.
    importc: "gtk_print_settings_set_double", libgtk.}
proc get_length*(settings: PrintSettings; 
                                    key: cstring; unit: Unit): gdouble {.
    importc: "gtk_print_settings_get_length", libgtk.}
proc length*(settings: PrintSettings; 
                                    key: cstring; unit: Unit): gdouble {.
    importc: "gtk_print_settings_get_length", libgtk.}
proc set_length*(settings: PrintSettings; 
                                    key: cstring; value: gdouble; 
                                    unit: Unit) {.
    importc: "gtk_print_settings_set_length", libgtk.}
proc `length=`*(settings: PrintSettings; 
                                    key: cstring; value: gdouble; 
                                    unit: Unit) {.
    importc: "gtk_print_settings_set_length", libgtk.}
proc get_int*(settings: PrintSettings; 
                                 key: cstring): gint {.
    importc: "gtk_print_settings_get_int", libgtk.}
proc int*(settings: PrintSettings; 
                                 key: cstring): gint {.
    importc: "gtk_print_settings_get_int", libgtk.}
proc get_int_with_default*(settings: PrintSettings; 
    key: cstring; def: gint): gint {.
    importc: "gtk_print_settings_get_int_with_default", libgtk.}
proc int_with_default*(settings: PrintSettings; 
    key: cstring; def: gint): gint {.
    importc: "gtk_print_settings_get_int_with_default", libgtk.}
proc set_int*(settings: PrintSettings; 
                                 key: cstring; value: gint) {.
    importc: "gtk_print_settings_set_int", libgtk.}
proc `int=`*(settings: PrintSettings; 
                                 key: cstring; value: gint) {.
    importc: "gtk_print_settings_set_int", libgtk.}
const 
  PRINT_SETTINGS_PRINTER* = "printer"
  PRINT_SETTINGS_ORIENTATION* = "orientation"
  PRINT_SETTINGS_PAPER_FORMAT* = "paper-format"
  PRINT_SETTINGS_PAPER_WIDTH* = "paper-width"
  PRINT_SETTINGS_PAPER_HEIGHT* = "paper-height"
  PRINT_SETTINGS_N_COPIES* = "n-copies"
  PRINT_SETTINGS_DEFAULT_SOURCE* = "default-source"
  PRINT_SETTINGS_QUALITY* = "quality"
  PRINT_SETTINGS_RESOLUTION* = "resolution"
  PRINT_SETTINGS_USE_COLOR* = "use-color"
  PRINT_SETTINGS_DUPLEX* = "duplex"
  PRINT_SETTINGS_COLLATE* = "collate"
  PRINT_SETTINGS_REVERSE* = "reverse"
  PRINT_SETTINGS_MEDIA_TYPE* = "media-type"
  PRINT_SETTINGS_DITHER* = "dither"
  PRINT_SETTINGS_SCALE* = "scale"
  PRINT_SETTINGS_PRINT_PAGES* = "print-pages"
  PRINT_SETTINGS_PAGE_RANGES* = "page-ranges"
  PRINT_SETTINGS_PAGE_SET* = "page-set"
  PRINT_SETTINGS_FINISHINGS* = "finishings"
  PRINT_SETTINGS_NUMBER_UP* = "number-up"
  PRINT_SETTINGS_NUMBER_UP_LAYOUT* = "number-up-layout"
  PRINT_SETTINGS_OUTPUT_BIN* = "output-bin"
  PRINT_SETTINGS_RESOLUTION_X* = "resolution-x"
  PRINT_SETTINGS_RESOLUTION_Y* = "resolution-y"
  PRINT_SETTINGS_PRINTER_LPI* = "printer-lpi"
const 
  PRINT_SETTINGS_OUTPUT_DIR* = "output-dir"
const 
  PRINT_SETTINGS_OUTPUT_BASENAME* = "output-basename"
const 
  PRINT_SETTINGS_OUTPUT_FILE_FORMAT* = "output-file-format"
const 
  PRINT_SETTINGS_OUTPUT_URI* = "output-uri"
  PRINT_SETTINGS_WIN32_DRIVER_VERSION* = "win32-driver-version"
  PRINT_SETTINGS_WIN32_DRIVER_EXTRA* = "win32-driver-extra"
proc get_printer*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_printer", libgtk.}
proc printer*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_printer", libgtk.}
proc set_printer*(settings: PrintSettings; 
                                     printer: cstring) {.
    importc: "gtk_print_settings_set_printer", libgtk.}
proc `printer=`*(settings: PrintSettings; 
                                     printer: cstring) {.
    importc: "gtk_print_settings_set_printer", libgtk.}
proc get_orientation*(settings: PrintSettings): PageOrientation {.
    importc: "gtk_print_settings_get_orientation", libgtk.}
proc orientation*(settings: PrintSettings): PageOrientation {.
    importc: "gtk_print_settings_get_orientation", libgtk.}
proc set_orientation*(settings: PrintSettings; 
    orientation: PageOrientation) {.
    importc: "gtk_print_settings_set_orientation", libgtk.}
proc `orientation=`*(settings: PrintSettings; 
    orientation: PageOrientation) {.
    importc: "gtk_print_settings_set_orientation", libgtk.}
proc get_paper_size*(settings: PrintSettings): PaperSize {.
    importc: "gtk_print_settings_get_paper_size", libgtk.}
proc paper_size*(settings: PrintSettings): PaperSize {.
    importc: "gtk_print_settings_get_paper_size", libgtk.}
proc set_paper_size*(settings: PrintSettings; 
    paper_size: PaperSize) {.importc: "gtk_print_settings_set_paper_size", 
                                    libgtk.}
proc `paper_size=`*(settings: PrintSettings; 
    paper_size: PaperSize) {.importc: "gtk_print_settings_set_paper_size", 
                                    libgtk.}
proc get_paper_width*(settings: PrintSettings; 
    unit: Unit): gdouble {.importc: "gtk_print_settings_get_paper_width", 
                              libgtk.}
proc paper_width*(settings: PrintSettings; 
    unit: Unit): gdouble {.importc: "gtk_print_settings_get_paper_width", 
                              libgtk.}
proc set_paper_width*(settings: PrintSettings; 
    width: gdouble; unit: Unit) {.importc: "gtk_print_settings_set_paper_width", 
                                     libgtk.}
proc `paper_width=`*(settings: PrintSettings; 
    width: gdouble; unit: Unit) {.importc: "gtk_print_settings_set_paper_width", 
                                     libgtk.}
proc get_paper_height*(settings: PrintSettings; 
    unit: Unit): gdouble {.importc: "gtk_print_settings_get_paper_height", 
                              libgtk.}
proc paper_height*(settings: PrintSettings; 
    unit: Unit): gdouble {.importc: "gtk_print_settings_get_paper_height", 
                              libgtk.}
proc set_paper_height*(settings: PrintSettings; 
    height: gdouble; unit: Unit) {.importc: "gtk_print_settings_set_paper_height", 
                                      libgtk.}
proc `paper_height=`*(settings: PrintSettings; 
    height: gdouble; unit: Unit) {.importc: "gtk_print_settings_set_paper_height", 
                                      libgtk.}
proc get_use_color*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_use_color", libgtk.}
proc use_color*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_use_color", libgtk.}
proc set_use_color*(settings: PrintSettings; 
    use_color: gboolean) {.importc: "gtk_print_settings_set_use_color", 
                           libgtk.}
proc `use_color=`*(settings: PrintSettings; 
    use_color: gboolean) {.importc: "gtk_print_settings_set_use_color", 
                           libgtk.}
proc get_collate*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_collate", libgtk.}
proc collate*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_collate", libgtk.}
proc set_collate*(settings: PrintSettings; 
                                     collate: gboolean) {.
    importc: "gtk_print_settings_set_collate", libgtk.}
proc `collate=`*(settings: PrintSettings; 
                                     collate: gboolean) {.
    importc: "gtk_print_settings_set_collate", libgtk.}
proc get_reverse*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_reverse", libgtk.}
proc reverse*(settings: PrintSettings): gboolean {.
    importc: "gtk_print_settings_get_reverse", libgtk.}
proc set_reverse*(settings: PrintSettings; 
                                     reverse: gboolean) {.
    importc: "gtk_print_settings_set_reverse", libgtk.}
proc `reverse=`*(settings: PrintSettings; 
                                     reverse: gboolean) {.
    importc: "gtk_print_settings_set_reverse", libgtk.}
proc get_duplex*(settings: PrintSettings): PrintDuplex {.
    importc: "gtk_print_settings_get_duplex", libgtk.}
proc duplex*(settings: PrintSettings): PrintDuplex {.
    importc: "gtk_print_settings_get_duplex", libgtk.}
proc set_duplex*(settings: PrintSettings; 
                                    duplex: PrintDuplex) {.
    importc: "gtk_print_settings_set_duplex", libgtk.}
proc `duplex=`*(settings: PrintSettings; 
                                    duplex: PrintDuplex) {.
    importc: "gtk_print_settings_set_duplex", libgtk.}
proc get_quality*(settings: PrintSettings): PrintQuality {.
    importc: "gtk_print_settings_get_quality", libgtk.}
proc quality*(settings: PrintSettings): PrintQuality {.
    importc: "gtk_print_settings_get_quality", libgtk.}
proc set_quality*(settings: PrintSettings; 
                                     quality: PrintQuality) {.
    importc: "gtk_print_settings_set_quality", libgtk.}
proc `quality=`*(settings: PrintSettings; 
                                     quality: PrintQuality) {.
    importc: "gtk_print_settings_set_quality", libgtk.}
proc get_n_copies*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_n_copies", libgtk.}
proc n_copies*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_n_copies", libgtk.}
proc set_n_copies*(settings: PrintSettings; 
                                      num_copies: gint) {.
    importc: "gtk_print_settings_set_n_copies", libgtk.}
proc `n_copies=`*(settings: PrintSettings; 
                                      num_copies: gint) {.
    importc: "gtk_print_settings_set_n_copies", libgtk.}
proc get_number_up*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_number_up", libgtk.}
proc number_up*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_number_up", libgtk.}
proc set_number_up*(settings: PrintSettings; 
    number_up: gint) {.importc: "gtk_print_settings_set_number_up", 
                       libgtk.}
proc `number_up=`*(settings: PrintSettings; 
    number_up: gint) {.importc: "gtk_print_settings_set_number_up", 
                       libgtk.}
proc get_number_up_layout*(settings: PrintSettings): NumberUpLayout {.
    importc: "gtk_print_settings_get_number_up_layout", libgtk.}
proc number_up_layout*(settings: PrintSettings): NumberUpLayout {.
    importc: "gtk_print_settings_get_number_up_layout", libgtk.}
proc set_number_up_layout*(settings: PrintSettings; 
    number_up_layout: NumberUpLayout) {.
    importc: "gtk_print_settings_set_number_up_layout", libgtk.}
proc `number_up_layout=`*(settings: PrintSettings; 
    number_up_layout: NumberUpLayout) {.
    importc: "gtk_print_settings_set_number_up_layout", libgtk.}
proc get_resolution*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution", libgtk.}
proc resolution*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution", libgtk.}
proc set_resolution*(settings: PrintSettings; 
    resolution: gint) {.importc: "gtk_print_settings_set_resolution", 
                        libgtk.}
proc `resolution=`*(settings: PrintSettings; 
    resolution: gint) {.importc: "gtk_print_settings_set_resolution", 
                        libgtk.}
proc get_resolution_x*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution_x", libgtk.}
proc resolution_x*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution_x", libgtk.}
proc get_resolution_y*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution_y", libgtk.}
proc resolution_y*(settings: PrintSettings): gint {.
    importc: "gtk_print_settings_get_resolution_y", libgtk.}
proc set_resolution_xy*(settings: PrintSettings; 
    resolution_x: gint; resolution_y: gint) {.
    importc: "gtk_print_settings_set_resolution_xy", libgtk.}
proc `resolution_xy=`*(settings: PrintSettings; 
    resolution_x: gint; resolution_y: gint) {.
    importc: "gtk_print_settings_set_resolution_xy", libgtk.}
proc get_printer_lpi*(settings: PrintSettings): gdouble {.
    importc: "gtk_print_settings_get_printer_lpi", libgtk.}
proc printer_lpi*(settings: PrintSettings): gdouble {.
    importc: "gtk_print_settings_get_printer_lpi", libgtk.}
proc set_printer_lpi*(settings: PrintSettings; 
    lpi: gdouble) {.importc: "gtk_print_settings_set_printer_lpi", libgtk.}
proc `printer_lpi=`*(settings: PrintSettings; 
    lpi: gdouble) {.importc: "gtk_print_settings_set_printer_lpi", libgtk.}
proc get_scale*(settings: PrintSettings): gdouble {.
    importc: "gtk_print_settings_get_scale", libgtk.}
proc scale*(settings: PrintSettings): gdouble {.
    importc: "gtk_print_settings_get_scale", libgtk.}
proc set_scale*(settings: PrintSettings; 
                                   scale: gdouble) {.
    importc: "gtk_print_settings_set_scale", libgtk.}
proc `scale=`*(settings: PrintSettings; 
                                   scale: gdouble) {.
    importc: "gtk_print_settings_set_scale", libgtk.}
proc get_print_pages*(settings: PrintSettings): PrintPages {.
    importc: "gtk_print_settings_get_print_pages", libgtk.}
proc print_pages*(settings: PrintSettings): PrintPages {.
    importc: "gtk_print_settings_get_print_pages", libgtk.}
proc set_print_pages*(settings: PrintSettings; 
    pages: PrintPages) {.importc: "gtk_print_settings_set_print_pages", 
                            libgtk.}
proc `print_pages=`*(settings: PrintSettings; 
    pages: PrintPages) {.importc: "gtk_print_settings_set_print_pages", 
                            libgtk.}
proc get_page_ranges*(settings: PrintSettings; 
    num_ranges: var gint): PageRange {.
    importc: "gtk_print_settings_get_page_ranges", libgtk.}
proc page_ranges*(settings: PrintSettings; 
    num_ranges: var gint): PageRange {.
    importc: "gtk_print_settings_get_page_ranges", libgtk.}
proc set_page_ranges*(settings: PrintSettings; 
    page_ranges: PageRange; num_ranges: gint) {.
    importc: "gtk_print_settings_set_page_ranges", libgtk.}
proc `page_ranges=`*(settings: PrintSettings; 
    page_ranges: PageRange; num_ranges: gint) {.
    importc: "gtk_print_settings_set_page_ranges", libgtk.}
proc get_page_set*(settings: PrintSettings): PageSet {.
    importc: "gtk_print_settings_get_page_set", libgtk.}
proc page_set*(settings: PrintSettings): PageSet {.
    importc: "gtk_print_settings_get_page_set", libgtk.}
proc set_page_set*(settings: PrintSettings; 
                                      page_set: PageSet) {.
    importc: "gtk_print_settings_set_page_set", libgtk.}
proc `page_set=`*(settings: PrintSettings; 
                                      page_set: PageSet) {.
    importc: "gtk_print_settings_set_page_set", libgtk.}
proc get_default_source*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_default_source", libgtk.}
proc default_source*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_default_source", libgtk.}
proc set_default_source*(settings: PrintSettings; 
    default_source: cstring) {.importc: "gtk_print_settings_set_default_source", 
                                 libgtk.}
proc `default_source=`*(settings: PrintSettings; 
    default_source: cstring) {.importc: "gtk_print_settings_set_default_source", 
                                 libgtk.}
proc get_media_type*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_media_type", libgtk.}
proc media_type*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_media_type", libgtk.}
proc set_media_type*(settings: PrintSettings; 
    media_type: cstring) {.importc: "gtk_print_settings_set_media_type", 
                             libgtk.}
proc `media_type=`*(settings: PrintSettings; 
    media_type: cstring) {.importc: "gtk_print_settings_set_media_type", 
                             libgtk.}
proc get_dither*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_dither", libgtk.}
proc dither*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_dither", libgtk.}
proc set_dither*(settings: PrintSettings; 
                                    dither: cstring) {.
    importc: "gtk_print_settings_set_dither", libgtk.}
proc `dither=`*(settings: PrintSettings; 
                                    dither: cstring) {.
    importc: "gtk_print_settings_set_dither", libgtk.}
proc get_finishings*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_finishings", libgtk.}
proc finishings*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_finishings", libgtk.}
proc set_finishings*(settings: PrintSettings; 
    finishings: cstring) {.importc: "gtk_print_settings_set_finishings", 
                             libgtk.}
proc `finishings=`*(settings: PrintSettings; 
    finishings: cstring) {.importc: "gtk_print_settings_set_finishings", 
                             libgtk.}
proc get_output_bin*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_output_bin", libgtk.}
proc output_bin*(settings: PrintSettings): cstring {.
    importc: "gtk_print_settings_get_output_bin", libgtk.}
proc set_output_bin*(settings: PrintSettings; 
    output_bin: cstring) {.importc: "gtk_print_settings_set_output_bin", 
                             libgtk.}
proc `output_bin=`*(settings: PrintSettings; 
    output_bin: cstring) {.importc: "gtk_print_settings_set_output_bin", 
                             libgtk.}

template gtk_print_operation_preview*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_operation_preview_get_type(), 
                              PrintOperationPreviewObj))

template gtk_is_print_operation_preview*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_operation_preview_get_type()))

template gtk_print_operation_preview_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, print_operation_preview_get_type(), 
                                 PrintOperationPreviewIfaceObj))

type 
  PrintOperationPreview* =  ptr PrintOperationPreviewObj
  PrintOperationPreviewPtr* = ptr PrintOperationPreviewObj
  PrintOperationPreviewObj* = object 
  
type 
  PrintOperationPreviewIface* =  ptr PrintOperationPreviewIfaceObj
  PrintOperationPreviewIfacePtr* = ptr PrintOperationPreviewIfaceObj
  PrintOperationPreviewIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    ready*: proc (preview: PrintOperationPreview; 
                  context: PrintContext) {.cdecl.}
    got_page_size*: proc (preview: PrintOperationPreview; 
                          context: PrintContext; 
                          page_setup: PageSetup) {.cdecl.}
    render_page*: proc (preview: PrintOperationPreview; page_nr: gint) {.cdecl.}
    is_selected*: proc (preview: PrintOperationPreview; page_nr: gint): gboolean {.cdecl.}
    end_preview*: proc (preview: PrintOperationPreview) {.cdecl.}
    gtk_reserved941: proc () {.cdecl.}
    gtk_reserved942: proc () {.cdecl.}
    gtk_reserved943: proc () {.cdecl.}
    gtk_reserved944: proc () {.cdecl.}
    gtk_reserved945: proc () {.cdecl.}
    gtk_reserved946: proc () {.cdecl.}
    gtk_reserved947: proc () {.cdecl.}
    gtk_reserved948: proc () {.cdecl.}

proc print_operation_preview_get_type*(): GType {.
    importc: "gtk_print_operation_preview_get_type", libgtk.}
proc render_page*(
    preview: PrintOperationPreview; page_nr: gint) {.
    importc: "gtk_print_operation_preview_render_page", libgtk.}
proc end_preview*(
    preview: PrintOperationPreview) {.
    importc: "gtk_print_operation_preview_end_preview", libgtk.}
proc is_selected*(
    preview: PrintOperationPreview; page_nr: gint): gboolean {.
    importc: "gtk_print_operation_preview_is_selected", libgtk.}

template gtk_print_operation*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_operation_get_type(), 
                              PrintOperationObj))

template gtk_print_operation_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, print_operation_get_type(), 
                           PrintOperationClassObj))

template gtk_is_print_operation*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_operation_get_type()))

template gtk_is_print_operation_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, print_operation_get_type()))

template gtk_print_operation_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, print_operation_get_type(), 
                             PrintOperationClassObj))

type 
  PrintOperationPrivateObj = object 
  
type 
  PrintStatus* {.size: sizeof(cint), pure.} = enum 
    INITIAL, PREPARING, 
    GENERATING_DATA, SENDING_DATA, 
    PENDING, PENDING_ISSUE, 
    PRINTING, FINISHED, 
    FINISHED_ABORTED
type 
  PrintOperationResult* {.size: sizeof(cint), pure.} = enum 
    ERROR, APPLY, 
    CANCEL, IN_PROGRESS
type 
  PrintOperationAction* {.size: sizeof(cint), pure.} = enum 
    PRINT_DIALOG, PRINT, 
    PREVIEW, `EXPORT`
type 
  PrintOperation* =  ptr PrintOperationObj
  PrintOperationPtr* = ptr PrintOperationObj
  PrintOperationObj*{.final.} = object of GObjectObj
    priv96: ptr PrintOperationPrivateObj

type 
  PrintOperationClass* =  ptr PrintOperationClassObj
  PrintOperationClassPtr* = ptr PrintOperationClassObj
  PrintOperationClassObj*{.final.} = object of GObjectClassObj
    done*: proc (operation: PrintOperation; 
                 result: PrintOperationResult) {.cdecl.}
    begin_print*: proc (operation: PrintOperation; 
                        context: PrintContext) {.cdecl.}
    paginate*: proc (operation: PrintOperation; 
                     context: PrintContext): gboolean {.cdecl.}
    request_page_setup*: proc (operation: PrintOperation; 
                               context: PrintContext; page_nr: gint; 
                               setup: PageSetup) {.cdecl.}
    draw_page*: proc (operation: PrintOperation; 
                      context: PrintContext; page_nr: gint) {.cdecl.}
    end_print*: proc (operation: PrintOperation; 
                      context: PrintContext) {.cdecl.}
    status_changed*: proc (operation: PrintOperation) {.cdecl.}
    create_custom_widget*: proc (operation: PrintOperation): Widget {.cdecl.}
    custom_widget_apply*: proc (operation: PrintOperation; 
                                widget: Widget) {.cdecl.}
    preview*: proc (operation: PrintOperation; 
                    preview: PrintOperationPreview; 
                    context: PrintContext; parent: Window): gboolean {.cdecl.}
    update_custom_widget*: proc (operation: PrintOperation; 
                                 widget: Widget; 
                                 setup: PageSetup; 
                                 settings: PrintSettings) {.cdecl.}
    gtk_reserved951: proc () {.cdecl.}
    gtk_reserved952: proc () {.cdecl.}
    gtk_reserved953: proc () {.cdecl.}
    gtk_reserved954: proc () {.cdecl.}
    gtk_reserved955: proc () {.cdecl.}
    gtk_reserved956: proc () {.cdecl.}
    gtk_reserved957: proc () {.cdecl.}
    gtk_reserved958: proc () {.cdecl.}

type 
  PrintError* {.size: sizeof(cint), pure.} = enum 
    GENERAL, INTERNAL_ERROR, 
    NOMEM, INVALID_FILE
proc print_error_quark*(): GQuark {.importc: "gtk_print_error_quark", 
    libgtk.}
proc print_operation_get_type*(): GType {.
    importc: "gtk_print_operation_get_type", libgtk.}
proc print_operation_new*(): PrintOperation {.
    importc: "gtk_print_operation_new", libgtk.}
proc set_default_page_setup*(op: PrintOperation; 
    default_page_setup: PageSetup) {.
    importc: "gtk_print_operation_set_default_page_setup", libgtk.}
proc `default_page_setup=`*(op: PrintOperation; 
    default_page_setup: PageSetup) {.
    importc: "gtk_print_operation_set_default_page_setup", libgtk.}
proc get_default_page_setup*(op: PrintOperation): PageSetup {.
    importc: "gtk_print_operation_get_default_page_setup", libgtk.}
proc default_page_setup*(op: PrintOperation): PageSetup {.
    importc: "gtk_print_operation_get_default_page_setup", libgtk.}
proc set_print_settings*(op: PrintOperation; 
    print_settings: PrintSettings) {.
    importc: "gtk_print_operation_set_print_settings", libgtk.}
proc `print_settings=`*(op: PrintOperation; 
    print_settings: PrintSettings) {.
    importc: "gtk_print_operation_set_print_settings", libgtk.}
proc get_print_settings*(op: PrintOperation): PrintSettings {.
    importc: "gtk_print_operation_get_print_settings", libgtk.}
proc print_settings*(op: PrintOperation): PrintSettings {.
    importc: "gtk_print_operation_get_print_settings", libgtk.}
proc set_job_name*(op: PrintOperation; 
    job_name: cstring) {.importc: "gtk_print_operation_set_job_name", 
                           libgtk.}
proc `job_name=`*(op: PrintOperation; 
    job_name: cstring) {.importc: "gtk_print_operation_set_job_name", 
                           libgtk.}
proc set_n_pages*(op: PrintOperation; n_pages: gint) {.
    importc: "gtk_print_operation_set_n_pages", libgtk.}
proc `n_pages=`*(op: PrintOperation; n_pages: gint) {.
    importc: "gtk_print_operation_set_n_pages", libgtk.}
proc set_current_page*(op: PrintOperation; 
    current_page: gint) {.importc: "gtk_print_operation_set_current_page", 
                          libgtk.}
proc `current_page=`*(op: PrintOperation; 
    current_page: gint) {.importc: "gtk_print_operation_set_current_page", 
                          libgtk.}
proc set_use_full_page*(op: PrintOperation; 
    full_page: gboolean) {.importc: "gtk_print_operation_set_use_full_page", 
                           libgtk.}
proc `use_full_page=`*(op: PrintOperation; 
    full_page: gboolean) {.importc: "gtk_print_operation_set_use_full_page", 
                           libgtk.}
proc set_unit*(op: PrintOperation; unit: Unit) {.
    importc: "gtk_print_operation_set_unit", libgtk.}
proc `unit=`*(op: PrintOperation; unit: Unit) {.
    importc: "gtk_print_operation_set_unit", libgtk.}
proc set_export_filename*(op: PrintOperation; 
    filename: cstring) {.importc: "gtk_print_operation_set_export_filename", 
                           libgtk.}
proc `export_filename=`*(op: PrintOperation; 
    filename: cstring) {.importc: "gtk_print_operation_set_export_filename", 
                           libgtk.}
proc set_track_print_status*(op: PrintOperation; 
    track_status: gboolean) {.importc: "gtk_print_operation_set_track_print_status", 
                              libgtk.}
proc `track_print_status=`*(op: PrintOperation; 
    track_status: gboolean) {.importc: "gtk_print_operation_set_track_print_status", 
                              libgtk.}
proc set_show_progress*(op: PrintOperation; 
    show_progress: gboolean) {.importc: "gtk_print_operation_set_show_progress", 
                               libgtk.}
proc `show_progress=`*(op: PrintOperation; 
    show_progress: gboolean) {.importc: "gtk_print_operation_set_show_progress", 
                               libgtk.}
proc set_allow_async*(op: PrintOperation; 
    allow_async: gboolean) {.importc: "gtk_print_operation_set_allow_async", 
                             libgtk.}
proc `allow_async=`*(op: PrintOperation; 
    allow_async: gboolean) {.importc: "gtk_print_operation_set_allow_async", 
                             libgtk.}
proc set_custom_tab_label*(op: PrintOperation; 
    label: cstring) {.importc: "gtk_print_operation_set_custom_tab_label", 
                        libgtk.}
proc `custom_tab_label=`*(op: PrintOperation; 
    label: cstring) {.importc: "gtk_print_operation_set_custom_tab_label", 
                        libgtk.}
proc run*(op: PrintOperation; 
                              action: PrintOperationAction; 
                              parent: Window; error: var glib.GError): PrintOperationResult {.
    importc: "gtk_print_operation_run", libgtk.}
proc get_error*(op: PrintOperation; 
                                    error: var glib.GError) {.
    importc: "gtk_print_operation_get_error", libgtk.}
proc get_status*(op: PrintOperation): PrintStatus {.
    importc: "gtk_print_operation_get_status", libgtk.}
proc status*(op: PrintOperation): PrintStatus {.
    importc: "gtk_print_operation_get_status", libgtk.}
proc get_status_string*(op: PrintOperation): cstring {.
    importc: "gtk_print_operation_get_status_string", libgtk.}
proc status_string*(op: PrintOperation): cstring {.
    importc: "gtk_print_operation_get_status_string", libgtk.}
proc is_finished*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_is_finished", libgtk.}
proc cancel*(op: PrintOperation) {.
    importc: "gtk_print_operation_cancel", libgtk.}
proc draw_page_finish*(op: PrintOperation) {.
    importc: "gtk_print_operation_draw_page_finish", libgtk.}
proc set_defer_drawing*(op: PrintOperation) {.
    importc: "gtk_print_operation_set_defer_drawing", libgtk.}
proc `defer_drawing=`*(op: PrintOperation) {.
    importc: "gtk_print_operation_set_defer_drawing", libgtk.}
proc set_support_selection*(op: PrintOperation; 
    support_selection: gboolean) {.importc: "gtk_print_operation_set_support_selection", 
                                   libgtk.}
proc `support_selection=`*(op: PrintOperation; 
    support_selection: gboolean) {.importc: "gtk_print_operation_set_support_selection", 
                                   libgtk.}
proc get_support_selection*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_support_selection", libgtk.}
proc support_selection*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_support_selection", libgtk.}
proc set_has_selection*(op: PrintOperation; 
    has_selection: gboolean) {.importc: "gtk_print_operation_set_has_selection", 
                               libgtk.}
proc `has_selection=`*(op: PrintOperation; 
    has_selection: gboolean) {.importc: "gtk_print_operation_set_has_selection", 
                               libgtk.}
proc get_has_selection*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_has_selection", libgtk.}
proc has_selection*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_has_selection", libgtk.}
proc set_embed_page_setup*(op: PrintOperation; 
    embed: gboolean) {.importc: "gtk_print_operation_set_embed_page_setup", 
                       libgtk.}
proc `embed_page_setup=`*(op: PrintOperation; 
    embed: gboolean) {.importc: "gtk_print_operation_set_embed_page_setup", 
                       libgtk.}
proc get_embed_page_setup*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_embed_page_setup", libgtk.}
proc embed_page_setup*(op: PrintOperation): gboolean {.
    importc: "gtk_print_operation_get_embed_page_setup", libgtk.}
proc get_n_pages_to_print*(op: PrintOperation): gint {.
    importc: "gtk_print_operation_get_n_pages_to_print", libgtk.}
proc n_pages_to_print*(op: PrintOperation): gint {.
    importc: "gtk_print_operation_get_n_pages_to_print", libgtk.}
proc print_run_page_setup_dialog*(parent: Window; 
                                      page_setup: PageSetup; 
                                      settings: PrintSettings): PageSetup {.
    importc: "gtk_print_run_page_setup_dialog", libgtk.}
type 
  PageSetupDoneFunc* = proc (page_setup: PageSetup; data: gpointer) {.cdecl.}
proc print_run_page_setup_dialog_async*(parent: Window; 
    page_setup: PageSetup; settings: PrintSettings; 
    done_cb: PageSetupDoneFunc; data: gpointer) {.
    importc: "gtk_print_run_page_setup_dialog_async", libgtk.}

template gtk_progress_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, progress_bar_get_type(), ProgressBarObj))

template gtk_progress_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, progress_bar_get_type(), ProgressBarClassObj))

template gtk_is_progress_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, progress_bar_get_type()))

template gtk_is_progress_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, progress_bar_get_type()))

template gtk_progress_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, progress_bar_get_type(), ProgressBarClassObj))

type 
  ProgressBarPrivateObj = object 
  
type 
  ProgressBar* =  ptr ProgressBarObj
  ProgressBarPtr* = ptr ProgressBarObj
  ProgressBarObj*{.final.} = object of WidgetObj
    priv97: ptr ProgressBarPrivateObj

type 
  ProgressBarClass* =  ptr ProgressBarClassObj
  ProgressBarClassPtr* = ptr ProgressBarClassObj
  ProgressBarClassObj*{.final.} = object of WidgetClassObj
    gtk_reserved961: proc () {.cdecl.}
    gtk_reserved962: proc () {.cdecl.}
    gtk_reserved963: proc () {.cdecl.}
    gtk_reserved964: proc () {.cdecl.}

proc progress_bar_get_type*(): GType {.
    importc: "gtk_progress_bar_get_type", libgtk.}
proc progress_bar_new*(): ProgressBar {.importc: "gtk_progress_bar_new", 
    libgtk.}
proc pulse*(pbar: ProgressBar) {.
    importc: "gtk_progress_bar_pulse", libgtk.}
proc set_text*(pbar: ProgressBar; text: cstring) {.
    importc: "gtk_progress_bar_set_text", libgtk.}
proc `text=`*(pbar: ProgressBar; text: cstring) {.
    importc: "gtk_progress_bar_set_text", libgtk.}
proc set_fraction*(pbar: ProgressBar; 
                                    fraction: gdouble) {.
    importc: "gtk_progress_bar_set_fraction", libgtk.}
proc `fraction=`*(pbar: ProgressBar; 
                                    fraction: gdouble) {.
    importc: "gtk_progress_bar_set_fraction", libgtk.}
proc set_pulse_step*(pbar: ProgressBar; 
                                      fraction: gdouble) {.
    importc: "gtk_progress_bar_set_pulse_step", libgtk.}
proc `pulse_step=`*(pbar: ProgressBar; 
                                      fraction: gdouble) {.
    importc: "gtk_progress_bar_set_pulse_step", libgtk.}
proc set_inverted*(pbar: ProgressBar; 
                                    inverted: gboolean) {.
    importc: "gtk_progress_bar_set_inverted", libgtk.}
proc `inverted=`*(pbar: ProgressBar; 
                                    inverted: gboolean) {.
    importc: "gtk_progress_bar_set_inverted", libgtk.}
proc get_text*(pbar: ProgressBar): cstring {.
    importc: "gtk_progress_bar_get_text", libgtk.}
proc text*(pbar: ProgressBar): cstring {.
    importc: "gtk_progress_bar_get_text", libgtk.}
proc get_fraction*(pbar: ProgressBar): gdouble {.
    importc: "gtk_progress_bar_get_fraction", libgtk.}
proc fraction*(pbar: ProgressBar): gdouble {.
    importc: "gtk_progress_bar_get_fraction", libgtk.}
proc get_pulse_step*(pbar: ProgressBar): gdouble {.
    importc: "gtk_progress_bar_get_pulse_step", libgtk.}
proc pulse_step*(pbar: ProgressBar): gdouble {.
    importc: "gtk_progress_bar_get_pulse_step", libgtk.}
proc get_inverted*(pbar: ProgressBar): gboolean {.
    importc: "gtk_progress_bar_get_inverted", libgtk.}
proc inverted*(pbar: ProgressBar): gboolean {.
    importc: "gtk_progress_bar_get_inverted", libgtk.}
proc set_ellipsize*(pbar: ProgressBar; 
                                     mode: pango.EllipsizeMode) {.
    importc: "gtk_progress_bar_set_ellipsize", libgtk.}
proc `ellipsize=`*(pbar: ProgressBar; 
                                     mode: pango.EllipsizeMode) {.
    importc: "gtk_progress_bar_set_ellipsize", libgtk.}
proc get_ellipsize*(pbar: ProgressBar): pango.EllipsizeMode {.
    importc: "gtk_progress_bar_get_ellipsize", libgtk.}
proc ellipsize*(pbar: ProgressBar): pango.EllipsizeMode {.
    importc: "gtk_progress_bar_get_ellipsize", libgtk.}
proc set_show_text*(pbar: ProgressBar; 
                                     show_text: gboolean) {.
    importc: "gtk_progress_bar_set_show_text", libgtk.}
proc `show_text=`*(pbar: ProgressBar; 
                                     show_text: gboolean) {.
    importc: "gtk_progress_bar_set_show_text", libgtk.}
proc get_show_text*(pbar: ProgressBar): gboolean {.
    importc: "gtk_progress_bar_get_show_text", libgtk.}
proc show_text*(pbar: ProgressBar): gboolean {.
    importc: "gtk_progress_bar_get_show_text", libgtk.}

template gtk_radio_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_button_get_type(), RadioButtonObj))

template gtk_radio_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_button_get_type(), RadioButtonClassObj))

template gtk_is_radio_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_button_get_type()))

template gtk_is_radio_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_button_get_type()))

template gtk_radio_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_button_get_type(), RadioButtonClassObj))

type 
  RadioButtonPrivateObj = object 
  
type 
  RadioButton* =  ptr RadioButtonObj
  RadioButtonPtr* = ptr RadioButtonObj
  RadioButtonObj*{.final.} = object of CheckButtonObj
    priv98: ptr RadioButtonPrivateObj

type 
  RadioButtonClass* =  ptr RadioButtonClassObj
  RadioButtonClassPtr* = ptr RadioButtonClassObj
  RadioButtonClassObj*{.final.} = object of CheckButtonClassObj
    group_changed*: proc (radio_button: RadioButton) {.cdecl.}
    gtk_reserved971: proc () {.cdecl.}
    gtk_reserved972: proc () {.cdecl.}
    gtk_reserved973: proc () {.cdecl.}
    gtk_reserved974: proc () {.cdecl.}

proc radio_button_get_type*(): GType {.
    importc: "gtk_radio_button_get_type", libgtk.}
proc radio_button_new*(group: glib.GSList): RadioButton {.
    importc: "gtk_radio_button_new", libgtk.}
proc new_from_widget*(radio_group_member: RadioButton): RadioButton {.
    importc: "gtk_radio_button_new_from_widget", libgtk.}
proc radio_button_new_with_label*(group: glib.GSList; label: cstring): RadioButton {.
    importc: "gtk_radio_button_new_with_label", libgtk.}
proc radio_button_new*(group: glib.GSList; label: cstring): RadioButton {.
    importc: "gtk_radio_button_new_with_label", libgtk.}
proc new_with_label_from_widget*(
    radio_group_member: RadioButton; label: cstring): RadioButton {.
    importc: "gtk_radio_button_new_with_label_from_widget", libgtk.}
proc radio_button_new_with_mnemonic*(group: glib.GSList; label: cstring): RadioButton {.
    importc: "gtk_radio_button_new_with_mnemonic", libgtk.}
proc new_with_mnemonic_from_widget*(
    radio_group_member: RadioButton; label: cstring): RadioButton {.
    importc: "gtk_radio_button_new_with_mnemonic_from_widget", libgtk.}
proc get_group*(radio_button: RadioButton): glib.GSList {.
    importc: "gtk_radio_button_get_group", libgtk.}
proc group*(radio_button: RadioButton): glib.GSList {.
    importc: "gtk_radio_button_get_group", libgtk.}
proc set_group*(radio_button: RadioButton; 
                                 group: glib.GSList) {.
    importc: "gtk_radio_button_set_group", libgtk.}
proc `group=`*(radio_button: RadioButton; 
                                 group: glib.GSList) {.
    importc: "gtk_radio_button_set_group", libgtk.}
proc join_group*(radio_button: RadioButton; 
                                  group_source: RadioButton) {.
    importc: "gtk_radio_button_join_group", libgtk.}

template radio_button_new*(): expr =
  new_from_widget(cast[RadioButton](0))

template radio_button_new*(label: cstring): expr =
  new_with_label_from_widget(cast[RadioButton](0), label)

template radio_button_new*(w: RadioButton, label: cstring): expr =
  new_with_label_from_widget(w, label)

template radio_button_new_with_mnemonic*(label: cstring): expr =
  new_with_mnemonic_from_widget(cast[PRadioButton](0), label)

template radio_button_new*(w: RadioButton): expr =
  new_from_widget(w)
template gtk_radio_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_menu_item_get_type(), 
                              RadioMenuItemObj))

template gtk_radio_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_menu_item_get_type(), 
                           RadioMenuItemClassObj))

template gtk_is_radio_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_menu_item_get_type()))

template gtk_is_radio_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_menu_item_get_type()))

template gtk_radio_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_menu_item_get_type(), 
                             RadioMenuItemClassObj))

type 
  RadioMenuItemPrivateObj = object 
  
type 
  RadioMenuItem* =  ptr RadioMenuItemObj
  RadioMenuItemPtr* = ptr RadioMenuItemObj
  RadioMenuItemObj*{.final.} = object of CheckMenuItemObj
    priv99: ptr RadioMenuItemPrivateObj

type 
  RadioMenuItemClass* =  ptr RadioMenuItemClassObj
  RadioMenuItemClassPtr* = ptr RadioMenuItemClassObj
  RadioMenuItemClassObj*{.final.} = object of CheckMenuItemClassObj
    group_changed*: proc (radio_menu_item: RadioMenuItem) {.cdecl.}
    gtk_reserved981: proc () {.cdecl.}
    gtk_reserved982: proc () {.cdecl.}
    gtk_reserved983: proc () {.cdecl.}
    gtk_reserved984: proc () {.cdecl.}

proc radio_menu_item_get_type*(): GType {.
    importc: "gtk_radio_menu_item_get_type", libgtk.}
proc radio_menu_item_new*(group: glib.GSList): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new", libgtk.}
proc radio_menu_item_new_with_label*(group: glib.GSList; label: cstring): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_with_label", libgtk.}
proc radio_menu_item_new*(group: glib.GSList; label: cstring): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_with_label", libgtk.}
proc radio_menu_item_new_with_mnemonic*(group: glib.GSList; 
    label: cstring): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_with_mnemonic", libgtk.}
proc new_from_widget*(group: RadioMenuItem): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_from_widget", libgtk.}
proc new_with_mnemonic_from_widget*(
    group: RadioMenuItem; label: cstring): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_with_mnemonic_from_widget", libgtk.}
proc new_with_label_from_widget*(
    group: RadioMenuItem; label: cstring): RadioMenuItem {.
    importc: "gtk_radio_menu_item_new_with_label_from_widget", libgtk.}
proc get_group*(radio_menu_item: RadioMenuItem): glib.GSList {.
    importc: "gtk_radio_menu_item_get_group", libgtk.}
proc group*(radio_menu_item: RadioMenuItem): glib.GSList {.
    importc: "gtk_radio_menu_item_get_group", libgtk.}
proc set_group*(radio_menu_item: RadioMenuItem; 
                                    group: glib.GSList) {.
    importc: "gtk_radio_menu_item_set_group", libgtk.}
proc `group=`*(radio_menu_item: RadioMenuItem; 
                                    group: glib.GSList) {.
    importc: "gtk_radio_menu_item_set_group", libgtk.}

template gtk_toggle_tool_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toggle_tool_button_get_type(), 
                              ToggleToolButtonObj))

template gtk_toggle_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toggle_tool_button_get_type(), 
                           ToggleToolButtonClassObj))

template gtk_is_toggle_tool_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toggle_tool_button_get_type()))

template gtk_is_toggle_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toggle_tool_button_get_type()))

template gtk_toggle_tool_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toggle_tool_button_get_type(), 
                             ToggleToolButtonClassObj))

type 
  ToggleToolButtonPrivateObj = object 
  
type 
  ToggleToolButton* =  ptr ToggleToolButtonObj
  ToggleToolButtonPtr* = ptr ToggleToolButtonObj
  ToggleToolButtonObj = object of ToolButtonObj
    priv100: ptr ToggleToolButtonPrivateObj

type 
  ToggleToolButtonClass* =  ptr ToggleToolButtonClassObj
  ToggleToolButtonClassPtr* = ptr ToggleToolButtonClassObj
  ToggleToolButtonClassObj = object of ToolButtonClassObj
    toggled*: proc (button: ToggleToolButton) {.cdecl.}
    gtk_reserved991: proc () {.cdecl.}
    gtk_reserved992: proc () {.cdecl.}
    gtk_reserved993: proc () {.cdecl.}
    gtk_reserved994: proc () {.cdecl.}

proc toggle_tool_button_get_type*(): GType {.
    importc: "gtk_toggle_tool_button_get_type", libgtk.}
proc toggle_tool_button_new*(): ToolItem {.
    importc: "gtk_toggle_tool_button_new", libgtk.}
proc toggle_tool_button_new_from_stock*(stock_id: cstring): ToolItem {.
    importc: "gtk_toggle_tool_button_new_from_stock", libgtk.}
proc set_active*(button: ToggleToolButton; 
    is_active: gboolean) {.importc: "gtk_toggle_tool_button_set_active", 
                           libgtk.}
proc `active=`*(button: ToggleToolButton; 
    is_active: gboolean) {.importc: "gtk_toggle_tool_button_set_active", 
                           libgtk.}
proc get_active*(button: ToggleToolButton): gboolean {.
    importc: "gtk_toggle_tool_button_get_active", libgtk.}
proc active*(button: ToggleToolButton): gboolean {.
    importc: "gtk_toggle_tool_button_get_active", libgtk.}

template gtk_radio_tool_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_tool_button_get_type(), 
                              RadioToolButtonObj))

template gtk_radio_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_tool_button_get_type(), 
                           RadioToolButtonClassObj))

template gtk_is_radio_tool_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_tool_button_get_type()))

template gtk_is_radio_tool_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_tool_button_get_type()))

template gtk_radio_tool_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_tool_button_get_type(), 
                             RadioToolButtonClassObj))

type 
  RadioToolButton* =  ptr RadioToolButtonObj
  RadioToolButtonPtr* = ptr RadioToolButtonObj
  RadioToolButtonObj*{.final.} = object of ToggleToolButtonObj

type 
  RadioToolButtonClass* =  ptr RadioToolButtonClassObj
  RadioToolButtonClassPtr* = ptr RadioToolButtonClassObj
  RadioToolButtonClassObj*{.final.} = object of ToggleToolButtonClassObj
    gtk_reserved1001: proc () {.cdecl.}
    gtk_reserved1002: proc () {.cdecl.}
    gtk_reserved1003: proc () {.cdecl.}
    gtk_reserved1004: proc () {.cdecl.}

proc radio_tool_button_get_type*(): GType {.
    importc: "gtk_radio_tool_button_get_type", libgtk.}
proc radio_tool_button_new*(group: glib.GSList): ToolItem {.
    importc: "gtk_radio_tool_button_new", libgtk.}
proc radio_tool_button_new_from_stock*(group: glib.GSList; 
    stock_id: cstring): ToolItem {.
    importc: "gtk_radio_tool_button_new_from_stock", libgtk.}
proc new_from_widget*(group: RadioToolButton): ToolItem {.
    importc: "gtk_radio_tool_button_new_from_widget", libgtk.}
proc new_with_stock_from_widget*(
    group: RadioToolButton; stock_id: cstring): ToolItem {.
    importc: "gtk_radio_tool_button_new_with_stock_from_widget", libgtk.}
proc get_group*(button: RadioToolButton): glib.GSList {.
    importc: "gtk_radio_tool_button_get_group", libgtk.}
proc group*(button: RadioToolButton): glib.GSList {.
    importc: "gtk_radio_tool_button_get_group", libgtk.}
proc set_group*(button: RadioToolButton; 
                                      group: glib.GSList) {.
    importc: "gtk_radio_tool_button_set_group", libgtk.}
proc `group=`*(button: RadioToolButton; 
                                      group: glib.GSList) {.
    importc: "gtk_radio_tool_button_set_group", libgtk.}

template gtk_range*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, range_get_type(), RangeObj))

template gtk_range_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, range_get_type(), RangeClassObj))

template gtk_is_range*(obj: expr): expr = 
  (g_type_check_instance_type(obj, range_get_type()))

template gtk_is_range_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, range_get_type()))

template gtk_range_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, range_get_type(), RangeClassObj))

type 
  RangePrivateObj = object 
  
type 
  Range* =  ptr RangeObj
  RangePtr* = ptr RangeObj
  RangeObj* = object of WidgetObj
    priv101: ptr RangePrivateObj

type 
  RangeClass* =  ptr RangeClassObj
  RangeClassPtr* = ptr RangeClassObj
  RangeClassObj = object of WidgetClassObj
    slider_detail*: cstring
    stepper_detail*: cstring
    value_changed*: proc (range: Range) {.cdecl.}
    adjust_bounds*: proc (range: Range; new_value: gdouble) {.cdecl.}
    move_slider*: proc (range: Range; scroll: ScrollType) {.cdecl.}
    get_range_border*: proc (range: Range; border: Border) {.cdecl.}
    change_value*: proc (range: Range; scroll: ScrollType; 
                         new_value: gdouble): gboolean {.cdecl.}
    gtk_reserved1011: proc () {.cdecl.}
    gtk_reserved1012: proc () {.cdecl.}
    gtk_reserved1013: proc () {.cdecl.}
    gtk_reserved1014: proc () {.cdecl.}

proc range_get_type*(): GType {.importc: "gtk_range_get_type", libgtk.}
proc set_adjustment*(range: Range; 
                               adjustment: Adjustment) {.
    importc: "gtk_range_set_adjustment", libgtk.}
proc `adjustment=`*(range: Range; 
                               adjustment: Adjustment) {.
    importc: "gtk_range_set_adjustment", libgtk.}
proc get_adjustment*(range: Range): Adjustment {.
    importc: "gtk_range_get_adjustment", libgtk.}
proc adjustment*(range: Range): Adjustment {.
    importc: "gtk_range_get_adjustment", libgtk.}
proc set_inverted*(range: Range; setting: gboolean) {.
    importc: "gtk_range_set_inverted", libgtk.}
proc `inverted=`*(range: Range; setting: gboolean) {.
    importc: "gtk_range_set_inverted", libgtk.}
proc get_inverted*(range: Range): gboolean {.
    importc: "gtk_range_get_inverted", libgtk.}
proc inverted*(range: Range): gboolean {.
    importc: "gtk_range_get_inverted", libgtk.}
proc set_flippable*(range: Range; flippable: gboolean) {.
    importc: "gtk_range_set_flippable", libgtk.}
proc `flippable=`*(range: Range; flippable: gboolean) {.
    importc: "gtk_range_set_flippable", libgtk.}
proc get_flippable*(range: Range): gboolean {.
    importc: "gtk_range_get_flippable", libgtk.}
proc flippable*(range: Range): gboolean {.
    importc: "gtk_range_get_flippable", libgtk.}
proc set_slider_size_fixed*(range: Range; 
                                      size_fixed: gboolean) {.
    importc: "gtk_range_set_slider_size_fixed", libgtk.}
proc `slider_size_fixed=`*(range: Range; 
                                      size_fixed: gboolean) {.
    importc: "gtk_range_set_slider_size_fixed", libgtk.}
proc get_slider_size_fixed*(range: Range): gboolean {.
    importc: "gtk_range_get_slider_size_fixed", libgtk.}
proc slider_size_fixed*(range: Range): gboolean {.
    importc: "gtk_range_get_slider_size_fixed", libgtk.}
proc set_min_slider_size*(range: Range; min_size: gint) {.
    importc: "gtk_range_set_min_slider_size", libgtk.}
proc `min_slider_size=`*(range: Range; min_size: gint) {.
    importc: "gtk_range_set_min_slider_size", libgtk.}
proc get_min_slider_size*(range: Range): gint {.
    importc: "gtk_range_get_min_slider_size", libgtk.}
proc min_slider_size*(range: Range): gint {.
    importc: "gtk_range_get_min_slider_size", libgtk.}
proc get_range_rect*(range: Range; 
                               range_rect: var gdk3.RectangleObj) {.
    importc: "gtk_range_get_range_rect", libgtk.}
proc get_slider_range*(range: Range; slider_start: var gint; 
                                 slider_end: var gint) {.
    importc: "gtk_range_get_slider_range", libgtk.}
proc set_lower_stepper_sensitivity*(range: Range; 
    sensitivity: SensitivityType) {.
    importc: "gtk_range_set_lower_stepper_sensitivity", libgtk.}
proc `lower_stepper_sensitivity=`*(range: Range; 
    sensitivity: SensitivityType) {.
    importc: "gtk_range_set_lower_stepper_sensitivity", libgtk.}
proc get_lower_stepper_sensitivity*(range: Range): SensitivityType {.
    importc: "gtk_range_get_lower_stepper_sensitivity", libgtk.}
proc lower_stepper_sensitivity*(range: Range): SensitivityType {.
    importc: "gtk_range_get_lower_stepper_sensitivity", libgtk.}
proc set_upper_stepper_sensitivity*(range: Range; 
    sensitivity: SensitivityType) {.
    importc: "gtk_range_set_upper_stepper_sensitivity", libgtk.}
proc `upper_stepper_sensitivity=`*(range: Range; 
    sensitivity: SensitivityType) {.
    importc: "gtk_range_set_upper_stepper_sensitivity", libgtk.}
proc get_upper_stepper_sensitivity*(range: Range): SensitivityType {.
    importc: "gtk_range_get_upper_stepper_sensitivity", libgtk.}
proc upper_stepper_sensitivity*(range: Range): SensitivityType {.
    importc: "gtk_range_get_upper_stepper_sensitivity", libgtk.}
proc set_increments*(range: Range; step: gdouble; 
                               page: gdouble) {.
    importc: "gtk_range_set_increments", libgtk.}
proc `increments=`*(range: Range; step: gdouble; 
                               page: gdouble) {.
    importc: "gtk_range_set_increments", libgtk.}
proc set_range*(range: Range; min: gdouble; max: gdouble) {.
    importc: "gtk_range_set_range", libgtk.}
proc `range=`*(range: Range; min: gdouble; max: gdouble) {.
    importc: "gtk_range_set_range", libgtk.}
proc set_value*(range: Range; value: gdouble) {.
    importc: "gtk_range_set_value", libgtk.}
proc `value=`*(range: Range; value: gdouble) {.
    importc: "gtk_range_set_value", libgtk.}
proc get_value*(range: Range): gdouble {.
    importc: "gtk_range_get_value", libgtk.}
proc value*(range: Range): gdouble {.
    importc: "gtk_range_get_value", libgtk.}
proc set_show_fill_level*(range: Range; 
                                    show_fill_level: gboolean) {.
    importc: "gtk_range_set_show_fill_level", libgtk.}
proc `show_fill_level=`*(range: Range; 
                                    show_fill_level: gboolean) {.
    importc: "gtk_range_set_show_fill_level", libgtk.}
proc get_show_fill_level*(range: Range): gboolean {.
    importc: "gtk_range_get_show_fill_level", libgtk.}
proc show_fill_level*(range: Range): gboolean {.
    importc: "gtk_range_get_show_fill_level", libgtk.}
proc set_restrict_to_fill_level*(range: Range; 
    restrict_to_fill_level: gboolean) {.
    importc: "gtk_range_set_restrict_to_fill_level", libgtk.}
proc `restrict_to_fill_level=`*(range: Range; 
    restrict_to_fill_level: gboolean) {.
    importc: "gtk_range_set_restrict_to_fill_level", libgtk.}
proc get_restrict_to_fill_level*(range: Range): gboolean {.
    importc: "gtk_range_get_restrict_to_fill_level", libgtk.}
proc restrict_to_fill_level*(range: Range): gboolean {.
    importc: "gtk_range_get_restrict_to_fill_level", libgtk.}
proc set_fill_level*(range: Range; fill_level: gdouble) {.
    importc: "gtk_range_set_fill_level", libgtk.}
proc `fill_level=`*(range: Range; fill_level: gdouble) {.
    importc: "gtk_range_set_fill_level", libgtk.}
proc get_fill_level*(range: Range): gdouble {.
    importc: "gtk_range_get_fill_level", libgtk.}
proc fill_level*(range: Range): gdouble {.
    importc: "gtk_range_get_fill_level", libgtk.}
proc set_round_digits*(range: Range; round_digits: gint) {.
    importc: "gtk_range_set_round_digits", libgtk.}
proc `round_digits=`*(range: Range; round_digits: gint) {.
    importc: "gtk_range_set_round_digits", libgtk.}
proc get_round_digits*(range: Range): gint {.
    importc: "gtk_range_get_round_digits", libgtk.}
proc round_digits*(range: Range): gint {.
    importc: "gtk_range_get_round_digits", libgtk.}

template gtk_recent_manager*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_manager_get_type(), RecentManagerObj))

template gtk_is_recent_manager*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_manager_get_type()))

template gtk_recent_manager_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, recent_manager_get_type(), 
                           RecentManagerClassObj))

template gtk_is_recent_manager_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, recent_manager_get_type()))

template gtk_recent_manager_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, recent_manager_get_type(), 
                             RecentManagerClassObj))

type 
  RecentInfo* =  ptr RecentInfoObj
  RecentInfoPtr* = ptr RecentInfoObj
  RecentInfoObj* = object 
  
  RecentManagerPrivateObj = object 
  
type 
  RecentData* =  ptr RecentDataObj
  RecentDataPtr* = ptr RecentDataObj
  RecentDataObj* = object 
    display_name*: cstring
    description*: cstring
    mime_type*: cstring
    app_name*: cstring
    app_exec*: cstring
    groups*: cstringArray
    is_private*: gboolean

type 
  RecentManager* =  ptr RecentManagerObj
  RecentManagerPtr* = ptr RecentManagerObj
  RecentManagerObj*{.final.} = object of GObjectObj
    priv102: ptr RecentManagerPrivateObj

type 
  RecentManagerClass* =  ptr RecentManagerClassObj
  RecentManagerClassPtr* = ptr RecentManagerClassObj
  RecentManagerClassObj*{.final.} = object of GObjectClassObj
    changed*: proc (manager: RecentManager) {.cdecl.}
    gtk_recent1: proc () {.cdecl.}
    gtk_recent2: proc () {.cdecl.}
    gtk_recent3: proc () {.cdecl.}
    gtk_recent4: proc () {.cdecl.}

type 
  RecentManagerError* {.size: sizeof(cint), pure.} = enum 
    NOT_FOUND, INVALID_URI, 
    INVALID_ENCODING, 
    NOT_REGISTERED, READ, 
    WRITE, UNKNOWN
proc recent_manager_error_quark*(): GQuark {.
    importc: "gtk_recent_manager_error_quark", libgtk.}
proc recent_manager_get_type*(): GType {.
    importc: "gtk_recent_manager_get_type", libgtk.}
proc recent_manager_new*(): RecentManager {.
    importc: "gtk_recent_manager_new", libgtk.}
proc recent_manager_get_default*(): RecentManager {.
    importc: "gtk_recent_manager_get_default", libgtk.}
proc add_item*(manager: RecentManager; 
                                  uri: cstring): gboolean {.
    importc: "gtk_recent_manager_add_item", libgtk.}
proc add_full*(manager: RecentManager; 
                                  uri: cstring; 
                                  recent_data: RecentData): gboolean {.
    importc: "gtk_recent_manager_add_full", libgtk.}
proc remove_item*(manager: RecentManager; 
                                     uri: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_recent_manager_remove_item", libgtk.}
proc lookup_item*(manager: RecentManager; 
                                     uri: cstring; error: var glib.GError): RecentInfo {.
    importc: "gtk_recent_manager_lookup_item", libgtk.}
proc has_item*(manager: RecentManager; 
                                  uri: cstring): gboolean {.
    importc: "gtk_recent_manager_has_item", libgtk.}
proc move_item*(manager: RecentManager; 
                                   uri: cstring; new_uri: cstring; 
                                   error: var glib.GError): gboolean {.
    importc: "gtk_recent_manager_move_item", libgtk.}
proc get_items*(manager: RecentManager): glib.GList {.
    importc: "gtk_recent_manager_get_items", libgtk.}
proc items*(manager: RecentManager): glib.GList {.
    importc: "gtk_recent_manager_get_items", libgtk.}
proc purge_items*(manager: RecentManager; 
                                     error: var glib.GError): gint {.
    importc: "gtk_recent_manager_purge_items", libgtk.}
proc recent_info_get_type*(): GType {.importc: "gtk_recent_info_get_type", 
    libgtk.}
proc `ref`*(info: RecentInfo): RecentInfo {.
    importc: "gtk_recent_info_ref", libgtk.}
proc unref*(info: RecentInfo) {.
    importc: "gtk_recent_info_unref", libgtk.}
proc get_uri*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_uri", libgtk.}
proc uri*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_uri", libgtk.}
proc get_display_name*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_display_name", libgtk.}
proc display_name*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_display_name", libgtk.}
proc get_description*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_description", libgtk.}
proc description*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_description", libgtk.}
proc get_mime_type*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_mime_type", libgtk.}
proc mime_type*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_mime_type", libgtk.}
proc get_added*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_added", libgtk.}
proc added*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_added", libgtk.}
proc get_modified*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_modified", libgtk.}
proc modified*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_modified", libgtk.}
proc get_visited*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_visited", libgtk.}
proc visited*(info: RecentInfo): time_t {.
    importc: "gtk_recent_info_get_visited", libgtk.}
proc get_private_hint*(info: RecentInfo): gboolean {.
    importc: "gtk_recent_info_get_private_hint", libgtk.}
proc private_hint*(info: RecentInfo): gboolean {.
    importc: "gtk_recent_info_get_private_hint", libgtk.}
proc get_application_info*(info: RecentInfo; 
    app_name: cstring; app_exec: var cstring; count: var guint; 
    time: ptr time_t): gboolean {.importc: "gtk_recent_info_get_application_info", 
                                   libgtk.}
proc application_info*(info: RecentInfo; 
    app_name: cstring; app_exec: var cstring; count: var guint; 
    time: ptr time_t): gboolean {.importc: "gtk_recent_info_get_application_info", 
                                   libgtk.}
proc create_app_info*(info: RecentInfo; 
                                      app_name: cstring; 
                                      error: var glib.GError): gio.GAppInfo {.
    importc: "gtk_recent_info_create_app_info", libgtk.}
proc get_applications*(info: RecentInfo; 
    length: ptr gsize): cstringArray {.
    importc: "gtk_recent_info_get_applications", libgtk.}
proc applications*(info: RecentInfo; 
    length: ptr gsize): cstringArray {.
    importc: "gtk_recent_info_get_applications", libgtk.}
proc last_application*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_last_application", libgtk.}
proc has_application*(info: RecentInfo; 
                                      app_name: cstring): gboolean {.
    importc: "gtk_recent_info_has_application", libgtk.}
proc get_groups*(info: RecentInfo; length: ptr gsize): cstringArray {.
    importc: "gtk_recent_info_get_groups", libgtk.}
proc groups*(info: RecentInfo; length: ptr gsize): cstringArray {.
    importc: "gtk_recent_info_get_groups", libgtk.}
proc has_group*(info: RecentInfo; group_name: cstring): gboolean {.
    importc: "gtk_recent_info_has_group", libgtk.}
proc get_icon*(info: RecentInfo; size: gint): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_recent_info_get_icon", libgtk.}
proc icon*(info: RecentInfo; size: gint): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_recent_info_get_icon", libgtk.}
proc get_gicon*(info: RecentInfo): gio.GIcon {.
    importc: "gtk_recent_info_get_gicon", libgtk.}
proc gicon*(info: RecentInfo): gio.GIcon {.
    importc: "gtk_recent_info_get_gicon", libgtk.}
proc get_short_name*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_short_name", libgtk.}
proc short_name*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_short_name", libgtk.}
proc get_uri_display*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_uri_display", libgtk.}
proc uri_display*(info: RecentInfo): cstring {.
    importc: "gtk_recent_info_get_uri_display", libgtk.}
proc get_age*(info: RecentInfo): gint {.
    importc: "gtk_recent_info_get_age", libgtk.}
proc age*(info: RecentInfo): gint {.
    importc: "gtk_recent_info_get_age", libgtk.}
proc is_local*(info: RecentInfo): gboolean {.
    importc: "gtk_recent_info_is_local", libgtk.}
proc exists*(info: RecentInfo): gboolean {.
    importc: "gtk_recent_info_exists", libgtk.}
proc match*(info_a: RecentInfo; 
                            info_b: RecentInfo): gboolean {.
    importc: "gtk_recent_info_match", libgtk.}

template gtk_recent_filter*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_filter_get_type(), RecentFilterObj))

template gtk_is_recent_filter*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_filter_get_type()))

type 
  RecentFilter* =  ptr RecentFilterObj
  RecentFilterPtr* = ptr RecentFilterObj
  RecentFilterObj* = object 
  
type 
  RecentFilterFlags* {.size: sizeof(cint), pure.} = enum 
    URI = 1 shl 0, DISPLAY_NAME = 1 shl
        1, RECENT_FILTER_MIME_TYPE = 1 shl 2, 
    RECENT_FILTER_APPLICATION = 1 shl 3, 
    RECENT_FILTER_GROUP = 1 shl 4, RECENT_FILTER_AGE = 1 shl 5
type 
  RecentFilterFunc* = proc (filter_info: RecentFilterInfo; 
                               user_data: gpointer): gboolean {.cdecl.}
  RecentFilterInfo* =  ptr RecentFilterInfoObj
  RecentFilterInfoPtr* = ptr RecentFilterInfoObj
  RecentFilterInfoObj* = object 
    contains*: RecentFilterFlags
    uri*: cstring
    display_name*: cstring
    mime_type*: cstring
    applications*: cstringArray
    groups*: cstringArray
    age*: gint

proc recent_filter_get_type*(): GType {.
    importc: "gtk_recent_filter_get_type", libgtk.}
proc recent_filter_new*(): RecentFilter {.
    importc: "gtk_recent_filter_new", libgtk.}
proc set_name*(filter: RecentFilter; name: cstring) {.
    importc: "gtk_recent_filter_set_name", libgtk.}
proc `name=`*(filter: RecentFilter; name: cstring) {.
    importc: "gtk_recent_filter_set_name", libgtk.}
proc get_name*(filter: RecentFilter): cstring {.
    importc: "gtk_recent_filter_get_name", libgtk.}
proc name*(filter: RecentFilter): cstring {.
    importc: "gtk_recent_filter_get_name", libgtk.}
proc add_mime_type*(filter: RecentFilter; 
                                      mime_type: cstring) {.
    importc: "gtk_recent_filter_add_mime_type", libgtk.}
proc add_pattern*(filter: RecentFilter; 
                                    pattern: cstring) {.
    importc: "gtk_recent_filter_add_pattern", libgtk.}
proc add_pixbuf_formats*(filter: RecentFilter) {.
    importc: "gtk_recent_filter_add_pixbuf_formats", libgtk.}
proc add_application*(filter: RecentFilter; 
    application: cstring) {.importc: "gtk_recent_filter_add_application", 
                              libgtk.}
proc add_group*(filter: RecentFilter; 
                                  group: cstring) {.
    importc: "gtk_recent_filter_add_group", libgtk.}
proc add_age*(filter: RecentFilter; days: gint) {.
    importc: "gtk_recent_filter_add_age", libgtk.}
proc add_custom*(filter: RecentFilter; 
                                   needed: RecentFilterFlags; 
                                   `func`: RecentFilterFunc; data: gpointer; 
                                   data_destroy: GDestroyNotify) {.
    importc: "gtk_recent_filter_add_custom", libgtk.}
proc get_needed*(filter: RecentFilter): RecentFilterFlags {.
    importc: "gtk_recent_filter_get_needed", libgtk.}
proc needed*(filter: RecentFilter): RecentFilterFlags {.
    importc: "gtk_recent_filter_get_needed", libgtk.}
proc filter*(filter: RecentFilter; 
                               filter_info: RecentFilterInfo): gboolean {.
    importc: "gtk_recent_filter_filter", libgtk.}

template gtk_recent_chooser*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_chooser_get_type(), RecentChooserObj))

template gtk_is_recent_chooser*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_chooser_get_type()))

template gtk_recent_chooser_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, recent_chooser_get_type(), 
                                 RecentChooserIfaceObj))

type 
  RecentSortType* {.size: sizeof(cint), pure.} = enum 
    NONE = 0, MRU, LRU, 
    CUSTOM
  RecentSortFunc* = proc (a: RecentInfo; b: RecentInfo; 
                             user_data: gpointer): gint {.cdecl.}
  RecentChooser* =  ptr RecentChooserObj
  RecentChooserPtr* = ptr RecentChooserObj
  RecentChooserObj* = object 
  
type 
  RecentChooserError* {.size: sizeof(cint), pure.} = enum 
    NOT_FOUND, INVALID_URI
proc recent_chooser_error_quark*(): GQuark {.
    importc: "gtk_recent_chooser_error_quark", libgtk.}
type 
  RecentChooserIface* =  ptr RecentChooserIfaceObj
  RecentChooserIfacePtr* = ptr RecentChooserIfaceObj
  RecentChooserIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    set_current_uri*: proc (chooser: RecentChooser; uri: cstring; 
                            error: var glib.GError): gboolean {.cdecl.}
    get_current_uri*: proc (chooser: RecentChooser): cstring {.cdecl.}
    select_uri*: proc (chooser: RecentChooser; uri: cstring; 
                       error: var glib.GError): gboolean {.cdecl.}
    unselect_uri*: proc (chooser: RecentChooser; uri: cstring) {.cdecl.}
    select_all*: proc (chooser: RecentChooser) {.cdecl.}
    unselect_all*: proc (chooser: RecentChooser) {.cdecl.}
    get_items*: proc (chooser: RecentChooser): glib.GList {.cdecl.}
    get_recent_manager*: proc (chooser: RecentChooser): RecentManager {.cdecl.}
    add_filter*: proc (chooser: RecentChooser; 
                       filter: RecentFilter) {.cdecl.}
    remove_filter*: proc (chooser: RecentChooser; 
                          filter: RecentFilter) {.cdecl.}
    list_filters*: proc (chooser: RecentChooser): glib.GSList {.cdecl.}
    set_sort_func*: proc (chooser: RecentChooser; 
                          sort_func: RecentSortFunc; sort_data: gpointer; 
                          data_destroy: GDestroyNotify) {.cdecl.}
    item_activated*: proc (chooser: RecentChooser) {.cdecl.}
    selection_changed*: proc (chooser: RecentChooser) {.cdecl.}

proc recent_chooser_get_type*(): GType {.
    importc: "gtk_recent_chooser_get_type", libgtk.}
proc set_show_private*(chooser: RecentChooser; 
    show_private: gboolean) {.importc: "gtk_recent_chooser_set_show_private", 
                              libgtk.}
proc `show_private=`*(chooser: RecentChooser; 
    show_private: gboolean) {.importc: "gtk_recent_chooser_set_show_private", 
                              libgtk.}
proc get_show_private*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_private", libgtk.}
proc show_private*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_private", libgtk.}
proc set_show_not_found*(chooser: RecentChooser; 
    show_not_found: gboolean) {.importc: "gtk_recent_chooser_set_show_not_found", 
                                libgtk.}
proc `show_not_found=`*(chooser: RecentChooser; 
    show_not_found: gboolean) {.importc: "gtk_recent_chooser_set_show_not_found", 
                                libgtk.}
proc get_show_not_found*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_not_found", libgtk.}
proc show_not_found*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_not_found", libgtk.}
proc set_select_multiple*(chooser: RecentChooser; 
    select_multiple: gboolean) {.importc: "gtk_recent_chooser_set_select_multiple", 
                                 libgtk.}
proc `select_multiple=`*(chooser: RecentChooser; 
    select_multiple: gboolean) {.importc: "gtk_recent_chooser_set_select_multiple", 
                                 libgtk.}
proc get_select_multiple*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_select_multiple", libgtk.}
proc select_multiple*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_select_multiple", libgtk.}
proc set_limit*(chooser: RecentChooser; limit: gint) {.
    importc: "gtk_recent_chooser_set_limit", libgtk.}
proc `limit=`*(chooser: RecentChooser; limit: gint) {.
    importc: "gtk_recent_chooser_set_limit", libgtk.}
proc get_limit*(chooser: RecentChooser): gint {.
    importc: "gtk_recent_chooser_get_limit", libgtk.}
proc limit*(chooser: RecentChooser): gint {.
    importc: "gtk_recent_chooser_get_limit", libgtk.}
proc set_local_only*(chooser: RecentChooser; 
    local_only: gboolean) {.importc: "gtk_recent_chooser_set_local_only", 
                            libgtk.}
proc `local_only=`*(chooser: RecentChooser; 
    local_only: gboolean) {.importc: "gtk_recent_chooser_set_local_only", 
                            libgtk.}
proc get_local_only*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_local_only", libgtk.}
proc local_only*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_local_only", libgtk.}
proc set_show_tips*(chooser: RecentChooser; 
    show_tips: gboolean) {.importc: "gtk_recent_chooser_set_show_tips", 
                           libgtk.}
proc `show_tips=`*(chooser: RecentChooser; 
    show_tips: gboolean) {.importc: "gtk_recent_chooser_set_show_tips", 
                           libgtk.}
proc get_show_tips*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_tips", libgtk.}
proc show_tips*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_tips", libgtk.}
proc set_show_icons*(chooser: RecentChooser; 
    show_icons: gboolean) {.importc: "gtk_recent_chooser_set_show_icons", 
                            libgtk.}
proc `show_icons=`*(chooser: RecentChooser; 
    show_icons: gboolean) {.importc: "gtk_recent_chooser_set_show_icons", 
                            libgtk.}
proc get_show_icons*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_icons", libgtk.}
proc show_icons*(chooser: RecentChooser): gboolean {.
    importc: "gtk_recent_chooser_get_show_icons", libgtk.}
proc set_sort_type*(chooser: RecentChooser; 
    sort_type: RecentSortType) {.importc: "gtk_recent_chooser_set_sort_type", 
                                    libgtk.}
proc `sort_type=`*(chooser: RecentChooser; 
    sort_type: RecentSortType) {.importc: "gtk_recent_chooser_set_sort_type", 
                                    libgtk.}
proc get_sort_type*(chooser: RecentChooser): RecentSortType {.
    importc: "gtk_recent_chooser_get_sort_type", libgtk.}
proc sort_type*(chooser: RecentChooser): RecentSortType {.
    importc: "gtk_recent_chooser_get_sort_type", libgtk.}
proc set_sort_func*(chooser: RecentChooser; 
    sort_func: RecentSortFunc; sort_data: gpointer; 
    data_destroy: GDestroyNotify) {.importc: "gtk_recent_chooser_set_sort_func", 
                                    libgtk.}
proc `sort_func=`*(chooser: RecentChooser; 
    sort_func: RecentSortFunc; sort_data: gpointer; 
    data_destroy: GDestroyNotify) {.importc: "gtk_recent_chooser_set_sort_func", 
                                    libgtk.}
proc set_current_uri*(chooser: RecentChooser; 
    uri: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_recent_chooser_set_current_uri", libgtk.}
proc get_current_uri*(chooser: RecentChooser): cstring {.
    importc: "gtk_recent_chooser_get_current_uri", libgtk.}
proc current_uri*(chooser: RecentChooser): cstring {.
    importc: "gtk_recent_chooser_get_current_uri", libgtk.}
proc get_current_item*(chooser: RecentChooser): RecentInfo {.
    importc: "gtk_recent_chooser_get_current_item", libgtk.}
proc current_item*(chooser: RecentChooser): RecentInfo {.
    importc: "gtk_recent_chooser_get_current_item", libgtk.}
proc select_uri*(chooser: RecentChooser; 
                                    uri: cstring; error: var glib.GError): gboolean {.
    importc: "gtk_recent_chooser_select_uri", libgtk.}
proc unselect_uri*(chooser: RecentChooser; 
                                      uri: cstring) {.
    importc: "gtk_recent_chooser_unselect_uri", libgtk.}
proc select_all*(chooser: RecentChooser) {.
    importc: "gtk_recent_chooser_select_all", libgtk.}
proc unselect_all*(chooser: RecentChooser) {.
    importc: "gtk_recent_chooser_unselect_all", libgtk.}
proc get_items*(chooser: RecentChooser): glib.GList {.
    importc: "gtk_recent_chooser_get_items", libgtk.}
proc items*(chooser: RecentChooser): glib.GList {.
    importc: "gtk_recent_chooser_get_items", libgtk.}
proc get_uris*(chooser: RecentChooser; 
                                  length: ptr gsize): cstringArray {.
    importc: "gtk_recent_chooser_get_uris", libgtk.}
proc uris*(chooser: RecentChooser; 
                                  length: ptr gsize): cstringArray {.
    importc: "gtk_recent_chooser_get_uris", libgtk.}
proc add_filter*(chooser: RecentChooser; 
                                    filter: RecentFilter) {.
    importc: "gtk_recent_chooser_add_filter", libgtk.}
proc remove_filter*(chooser: RecentChooser; 
    filter: RecentFilter) {.importc: "gtk_recent_chooser_remove_filter", 
                                   libgtk.}
proc list_filters*(chooser: RecentChooser): glib.GSList {.
    importc: "gtk_recent_chooser_list_filters", libgtk.}
proc set_filter*(chooser: RecentChooser; 
                                    filter: RecentFilter) {.
    importc: "gtk_recent_chooser_set_filter", libgtk.}
proc `filter=`*(chooser: RecentChooser; 
                                    filter: RecentFilter) {.
    importc: "gtk_recent_chooser_set_filter", libgtk.}
proc get_filter*(chooser: RecentChooser): RecentFilter {.
    importc: "gtk_recent_chooser_get_filter", libgtk.}
proc filter*(chooser: RecentChooser): RecentFilter {.
    importc: "gtk_recent_chooser_get_filter", libgtk.}

template gtk_recent_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_chooser_dialog_get_type(), 
                              RecentChooserDialogObj))

template gtk_is_recent_chooser_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_chooser_dialog_get_type()))

template gtk_recent_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, recent_chooser_dialog_get_type(), 
                           RecentChooserDialogClassObj))

template gtk_is_recent_chooser_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, recent_chooser_dialog_get_type()))

template gtk_recent_chooser_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, recent_chooser_dialog_get_type(), 
                             RecentChooserDialogClassObj))

type 
  RecentChooserDialogPrivateObj = object 
  
type 
  RecentChooserDialog* =  ptr RecentChooserDialogObj
  RecentChooserDialogPtr* = ptr RecentChooserDialogObj
  RecentChooserDialogObj*{.final.} = object of DialogObj
    priv103: ptr RecentChooserDialogPrivateObj

type 
  RecentChooserDialogClass* =  ptr RecentChooserDialogClassObj
  RecentChooserDialogClassPtr* = ptr RecentChooserDialogClassObj
  RecentChooserDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved1021: proc () {.cdecl.}
    gtk_reserved1022: proc () {.cdecl.}
    gtk_reserved1023: proc () {.cdecl.}
    gtk_reserved1024: proc () {.cdecl.}

proc recent_chooser_dialog_get_type*(): GType {.
    importc: "gtk_recent_chooser_dialog_get_type", libgtk.}
proc recent_chooser_dialog_new*(title: cstring; parent: Window; 
                                    first_button_text: cstring): RecentChooserDialog {.
    varargs, importc: "gtk_recent_chooser_dialog_new", libgtk.}
proc recent_chooser_dialog_new_for_manager*(title: cstring; 
    parent: Window; manager: RecentManager; 
    first_button_text: cstring): RecentChooserDialog {.varargs, 
    importc: "gtk_recent_chooser_dialog_new_for_manager", libgtk.}

template gtk_recent_chooser_menu*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_chooser_menu_get_type(), 
                              RecentChooserMenuObj))

template gtk_is_recent_chooser_menu*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_chooser_menu_get_type()))

template gtk_recent_chooser_menu_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, recent_chooser_menu_get_type(), 
                           RecentChooserMenuClassObj))

template gtk_is_recent_chooser_menu_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, recent_chooser_menu_get_type()))

template gtk_recent_chooser_menu_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, recent_chooser_menu_get_type(), 
                             RecentChooserMenuClassObj))

type 
  RecentChooserMenuPrivateObj = object 
  
type 
  RecentChooserMenu* =  ptr RecentChooserMenuObj
  RecentChooserMenuPtr* = ptr RecentChooserMenuObj
  RecentChooserMenuObj*{.final.} = object of MenuObj
    priv104: ptr RecentChooserMenuPrivateObj

type 
  RecentChooserMenuClass* =  ptr RecentChooserMenuClassObj
  RecentChooserMenuClassPtr* = ptr RecentChooserMenuClassObj
  RecentChooserMenuClassObj*{.final.} = object of MenuClassObj
    gtk_recent1*: proc () {.cdecl.}
    gtk_recent2*: proc () {.cdecl.}
    gtk_recent3*: proc () {.cdecl.}
    gtk_recent4*: proc () {.cdecl.}

proc recent_chooser_menu_get_type*(): GType {.
    importc: "gtk_recent_chooser_menu_get_type", libgtk.}
proc recent_chooser_menu_new*(): RecentChooserMenu {.
    importc: "gtk_recent_chooser_menu_new", libgtk.}
proc recent_chooser_menu_new_for_manager*(manager: RecentManager): RecentChooserMenu {.
    importc: "gtk_recent_chooser_menu_new_for_manager", libgtk.}
proc get_show_numbers*(menu: RecentChooserMenu): gboolean {.
    importc: "gtk_recent_chooser_menu_get_show_numbers", libgtk.}
proc show_numbers*(menu: RecentChooserMenu): gboolean {.
    importc: "gtk_recent_chooser_menu_get_show_numbers", libgtk.}
proc set_show_numbers*(menu: RecentChooserMenu; 
    show_numbers: gboolean) {.importc: "gtk_recent_chooser_menu_set_show_numbers", 
                              libgtk.}
proc `show_numbers=`*(menu: RecentChooserMenu; 
    show_numbers: gboolean) {.importc: "gtk_recent_chooser_menu_set_show_numbers", 
                              libgtk.}

template gtk_recent_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_chooser_widget_get_type(), 
                              RecentChooserWidgetObj))

template gtk_is_recent_chooser_widget*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_chooser_widget_get_type()))

template gtk_recent_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, recent_chooser_widget_get_type(), 
                           RecentChooserWidgetClassObj))

template gtk_is_recent_chooser_widget_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, recent_chooser_widget_get_type()))

template gtk_recent_chooser_widget_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, recent_chooser_widget_get_type(), 
                             RecentChooserWidgetClassObj))

type 
  RecentChooserWidgetPrivateObj = object 
  
type 
  RecentChooserWidget* =  ptr RecentChooserWidgetObj
  RecentChooserWidgetPtr* = ptr RecentChooserWidgetObj
  RecentChooserWidgetObj*{.final.} = object of BoxObj
    priv105: ptr RecentChooserWidgetPrivateObj

type 
  RecentChooserWidgetClass* =  ptr RecentChooserWidgetClassObj
  RecentChooserWidgetClassPtr* = ptr RecentChooserWidgetClassObj
  RecentChooserWidgetClassObj*{.final.} = object of BoxClassObj
    gtk_reserved1031: proc () {.cdecl.}
    gtk_reserved1032: proc () {.cdecl.}
    gtk_reserved1033: proc () {.cdecl.}
    gtk_reserved1034: proc () {.cdecl.}

proc recent_chooser_widget_get_type*(): GType {.
    importc: "gtk_recent_chooser_widget_get_type", libgtk.}
proc recent_chooser_widget_new*(): RecentChooserWidget {.
    importc: "gtk_recent_chooser_widget_new", libgtk.}
proc recent_chooser_widget_new_for_manager*(manager: RecentManager): RecentChooserWidget {.
    importc: "gtk_recent_chooser_widget_new_for_manager", libgtk.}

proc render_check*(context: StyleContext; cr: cairo.Context; 
                       x: gdouble; y: gdouble; width: gdouble; height: gdouble) {.
    importc: "gtk_render_check", libgtk.}
proc render_option*(context: StyleContext; cr: cairo.Context; 
                        x: gdouble; y: gdouble; width: gdouble; 
                        height: gdouble) {.importc: "gtk_render_option", 
    libgtk.}
proc render_arrow*(context: StyleContext; cr: cairo.Context; 
                       angle: gdouble; x: gdouble; y: gdouble; size: gdouble) {.
    importc: "gtk_render_arrow", libgtk.}
proc render_background*(context: StyleContext; cr: cairo.Context; 
                            x: gdouble; y: gdouble; width: gdouble; 
                            height: gdouble) {.
    importc: "gtk_render_background", libgtk.}
proc render_frame*(context: StyleContext; cr: cairo.Context; 
                       x: gdouble; y: gdouble; width: gdouble; height: gdouble) {.
    importc: "gtk_render_frame", libgtk.}
proc render_expander*(context: StyleContext; cr: cairo.Context; 
                          x: gdouble; y: gdouble; width: gdouble; 
                          height: gdouble) {.importc: "gtk_render_expander", 
    libgtk.}
proc render_focus*(context: StyleContext; cr: cairo.Context; 
                       x: gdouble; y: gdouble; width: gdouble; height: gdouble) {.
    importc: "gtk_render_focus", libgtk.}
proc render_layout*(context: StyleContext; cr: cairo.Context; 
                        x: gdouble; y: gdouble; layout: pango.Layout) {.
    importc: "gtk_render_layout", libgtk.}
proc render_line*(context: StyleContext; cr: cairo.Context; 
                      x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble) {.
    importc: "gtk_render_line", libgtk.}
proc render_slider*(context: StyleContext; cr: cairo.Context; 
                        x: gdouble; y: gdouble; width: gdouble; 
                        height: gdouble; orientation: Orientation) {.
    importc: "gtk_render_slider", libgtk.}
proc render_frame_gap*(context: StyleContext; cr: cairo.Context; 
                           x: gdouble; y: gdouble; width: gdouble; 
                           height: gdouble; gap_side: PositionType; 
                           xy0_gap: gdouble; xy1_gap: gdouble) {.
    importc: "gtk_render_frame_gap", libgtk.}
proc render_extension*(context: StyleContext; cr: cairo.Context; 
                           x: gdouble; y: gdouble; width: gdouble; 
                           height: gdouble; gap_side: PositionType) {.
    importc: "gtk_render_extension", libgtk.}
proc render_handle*(context: StyleContext; cr: cairo.Context; 
                        x: gdouble; y: gdouble; width: gdouble; 
                        height: gdouble) {.importc: "gtk_render_handle", 
    libgtk.}
proc render_activity*(context: StyleContext; cr: cairo.Context; 
                          x: gdouble; y: gdouble; width: gdouble; 
                          height: gdouble) {.importc: "gtk_render_activity", 
    libgtk.}
proc render_icon_pixbuf*(context: StyleContext; 
                             source: IconSource; size: IconSize): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_render_icon_pixbuf", libgtk.}
proc render_icon*(context: StyleContext; cr: cairo.Context; 
                      pixbuf: gdk_pixbuf.GdkPixbuf; x: gdouble; y: gdouble) {.
    importc: "gtk_render_icon", libgtk.}
proc render_icon_surface*(context: StyleContext; cr: cairo.Context; 
                              surface: cairo.Surface; x: gdouble; 
                              y: gdouble) {.
    importc: "gtk_render_icon_surface", libgtk.}

template gtk_revealer*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, revealer_get_type(), RevealerObj))

template gtk_revealer_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, revealer_get_type(), RevealerClassObj))

template gtk_is_revealer*(obj: expr): expr = 
  (g_type_check_instance_type(obj, revealer_get_type()))

template gtk_is_revealer_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, revealer_get_type()))

template gtk_revealer_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, revealer_get_type(), RevealerClassObj))

type 
  RevealerTransitionType* {.size: sizeof(cint), pure.} = enum 
    NONE, CROSSFADE, 
    SLIDE_RIGHT, 
    SLIDE_LEFT, 
    SLIDE_UP, 
    SLIDE_DOWN
type 
  Revealer* =  ptr RevealerObj
  RevealerPtr* = ptr RevealerObj
  RevealerObj*{.final.} = object of BinObj

type 
  RevealerClass* =  ptr RevealerClassObj
  RevealerClassPtr* = ptr RevealerClassObj
  RevealerClassObj*{.final.} = object of BinClassObj

proc revealer_get_type*(): GType {.importc: "gtk_revealer_get_type", 
    libgtk.}
proc revealer_new*(): Revealer {.importc: "gtk_revealer_new", 
    libgtk.}
proc get_reveal_child*(revealer: Revealer): gboolean {.
    importc: "gtk_revealer_get_reveal_child", libgtk.}
proc reveal_child*(revealer: Revealer): gboolean {.
    importc: "gtk_revealer_get_reveal_child", libgtk.}
proc set_reveal_child*(revealer: Revealer; 
                                    reveal_child: gboolean) {.
    importc: "gtk_revealer_set_reveal_child", libgtk.}
proc `reveal_child=`*(revealer: Revealer; 
                                    reveal_child: gboolean) {.
    importc: "gtk_revealer_set_reveal_child", libgtk.}
proc get_child_revealed*(revealer: Revealer): gboolean {.
    importc: "gtk_revealer_get_child_revealed", libgtk.}
proc child_revealed*(revealer: Revealer): gboolean {.
    importc: "gtk_revealer_get_child_revealed", libgtk.}
proc get_transition_duration*(revealer: Revealer): guint {.
    importc: "gtk_revealer_get_transition_duration", libgtk.}
proc transition_duration*(revealer: Revealer): guint {.
    importc: "gtk_revealer_get_transition_duration", libgtk.}
proc set_transition_duration*(revealer: Revealer; 
    duration: guint) {.importc: "gtk_revealer_set_transition_duration", 
                       libgtk.}
proc `transition_duration=`*(revealer: Revealer; 
    duration: guint) {.importc: "gtk_revealer_set_transition_duration", 
                       libgtk.}
proc set_transition_type*(revealer: Revealer; 
    transition: RevealerTransitionType) {.
    importc: "gtk_revealer_set_transition_type", libgtk.}
proc `transition_type=`*(revealer: Revealer; 
    transition: RevealerTransitionType) {.
    importc: "gtk_revealer_set_transition_type", libgtk.}
proc get_transition_type*(revealer: Revealer): RevealerTransitionType {.
    importc: "gtk_revealer_get_transition_type", libgtk.}
proc transition_type*(revealer: Revealer): RevealerTransitionType {.
    importc: "gtk_revealer_get_transition_type", libgtk.}

template gtk_scale*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scale_get_type(), ScaleObj))

template gtk_scale_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scale_get_type(), ScaleClassObj))

template gtk_is_scale*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scale_get_type()))

template gtk_is_scale_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scale_get_type()))

template gtk_scale_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scale_get_type(), ScaleClassObj))

type 
  ScalePrivateObj = object 
  
type 
  Scale* =  ptr ScaleObj
  ScalePtr* = ptr ScaleObj
  ScaleObj* = object of RangeObj
    priv106: ptr ScalePrivateObj

type 
  ScaleClass* =  ptr ScaleClassObj
  ScaleClassPtr* = ptr ScaleClassObj
  ScaleClassObj = object of RangeClassObj
    format_value*: proc (scale: Scale; value: gdouble): cstring {.cdecl.}
    draw_value*: proc (scale: Scale) {.cdecl.}
    get_layout_offsets*: proc (scale: Scale; x: var gint; y: var gint) {.cdecl.}
    gtk_reserved1041: proc () {.cdecl.}
    gtk_reserved1042: proc () {.cdecl.}
    gtk_reserved1043: proc () {.cdecl.}
    gtk_reserved1044: proc () {.cdecl.}

proc scale_get_type*(): GType {.importc: "gtk_scale_get_type", libgtk.}
proc scale_new*(orientation: Orientation; adjustment: Adjustment): Scale {.
    importc: "gtk_scale_new", libgtk.}
proc scale_new_with_range*(orientation: Orientation; min: gdouble; 
                               max: gdouble; step: gdouble): Scale {.
    importc: "gtk_scale_new_with_range", libgtk.}
proc set_digits*(scale: Scale; digits: gint) {.
    importc: "gtk_scale_set_digits", libgtk.}
proc `digits=`*(scale: Scale; digits: gint) {.
    importc: "gtk_scale_set_digits", libgtk.}
proc get_digits*(scale: Scale): gint {.
    importc: "gtk_scale_get_digits", libgtk.}
proc digits*(scale: Scale): gint {.
    importc: "gtk_scale_get_digits", libgtk.}
proc set_draw_value*(scale: Scale; draw_value: gboolean) {.
    importc: "gtk_scale_set_draw_value", libgtk.}
proc `draw_value=`*(scale: Scale; draw_value: gboolean) {.
    importc: "gtk_scale_set_draw_value", libgtk.}
proc get_draw_value*(scale: Scale): gboolean {.
    importc: "gtk_scale_get_draw_value", libgtk.}
proc draw_value*(scale: Scale): gboolean {.
    importc: "gtk_scale_get_draw_value", libgtk.}
proc set_has_origin*(scale: Scale; has_origin: gboolean) {.
    importc: "gtk_scale_set_has_origin", libgtk.}
proc `has_origin=`*(scale: Scale; has_origin: gboolean) {.
    importc: "gtk_scale_set_has_origin", libgtk.}
proc get_has_origin*(scale: Scale): gboolean {.
    importc: "gtk_scale_get_has_origin", libgtk.}
proc has_origin*(scale: Scale): gboolean {.
    importc: "gtk_scale_get_has_origin", libgtk.}
proc set_value_pos*(scale: Scale; pos: PositionType) {.
    importc: "gtk_scale_set_value_pos", libgtk.}
proc `value_pos=`*(scale: Scale; pos: PositionType) {.
    importc: "gtk_scale_set_value_pos", libgtk.}
proc get_value_pos*(scale: Scale): PositionType {.
    importc: "gtk_scale_get_value_pos", libgtk.}
proc value_pos*(scale: Scale): PositionType {.
    importc: "gtk_scale_get_value_pos", libgtk.}
proc get_layout*(scale: Scale): pango.Layout {.
    importc: "gtk_scale_get_layout", libgtk.}
proc layout*(scale: Scale): pango.Layout {.
    importc: "gtk_scale_get_layout", libgtk.}
proc get_layout_offsets*(scale: Scale; x: var gint; 
                                   y: var gint) {.
    importc: "gtk_scale_get_layout_offsets", libgtk.}
proc add_mark*(scale: Scale; value: gdouble; 
                         position: PositionType; markup: cstring) {.
    importc: "gtk_scale_add_mark", libgtk.}
proc clear_marks*(scale: Scale) {.
    importc: "gtk_scale_clear_marks", libgtk.}

template gtk_scale_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scale_button_get_type(), ScaleButtonObj))

template gtk_scale_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scale_button_get_type(), ScaleButtonClassObj))

template gtk_is_scale_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scale_button_get_type()))

template gtk_is_scale_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scale_button_get_type()))

template gtk_scale_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scale_button_get_type(), ScaleButtonClassObj))

type 
  ScaleButtonPrivateObj = object 
  
type 
  ScaleButton* =  ptr ScaleButtonObj
  ScaleButtonPtr* = ptr ScaleButtonObj
  ScaleButtonObj = object of ButtonObj
    priv107: ptr ScaleButtonPrivateObj

type 
  ScaleButtonClass* =  ptr ScaleButtonClassObj
  ScaleButtonClassPtr* = ptr ScaleButtonClassObj
  ScaleButtonClassObj = object of ButtonClassObj
    value_changed*: proc (button: ScaleButton; value: gdouble) {.cdecl.}
    gtk_reserved1051: proc () {.cdecl.}
    gtk_reserved1052: proc () {.cdecl.}
    gtk_reserved1053: proc () {.cdecl.}
    gtk_reserved1054: proc () {.cdecl.}

proc scale_button_get_type*(): GType {.
    importc: "gtk_scale_button_get_type", libgtk.}
proc scale_button_new*(size: IconSize; min: gdouble; max: gdouble; 
                           step: gdouble; icons: var cstring): ScaleButton {.
    importc: "gtk_scale_button_new", libgtk.}
proc set_icons*(button: ScaleButton; 
                                 icons: var cstring) {.
    importc: "gtk_scale_button_set_icons", libgtk.}
proc `icons=`*(button: ScaleButton; 
                                 icons: var cstring) {.
    importc: "gtk_scale_button_set_icons", libgtk.}
proc get_value*(button: ScaleButton): gdouble {.
    importc: "gtk_scale_button_get_value", libgtk.}
proc value*(button: ScaleButton): gdouble {.
    importc: "gtk_scale_button_get_value", libgtk.}
proc set_value*(button: ScaleButton; value: gdouble) {.
    importc: "gtk_scale_button_set_value", libgtk.}
proc `value=`*(button: ScaleButton; value: gdouble) {.
    importc: "gtk_scale_button_set_value", libgtk.}
proc get_adjustment*(button: ScaleButton): Adjustment {.
    importc: "gtk_scale_button_get_adjustment", libgtk.}
proc adjustment*(button: ScaleButton): Adjustment {.
    importc: "gtk_scale_button_get_adjustment", libgtk.}
proc set_adjustment*(button: ScaleButton; 
                                      adjustment: Adjustment) {.
    importc: "gtk_scale_button_set_adjustment", libgtk.}
proc `adjustment=`*(button: ScaleButton; 
                                      adjustment: Adjustment) {.
    importc: "gtk_scale_button_set_adjustment", libgtk.}
proc get_plus_button*(button: ScaleButton): Button {.
    importc: "gtk_scale_button_get_plus_button", libgtk.}
proc plus_button*(button: ScaleButton): Button {.
    importc: "gtk_scale_button_get_plus_button", libgtk.}
proc get_minus_button*(button: ScaleButton): Button {.
    importc: "gtk_scale_button_get_minus_button", libgtk.}
proc minus_button*(button: ScaleButton): Button {.
    importc: "gtk_scale_button_get_minus_button", libgtk.}
proc get_popup*(button: ScaleButton): Widget {.
    importc: "gtk_scale_button_get_popup", libgtk.}
proc popup*(button: ScaleButton): Widget {.
    importc: "gtk_scale_button_get_popup", libgtk.}

template gtk_scrollable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scrollable_get_type(), ScrollableObj))

template gtk_is_scrollable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scrollable_get_type()))

template gtk_scrollable_get_iface*(inst: expr): expr = 
  (g_type_instance_get_interface(inst, scrollable_get_type(), 
                                 ScrollableInterfaceObj))

type 
  Scrollable* =  ptr ScrollableObj
  ScrollablePtr* = ptr ScrollableObj
  ScrollableObj* = object 
  
type 
  ScrollableInterface* =  ptr ScrollableInterfaceObj
  ScrollableInterfacePtr* = ptr ScrollableInterfaceObj
  ScrollableInterfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_border*: proc (scrollable: Scrollable; border: Border): gboolean {.cdecl.}

proc scrollable_get_type*(): GType {.importc: "gtk_scrollable_get_type", 
    libgtk.}
proc get_hadjustment*(scrollable: Scrollable): Adjustment {.
    importc: "gtk_scrollable_get_hadjustment", libgtk.}
proc hadjustment*(scrollable: Scrollable): Adjustment {.
    importc: "gtk_scrollable_get_hadjustment", libgtk.}
proc set_hadjustment*(scrollable: Scrollable; 
                                     hadjustment: Adjustment) {.
    importc: "gtk_scrollable_set_hadjustment", libgtk.}
proc `hadjustment=`*(scrollable: Scrollable; 
                                     hadjustment: Adjustment) {.
    importc: "gtk_scrollable_set_hadjustment", libgtk.}
proc get_vadjustment*(scrollable: Scrollable): Adjustment {.
    importc: "gtk_scrollable_get_vadjustment", libgtk.}
proc vadjustment*(scrollable: Scrollable): Adjustment {.
    importc: "gtk_scrollable_get_vadjustment", libgtk.}
proc set_vadjustment*(scrollable: Scrollable; 
                                     vadjustment: Adjustment) {.
    importc: "gtk_scrollable_set_vadjustment", libgtk.}
proc `vadjustment=`*(scrollable: Scrollable; 
                                     vadjustment: Adjustment) {.
    importc: "gtk_scrollable_set_vadjustment", libgtk.}
proc get_hscroll_policy*(scrollable: Scrollable): ScrollablePolicy {.
    importc: "gtk_scrollable_get_hscroll_policy", libgtk.}
proc hscroll_policy*(scrollable: Scrollable): ScrollablePolicy {.
    importc: "gtk_scrollable_get_hscroll_policy", libgtk.}
proc set_hscroll_policy*(scrollable: Scrollable; 
    policy: ScrollablePolicy) {.importc: "gtk_scrollable_set_hscroll_policy", 
                                   libgtk.}
proc `hscroll_policy=`*(scrollable: Scrollable; 
    policy: ScrollablePolicy) {.importc: "gtk_scrollable_set_hscroll_policy", 
                                   libgtk.}
proc get_vscroll_policy*(scrollable: Scrollable): ScrollablePolicy {.
    importc: "gtk_scrollable_get_vscroll_policy", libgtk.}
proc vscroll_policy*(scrollable: Scrollable): ScrollablePolicy {.
    importc: "gtk_scrollable_get_vscroll_policy", libgtk.}
proc set_vscroll_policy*(scrollable: Scrollable; 
    policy: ScrollablePolicy) {.importc: "gtk_scrollable_set_vscroll_policy", 
                                   libgtk.}
proc `vscroll_policy=`*(scrollable: Scrollable; 
    policy: ScrollablePolicy) {.importc: "gtk_scrollable_set_vscroll_policy", 
                                   libgtk.}
proc get_border*(scrollable: Scrollable; 
                                border: Border): gboolean {.
    importc: "gtk_scrollable_get_border", libgtk.}
proc border*(scrollable: Scrollable; 
                                border: Border): gboolean {.
    importc: "gtk_scrollable_get_border", libgtk.}

template gtk_scrollbar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scrollbar_get_type(), ScrollbarObj))

template gtk_scrollbar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scrollbar_get_type(), ScrollbarClassObj))

template gtk_is_scrollbar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scrollbar_get_type()))

template gtk_is_scrollbar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scrollbar_get_type()))

template gtk_scrollbar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scrollbar_get_type(), ScrollbarClassObj))

type 
  Scrollbar* =  ptr ScrollbarObj
  ScrollbarPtr* = ptr ScrollbarObj
  ScrollbarObj* = object of RangeObj

type 
  ScrollbarClass* =  ptr ScrollbarClassObj
  ScrollbarClassPtr* = ptr ScrollbarClassObj
  ScrollbarClassObj = object of RangeClassObj
    gtk_reserved1061: proc () {.cdecl.}
    gtk_reserved1062: proc () {.cdecl.}
    gtk_reserved1063: proc () {.cdecl.}
    gtk_reserved1064: proc () {.cdecl.}

proc scrollbar_get_type*(): GType {.importc: "gtk_scrollbar_get_type", 
    libgtk.}
proc scrollbar_new*(orientation: Orientation; 
                        adjustment: Adjustment): Scrollbar {.
    importc: "gtk_scrollbar_new", libgtk.}

template gtk_scrolled_window*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scrolled_window_get_type(), 
                              ScrolledWindowObj))

template gtk_scrolled_window_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scrolled_window_get_type(), 
                           ScrolledWindowClassObj))

template gtk_is_scrolled_window*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scrolled_window_get_type()))

template gtk_is_scrolled_window_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scrolled_window_get_type()))

template gtk_scrolled_window_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scrolled_window_get_type(), 
                             ScrolledWindowClassObj))

type 
  HScrollbar* =  ptr HScrollbarObj
  HScrollbarPtr* = ptr HScrollbarObj
  HScrollbarObj*{.final.} = object of ScrollbarObj
type 
  VScrollbar* =  ptr VScrollbarObj
  VScrollbarPtr* = ptr VScrollbarObj
  VScrollbarObj*{.final.} = object of ScrollbarObj
type 
  ScrolledWindowPrivateObj = object 
  
type 
  ScrolledWindow* =  ptr ScrolledWindowObj
  ScrolledWindowPtr* = ptr ScrolledWindowObj
  ScrolledWindowObj*{.final.} = object of BinObj
    priv108: ptr ScrolledWindowPrivateObj

type 
  ScrolledWindowClass* =  ptr ScrolledWindowClassObj
  ScrolledWindowClassPtr* = ptr ScrolledWindowClassObj
  ScrolledWindowClassObj*{.final.} = object of BinClassObj
    scrollbar_spacing*: gint
    scroll_child*: proc (scrolled_window: ScrolledWindow; 
                         scroll: ScrollType; horizontal: gboolean): gboolean {.cdecl.}
    move_focus_out*: proc (scrolled_window: ScrolledWindow; 
                           direction: DirectionType) {.cdecl.}
    gtk_reserved1071: proc () {.cdecl.}
    gtk_reserved1072: proc () {.cdecl.}
    gtk_reserved1073: proc () {.cdecl.}
    gtk_reserved1074: proc () {.cdecl.}

type 
  CornerType* {.size: sizeof(cint), pure.} = enum 
    TOP_LEFT, BOTTOM_LEFT, TOP_RIGHT, 
    BOTTOM_RIGHT
type 
  PolicyType* {.size: sizeof(cint), pure.} = enum 
    ALWAYS, AUTOMATIC, NEVER, 
    EXTERNAL
proc scrolled_window_get_type*(): GType {.
    importc: "gtk_scrolled_window_get_type", libgtk.}
proc scrolled_window_new*(hadjustment: Adjustment; 
                              vadjustment: Adjustment): ScrolledWindow {.
    importc: "gtk_scrolled_window_new", libgtk.}
proc set_hadjustment*(
    scrolled_window: ScrolledWindow; hadjustment: Adjustment) {.
    importc: "gtk_scrolled_window_set_hadjustment", libgtk.}
proc `hadjustment=`*(
    scrolled_window: ScrolledWindow; hadjustment: Adjustment) {.
    importc: "gtk_scrolled_window_set_hadjustment", libgtk.}
proc set_vadjustment*(
    scrolled_window: ScrolledWindow; vadjustment: Adjustment) {.
    importc: "gtk_scrolled_window_set_vadjustment", libgtk.}
proc `vadjustment=`*(
    scrolled_window: ScrolledWindow; vadjustment: Adjustment) {.
    importc: "gtk_scrolled_window_set_vadjustment", libgtk.}
proc get_hadjustment*(
    scrolled_window: ScrolledWindow): Adjustment {.
    importc: "gtk_scrolled_window_get_hadjustment", libgtk.}
proc hadjustment*(
    scrolled_window: ScrolledWindow): Adjustment {.
    importc: "gtk_scrolled_window_get_hadjustment", libgtk.}
proc get_vadjustment*(
    scrolled_window: ScrolledWindow): Adjustment {.
    importc: "gtk_scrolled_window_get_vadjustment", libgtk.}
proc vadjustment*(
    scrolled_window: ScrolledWindow): Adjustment {.
    importc: "gtk_scrolled_window_get_vadjustment", libgtk.}
proc get_hscrollbar*(
    scrolled_window: ScrolledWindow): HScrollbar {.
    importc: "gtk_scrolled_window_get_hscrollbar", libgtk.}
proc hscrollbar*(
    scrolled_window: ScrolledWindow): HScrollbar {.
    importc: "gtk_scrolled_window_get_hscrollbar", libgtk.}
proc get_vscrollbar*(
    scrolled_window: ScrolledWindow): VScrollbar {.
    importc: "gtk_scrolled_window_get_vscrollbar", libgtk.}
proc vscrollbar*(
    scrolled_window: ScrolledWindow): VScrollbar {.
    importc: "gtk_scrolled_window_get_vscrollbar", libgtk.}
proc set_policy*(scrolled_window: ScrolledWindow; 
                                     hscrollbar_policy: PolicyType; 
                                     vscrollbar_policy: PolicyType) {.
    importc: "gtk_scrolled_window_set_policy", libgtk.}
proc `policy=`*(scrolled_window: ScrolledWindow; 
                                     hscrollbar_policy: PolicyType; 
                                     vscrollbar_policy: PolicyType) {.
    importc: "gtk_scrolled_window_set_policy", libgtk.}
proc get_policy*(scrolled_window: ScrolledWindow; 
                                     hscrollbar_policy: var PolicyType; 
                                     vscrollbar_policy: var PolicyType) {.
    importc: "gtk_scrolled_window_get_policy", libgtk.}
proc set_placement*(
    scrolled_window: ScrolledWindow; window_placement: CornerType) {.
    importc: "gtk_scrolled_window_set_placement", libgtk.}
proc `placement=`*(
    scrolled_window: ScrolledWindow; window_placement: CornerType) {.
    importc: "gtk_scrolled_window_set_placement", libgtk.}
proc unset_placement*(
    scrolled_window: ScrolledWindow) {.
    importc: "gtk_scrolled_window_unset_placement", libgtk.}
proc get_placement*(scrolled_window: ScrolledWindow): CornerType {.
    importc: "gtk_scrolled_window_get_placement", libgtk.}
proc placement*(scrolled_window: ScrolledWindow): CornerType {.
    importc: "gtk_scrolled_window_get_placement", libgtk.}
proc set_shadow_type*(
    scrolled_window: ScrolledWindow; `type`: ShadowType) {.
    importc: "gtk_scrolled_window_set_shadow_type", libgtk.}
proc `shadow_type=`*(
    scrolled_window: ScrolledWindow; `type`: ShadowType) {.
    importc: "gtk_scrolled_window_set_shadow_type", libgtk.}
proc get_shadow_type*(
    scrolled_window: ScrolledWindow): ShadowType {.
    importc: "gtk_scrolled_window_get_shadow_type", libgtk.}
proc shadow_type*(
    scrolled_window: ScrolledWindow): ShadowType {.
    importc: "gtk_scrolled_window_get_shadow_type", libgtk.}
proc add_with_viewport*(
    scrolled_window: ScrolledWindow; child: Widget) {.
    importc: "gtk_scrolled_window_add_with_viewport", libgtk.}
proc get_min_content_width*(
    scrolled_window: ScrolledWindow): gint {.
    importc: "gtk_scrolled_window_get_min_content_width", libgtk.}
proc min_content_width*(
    scrolled_window: ScrolledWindow): gint {.
    importc: "gtk_scrolled_window_get_min_content_width", libgtk.}
proc set_min_content_width*(
    scrolled_window: ScrolledWindow; width: gint) {.
    importc: "gtk_scrolled_window_set_min_content_width", libgtk.}
proc `min_content_width=`*(
    scrolled_window: ScrolledWindow; width: gint) {.
    importc: "gtk_scrolled_window_set_min_content_width", libgtk.}
proc get_min_content_height*(
    scrolled_window: ScrolledWindow): gint {.
    importc: "gtk_scrolled_window_get_min_content_height", libgtk.}
proc min_content_height*(
    scrolled_window: ScrolledWindow): gint {.
    importc: "gtk_scrolled_window_get_min_content_height", libgtk.}
proc set_min_content_height*(
    scrolled_window: ScrolledWindow; height: gint) {.
    importc: "gtk_scrolled_window_set_min_content_height", libgtk.}
proc `min_content_height=`*(
    scrolled_window: ScrolledWindow; height: gint) {.
    importc: "gtk_scrolled_window_set_min_content_height", libgtk.}
proc set_kinetic_scrolling*(
    scrolled_window: ScrolledWindow; kinetic_scrolling: gboolean) {.
    importc: "gtk_scrolled_window_set_kinetic_scrolling", libgtk.}
proc `kinetic_scrolling=`*(
    scrolled_window: ScrolledWindow; kinetic_scrolling: gboolean) {.
    importc: "gtk_scrolled_window_set_kinetic_scrolling", libgtk.}
proc get_kinetic_scrolling*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_kinetic_scrolling", libgtk.}
proc kinetic_scrolling*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_kinetic_scrolling", libgtk.}
proc set_capture_button_press*(
    scrolled_window: ScrolledWindow; capture_button_press: gboolean) {.
    importc: "gtk_scrolled_window_set_capture_button_press", libgtk.}
proc `capture_button_press=`*(
    scrolled_window: ScrolledWindow; capture_button_press: gboolean) {.
    importc: "gtk_scrolled_window_set_capture_button_press", libgtk.}
proc get_capture_button_press*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_capture_button_press", libgtk.}
proc capture_button_press*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_capture_button_press", libgtk.}
proc set_overlay_scrolling*(
    scrolled_window: ScrolledWindow; overlay_scrolling: gboolean) {.
    importc: "gtk_scrolled_window_set_overlay_scrolling", libgtk.}
proc `overlay_scrolling=`*(
    scrolled_window: ScrolledWindow; overlay_scrolling: gboolean) {.
    importc: "gtk_scrolled_window_set_overlay_scrolling", libgtk.}
proc get_overlay_scrolling*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_overlay_scrolling", libgtk.}
proc overlay_scrolling*(
    scrolled_window: ScrolledWindow): gboolean {.
    importc: "gtk_scrolled_window_get_overlay_scrolling", libgtk.}

template gtk_search_bar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, search_bar_get_type(), SearchBarObj))

template gtk_search_bar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, search_bar_get_type(), SearchBarClassObj))

template gtk_is_search_bar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, search_bar_get_type()))

template gtk_is_search_bar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, search_bar_get_type()))

template gtk_search_bar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, search_bar_get_type(), SearchBarClassObj))

type 
  SearchBar* =  ptr SearchBarObj
  SearchBarPtr* = ptr SearchBarObj
  SearchBarObj*{.final.} = object of BinObj

type 
  SearchBarClass* =  ptr SearchBarClassObj
  SearchBarClassPtr* = ptr SearchBarClassObj
  SearchBarClassObj*{.final.} = object of BinClassObj
    gtk_reserved1081: proc () {.cdecl.}
    gtk_reserved1082: proc () {.cdecl.}
    gtk_reserved1083: proc () {.cdecl.}
    gtk_reserved1084: proc () {.cdecl.}

proc search_bar_get_type*(): GType {.importc: "gtk_search_bar_get_type", 
    libgtk.}
proc search_bar_new*(): SearchBar {.importc: "gtk_search_bar_new", 
    libgtk.}
proc connect_entry*(bar: SearchBar; entry: Entry) {.
    importc: "gtk_search_bar_connect_entry", libgtk.}
proc get_search_mode*(bar: SearchBar): gboolean {.
    importc: "gtk_search_bar_get_search_mode", libgtk.}
proc search_mode*(bar: SearchBar): gboolean {.
    importc: "gtk_search_bar_get_search_mode", libgtk.}
proc set_search_mode*(bar: SearchBar; 
                                     search_mode: gboolean) {.
    importc: "gtk_search_bar_set_search_mode", libgtk.}
proc `search_mode=`*(bar: SearchBar; 
                                     search_mode: gboolean) {.
    importc: "gtk_search_bar_set_search_mode", libgtk.}
proc get_show_close_button*(bar: SearchBar): gboolean {.
    importc: "gtk_search_bar_get_show_close_button", libgtk.}
proc show_close_button*(bar: SearchBar): gboolean {.
    importc: "gtk_search_bar_get_show_close_button", libgtk.}
proc set_show_close_button*(bar: SearchBar; 
    visible: gboolean) {.importc: "gtk_search_bar_set_show_close_button", 
                         libgtk.}
proc `show_close_button=`*(bar: SearchBar; 
    visible: gboolean) {.importc: "gtk_search_bar_set_show_close_button", 
                         libgtk.}
proc handle_event*(bar: SearchBar; event: gdk3.Event): gboolean {.
    importc: "gtk_search_bar_handle_event", libgtk.}

template gtk_search_entry*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, search_entry_get_type(), SearchEntryObj))

template gtk_search_entry_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, search_entry_get_type(), SearchEntryClassObj))

template gtk_is_search_entry*(obj: expr): expr = 
  (g_type_check_instance_type(obj, search_entry_get_type()))

template gtk_is_search_entry_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, search_entry_get_type()))

template gtk_search_entry_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, search_entry_get_type(), SearchEntryClassObj))

type 
  SearchEntry* =  ptr SearchEntryObj
  SearchEntryPtr* = ptr SearchEntryObj
  SearchEntryObj*{.final.} = object of EntryObj

type 
  SearchEntryClass* =  ptr SearchEntryClassObj
  SearchEntryClassPtr* = ptr SearchEntryClassObj
  SearchEntryClassObj*{.final.} = object of EntryClassObj
    search_changed*: proc (entry: SearchEntry) {.cdecl.}
    next_match*: proc (entry: SearchEntry) {.cdecl.}
    previous_match*: proc (entry: SearchEntry) {.cdecl.}
    stop_search*: proc (entry: SearchEntry) {.cdecl.}

proc search_entry_get_type*(): GType {.
    importc: "gtk_search_entry_get_type", libgtk.}
proc search_entry_new*(): SearchEntry {.importc: "gtk_search_entry_new", 
    libgtk.}
proc handle_event*(entry: SearchEntry; 
                                    event: gdk3.Event): gboolean {.
    importc: "gtk_search_entry_handle_event", libgtk.}

template gtk_separator*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, separator_get_type(), SeparatorObj))

template gtk_separator_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, separator_get_type(), SeparatorClassObj))

template gtk_is_separator*(obj: expr): expr = 
  (g_type_check_instance_type(obj, separator_get_type()))

template gtk_is_separator_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, separator_get_type()))

template gtk_separator_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, separator_get_type(), SeparatorClassObj))

type 
  SeparatorPrivateObj = object 
  
type 
  Separator* =  ptr SeparatorObj
  SeparatorPtr* = ptr SeparatorObj
  SeparatorObj* = object of WidgetObj
    priv109: ptr SeparatorPrivateObj

type 
  SeparatorClass* =  ptr SeparatorClassObj
  SeparatorClassPtr* = ptr SeparatorClassObj
  SeparatorClassObj = object of WidgetClassObj
    gtk_reserved1091: proc () {.cdecl.}
    gtk_reserved1092: proc () {.cdecl.}
    gtk_reserved1093: proc () {.cdecl.}
    gtk_reserved1094: proc () {.cdecl.}

proc separator_get_type*(): GType {.importc: "gtk_separator_get_type", 
    libgtk.}
proc separator_new*(orientation: Orientation): Separator {.
    importc: "gtk_separator_new", libgtk.}

template gtk_separator_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, separator_menu_item_get_type(), 
                              SeparatorMenuItemObj))

template gtk_separator_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, separator_menu_item_get_type(), 
                           SeparatorMenuItemClassObj))

template gtk_is_separator_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, separator_menu_item_get_type()))

template gtk_is_separator_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, separator_menu_item_get_type()))

template gtk_separator_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, separator_menu_item_get_type(), 
                             SeparatorMenuItemClassObj))

type 
  SeparatorMenuItem* =  ptr SeparatorMenuItemObj
  SeparatorMenuItemPtr* = ptr SeparatorMenuItemObj
  SeparatorMenuItemObj*{.final.} = object of MenuItemObj

type 
  SeparatorMenuItemClass* =  ptr SeparatorMenuItemClassObj
  SeparatorMenuItemClassPtr* = ptr SeparatorMenuItemClassObj
  SeparatorMenuItemClassObj*{.final.} = object of MenuItemClassObj
    gtk_reserved1101: proc () {.cdecl.}
    gtk_reserved1102: proc () {.cdecl.}
    gtk_reserved1103: proc () {.cdecl.}
    gtk_reserved1104: proc () {.cdecl.}

proc separator_menu_item_get_type*(): GType {.
    importc: "gtk_separator_menu_item_get_type", libgtk.}
proc separator_menu_item_new*(): SeparatorMenuItem {.
    importc: "gtk_separator_menu_item_new", libgtk.}

template gtk_separator_tool_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, separator_tool_item_get_type(), 
                              SeparatorToolItemObj))

template gtk_separator_tool_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, separator_tool_item_get_type(), 
                           SeparatorToolItemClassObj))

template gtk_is_separator_tool_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, separator_tool_item_get_type()))

template gtk_is_separator_tool_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, separator_tool_item_get_type()))

template gtk_separator_tool_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, separator_tool_item_get_type(), 
                             SeparatorToolItemClassObj))

type 
  SeparatorToolItemPrivateObj = object 
  
type 
  SeparatorToolItem* =  ptr SeparatorToolItemObj
  SeparatorToolItemPtr* = ptr SeparatorToolItemObj
  SeparatorToolItemObj*{.final.} = object of ToolItemObj
    priv110: ptr SeparatorToolItemPrivateObj

type 
  SeparatorToolItemClass* =  ptr SeparatorToolItemClassObj
  SeparatorToolItemClassPtr* = ptr SeparatorToolItemClassObj
  SeparatorToolItemClassObj*{.final.} = object of ToolItemClassObj
    gtk_reserved1111: proc () {.cdecl.}
    gtk_reserved1112: proc () {.cdecl.}
    gtk_reserved1113: proc () {.cdecl.}
    gtk_reserved1114: proc () {.cdecl.}

proc separator_tool_item_get_type*(): GType {.
    importc: "gtk_separator_tool_item_get_type", libgtk.}
proc separator_tool_item_new*(): ToolItem {.
    importc: "gtk_separator_tool_item_new", libgtk.}
proc get_draw*(item: SeparatorToolItem): gboolean {.
    importc: "gtk_separator_tool_item_get_draw", libgtk.}
proc draw*(item: SeparatorToolItem): gboolean {.
    importc: "gtk_separator_tool_item_get_draw", libgtk.}
proc set_draw*(item: SeparatorToolItem; 
    draw: gboolean) {.importc: "gtk_separator_tool_item_set_draw", libgtk.}
proc `draw=`*(item: SeparatorToolItem; 
    draw: gboolean) {.importc: "gtk_separator_tool_item_set_draw", libgtk.}

template gtk_settings*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, settings_get_type(), SettingsObj))

template gtk_settings_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, settings_get_type(), SettingsClassObj))

template gtk_is_settings*(obj: expr): expr = 
  (g_type_check_instance_type(obj, settings_get_type()))

template gtk_is_settings_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, settings_get_type()))

template gtk_settings_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, settings_get_type(), SettingsClassObj))

type 
  SettingsClass* =  ptr SettingsClassObj
  SettingsClassPtr* = ptr SettingsClassObj
  SettingsClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved1121: proc () {.cdecl.}
    gtk_reserved1122: proc () {.cdecl.}
    gtk_reserved1123: proc () {.cdecl.}
    gtk_reserved1124: proc () {.cdecl.}

type 
  SettingsValue* =  ptr SettingsValueObj
  SettingsValuePtr* = ptr SettingsValueObj
  SettingsValueObj* = object 
    origin*: cstring
    value*: gobject.GValueObj

proc settings_get_type*(): GType {.importc: "gtk_settings_get_type", 
    libgtk.}
proc settings_get_default*(): Settings {.
    importc: "gtk_settings_get_default", libgtk.}
proc settings_get_for_screen*(screen: gdk3.Screen): Settings {.
    importc: "gtk_settings_get_for_screen", libgtk.}
proc settings_install_property*(pspec: gobject.GParamSpec) {.
    importc: "gtk_settings_install_property", libgtk.}
proc settings_install_property_parser*(pspec: gobject.GParamSpec; 
    parser: RcPropertyParser) {.importc: "gtk_settings_install_property_parser", 
                                   libgtk.}
proc rc_property_parse_color*(pspec: gobject.GParamSpec; gstring: glib.GString; 
                                  property_value: gobject.GValue): gboolean {.
    importc: "gtk_rc_property_parse_color", libgtk.}
proc rc_property_parse_enum*(pspec: gobject.GParamSpec; gstring: glib.GString; 
                                 property_value: gobject.GValue): gboolean {.
    importc: "gtk_rc_property_parse_enum", libgtk.}
proc rc_property_parse_flags*(pspec: gobject.GParamSpec; gstring: glib.GString; 
                                  property_value: gobject.GValue): gboolean {.
    importc: "gtk_rc_property_parse_flags", libgtk.}
proc rc_property_parse_requisition*(pspec: gobject.GParamSpec; 
    gstring: glib.GString; property_value: gobject.GValue): gboolean {.
    importc: "gtk_rc_property_parse_requisition", libgtk.}
proc rc_property_parse_border*(pspec: gobject.GParamSpec; 
                                   gstring: glib.GString; 
                                   property_value: gobject.GValue): gboolean {.
    importc: "gtk_rc_property_parse_border", libgtk.}
proc set_property_value*(settings: Settings; 
                                      name: cstring; 
                                      svalue: SettingsValue) {.
    importc: "gtk_settings_set_property_value", libgtk.}
proc `property_value=`*(settings: Settings; 
                                      name: cstring; 
                                      svalue: SettingsValue) {.
    importc: "gtk_settings_set_property_value", libgtk.}
proc set_string_property*(settings: Settings; 
    name: cstring; v_string: cstring; origin: cstring) {.
    importc: "gtk_settings_set_string_property", libgtk.}
proc `string_property=`*(settings: Settings; 
    name: cstring; v_string: cstring; origin: cstring) {.
    importc: "gtk_settings_set_string_property", libgtk.}
proc set_long_property*(settings: Settings; 
                                     name: cstring; v_long: glong; 
                                     origin: cstring) {.
    importc: "gtk_settings_set_long_property", libgtk.}
proc `long_property=`*(settings: Settings; 
                                     name: cstring; v_long: glong; 
                                     origin: cstring) {.
    importc: "gtk_settings_set_long_property", libgtk.}
proc set_double_property*(settings: Settings; 
    name: cstring; v_double: gdouble; origin: cstring) {.
    importc: "gtk_settings_set_double_property", libgtk.}
proc `double_property=`*(settings: Settings; 
    name: cstring; v_double: gdouble; origin: cstring) {.
    importc: "gtk_settings_set_double_property", libgtk.}

proc show_uri*(screen: gdk3.Screen; uri: cstring; timestamp: guint32; 
                   error: var glib.GError): gboolean {.importc: "gtk_show_uri", 
    libgtk.}

template gtk_stack*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, stack_get_type(), StackObj))

template gtk_stack_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, stack_get_type(), StackClassObj))

template gtk_is_stack*(obj: expr): expr = 
  (g_type_check_instance_type(obj, stack_get_type()))

template gtk_is_stack_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, stack_get_type()))

template gtk_stack_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, stack_get_type(), StackClassObj))

type 
  StackTransitionType* {.size: sizeof(cint), pure.} = enum 
    NONE, CROSSFADE, 
    SLIDE_RIGHT, 
    SLIDE_LEFT, SLIDE_UP, 
    SLIDE_DOWN, 
    SLIDE_LEFT_RIGHT, 
    SLIDE_UP_DOWN, 
    OVER_UP, OVER_DOWN, 
    OVER_LEFT, OVER_RIGHT, 
    UNDER_UP, UNDER_DOWN, 
    UNDER_LEFT, 
    UNDER_RIGHT, 
    OVER_UP_DOWN, 
    OVER_DOWN_UP, 
    OVER_LEFT_RIGHT, 
    OVER_RIGHT_LEFT
type 
  Stack* =  ptr StackObj
  StackPtr* = ptr StackObj
  StackObj*{.final.} = object of ContainerObj

type 
  StackClass* =  ptr StackClassObj
  StackClassPtr* = ptr StackClassObj
  StackClassObj*{.final.} = object of ContainerClassObj

proc stack_get_type*(): GType {.importc: "gtk_stack_get_type", libgtk.}
proc stack_new*(): Stack {.importc: "gtk_stack_new", libgtk.}
proc add_named*(stack: Stack; child: Widget; 
                          name: cstring) {.importc: "gtk_stack_add_named", 
    libgtk.}
proc add_titled*(stack: Stack; child: Widget; 
                           name: cstring; title: cstring) {.
    importc: "gtk_stack_add_titled", libgtk.}
proc get_child_by_name*(stack: Stack; name: cstring): Widget {.
    importc: "gtk_stack_get_child_by_name", libgtk.}
proc child_by_name*(stack: Stack; name: cstring): Widget {.
    importc: "gtk_stack_get_child_by_name", libgtk.}
proc set_visible_child*(stack: Stack; child: Widget) {.
    importc: "gtk_stack_set_visible_child", libgtk.}
proc `visible_child=`*(stack: Stack; child: Widget) {.
    importc: "gtk_stack_set_visible_child", libgtk.}
proc get_visible_child*(stack: Stack): Widget {.
    importc: "gtk_stack_get_visible_child", libgtk.}
proc visible_child*(stack: Stack): Widget {.
    importc: "gtk_stack_get_visible_child", libgtk.}
proc set_visible_child_name*(stack: Stack; name: cstring) {.
    importc: "gtk_stack_set_visible_child_name", libgtk.}
proc `visible_child_name=`*(stack: Stack; name: cstring) {.
    importc: "gtk_stack_set_visible_child_name", libgtk.}
proc get_visible_child_name*(stack: Stack): cstring {.
    importc: "gtk_stack_get_visible_child_name", libgtk.}
proc visible_child_name*(stack: Stack): cstring {.
    importc: "gtk_stack_get_visible_child_name", libgtk.}
proc set_visible_child_full*(stack: Stack; name: cstring; 
    transition: StackTransitionType) {.
    importc: "gtk_stack_set_visible_child_full", libgtk.}
proc `visible_child_full=`*(stack: Stack; name: cstring; 
    transition: StackTransitionType) {.
    importc: "gtk_stack_set_visible_child_full", libgtk.}
proc set_homogeneous*(stack: Stack; homogeneous: gboolean) {.
    importc: "gtk_stack_set_homogeneous", libgtk.}
proc `homogeneous=`*(stack: Stack; homogeneous: gboolean) {.
    importc: "gtk_stack_set_homogeneous", libgtk.}
proc get_homogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_homogeneous", libgtk.}
proc homogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_homogeneous", libgtk.}
proc set_hhomogeneous*(stack: Stack; hhomogeneous: gboolean) {.
    importc: "gtk_stack_set_hhomogeneous", libgtk.}
proc `hhomogeneous=`*(stack: Stack; hhomogeneous: gboolean) {.
    importc: "gtk_stack_set_hhomogeneous", libgtk.}
proc get_hhomogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_hhomogeneous", libgtk.}
proc hhomogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_hhomogeneous", libgtk.}
proc set_vhomogeneous*(stack: Stack; vhomogeneous: gboolean) {.
    importc: "gtk_stack_set_vhomogeneous", libgtk.}
proc `vhomogeneous=`*(stack: Stack; vhomogeneous: gboolean) {.
    importc: "gtk_stack_set_vhomogeneous", libgtk.}
proc get_vhomogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_vhomogeneous", libgtk.}
proc vhomogeneous*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_vhomogeneous", libgtk.}
proc set_transition_duration*(stack: Stack; duration: guint) {.
    importc: "gtk_stack_set_transition_duration", libgtk.}
proc `transition_duration=`*(stack: Stack; duration: guint) {.
    importc: "gtk_stack_set_transition_duration", libgtk.}
proc get_transition_duration*(stack: Stack): guint {.
    importc: "gtk_stack_get_transition_duration", libgtk.}
proc transition_duration*(stack: Stack): guint {.
    importc: "gtk_stack_get_transition_duration", libgtk.}
proc set_transition_type*(stack: Stack; 
                                    transition: StackTransitionType) {.
    importc: "gtk_stack_set_transition_type", libgtk.}
proc `transition_type=`*(stack: Stack; 
                                    transition: StackTransitionType) {.
    importc: "gtk_stack_set_transition_type", libgtk.}
proc get_transition_type*(stack: Stack): StackTransitionType {.
    importc: "gtk_stack_get_transition_type", libgtk.}
proc transition_type*(stack: Stack): StackTransitionType {.
    importc: "gtk_stack_get_transition_type", libgtk.}
proc get_transition_running*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_transition_running", libgtk.}
proc transition_running*(stack: Stack): gboolean {.
    importc: "gtk_stack_get_transition_running", libgtk.}

template gtk_sidebar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, sidebar_get_type(), SidebarObj))

template gtk_is_sidebar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, sidebar_get_type()))

template gtk_sidebar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, sidebar_get_type(), SidebarClassObj))

template gtk_is_sidebar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, sidebar_get_type()))

template gtk_sidebar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, sidebar_get_type(), SidebarClassObj))

type 
  Sidebar* =  ptr SidebarObj
  SidebarPtr* = ptr SidebarObj
  SidebarObj*{.final.} = object of BinObj

type 
  SidebarClass* =  ptr SidebarClassObj
  SidebarClassPtr* = ptr SidebarClassObj
  SidebarClassObj*{.final.} = object of BinClassObj
    gtk_reserved1131: proc () {.cdecl.}
    gtk_reserved1132: proc () {.cdecl.}
    gtk_reserved1133: proc () {.cdecl.}
    gtk_reserved1134: proc () {.cdecl.}

proc sidebar_get_type*(): GType {.importc: "gtk_sidebar_get_type", 
                                      libgtk.}
proc sidebar_new*(): Sidebar {.importc: "gtk_sidebar_new", 
    libgtk.}
proc set_stack*(sidebar: Sidebar; stack: Stack) {.
    importc: "gtk_sidebar_set_stack", libgtk.}
proc `stack=`*(sidebar: Sidebar; stack: Stack) {.
    importc: "gtk_sidebar_set_stack", libgtk.}
proc get_stack*(sidebar: Sidebar): Stack {.
    importc: "gtk_sidebar_get_stack", libgtk.}
proc stack*(sidebar: Sidebar): Stack {.
    importc: "gtk_sidebar_get_stack", libgtk.}

type 
  RequestedSize* =  ptr RequestedSizeObj
  RequestedSizePtr* = ptr RequestedSizeObj
  RequestedSizeObj* = object 
    data*: gpointer
    minimum_size*: gint
    natural_size*: gint

proc distribute_natural_allocation*(extra_space: gint; 
    n_requested_sizes: guint; sizes: RequestedSize): gint {.
    importc: "gtk_distribute_natural_allocation", libgtk.}

template gtk_spin_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, spin_button_get_type(), SpinButtonObj))

template gtk_spin_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, spin_button_get_type(), SpinButtonClassObj))

template gtk_is_spin_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, spin_button_get_type()))

template gtk_is_spin_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, spin_button_get_type()))

template gtk_spin_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, spin_button_get_type(), SpinButtonClassObj))

const 
  INPUT_ERROR* = - 1
type 
  SpinButtonUpdatePolicy* {.size: sizeof(cint), pure.} = enum 
    ALWAYS, IF_VALID
type 
  SpinType* {.size: sizeof(cint), pure.} = enum 
    STEP_FORWARD, STEP_BACKWARD, PAGE_FORWARD, 
    PAGE_BACKWARD, HOME, `END`, USER_DEFINED
  SpinButtonPrivateObj = object 
  
type 
  SpinButton* =  ptr SpinButtonObj
  SpinButtonPtr* = ptr SpinButtonObj
  SpinButtonObj*{.final.} = object of EntryObj
    priv112: ptr SpinButtonPrivateObj

type 
  SpinButtonClass* =  ptr SpinButtonClassObj
  SpinButtonClassPtr* = ptr SpinButtonClassObj
  SpinButtonClassObj*{.final.} = object of EntryClassObj
    input*: proc (spin_button: SpinButton; new_value: var gdouble): gint {.cdecl.}
    output*: proc (spin_button: SpinButton): gint {.cdecl.}
    value_changed*: proc (spin_button: SpinButton) {.cdecl.}
    change_value*: proc (spin_button: SpinButton; scroll: ScrollType) {.cdecl.}
    wrapped*: proc (spin_button: SpinButton) {.cdecl.}
    gtk_reserved1141: proc () {.cdecl.}
    gtk_reserved1142: proc () {.cdecl.}
    gtk_reserved1143: proc () {.cdecl.}
    gtk_reserved1144: proc () {.cdecl.}

proc spin_button_get_type*(): GType {.importc: "gtk_spin_button_get_type", 
    libgtk.}
proc configure*(spin_button: SpinButton; 
                                adjustment: Adjustment; 
                                climb_rate: gdouble; digits: guint) {.
    importc: "gtk_spin_button_configure", libgtk.}
proc spin_button_new*(adjustment: Adjustment; climb_rate: gdouble; 
                          digits: guint): SpinButton {.
    importc: "gtk_spin_button_new", libgtk.}
proc spin_button_new_with_range*(min: gdouble; max: gdouble; step: gdouble): SpinButton {.
    importc: "gtk_spin_button_new_with_range", libgtk.}
proc set_adjustment*(spin_button: SpinButton; 
                                     adjustment: Adjustment) {.
    importc: "gtk_spin_button_set_adjustment", libgtk.}
proc `adjustment=`*(spin_button: SpinButton; 
                                     adjustment: Adjustment) {.
    importc: "gtk_spin_button_set_adjustment", libgtk.}
proc get_adjustment*(spin_button: SpinButton): Adjustment {.
    importc: "gtk_spin_button_get_adjustment", libgtk.}
proc adjustment*(spin_button: SpinButton): Adjustment {.
    importc: "gtk_spin_button_get_adjustment", libgtk.}
proc set_digits*(spin_button: SpinButton; digits: guint) {.
    importc: "gtk_spin_button_set_digits", libgtk.}
proc `digits=`*(spin_button: SpinButton; digits: guint) {.
    importc: "gtk_spin_button_set_digits", libgtk.}
proc get_digits*(spin_button: SpinButton): guint {.
    importc: "gtk_spin_button_get_digits", libgtk.}
proc digits*(spin_button: SpinButton): guint {.
    importc: "gtk_spin_button_get_digits", libgtk.}
proc set_increments*(spin_button: SpinButton; 
                                     step: gdouble; page: gdouble) {.
    importc: "gtk_spin_button_set_increments", libgtk.}
proc `increments=`*(spin_button: SpinButton; 
                                     step: gdouble; page: gdouble) {.
    importc: "gtk_spin_button_set_increments", libgtk.}
proc get_increments*(spin_button: SpinButton; 
                                     step: var gdouble; page: var gdouble) {.
    importc: "gtk_spin_button_get_increments", libgtk.}
proc set_range*(spin_button: SpinButton; min: gdouble; 
                                max: gdouble) {.
    importc: "gtk_spin_button_set_range", libgtk.}
proc `range=`*(spin_button: SpinButton; min: gdouble; 
                                max: gdouble) {.
    importc: "gtk_spin_button_set_range", libgtk.}
proc get_range*(spin_button: SpinButton; 
                                min: var gdouble; max: var gdouble) {.
    importc: "gtk_spin_button_get_range", libgtk.}
proc get_value*(spin_button: SpinButton): gdouble {.
    importc: "gtk_spin_button_get_value", libgtk.}
proc value*(spin_button: SpinButton): gdouble {.
    importc: "gtk_spin_button_get_value", libgtk.}
proc get_value_as_int*(spin_button: SpinButton): gint {.
    importc: "gtk_spin_button_get_value_as_int", libgtk.}
proc value_as_int*(spin_button: SpinButton): gint {.
    importc: "gtk_spin_button_get_value_as_int", libgtk.}
proc set_value*(spin_button: SpinButton; value: gdouble) {.
    importc: "gtk_spin_button_set_value", libgtk.}
proc `value=`*(spin_button: SpinButton; value: gdouble) {.
    importc: "gtk_spin_button_set_value", libgtk.}
proc set_update_policy*(spin_button: SpinButton; 
    policy: SpinButtonUpdatePolicy) {.
    importc: "gtk_spin_button_set_update_policy", libgtk.}
proc `update_policy=`*(spin_button: SpinButton; 
    policy: SpinButtonUpdatePolicy) {.
    importc: "gtk_spin_button_set_update_policy", libgtk.}
proc get_update_policy*(spin_button: SpinButton): SpinButtonUpdatePolicy {.
    importc: "gtk_spin_button_get_update_policy", libgtk.}
proc update_policy*(spin_button: SpinButton): SpinButtonUpdatePolicy {.
    importc: "gtk_spin_button_get_update_policy", libgtk.}
proc set_numeric*(spin_button: SpinButton; 
                                  numeric: gboolean) {.
    importc: "gtk_spin_button_set_numeric", libgtk.}
proc `numeric=`*(spin_button: SpinButton; 
                                  numeric: gboolean) {.
    importc: "gtk_spin_button_set_numeric", libgtk.}
proc get_numeric*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_numeric", libgtk.}
proc numeric*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_numeric", libgtk.}
proc spin*(spin_button: SpinButton; 
                           direction: SpinType; increment: gdouble) {.
    importc: "gtk_spin_button_spin", libgtk.}
proc set_wrap*(spin_button: SpinButton; wrap: gboolean) {.
    importc: "gtk_spin_button_set_wrap", libgtk.}
proc `wrap=`*(spin_button: SpinButton; wrap: gboolean) {.
    importc: "gtk_spin_button_set_wrap", libgtk.}
proc get_wrap*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_wrap", libgtk.}
proc wrap*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_wrap", libgtk.}
proc set_snap_to_ticks*(spin_button: SpinButton; 
    snap_to_ticks: gboolean) {.importc: "gtk_spin_button_set_snap_to_ticks", 
                               libgtk.}
proc `snap_to_ticks=`*(spin_button: SpinButton; 
    snap_to_ticks: gboolean) {.importc: "gtk_spin_button_set_snap_to_ticks", 
                               libgtk.}
proc get_snap_to_ticks*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_snap_to_ticks", libgtk.}
proc snap_to_ticks*(spin_button: SpinButton): gboolean {.
    importc: "gtk_spin_button_get_snap_to_ticks", libgtk.}
proc update*(spin_button: SpinButton) {.
    importc: "gtk_spin_button_update", libgtk.}

template gtk_spinner*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, spinner_get_type(), SpinnerObj))

template gtk_spinner_class*(obj: expr): expr = 
  (g_type_check_class_cast(obj, spinner_get_type(), SpinnerClassObj))

template gtk_is_spinner*(obj: expr): expr = 
  (g_type_check_instance_type(obj, spinner_get_type()))

template gtk_is_spinner_class*(obj: expr): expr = 
  (g_type_check_class_type(obj, spinner_get_type()))

template gtk_spinner_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, spinner_get_type(), SpinnerClassObj))

type 
  SpinnerPrivateObj = object 
  
type 
  Spinner* =  ptr SpinnerObj
  SpinnerPtr* = ptr SpinnerObj
  SpinnerObj*{.final.} = object of WidgetObj
    priv113: ptr SpinnerPrivateObj

type 
  SpinnerClass* =  ptr SpinnerClassObj
  SpinnerClassPtr* = ptr SpinnerClassObj
  SpinnerClassObj*{.final.} = object of WidgetClassObj
    gtk_reserved1151: proc () {.cdecl.}
    gtk_reserved1152: proc () {.cdecl.}
    gtk_reserved1153: proc () {.cdecl.}
    gtk_reserved1154: proc () {.cdecl.}

proc spinner_get_type*(): GType {.importc: "gtk_spinner_get_type", 
                                      libgtk.}
proc spinner_new*(): Spinner {.importc: "gtk_spinner_new", 
    libgtk.}
proc start*(spinner: Spinner) {.
    importc: "gtk_spinner_start", libgtk.}
proc stop*(spinner: Spinner) {.importc: "gtk_spinner_stop", 
    libgtk.}

template gtk_stack_switcher*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, stack_switcher_get_type(), StackSwitcherObj))

template gtk_stack_switcher_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, stack_switcher_get_type(), 
                           StackSwitcherClassObj))

template gtk_is_stack_switcher*(obj: expr): expr = 
  (g_type_check_instance_type(obj, stack_switcher_get_type()))

template gtk_is_stack_switcher_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, stack_switcher_get_type()))

template gtk_stack_switcher_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, stack_switcher_get_type(), 
                             StackSwitcherClassObj))

type 
  StackSwitcher* =  ptr StackSwitcherObj
  StackSwitcherPtr* = ptr StackSwitcherObj
  StackSwitcherObj*{.final.} = object of BoxObj

type 
  StackSwitcherClass* =  ptr StackSwitcherClassObj
  StackSwitcherClassPtr* = ptr StackSwitcherClassObj
  StackSwitcherClassObj*{.final.} = object of BoxClassObj
    gtk_reserved1161: proc () {.cdecl.}
    gtk_reserved1162: proc () {.cdecl.}
    gtk_reserved1163: proc () {.cdecl.}
    gtk_reserved1164: proc () {.cdecl.}

proc stack_switcher_get_type*(): GType {.
    importc: "gtk_stack_switcher_get_type", libgtk.}
proc stack_switcher_new*(): StackSwitcher {.
    importc: "gtk_stack_switcher_new", libgtk.}
proc set_stack*(switcher: StackSwitcher; 
                                   stack: Stack) {.
    importc: "gtk_stack_switcher_set_stack", libgtk.}
proc `stack=`*(switcher: StackSwitcher; 
                                   stack: Stack) {.
    importc: "gtk_stack_switcher_set_stack", libgtk.}
proc get_stack*(switcher: StackSwitcher): Stack {.
    importc: "gtk_stack_switcher_get_stack", libgtk.}
proc stack*(switcher: StackSwitcher): Stack {.
    importc: "gtk_stack_switcher_get_stack", libgtk.}

template gtk_statusbar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, statusbar_get_type(), StatusbarObj))

template gtk_statusbar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, statusbar_get_type(), StatusbarClassObj))

template gtk_is_statusbar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, statusbar_get_type()))

template gtk_is_statusbar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, statusbar_get_type()))

template gtk_statusbar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, statusbar_get_type(), StatusbarClassObj))

type 
  StatusbarPrivateObj = object 
  
type 
  Statusbar* =  ptr StatusbarObj
  StatusbarPtr* = ptr StatusbarObj
  StatusbarObj*{.final.} = object of BoxObj
    priv114: ptr StatusbarPrivateObj

type 
  StatusbarClass* =  ptr StatusbarClassObj
  StatusbarClassPtr* = ptr StatusbarClassObj
  StatusbarClassObj*{.final.} = object of BoxClassObj
    reserved: gpointer
    text_pushed*: proc (statusbar: Statusbar; context_id: guint; 
                        text: cstring) {.cdecl.}
    text_popped*: proc (statusbar: Statusbar; context_id: guint; 
                        text: cstring) {.cdecl.}
    gtk_reserved1171: proc () {.cdecl.}
    gtk_reserved1172: proc () {.cdecl.}
    gtk_reserved1173: proc () {.cdecl.}
    gtk_reserved1174: proc () {.cdecl.}

proc statusbar_get_type*(): GType {.importc: "gtk_statusbar_get_type", 
    libgtk.}
proc statusbar_new*(): Statusbar {.importc: "gtk_statusbar_new", 
    libgtk.}
proc get_context_id*(statusbar: Statusbar; 
                                   context_description: cstring): guint {.
    importc: "gtk_statusbar_get_context_id", libgtk.}
proc context_id*(statusbar: Statusbar; 
                                   context_description: cstring): guint {.
    importc: "gtk_statusbar_get_context_id", libgtk.}
proc push*(statusbar: Statusbar; context_id: guint; 
                         text: cstring): guint {.
    importc: "gtk_statusbar_push", libgtk.}
proc pop*(statusbar: Statusbar; context_id: guint) {.
    importc: "gtk_statusbar_pop", libgtk.}
proc remove*(statusbar: Statusbar; context_id: guint; 
                           message_id: guint) {.
    importc: "gtk_statusbar_remove", libgtk.}
proc remove_all*(statusbar: Statusbar; context_id: guint) {.
    importc: "gtk_statusbar_remove_all", libgtk.}
proc get_message_area*(statusbar: Statusbar): Widget {.
    importc: "gtk_statusbar_get_message_area", libgtk.}
proc message_area*(statusbar: Statusbar): Widget {.
    importc: "gtk_statusbar_get_message_area", libgtk.}

template gtk_switch*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, switch_get_type(), SwitchObj))

template gtk_is_switch*(obj: expr): expr = 
  (g_type_check_instance_type(obj, switch_get_type()))

template gtk_switch_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, switch_get_type(), SwitchClassObj))

template gtk_is_switch_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, switch_get_type()))

template gtk_switch_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, switch_get_type(), SwitchClassObj))

type 
  SwitchPrivateObj = object 
  
type 
  Switch* =  ptr SwitchObj
  SwitchPtr* = ptr SwitchObj
  SwitchObj*{.final.} = object of WidgetObj
    priv115: ptr SwitchPrivateObj

type 
  SwitchClass* =  ptr SwitchClassObj
  SwitchClassPtr* = ptr SwitchClassObj
  SwitchClassObj*{.final.} = object of WidgetClassObj
    activate*: proc (sw: Switch) {.cdecl.}
    state_set*: proc (sw: Switch; state: gboolean): gboolean {.cdecl.}
    switch_padding_1: proc () {.cdecl.}
    switch_padding_2: proc () {.cdecl.}
    switch_padding_3: proc () {.cdecl.}
    switch_padding_4: proc () {.cdecl.}
    switch_padding_5: proc () {.cdecl.}

proc switch_get_type*(): GType {.importc: "gtk_switch_get_type", 
                                     libgtk.}
proc switch_new*(): Switch {.importc: "gtk_switch_new", libgtk.}
proc set_active*(sw: Switch; is_active: gboolean) {.
    importc: "gtk_switch_set_active", libgtk.}
proc `active=`*(sw: Switch; is_active: gboolean) {.
    importc: "gtk_switch_set_active", libgtk.}
proc get_active*(sw: Switch): gboolean {.
    importc: "gtk_switch_get_active", libgtk.}
proc active*(sw: Switch): gboolean {.
    importc: "gtk_switch_get_active", libgtk.}
proc set_state*(sw: Switch; state: gboolean) {.
    importc: "gtk_switch_set_state", libgtk.}
proc `state=`*(sw: Switch; state: gboolean) {.
    importc: "gtk_switch_set_state", libgtk.}
proc get_state*(sw: Switch): gboolean {.
    importc: "gtk_switch_get_state", libgtk.}
proc state*(sw: Switch): gboolean {.
    importc: "gtk_switch_get_state", libgtk.}

type 
  TextTagTableForeach* = proc (tag: TextTag; data: gpointer) {.cdecl.}
template gtk_text_tag_table*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_tag_table_get_type(), TextTagTableObj))

template gtk_text_tag_table_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_tag_table_get_type(), 
                           TextTagTableClassObj))

template gtk_is_text_tag_table*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_tag_table_get_type()))

template gtk_is_text_tag_table_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_tag_table_get_type()))

template gtk_text_tag_table_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_tag_table_get_type(), 
                             TextTagTableClassObj))

type 
  TextTagTablePrivateObj = object 
  
type 
  TextTagTable* =  ptr TextTagTableObj
  TextTagTablePtr* = ptr TextTagTableObj
  TextTagTableObj*{.final.} = object of GObjectObj
    priv116: ptr TextTagTablePrivateObj

type 
  TextTagTableClass* =  ptr TextTagTableClassObj
  TextTagTableClassPtr* = ptr TextTagTableClassObj
  TextTagTableClassObj*{.final.} = object of GObjectClassObj
    tag_changed*: proc (table: TextTagTable; tag: TextTag; 
                        size_changed: gboolean) {.cdecl.}
    tag_added*: proc (table: TextTagTable; tag: TextTag) {.cdecl.}
    tag_removed*: proc (table: TextTagTable; tag: TextTag) {.cdecl.}
    gtk_reserved1181: proc () {.cdecl.}
    gtk_reserved1182: proc () {.cdecl.}
    gtk_reserved1183: proc () {.cdecl.}
    gtk_reserved1184: proc () {.cdecl.}

proc text_tag_table_get_type*(): GType {.
    importc: "gtk_text_tag_table_get_type", libgtk.}
proc text_tag_table_new*(): TextTagTable {.
    importc: "gtk_text_tag_table_new", libgtk.}
proc add*(table: TextTagTable; tag: TextTag): gboolean {.
    importc: "gtk_text_tag_table_add", libgtk.}
proc remove*(table: TextTagTable; 
                                tag: TextTag) {.
    importc: "gtk_text_tag_table_remove", libgtk.}
proc lookup*(table: TextTagTable; name: cstring): TextTag {.
    importc: "gtk_text_tag_table_lookup", libgtk.}
proc foreach*(table: TextTagTable; 
                                 `func`: TextTagTableForeach; data: gpointer) {.
    importc: "gtk_text_tag_table_foreach", libgtk.}
proc get_size*(table: TextTagTable): gint {.
    importc: "gtk_text_tag_table_get_size", libgtk.}
proc size*(table: TextTagTable): gint {.
    importc: "gtk_text_tag_table_get_size", libgtk.}

template gtk_text_mark*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_mark_get_type(), TextMarkObj))

template gtk_text_mark_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_mark_get_type(), TextMarkClassObj))

template gtk_is_text_mark*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_mark_get_type()))

template gtk_is_text_mark_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_mark_get_type()))

template gtk_text_mark_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_mark_get_type(), TextMarkClassObj))

type 
  TextMark* =  ptr TextMarkObj
  TextMarkPtr* = ptr TextMarkObj
  TextMarkObj* = object of GObjectObj
    segment*: gpointer

type 
  TextMarkClass* =  ptr TextMarkClassObj
  TextMarkClassPtr* = ptr TextMarkClassObj
  TextMarkClassObj* = object of GObjectClassObj
    gtk_reserved1191: proc () {.cdecl.}
    gtk_reserved1192: proc () {.cdecl.}
    gtk_reserved1193: proc () {.cdecl.}
    gtk_reserved1194: proc () {.cdecl.}

proc text_mark_get_type*(): GType {.importc: "gtk_text_mark_get_type", 
    libgtk.}
proc text_mark_new*(name: cstring; left_gravity: gboolean): TextMark {.
    importc: "gtk_text_mark_new", libgtk.}
proc set_visible*(mark: TextMark; setting: gboolean) {.
    importc: "gtk_text_mark_set_visible", libgtk.}
proc `visible=`*(mark: TextMark; setting: gboolean) {.
    importc: "gtk_text_mark_set_visible", libgtk.}
proc get_visible*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_visible", libgtk.}
proc visible*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_visible", libgtk.}
proc get_name*(mark: TextMark): cstring {.
    importc: "gtk_text_mark_get_name", libgtk.}
proc name*(mark: TextMark): cstring {.
    importc: "gtk_text_mark_get_name", libgtk.}
proc get_deleted*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_deleted", libgtk.}
proc deleted*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_deleted", libgtk.}
proc get_buffer*(mark: TextMark): TextBuffer {.
    importc: "gtk_text_mark_get_buffer", libgtk.}
proc buffer*(mark: TextMark): TextBuffer {.
    importc: "gtk_text_mark_get_buffer", libgtk.}
proc get_left_gravity*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_left_gravity", libgtk.}
proc left_gravity*(mark: TextMark): gboolean {.
    importc: "gtk_text_mark_get_left_gravity", libgtk.}

type 
  TextBufferTargetInfo* {.size: sizeof(cint), pure.} = enum 
    TEXT = - 3, 
    RICH_TEXT = - 2, 
    BUFFER_CONTENTS = - 1
  TextBTree* =  ptr TextBTreeObj
  TextBTreePtr* = ptr TextBTreeObj
  TextBTreeObj* = object 
  
template gtk_text_buffer*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_buffer_get_type(), TextBufferObj))

template gtk_text_buffer_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_buffer_get_type(), TextBufferClassObj))

template gtk_is_text_buffer*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_buffer_get_type()))

template gtk_is_text_buffer_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_buffer_get_type()))

template gtk_text_buffer_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_buffer_get_type(), TextBufferClassObj))

type 
  TextBufferClass* =  ptr TextBufferClassObj
  TextBufferClassPtr* = ptr TextBufferClassObj
  TextBufferClassObj* = object of GObjectClassObj
    insert_text*: proc (buffer: TextBuffer; pos: TextIter; 
                        new_text: cstring; new_text_length: gint) {.cdecl.}
    insert_pixbuf*: proc (buffer: TextBuffer; iter: TextIter; 
                          pixbuf: gdk_pixbuf.GdkPixbuf) {.cdecl.}
    insert_child_anchor*: proc (buffer: TextBuffer; 
                                iter: TextIter; 
                                anchor: TextChildAnchor) {.cdecl.}
    delete_range*: proc (buffer: TextBuffer; start: TextIter; 
                         `end`: TextIter) {.cdecl.}
    changed*: proc (buffer: TextBuffer) {.cdecl.}
    modified_changed*: proc (buffer: TextBuffer) {.cdecl.}
    mark_set*: proc (buffer: TextBuffer; location: TextIter; 
                     mark: TextMark) {.cdecl.}
    mark_deleted*: proc (buffer: TextBuffer; mark: TextMark) {.cdecl.}
    apply_tag*: proc (buffer: TextBuffer; tag: TextTag; 
                      start: TextIter; `end`: TextIter) {.cdecl.}
    remove_tag*: proc (buffer: TextBuffer; tag: TextTag; 
                       start: TextIter; `end`: TextIter) {.cdecl.}
    begin_user_action*: proc (buffer: TextBuffer) {.cdecl.}
    end_user_action*: proc (buffer: TextBuffer) {.cdecl.}
    paste_done*: proc (buffer: TextBuffer; clipboard: Clipboard) {.cdecl.}
    gtk_reserved1201: proc () {.cdecl.}
    gtk_reserved1202: proc () {.cdecl.}
    gtk_reserved1203: proc () {.cdecl.}
    gtk_reserved1204: proc () {.cdecl.}

proc text_buffer_get_type*(): GType {.importc: "gtk_text_buffer_get_type", 
    libgtk.}
proc text_buffer_new*(table: TextTagTable): TextBuffer {.
    importc: "gtk_text_buffer_new", libgtk.}
proc get_line_count*(buffer: TextBuffer): gint {.
    importc: "gtk_text_buffer_get_line_count", libgtk.}
proc line_count*(buffer: TextBuffer): gint {.
    importc: "gtk_text_buffer_get_line_count", libgtk.}
proc get_char_count*(buffer: TextBuffer): gint {.
    importc: "gtk_text_buffer_get_char_count", libgtk.}
proc char_count*(buffer: TextBuffer): gint {.
    importc: "gtk_text_buffer_get_char_count", libgtk.}
proc get_tag_table*(buffer: TextBuffer): TextTagTable {.
    importc: "gtk_text_buffer_get_tag_table", libgtk.}
proc tag_table*(buffer: TextBuffer): TextTagTable {.
    importc: "gtk_text_buffer_get_tag_table", libgtk.}
proc set_text*(buffer: TextBuffer; text: cstring; 
                               len: gint) {.
    importc: "gtk_text_buffer_set_text", libgtk.}
proc `text=`*(buffer: TextBuffer; text: cstring; 
                               len: gint) {.
    importc: "gtk_text_buffer_set_text", libgtk.}
proc insert*(buffer: TextBuffer; iter: TextIter; 
                             text: cstring; len: gint) {.
    importc: "gtk_text_buffer_insert", libgtk.}
proc insert_at_cursor*(buffer: TextBuffer; 
    text: cstring; len: gint) {.importc: "gtk_text_buffer_insert_at_cursor", 
                                  libgtk.}
proc insert_interactive*(buffer: TextBuffer; 
    iter: TextIter; text: cstring; len: gint; 
    default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_insert_interactive", libgtk.}
proc insert_interactive_at_cursor*(buffer: TextBuffer; 
    text: cstring; len: gint; default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_insert_interactive_at_cursor", libgtk.}
proc insert_range*(buffer: TextBuffer; 
                                   iter: TextIter; 
                                   start: TextIter; 
                                   `end`: TextIter) {.
    importc: "gtk_text_buffer_insert_range", libgtk.}
proc insert_range_interactive*(buffer: TextBuffer; 
    iter: TextIter; start: TextIter; `end`: TextIter; 
    default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_insert_range_interactive", libgtk.}
proc insert_with_tags*(buffer: TextBuffer; 
    iter: TextIter; text: cstring; len: gint; 
    first_tag: TextTag) {.varargs, 
                                 importc: "gtk_text_buffer_insert_with_tags", 
                                 libgtk.}
proc insert_with_tags_by_name*(buffer: TextBuffer; 
    iter: TextIter; text: cstring; len: gint; 
    first_tag_name: cstring) {.varargs, importc: "gtk_text_buffer_insert_with_tags_by_name", 
                                 libgtk.}
proc insert_markup*(buffer: TextBuffer; 
                                    iter: TextIter; markup: cstring; 
                                    len: gint) {.
    importc: "gtk_text_buffer_insert_markup", libgtk.}
proc delete*(buffer: TextBuffer; 
                             start: TextIter; `end`: TextIter) {.
    importc: "gtk_text_buffer_delete", libgtk.}
proc delete_interactive*(buffer: TextBuffer; 
    start_iter: TextIter; end_iter: TextIter; 
    default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_delete_interactive", libgtk.}
proc backspace*(buffer: TextBuffer; 
                                iter: TextIter; interactive: gboolean; 
                                default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_backspace", libgtk.}
proc get_text*(buffer: TextBuffer; 
                               start: TextIter; `end`: TextIter; 
                               include_hidden_chars: gboolean): cstring {.
    importc: "gtk_text_buffer_get_text", libgtk.}
proc text*(buffer: TextBuffer; 
                               start: TextIter; `end`: TextIter; 
                               include_hidden_chars: gboolean): cstring {.
    importc: "gtk_text_buffer_get_text", libgtk.}
proc get_slice*(buffer: TextBuffer; 
                                start: TextIter; `end`: TextIter; 
                                include_hidden_chars: gboolean): cstring {.
    importc: "gtk_text_buffer_get_slice", libgtk.}
proc slice*(buffer: TextBuffer; 
                                start: TextIter; `end`: TextIter; 
                                include_hidden_chars: gboolean): cstring {.
    importc: "gtk_text_buffer_get_slice", libgtk.}
proc insert_pixbuf*(buffer: TextBuffer; 
                                    iter: TextIter; 
                                    pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_text_buffer_insert_pixbuf", libgtk.}
proc insert_child_anchor*(buffer: TextBuffer; 
    iter: TextIter; anchor: TextChildAnchor) {.
    importc: "gtk_text_buffer_insert_child_anchor", libgtk.}
proc create_child_anchor*(buffer: TextBuffer; 
    iter: TextIter): TextChildAnchor {.
    importc: "gtk_text_buffer_create_child_anchor", libgtk.}
proc add_mark*(buffer: TextBuffer; 
                               mark: TextMark; where: TextIter) {.
    importc: "gtk_text_buffer_add_mark", libgtk.}
proc create_mark*(buffer: TextBuffer; 
                                  mark_name: cstring; 
                                  where: TextIter; 
                                  left_gravity: gboolean): TextMark {.
    importc: "gtk_text_buffer_create_mark", libgtk.}
proc move_mark*(buffer: TextBuffer; 
                                mark: TextMark; where: TextIter) {.
    importc: "gtk_text_buffer_move_mark", libgtk.}
proc delete_mark*(buffer: TextBuffer; 
                                  mark: TextMark) {.
    importc: "gtk_text_buffer_delete_mark", libgtk.}
proc get_mark*(buffer: TextBuffer; name: cstring): TextMark {.
    importc: "gtk_text_buffer_get_mark", libgtk.}
proc mark*(buffer: TextBuffer; name: cstring): TextMark {.
    importc: "gtk_text_buffer_get_mark", libgtk.}
proc move_mark_by_name*(buffer: TextBuffer; 
    name: cstring; where: TextIter) {.
    importc: "gtk_text_buffer_move_mark_by_name", libgtk.}
proc delete_mark_by_name*(buffer: TextBuffer; 
    name: cstring) {.importc: "gtk_text_buffer_delete_mark_by_name", 
                       libgtk.}
proc get_insert*(buffer: TextBuffer): TextMark {.
    importc: "gtk_text_buffer_get_insert", libgtk.}
proc insert*(buffer: TextBuffer): TextMark {.
    importc: "gtk_text_buffer_get_insert", libgtk.}
proc get_selection_bound*(buffer: TextBuffer): TextMark {.
    importc: "gtk_text_buffer_get_selection_bound", libgtk.}
proc selection_bound*(buffer: TextBuffer): TextMark {.
    importc: "gtk_text_buffer_get_selection_bound", libgtk.}
proc place_cursor*(buffer: TextBuffer; 
                                   where: TextIter) {.
    importc: "gtk_text_buffer_place_cursor", libgtk.}
proc select_range*(buffer: TextBuffer; 
                                   ins: TextIter; 
                                   bound: TextIter) {.
    importc: "gtk_text_buffer_select_range", libgtk.}
proc apply_tag*(buffer: TextBuffer; 
                                tag: TextTag; start: TextIter; 
                                `end`: TextIter) {.
    importc: "gtk_text_buffer_apply_tag", libgtk.}
proc remove_tag*(buffer: TextBuffer; 
                                 tag: TextTag; start: TextIter; 
                                 `end`: TextIter) {.
    importc: "gtk_text_buffer_remove_tag", libgtk.}
proc apply_tag_by_name*(buffer: TextBuffer; 
    name: cstring; start: TextIter; `end`: TextIter) {.
    importc: "gtk_text_buffer_apply_tag_by_name", libgtk.}
proc remove_tag_by_name*(buffer: TextBuffer; 
    name: cstring; start: TextIter; `end`: TextIter) {.
    importc: "gtk_text_buffer_remove_tag_by_name", libgtk.}
proc remove_all_tags*(buffer: TextBuffer; 
                                      start: TextIter; 
                                      `end`: TextIter) {.
    importc: "gtk_text_buffer_remove_all_tags", libgtk.}
proc create_tag*(buffer: TextBuffer; 
                                 tag_name: cstring; 
                                 first_property_name: cstring): TextTag {.
    varargs, importc: "gtk_text_buffer_create_tag", libgtk.}
proc get_iter_at_line_offset*(buffer: TextBuffer; 
    iter: var TextIterObj; line_number: gint; char_offset: gint) {.
    importc: "gtk_text_buffer_get_iter_at_line_offset", libgtk.}
proc get_iter_at_line_index*(buffer: TextBuffer; 
    iter: var TextIterObj; line_number: gint; byte_index: gint) {.
    importc: "gtk_text_buffer_get_iter_at_line_index", libgtk.}
proc get_iter_at_offset*(buffer: TextBuffer; 
    iter: var TextIterObj; char_offset: gint) {.
    importc: "gtk_text_buffer_get_iter_at_offset", libgtk.}
proc get_iter_at_line*(buffer: TextBuffer; 
    iter: var TextIterObj; line_number: gint) {.
    importc: "gtk_text_buffer_get_iter_at_line", libgtk.}
proc get_start_iter*(buffer: TextBuffer; 
                                     iter: var TextIterObj) {.
    importc: "gtk_text_buffer_get_start_iter", libgtk.}
proc get_end_iter*(buffer: TextBuffer; 
                                   iter: var TextIterObj) {.
    importc: "gtk_text_buffer_get_end_iter", libgtk.}
proc get_bounds*(buffer: TextBuffer; 
                                 start: var TextIterObj; `end`: var TextIterObj) {.
    importc: "gtk_text_buffer_get_bounds", libgtk.}
proc get_iter_at_mark*(buffer: TextBuffer; 
    iter: var TextIterObj; mark: TextMark) {.
    importc: "gtk_text_buffer_get_iter_at_mark", libgtk.}
proc get_iter_at_child_anchor*(buffer: TextBuffer; 
    iter: var TextIterObj; anchor: TextChildAnchor) {.
    importc: "gtk_text_buffer_get_iter_at_child_anchor", libgtk.}
proc get_modified*(buffer: TextBuffer): gboolean {.
    importc: "gtk_text_buffer_get_modified", libgtk.}
proc modified*(buffer: TextBuffer): gboolean {.
    importc: "gtk_text_buffer_get_modified", libgtk.}
proc set_modified*(buffer: TextBuffer; 
                                   setting: gboolean) {.
    importc: "gtk_text_buffer_set_modified", libgtk.}
proc `modified=`*(buffer: TextBuffer; 
                                   setting: gboolean) {.
    importc: "gtk_text_buffer_set_modified", libgtk.}
proc get_has_selection*(buffer: TextBuffer): gboolean {.
    importc: "gtk_text_buffer_get_has_selection", libgtk.}
proc has_selection*(buffer: TextBuffer): gboolean {.
    importc: "gtk_text_buffer_get_has_selection", libgtk.}
proc add_selection_clipboard*(buffer: TextBuffer; 
    clipboard: Clipboard) {.importc: "gtk_text_buffer_add_selection_clipboard", 
                                   libgtk.}
proc remove_selection_clipboard*(buffer: TextBuffer; 
    clipboard: Clipboard) {.importc: "gtk_text_buffer_remove_selection_clipboard", 
                                   libgtk.}
proc cut_clipboard*(buffer: TextBuffer; 
                                    clipboard: Clipboard; 
                                    default_editable: gboolean) {.
    importc: "gtk_text_buffer_cut_clipboard", libgtk.}
proc copy_clipboard*(buffer: TextBuffer; 
                                     clipboard: Clipboard) {.
    importc: "gtk_text_buffer_copy_clipboard", libgtk.}
proc paste_clipboard*(buffer: TextBuffer; 
                                      clipboard: Clipboard; 
                                      override_location: TextIter; 
                                      default_editable: gboolean) {.
    importc: "gtk_text_buffer_paste_clipboard", libgtk.}
proc get_selection_bounds*(buffer: TextBuffer; 
    start: TextIter; `end`: TextIter): gboolean {.
    importc: "gtk_text_buffer_get_selection_bounds", libgtk.}
proc selection_bounds*(buffer: TextBuffer; 
    start: TextIter; `end`: TextIter): gboolean {.
    importc: "gtk_text_buffer_get_selection_bounds", libgtk.}
proc delete_selection*(buffer: TextBuffer; 
    interactive: gboolean; default_editable: gboolean): gboolean {.
    importc: "gtk_text_buffer_delete_selection", libgtk.}
proc begin_user_action*(buffer: TextBuffer) {.
    importc: "gtk_text_buffer_begin_user_action", libgtk.}
proc end_user_action*(buffer: TextBuffer) {.
    importc: "gtk_text_buffer_end_user_action", libgtk.}
proc get_copy_target_list*(buffer: TextBuffer): TargetList {.
    importc: "gtk_text_buffer_get_copy_target_list", libgtk.}
proc copy_target_list*(buffer: TextBuffer): TargetList {.
    importc: "gtk_text_buffer_get_copy_target_list", libgtk.}
proc get_paste_target_list*(buffer: TextBuffer): TargetList {.
    importc: "gtk_text_buffer_get_paste_target_list", libgtk.}
proc paste_target_list*(buffer: TextBuffer): TargetList {.
    importc: "gtk_text_buffer_get_paste_target_list", libgtk.}

type 
  TextBufferSerializeFunc* = proc (register_buffer: TextBuffer; 
                                      content_buffer: TextBuffer; 
                                      start: TextIter; 
                                      `end`: TextIter; length: ptr gsize; 
                                      user_data: gpointer): ptr guint8 {.cdecl.}
type 
  TextBufferDeserializeFunc* = proc (register_buffer: TextBuffer; 
      content_buffer: TextBuffer; iter: TextIter; 
      data: var guint8; length: gsize; create_tags: gboolean; 
      user_data: gpointer; error: var glib.GError): gboolean {.cdecl.}
proc register_serialize_format*(buffer: TextBuffer; 
    mime_type: cstring; function: TextBufferSerializeFunc; 
    user_data: gpointer; user_data_destroy: GDestroyNotify): gdk3.Atom {.
    importc: "gtk_text_buffer_register_serialize_format", libgtk.}
proc register_serialize_tagset*(buffer: TextBuffer; 
    tagset_name: cstring): gdk3.Atom {.
    importc: "gtk_text_buffer_register_serialize_tagset", libgtk.}
proc register_deserialize_format*(buffer: TextBuffer; 
    mime_type: cstring; function: TextBufferDeserializeFunc; 
    user_data: gpointer; user_data_destroy: GDestroyNotify): gdk3.Atom {.
    importc: "gtk_text_buffer_register_deserialize_format", libgtk.}
proc register_deserialize_tagset*(buffer: TextBuffer; 
    tagset_name: cstring): gdk3.Atom {.
    importc: "gtk_text_buffer_register_deserialize_tagset", libgtk.}
proc unregister_serialize_format*(buffer: TextBuffer; 
    format: gdk3.Atom) {.importc: "gtk_text_buffer_unregister_serialize_format", 
                       libgtk.}
proc unregister_deserialize_format*(buffer: TextBuffer; 
    format: gdk3.Atom) {.importc: "gtk_text_buffer_unregister_deserialize_format", 
                       libgtk.}
proc deserialize_set_can_create_tags*(
    buffer: TextBuffer; format: gdk3.Atom; can_create_tags: gboolean) {.
    importc: "gtk_text_buffer_deserialize_set_can_create_tags", libgtk.}
proc deserialize_get_can_create_tags*(
    buffer: TextBuffer; format: gdk3.Atom): gboolean {.
    importc: "gtk_text_buffer_deserialize_get_can_create_tags", libgtk.}
proc get_serialize_formats*(buffer: TextBuffer; 
    n_formats: var gint): ptr gdk3.Atom {.
    importc: "gtk_text_buffer_get_serialize_formats", libgtk.}
proc serialize_formats*(buffer: TextBuffer; 
    n_formats: var gint): ptr gdk3.Atom {.
    importc: "gtk_text_buffer_get_serialize_formats", libgtk.}
proc get_deserialize_formats*(buffer: TextBuffer; 
    n_formats: var gint): ptr gdk3.Atom {.
    importc: "gtk_text_buffer_get_deserialize_formats", libgtk.}
proc deserialize_formats*(buffer: TextBuffer; 
    n_formats: var gint): ptr gdk3.Atom {.
    importc: "gtk_text_buffer_get_deserialize_formats", libgtk.}
proc serialize*(register_buffer: TextBuffer; 
                                content_buffer: TextBuffer; 
                                format: gdk3.Atom; start: TextIter; 
                                `end`: TextIter; length: ptr gsize): ptr guint8 {.
    importc: "gtk_text_buffer_serialize", libgtk.}
proc deserialize*(register_buffer: TextBuffer; 
                                  content_buffer: TextBuffer; 
                                  format: gdk3.Atom; iter: TextIter; 
                                  data: var guint8; length: gsize; 
                                  error: var glib.GError): gboolean {.
    importc: "gtk_text_buffer_deserialize", libgtk.}

template gtk_text_view*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_view_get_type(), TextViewObj))

template gtk_text_view_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_view_get_type(), TextViewClassObj))

template gtk_is_text_view*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_view_get_type()))

template gtk_is_text_view_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_view_get_type()))

template gtk_text_view_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_view_get_type(), TextViewClassObj))

type 
  TextWindowType* {.size: sizeof(cint), pure.} = enum 
    PRIVATE, WIDGET, TEXT, 
    LEFT, RIGHT, TOP, 
    BOTTOM
type 
  TextViewLayer* {.size: sizeof(cint), pure.} = enum 
    BELOW, ABOVE
type 
  TextExtendSelection* {.size: sizeof(cint), pure.} = enum 
    WORD, LINE
const 
  TEXT_VIEW_PRIORITY_VALIDATE* = (gdk3.PRIORITY_REDRAW + 5)
type 
  TextViewPrivateObj = object 
  
type 
  TextView* =  ptr TextViewObj
  TextViewPtr* = ptr TextViewObj
  TextViewObj* = object of ContainerObj
    priv118: ptr TextViewPrivateObj

type 
  TextViewClass* =  ptr TextViewClassObj
  TextViewClassPtr* = ptr TextViewClassObj
  TextViewClassObj* = object of ContainerClassObj
    populate_popup*: proc (text_view: TextView; popup: Widget) {.cdecl.}
    move_cursor*: proc (text_view: TextView; step: MovementStep; 
                        count: gint; extend_selection: gboolean) {.cdecl.}
    set_anchor*: proc (text_view: TextView) {.cdecl.}
    insert_at_cursor*: proc (text_view: TextView; str: cstring) {.cdecl.}
    delete_from_cursor*: proc (text_view: TextView; 
                               `type`: DeleteType; count: gint) {.cdecl.}
    backspace*: proc (text_view: TextView) {.cdecl.}
    cut_clipboard*: proc (text_view: TextView) {.cdecl.}
    copy_clipboard*: proc (text_view: TextView) {.cdecl.}
    paste_clipboard*: proc (text_view: TextView) {.cdecl.}
    toggle_overwrite*: proc (text_view: TextView) {.cdecl.}
    create_buffer*: proc (text_view: TextView): TextBuffer {.cdecl.}
    draw_layer*: proc (text_view: TextView; layer: TextViewLayer; 
                       cr: cairo.Context) {.cdecl.}
    extend_selection*: proc (text_view: TextView; 
                             granularity: TextExtendSelection; 
                             location: TextIter; 
                             start: TextIter; `end`: TextIter): gboolean {.cdecl.}
    gtk_reserved1211: proc () {.cdecl.}
    gtk_reserved1212: proc () {.cdecl.}
    gtk_reserved1213: proc () {.cdecl.}
    gtk_reserved1214: proc () {.cdecl.}
    gtk_reserved1215: proc () {.cdecl.}

proc text_view_get_type*(): GType {.importc: "gtk_text_view_get_type", 
    libgtk.}
proc text_view_new*(): TextView {.importc: "gtk_text_view_new", 
    libgtk.}
proc text_view_new_with_buffer*(buffer: TextBuffer): TextView {.
    importc: "gtk_text_view_new_with_buffer", libgtk.}
proc set_buffer*(text_view: TextView; 
                               buffer: TextBuffer) {.
    importc: "gtk_text_view_set_buffer", libgtk.}
proc `buffer=`*(text_view: TextView; 
                               buffer: TextBuffer) {.
    importc: "gtk_text_view_set_buffer", libgtk.}
proc get_buffer*(text_view: TextView): TextBuffer {.
    importc: "gtk_text_view_get_buffer", libgtk.}
proc buffer*(text_view: TextView): TextBuffer {.
    importc: "gtk_text_view_get_buffer", libgtk.}
proc scroll_to_iter*(text_view: TextView; 
                                   iter: TextIter; 
                                   within_margin: gdouble; 
                                   use_align: gboolean; xalign: gdouble; 
                                   yalign: gdouble): gboolean {.
    importc: "gtk_text_view_scroll_to_iter", libgtk.}
proc scroll_to_mark*(text_view: TextView; 
                                   mark: TextMark; 
                                   within_margin: gdouble; 
                                   use_align: gboolean; xalign: gdouble; 
                                   yalign: gdouble) {.
    importc: "gtk_text_view_scroll_to_mark", libgtk.}
proc scroll_mark_onscreen*(text_view: TextView; 
    mark: TextMark) {.importc: "gtk_text_view_scroll_mark_onscreen", 
                             libgtk.}
proc move_mark_onscreen*(text_view: TextView; 
    mark: TextMark): gboolean {.
    importc: "gtk_text_view_move_mark_onscreen", libgtk.}
proc place_cursor_onscreen*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_place_cursor_onscreen", libgtk.}
proc get_visible_rect*(text_view: TextView; 
                                     visible_rect: var gdk3.RectangleObj) {.
    importc: "gtk_text_view_get_visible_rect", libgtk.}
proc set_cursor_visible*(text_view: TextView; 
    setting: gboolean) {.importc: "gtk_text_view_set_cursor_visible", 
                         libgtk.}
proc `cursor_visible=`*(text_view: TextView; 
    setting: gboolean) {.importc: "gtk_text_view_set_cursor_visible", 
                         libgtk.}
proc get_cursor_visible*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_cursor_visible", libgtk.}
proc cursor_visible*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_cursor_visible", libgtk.}
proc get_cursor_locations*(text_view: TextView; 
    iter: TextIter; strong: var gdk3.RectangleObj; weak: var gdk3.RectangleObj) {.
    importc: "gtk_text_view_get_cursor_locations", libgtk.}
proc get_iter_location*(text_view: TextView; 
                                      iter: TextIter; 
                                      location: var gdk3.RectangleObj) {.
    importc: "gtk_text_view_get_iter_location", libgtk.}
proc get_iter_at_location*(text_view: TextView; 
    iter: var TextIterObj; x: gint; y: gint) {.
    importc: "gtk_text_view_get_iter_at_location", libgtk.}
proc get_iter_at_position*(text_view: TextView; 
    iter: var TextIterObj; trailing: var gint; x: gint; y: gint) {.
    importc: "gtk_text_view_get_iter_at_position", libgtk.}
proc get_line_yrange*(text_view: TextView; 
                                    iter: TextIter; y: var gint; 
                                    height: var gint) {.
    importc: "gtk_text_view_get_line_yrange", libgtk.}
proc get_line_at_y*(text_view: TextView; 
                                  target_iter: TextIter; y: gint; 
                                  line_top: var gint) {.
    importc: "gtk_text_view_get_line_at_y", libgtk.}
proc buffer_to_window_coords*(text_view: TextView; 
    win: TextWindowType; buffer_x: gint; buffer_y: gint; 
    window_x: var gint; window_y: var gint) {.
    importc: "gtk_text_view_buffer_to_window_coords", libgtk.}
proc window_to_buffer_coords*(text_view: TextView; 
    win: TextWindowType; window_x: gint; window_y: gint; 
    buffer_x: var gint; buffer_y: var gint) {.
    importc: "gtk_text_view_window_to_buffer_coords", libgtk.}
proc get_hadjustment*(text_view: TextView): Adjustment {.
    importc: "gtk_text_view_get_hadjustment", libgtk.}
proc hadjustment*(text_view: TextView): Adjustment {.
    importc: "gtk_text_view_get_hadjustment", libgtk.}
proc get_vadjustment*(text_view: TextView): Adjustment {.
    importc: "gtk_text_view_get_vadjustment", libgtk.}
proc vadjustment*(text_view: TextView): Adjustment {.
    importc: "gtk_text_view_get_vadjustment", libgtk.}
proc get_window*(text_view: TextView; 
                               win: TextWindowType): gdk3.Window {.
    importc: "gtk_text_view_get_window", libgtk.}
proc window*(text_view: TextView; 
                               win: TextWindowType): gdk3.Window {.
    importc: "gtk_text_view_get_window", libgtk.}
proc get_window_type*(text_view: TextView; 
                                    window: gdk3.Window): TextWindowType {.
    importc: "gtk_text_view_get_window_type", libgtk.}
proc window_type*(text_view: TextView; 
                                    window: gdk3.Window): TextWindowType {.
    importc: "gtk_text_view_get_window_type", libgtk.}
proc set_border_window_size*(text_view: TextView; 
    `type`: TextWindowType; size: gint) {.
    importc: "gtk_text_view_set_border_window_size", libgtk.}
proc `border_window_size=`*(text_view: TextView; 
    `type`: TextWindowType; size: gint) {.
    importc: "gtk_text_view_set_border_window_size", libgtk.}
proc get_border_window_size*(text_view: TextView; 
    `type`: TextWindowType): gint {.importc: "gtk_text_view_get_border_window_size", 
                                     libgtk.}
proc border_window_size*(text_view: TextView; 
    `type`: TextWindowType): gint {.importc: "gtk_text_view_get_border_window_size", 
                                     libgtk.}
proc forward_display_line*(text_view: TextView; 
    iter: TextIter): gboolean {.
    importc: "gtk_text_view_forward_display_line", libgtk.}
proc backward_display_line*(text_view: TextView; 
    iter: TextIter): gboolean {.
    importc: "gtk_text_view_backward_display_line", libgtk.}
proc forward_display_line_end*(text_view: TextView; 
    iter: TextIter): gboolean {.
    importc: "gtk_text_view_forward_display_line_end", libgtk.}
proc backward_display_line_start*(text_view: TextView; 
    iter: TextIter): gboolean {.
    importc: "gtk_text_view_backward_display_line_start", libgtk.}
proc starts_display_line*(text_view: TextView; 
    iter: TextIter): gboolean {.
    importc: "gtk_text_view_starts_display_line", libgtk.}
proc move_visually*(text_view: TextView; 
                                  iter: TextIter; count: gint): gboolean {.
    importc: "gtk_text_view_move_visually", libgtk.}
proc im_context_filter_keypress*(text_view: TextView; 
    event: gdk3.EventKey): gboolean {.
    importc: "gtk_text_view_im_context_filter_keypress", libgtk.}
proc reset_im_context*(text_view: TextView) {.
    importc: "gtk_text_view_reset_im_context", libgtk.}
proc add_child_at_anchor*(text_view: TextView; 
    child: Widget; anchor: TextChildAnchor) {.
    importc: "gtk_text_view_add_child_at_anchor", libgtk.}
proc add_child_in_window*(text_view: TextView; 
    child: Widget; which_window: TextWindowType; xpos: gint; 
    ypos: gint) {.importc: "gtk_text_view_add_child_in_window", libgtk.}
proc move_child*(text_view: TextView; 
                               child: Widget; xpos: gint; ypos: gint) {.
    importc: "gtk_text_view_move_child", libgtk.}
proc set_wrap_mode*(text_view: TextView; 
                                  wrap_mode: WrapMode) {.
    importc: "gtk_text_view_set_wrap_mode", libgtk.}
proc `wrap_mode=`*(text_view: TextView; 
                                  wrap_mode: WrapMode) {.
    importc: "gtk_text_view_set_wrap_mode", libgtk.}
proc get_wrap_mode*(text_view: TextView): WrapMode {.
    importc: "gtk_text_view_get_wrap_mode", libgtk.}
proc wrap_mode*(text_view: TextView): WrapMode {.
    importc: "gtk_text_view_get_wrap_mode", libgtk.}
proc set_editable*(text_view: TextView; setting: gboolean) {.
    importc: "gtk_text_view_set_editable", libgtk.}
proc `editable=`*(text_view: TextView; setting: gboolean) {.
    importc: "gtk_text_view_set_editable", libgtk.}
proc get_editable*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_editable", libgtk.}
proc editable*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_editable", libgtk.}
proc set_overwrite*(text_view: TextView; 
                                  overwrite: gboolean) {.
    importc: "gtk_text_view_set_overwrite", libgtk.}
proc `overwrite=`*(text_view: TextView; 
                                  overwrite: gboolean) {.
    importc: "gtk_text_view_set_overwrite", libgtk.}
proc get_overwrite*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_overwrite", libgtk.}
proc overwrite*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_overwrite", libgtk.}
proc set_accepts_tab*(text_view: TextView; 
                                    accepts_tab: gboolean) {.
    importc: "gtk_text_view_set_accepts_tab", libgtk.}
proc `accepts_tab=`*(text_view: TextView; 
                                    accepts_tab: gboolean) {.
    importc: "gtk_text_view_set_accepts_tab", libgtk.}
proc get_accepts_tab*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_accepts_tab", libgtk.}
proc accepts_tab*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_accepts_tab", libgtk.}
proc set_pixels_above_lines*(text_view: TextView; 
    pixels_above_lines: gint) {.importc: "gtk_text_view_set_pixels_above_lines", 
                                libgtk.}
proc `pixels_above_lines=`*(text_view: TextView; 
    pixels_above_lines: gint) {.importc: "gtk_text_view_set_pixels_above_lines", 
                                libgtk.}
proc get_pixels_above_lines*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_above_lines", libgtk.}
proc pixels_above_lines*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_above_lines", libgtk.}
proc set_pixels_below_lines*(text_view: TextView; 
    pixels_below_lines: gint) {.importc: "gtk_text_view_set_pixels_below_lines", 
                                libgtk.}
proc `pixels_below_lines=`*(text_view: TextView; 
    pixels_below_lines: gint) {.importc: "gtk_text_view_set_pixels_below_lines", 
                                libgtk.}
proc get_pixels_below_lines*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_below_lines", libgtk.}
proc pixels_below_lines*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_below_lines", libgtk.}
proc set_pixels_inside_wrap*(text_view: TextView; 
    pixels_inside_wrap: gint) {.importc: "gtk_text_view_set_pixels_inside_wrap", 
                                libgtk.}
proc `pixels_inside_wrap=`*(text_view: TextView; 
    pixels_inside_wrap: gint) {.importc: "gtk_text_view_set_pixels_inside_wrap", 
                                libgtk.}
proc get_pixels_inside_wrap*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_inside_wrap", libgtk.}
proc pixels_inside_wrap*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_pixels_inside_wrap", libgtk.}
proc set_justification*(text_view: TextView; 
                                      justification: Justification) {.
    importc: "gtk_text_view_set_justification", libgtk.}
proc `justification=`*(text_view: TextView; 
                                      justification: Justification) {.
    importc: "gtk_text_view_set_justification", libgtk.}
proc get_justification*(text_view: TextView): Justification {.
    importc: "gtk_text_view_get_justification", libgtk.}
proc justification*(text_view: TextView): Justification {.
    importc: "gtk_text_view_get_justification", libgtk.}
proc set_left_margin*(text_view: TextView; 
                                    left_margin: gint) {.
    importc: "gtk_text_view_set_left_margin", libgtk.}
proc `left_margin=`*(text_view: TextView; 
                                    left_margin: gint) {.
    importc: "gtk_text_view_set_left_margin", libgtk.}
proc get_left_margin*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_left_margin", libgtk.}
proc left_margin*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_left_margin", libgtk.}
proc set_right_margin*(text_view: TextView; 
                                     right_margin: gint) {.
    importc: "gtk_text_view_set_right_margin", libgtk.}
proc `right_margin=`*(text_view: TextView; 
                                     right_margin: gint) {.
    importc: "gtk_text_view_set_right_margin", libgtk.}
proc get_right_margin*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_right_margin", libgtk.}
proc right_margin*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_right_margin", libgtk.}
proc set_indent*(text_view: TextView; indent: gint) {.
    importc: "gtk_text_view_set_indent", libgtk.}
proc `indent=`*(text_view: TextView; indent: gint) {.
    importc: "gtk_text_view_set_indent", libgtk.}
proc get_indent*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_indent", libgtk.}
proc indent*(text_view: TextView): gint {.
    importc: "gtk_text_view_get_indent", libgtk.}
proc set_tabs*(text_view: TextView; 
                             tabs: pango.TabArray) {.
    importc: "gtk_text_view_set_tabs", libgtk.}
proc `tabs=`*(text_view: TextView; 
                             tabs: pango.TabArray) {.
    importc: "gtk_text_view_set_tabs", libgtk.}
proc get_tabs*(text_view: TextView): pango.TabArray {.
    importc: "gtk_text_view_get_tabs", libgtk.}
proc tabs*(text_view: TextView): pango.TabArray {.
    importc: "gtk_text_view_get_tabs", libgtk.}
proc get_default_attributes*(text_view: TextView): TextAttributes {.
    importc: "gtk_text_view_get_default_attributes", libgtk.}
proc default_attributes*(text_view: TextView): TextAttributes {.
    importc: "gtk_text_view_get_default_attributes", libgtk.}
proc set_input_purpose*(text_view: TextView; 
                                      purpose: InputPurpose) {.
    importc: "gtk_text_view_set_input_purpose", libgtk.}
proc `input_purpose=`*(text_view: TextView; 
                                      purpose: InputPurpose) {.
    importc: "gtk_text_view_set_input_purpose", libgtk.}
proc get_input_purpose*(text_view: TextView): InputPurpose {.
    importc: "gtk_text_view_get_input_purpose", libgtk.}
proc input_purpose*(text_view: TextView): InputPurpose {.
    importc: "gtk_text_view_get_input_purpose", libgtk.}
proc set_input_hints*(text_view: TextView; 
                                    hints: InputHints) {.
    importc: "gtk_text_view_set_input_hints", libgtk.}
proc `input_hints=`*(text_view: TextView; 
                                    hints: InputHints) {.
    importc: "gtk_text_view_set_input_hints", libgtk.}
proc get_input_hints*(text_view: TextView): InputHints {.
    importc: "gtk_text_view_get_input_hints", libgtk.}
proc input_hints*(text_view: TextView): InputHints {.
    importc: "gtk_text_view_get_input_hints", libgtk.}
proc set_monospace*(text_view: TextView; 
                                  monospace: gboolean) {.
    importc: "gtk_text_view_set_monospace", libgtk.}
proc `monospace=`*(text_view: TextView; 
                                  monospace: gboolean) {.
    importc: "gtk_text_view_set_monospace", libgtk.}
proc get_monospace*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_monospace", libgtk.}
proc monospace*(text_view: TextView): gboolean {.
    importc: "gtk_text_view_get_monospace", libgtk.}

template gtk_toolbar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toolbar_get_type(), ToolbarObj))

template gtk_toolbar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toolbar_get_type(), ToolbarClassObj))

template gtk_is_toolbar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toolbar_get_type()))

template gtk_is_toolbar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toolbar_get_type()))

template gtk_toolbar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toolbar_get_type(), ToolbarClassObj))

type 
  ToolbarSpaceStyle* {.size: sizeof(cint), pure.} = enum 
    EMPTY, LINE
  ToolbarPrivateObj = object 
  
type 
  Toolbar* =  ptr ToolbarObj
  ToolbarPtr* = ptr ToolbarObj
  ToolbarObj*{.final.} = object of ContainerObj
    priv119: ptr ToolbarPrivateObj

type 
  ToolbarClass* =  ptr ToolbarClassObj
  ToolbarClassPtr* = ptr ToolbarClassObj
  ToolbarClassObj*{.final.} = object of ContainerClassObj
    orientation_changed*: proc (toolbar: Toolbar; 
                                orientation: Orientation) {.cdecl.}
    style_changed*: proc (toolbar: Toolbar; style: ToolbarStyle) {.cdecl.}
    popup_context_menu*: proc (toolbar: Toolbar; x: gint; y: gint; 
                               button_number: gint): gboolean {.cdecl.}
    gtk_reserved1221: proc () {.cdecl.}
    gtk_reserved1222: proc () {.cdecl.}
    gtk_reserved1223: proc () {.cdecl.}
    gtk_reserved1224: proc () {.cdecl.}

proc toolbar_get_type*(): GType {.importc: "gtk_toolbar_get_type", 
                                      libgtk.}
proc toolbar_new*(): Toolbar {.importc: "gtk_toolbar_new", 
    libgtk.}
proc insert*(toolbar: Toolbar; item: ToolItem; 
                         pos: gint) {.importc: "gtk_toolbar_insert", 
                                      libgtk.}
proc get_item_index*(toolbar: Toolbar; 
                                 item: ToolItem): gint {.
    importc: "gtk_toolbar_get_item_index", libgtk.}
proc item_index*(toolbar: Toolbar; 
                                 item: ToolItem): gint {.
    importc: "gtk_toolbar_get_item_index", libgtk.}
proc get_n_items*(toolbar: Toolbar): gint {.
    importc: "gtk_toolbar_get_n_items", libgtk.}
proc n_items*(toolbar: Toolbar): gint {.
    importc: "gtk_toolbar_get_n_items", libgtk.}
proc get_nth_item*(toolbar: Toolbar; n: gint): ToolItem {.
    importc: "gtk_toolbar_get_nth_item", libgtk.}
proc nth_item*(toolbar: Toolbar; n: gint): ToolItem {.
    importc: "gtk_toolbar_get_nth_item", libgtk.}
proc get_show_arrow*(toolbar: Toolbar): gboolean {.
    importc: "gtk_toolbar_get_show_arrow", libgtk.}
proc show_arrow*(toolbar: Toolbar): gboolean {.
    importc: "gtk_toolbar_get_show_arrow", libgtk.}
proc set_show_arrow*(toolbar: Toolbar; show_arrow: gboolean) {.
    importc: "gtk_toolbar_set_show_arrow", libgtk.}
proc `show_arrow=`*(toolbar: Toolbar; show_arrow: gboolean) {.
    importc: "gtk_toolbar_set_show_arrow", libgtk.}
proc get_style*(toolbar: Toolbar): ToolbarStyle {.
    importc: "gtk_toolbar_get_style", libgtk.}
proc style*(toolbar: Toolbar): ToolbarStyle {.
    importc: "gtk_toolbar_get_style", libgtk.}
proc set_style*(toolbar: Toolbar; style: ToolbarStyle) {.
    importc: "gtk_toolbar_set_style", libgtk.}
proc `style=`*(toolbar: Toolbar; style: ToolbarStyle) {.
    importc: "gtk_toolbar_set_style", libgtk.}
proc unset_style*(toolbar: Toolbar) {.
    importc: "gtk_toolbar_unset_style", libgtk.}
proc get_icon_size*(toolbar: Toolbar): IconSize {.
    importc: "gtk_toolbar_get_icon_size", libgtk.}
proc icon_size*(toolbar: Toolbar): IconSize {.
    importc: "gtk_toolbar_get_icon_size", libgtk.}
proc set_icon_size*(toolbar: Toolbar; 
                                icon_size: IconSize) {.
    importc: "gtk_toolbar_set_icon_size", libgtk.}
proc `icon_size=`*(toolbar: Toolbar; 
                                icon_size: IconSize) {.
    importc: "gtk_toolbar_set_icon_size", libgtk.}
proc unset_icon_size*(toolbar: Toolbar) {.
    importc: "gtk_toolbar_unset_icon_size", libgtk.}
proc get_relief_style*(toolbar: Toolbar): ReliefStyle {.
    importc: "gtk_toolbar_get_relief_style", libgtk.}
proc relief_style*(toolbar: Toolbar): ReliefStyle {.
    importc: "gtk_toolbar_get_relief_style", libgtk.}
proc get_drop_index*(toolbar: Toolbar; x: gint; y: gint): gint {.
    importc: "gtk_toolbar_get_drop_index", libgtk.}
proc drop_index*(toolbar: Toolbar; x: gint; y: gint): gint {.
    importc: "gtk_toolbar_get_drop_index", libgtk.}
proc set_drop_highlight_item*(toolbar: Toolbar; 
    tool_item: ToolItem; index: gint) {.
    importc: "gtk_toolbar_set_drop_highlight_item", libgtk.}
proc `drop_highlight_item=`*(toolbar: Toolbar; 
    tool_item: ToolItem; index: gint) {.
    importc: "gtk_toolbar_set_drop_highlight_item", libgtk.}

template gtk_tool_item_group*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tool_item_group_get_type(), ToolItemGroupObj))

template gtk_tool_item_group_class*(cls: expr): expr = 
  (g_type_check_class_cast(cls, tool_item_group_get_type(), 
                           ToolItemGroupClassObj))

template gtk_is_tool_item_group*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tool_item_group_get_type()))

template gtk_is_tool_item_group_class*(obj: expr): expr = 
  (g_type_check_class_type(obj, tool_item_group_get_type()))

template gtk_tool_item_group_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tool_item_group_get_type(), 
                             ToolItemGroupClassObj))

type 
  ToolItemGroupPrivateObj = object 
  
type 
  ToolItemGroup* =  ptr ToolItemGroupObj
  ToolItemGroupPtr* = ptr ToolItemGroupObj
  ToolItemGroupObj*{.final.} = object of ContainerObj
    priv120: ptr ToolItemGroupPrivateObj

type 
  ToolItemGroupClass* =  ptr ToolItemGroupClassObj
  ToolItemGroupClassPtr* = ptr ToolItemGroupClassObj
  ToolItemGroupClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved1231: proc () {.cdecl.}
    gtk_reserved1232: proc () {.cdecl.}
    gtk_reserved1233: proc () {.cdecl.}
    gtk_reserved1234: proc () {.cdecl.}

proc tool_item_group_get_type*(): GType {.
    importc: "gtk_tool_item_group_get_type", libgtk.}
proc tool_item_group_new*(label: cstring): ToolItemGroup {.
    importc: "gtk_tool_item_group_new", libgtk.}
proc set_label*(group: ToolItemGroup; 
                                    label: cstring) {.
    importc: "gtk_tool_item_group_set_label", libgtk.}
proc `label=`*(group: ToolItemGroup; 
                                    label: cstring) {.
    importc: "gtk_tool_item_group_set_label", libgtk.}
proc set_label_widget*(group: ToolItemGroup; 
    label_widget: Widget) {.importc: "gtk_tool_item_group_set_label_widget", 
                                   libgtk.}
proc `label_widget=`*(group: ToolItemGroup; 
    label_widget: Widget) {.importc: "gtk_tool_item_group_set_label_widget", 
                                   libgtk.}
proc set_collapsed*(group: ToolItemGroup; 
    collapsed: gboolean) {.importc: "gtk_tool_item_group_set_collapsed", 
                           libgtk.}
proc `collapsed=`*(group: ToolItemGroup; 
    collapsed: gboolean) {.importc: "gtk_tool_item_group_set_collapsed", 
                           libgtk.}
proc set_ellipsize*(group: ToolItemGroup; 
    ellipsize: pango.EllipsizeMode) {.importc: "gtk_tool_item_group_set_ellipsize", 
                                     libgtk.}
proc `ellipsize=`*(group: ToolItemGroup; 
    ellipsize: pango.EllipsizeMode) {.importc: "gtk_tool_item_group_set_ellipsize", 
                                     libgtk.}
proc set_header_relief*(group: ToolItemGroup; 
    style: ReliefStyle) {.importc: "gtk_tool_item_group_set_header_relief", 
                             libgtk.}
proc `header_relief=`*(group: ToolItemGroup; 
    style: ReliefStyle) {.importc: "gtk_tool_item_group_set_header_relief", 
                             libgtk.}
proc get_label*(group: ToolItemGroup): cstring {.
    importc: "gtk_tool_item_group_get_label", libgtk.}
proc label*(group: ToolItemGroup): cstring {.
    importc: "gtk_tool_item_group_get_label", libgtk.}
proc get_label_widget*(group: ToolItemGroup): Label {.
    importc: "gtk_tool_item_group_get_label_widget", libgtk.}
proc label_widget*(group: ToolItemGroup): Label {.
    importc: "gtk_tool_item_group_get_label_widget", libgtk.}
proc get_collapsed*(group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_item_group_get_collapsed", libgtk.}
proc collapsed*(group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_item_group_get_collapsed", libgtk.}
proc get_ellipsize*(group: ToolItemGroup): pango.EllipsizeMode {.
    importc: "gtk_tool_item_group_get_ellipsize", libgtk.}
proc ellipsize*(group: ToolItemGroup): pango.EllipsizeMode {.
    importc: "gtk_tool_item_group_get_ellipsize", libgtk.}
proc get_header_relief*(group: ToolItemGroup): ReliefStyle {.
    importc: "gtk_tool_item_group_get_header_relief", libgtk.}
proc header_relief*(group: ToolItemGroup): ReliefStyle {.
    importc: "gtk_tool_item_group_get_header_relief", libgtk.}
proc insert*(group: ToolItemGroup; 
                                 item: ToolItem; position: gint) {.
    importc: "gtk_tool_item_group_insert", libgtk.}
proc set_item_position*(group: ToolItemGroup; 
    item: ToolItem; position: gint) {.
    importc: "gtk_tool_item_group_set_item_position", libgtk.}
proc `item_position=`*(group: ToolItemGroup; 
    item: ToolItem; position: gint) {.
    importc: "gtk_tool_item_group_set_item_position", libgtk.}
proc get_item_position*(group: ToolItemGroup; 
    item: ToolItem): gint {.importc: "gtk_tool_item_group_get_item_position", 
                                   libgtk.}
proc item_position*(group: ToolItemGroup; 
    item: ToolItem): gint {.importc: "gtk_tool_item_group_get_item_position", 
                                   libgtk.}
proc get_n_items*(group: ToolItemGroup): guint {.
    importc: "gtk_tool_item_group_get_n_items", libgtk.}
proc n_items*(group: ToolItemGroup): guint {.
    importc: "gtk_tool_item_group_get_n_items", libgtk.}
proc get_nth_item*(group: ToolItemGroup; 
    index: guint): ToolItem {.importc: "gtk_tool_item_group_get_nth_item", 
                                     libgtk.}
proc nth_item*(group: ToolItemGroup; 
    index: guint): ToolItem {.importc: "gtk_tool_item_group_get_nth_item", 
                                     libgtk.}
proc get_drop_item*(group: ToolItemGroup; x: gint; 
    y: gint): ToolItem {.importc: "gtk_tool_item_group_get_drop_item", 
                                libgtk.}
proc drop_item*(group: ToolItemGroup; x: gint; 
    y: gint): ToolItem {.importc: "gtk_tool_item_group_get_drop_item", 
                                libgtk.}

template gtk_tool_palette*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tool_palette_get_type(), ToolPaletteObj))

template gtk_tool_palette_class*(cls: expr): expr = 
  (g_type_check_class_cast(cls, tool_palette_get_type(), ToolPaletteClassObj))

template gtk_is_tool_palette*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tool_palette_get_type()))

template gtk_is_tool_palette_class*(obj: expr): expr = 
  (g_type_check_class_type(obj, tool_palette_get_type()))

template gtk_tool_palette_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tool_palette_get_type(), ToolPaletteClassObj))

type 
  ToolPalettePrivateObj = object 
  
type 
  ToolPaletteDragTargets* {.size: sizeof(cint), pure.} = enum 
    ITEMS = (1 shl 0), 
    GROUPS = (1 shl 1)
type 
  ToolPalette* =  ptr ToolPaletteObj
  ToolPalettePtr* = ptr ToolPaletteObj
  ToolPaletteObj*{.final.} = object of ContainerObj
    priv121: ptr ToolPalettePrivateObj

type 
  ToolPaletteClass* =  ptr ToolPaletteClassObj
  ToolPaletteClassPtr* = ptr ToolPaletteClassObj
  ToolPaletteClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved1241: proc () {.cdecl.}
    gtk_reserved1242: proc () {.cdecl.}
    gtk_reserved1243: proc () {.cdecl.}
    gtk_reserved1244: proc () {.cdecl.}

proc tool_palette_get_type*(): GType {.
    importc: "gtk_tool_palette_get_type", libgtk.}
proc tool_palette_new*(): ToolPalette {.importc: "gtk_tool_palette_new", 
    libgtk.}
proc set_group_position*(palette: ToolPalette; 
    group: ToolItemGroup; position: gint) {.
    importc: "gtk_tool_palette_set_group_position", libgtk.}
proc `group_position=`*(palette: ToolPalette; 
    group: ToolItemGroup; position: gint) {.
    importc: "gtk_tool_palette_set_group_position", libgtk.}
proc set_exclusive*(palette: ToolPalette; 
                                     group: ToolItemGroup; 
                                     exclusive: gboolean) {.
    importc: "gtk_tool_palette_set_exclusive", libgtk.}
proc `exclusive=`*(palette: ToolPalette; 
                                     group: ToolItemGroup; 
                                     exclusive: gboolean) {.
    importc: "gtk_tool_palette_set_exclusive", libgtk.}
proc set_expand*(palette: ToolPalette; 
                                  group: ToolItemGroup; 
                                  expand: gboolean) {.
    importc: "gtk_tool_palette_set_expand", libgtk.}
proc `expand=`*(palette: ToolPalette; 
                                  group: ToolItemGroup; 
                                  expand: gboolean) {.
    importc: "gtk_tool_palette_set_expand", libgtk.}
proc get_group_position*(palette: ToolPalette; 
    group: ToolItemGroup): gint {.
    importc: "gtk_tool_palette_get_group_position", libgtk.}
proc group_position*(palette: ToolPalette; 
    group: ToolItemGroup): gint {.
    importc: "gtk_tool_palette_get_group_position", libgtk.}
proc get_exclusive*(palette: ToolPalette; 
                                     group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_palette_get_exclusive", libgtk.}
proc exclusive*(palette: ToolPalette; 
                                     group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_palette_get_exclusive", libgtk.}
proc get_expand*(palette: ToolPalette; 
                                  group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_palette_get_expand", libgtk.}
proc expand*(palette: ToolPalette; 
                                  group: ToolItemGroup): gboolean {.
    importc: "gtk_tool_palette_get_expand", libgtk.}
proc set_icon_size*(palette: ToolPalette; 
                                     icon_size: IconSize) {.
    importc: "gtk_tool_palette_set_icon_size", libgtk.}
proc `icon_size=`*(palette: ToolPalette; 
                                     icon_size: IconSize) {.
    importc: "gtk_tool_palette_set_icon_size", libgtk.}
proc unset_icon_size*(palette: ToolPalette) {.
    importc: "gtk_tool_palette_unset_icon_size", libgtk.}
proc set_style*(palette: ToolPalette; 
                                 style: ToolbarStyle) {.
    importc: "gtk_tool_palette_set_style", libgtk.}
proc `style=`*(palette: ToolPalette; 
                                 style: ToolbarStyle) {.
    importc: "gtk_tool_palette_set_style", libgtk.}
proc unset_style*(palette: ToolPalette) {.
    importc: "gtk_tool_palette_unset_style", libgtk.}
proc get_icon_size*(palette: ToolPalette): IconSize {.
    importc: "gtk_tool_palette_get_icon_size", libgtk.}
proc icon_size*(palette: ToolPalette): IconSize {.
    importc: "gtk_tool_palette_get_icon_size", libgtk.}
proc get_style*(palette: ToolPalette): ToolbarStyle {.
    importc: "gtk_tool_palette_get_style", libgtk.}
proc style*(palette: ToolPalette): ToolbarStyle {.
    importc: "gtk_tool_palette_get_style", libgtk.}
proc get_drop_item*(palette: ToolPalette; x: gint; 
                                     y: gint): ToolItem {.
    importc: "gtk_tool_palette_get_drop_item", libgtk.}
proc drop_item*(palette: ToolPalette; x: gint; 
                                     y: gint): ToolItem {.
    importc: "gtk_tool_palette_get_drop_item", libgtk.}
proc get_drop_group*(palette: ToolPalette; x: gint; 
                                      y: gint): ToolItemGroup {.
    importc: "gtk_tool_palette_get_drop_group", libgtk.}
proc drop_group*(palette: ToolPalette; x: gint; 
                                      y: gint): ToolItemGroup {.
    importc: "gtk_tool_palette_get_drop_group", libgtk.}
proc get_drag_item*(palette: ToolPalette; 
                                     selection: SelectionData): Widget {.
    importc: "gtk_tool_palette_get_drag_item", libgtk.}
proc drag_item*(palette: ToolPalette; 
                                     selection: SelectionData): Widget {.
    importc: "gtk_tool_palette_get_drag_item", libgtk.}
proc set_drag_source*(palette: ToolPalette; 
    targets: ToolPaletteDragTargets) {.
    importc: "gtk_tool_palette_set_drag_source", libgtk.}
proc `drag_source=`*(palette: ToolPalette; 
    targets: ToolPaletteDragTargets) {.
    importc: "gtk_tool_palette_set_drag_source", libgtk.}
proc add_drag_dest*(palette: ToolPalette; 
                                     widget: Widget; 
                                     flags: DestDefaults; 
                                     targets: ToolPaletteDragTargets; 
                                     actions: gdk3.DragAction) {.
    importc: "gtk_tool_palette_add_drag_dest", libgtk.}
proc get_hadjustment*(palette: ToolPalette): Adjustment {.
    importc: "gtk_tool_palette_get_hadjustment", libgtk.}
proc hadjustment*(palette: ToolPalette): Adjustment {.
    importc: "gtk_tool_palette_get_hadjustment", libgtk.}
proc get_vadjustment*(palette: ToolPalette): Adjustment {.
    importc: "gtk_tool_palette_get_vadjustment", libgtk.}
proc vadjustment*(palette: ToolPalette): Adjustment {.
    importc: "gtk_tool_palette_get_vadjustment", libgtk.}
proc tool_palette_get_drag_target_item*(): TargetEntry {.
    importc: "gtk_tool_palette_get_drag_target_item", libgtk.}
proc tool_palette_get_drag_target_group*(): TargetEntry {.
    importc: "gtk_tool_palette_get_drag_target_group", libgtk.}

template gtk_tool_shell*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tool_shell_get_type(), ToolShellObj))

template gtk_is_tool_shell*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tool_shell_get_type()))

template gtk_tool_shell_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, tool_shell_get_type(), ToolShellIfaceObj))

type 
  ToolShell* =  ptr ToolShellObj
  ToolShellPtr* = ptr ToolShellObj
  ToolShellObj* = object 
  
type 
  ToolShellIface* =  ptr ToolShellIfaceObj
  ToolShellIfacePtr* = ptr ToolShellIfaceObj
  ToolShellIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_icon_size*: proc (shell: ToolShell): IconSize {.cdecl.}
    get_orientation*: proc (shell: ToolShell): Orientation {.cdecl.}
    get_style*: proc (shell: ToolShell): ToolbarStyle {.cdecl.}
    get_relief_style*: proc (shell: ToolShell): ReliefStyle {.cdecl.}
    rebuild_menu*: proc (shell: ToolShell) {.cdecl.}
    get_text_orientation*: proc (shell: ToolShell): Orientation {.cdecl.}
    get_text_alignment*: proc (shell: ToolShell): gfloat {.cdecl.}
    get_ellipsize_mode*: proc (shell: ToolShell): pango.EllipsizeMode {.cdecl.}
    get_text_size_group*: proc (shell: ToolShell): SizeGroup {.cdecl.}

proc tool_shell_get_type*(): GType {.importc: "gtk_tool_shell_get_type", 
    libgtk.}
proc get_icon_size*(shell: ToolShell): IconSize {.
    importc: "gtk_tool_shell_get_icon_size", libgtk.}
proc icon_size*(shell: ToolShell): IconSize {.
    importc: "gtk_tool_shell_get_icon_size", libgtk.}
proc get_orientation*(shell: ToolShell): Orientation {.
    importc: "gtk_tool_shell_get_orientation", libgtk.}
proc orientation*(shell: ToolShell): Orientation {.
    importc: "gtk_tool_shell_get_orientation", libgtk.}
proc get_style*(shell: ToolShell): ToolbarStyle {.
    importc: "gtk_tool_shell_get_style", libgtk.}
proc style*(shell: ToolShell): ToolbarStyle {.
    importc: "gtk_tool_shell_get_style", libgtk.}
proc get_relief_style*(shell: ToolShell): ReliefStyle {.
    importc: "gtk_tool_shell_get_relief_style", libgtk.}
proc relief_style*(shell: ToolShell): ReliefStyle {.
    importc: "gtk_tool_shell_get_relief_style", libgtk.}
proc rebuild_menu*(shell: ToolShell) {.
    importc: "gtk_tool_shell_rebuild_menu", libgtk.}
proc get_text_orientation*(shell: ToolShell): Orientation {.
    importc: "gtk_tool_shell_get_text_orientation", libgtk.}
proc text_orientation*(shell: ToolShell): Orientation {.
    importc: "gtk_tool_shell_get_text_orientation", libgtk.}
proc get_text_alignment*(shell: ToolShell): gfloat {.
    importc: "gtk_tool_shell_get_text_alignment", libgtk.}
proc text_alignment*(shell: ToolShell): gfloat {.
    importc: "gtk_tool_shell_get_text_alignment", libgtk.}
proc get_ellipsize_mode*(shell: ToolShell): pango.EllipsizeMode {.
    importc: "gtk_tool_shell_get_ellipsize_mode", libgtk.}
proc ellipsize_mode*(shell: ToolShell): pango.EllipsizeMode {.
    importc: "gtk_tool_shell_get_ellipsize_mode", libgtk.}
proc get_text_size_group*(shell: ToolShell): SizeGroup {.
    importc: "gtk_tool_shell_get_text_size_group", libgtk.}
proc text_size_group*(shell: ToolShell): SizeGroup {.
    importc: "gtk_tool_shell_get_text_size_group", libgtk.}

proc test_init*(argcp: var cint; argvp: var cstringArray) {.varargs, 
    importc: "gtk_test_init", libgtk.}
proc test_register_all_types*() {.importc: "gtk_test_register_all_types", 
                                      libgtk.}
proc test_list_all_types*(n_types: var guint): ptr GType {.
    importc: "gtk_test_list_all_types", libgtk.}
proc test_find_widget*(widget: Widget; label_pattern: cstring; 
                           widget_type: GType): Widget {.
    importc: "gtk_test_find_widget", libgtk.}
proc test_create_widget*(widget_type: GType; 
                             first_property_name: cstring): Widget {.
    varargs, importc: "gtk_test_create_widget", libgtk.}
proc test_create_simple_window*(window_title: cstring; 
                                    dialog_text: cstring): Widget {.
    importc: "gtk_test_create_simple_window", libgtk.}
proc test_display_button_window*(window_title: cstring; 
                                     dialog_text: cstring): Widget {.
    varargs, importc: "gtk_test_display_button_window", libgtk.}
proc test_slider_set_perc*(widget: Widget; percentage: cdouble) {.
    importc: "gtk_test_slider_set_perc", libgtk.}
proc test_slider_get_value*(widget: Widget): cdouble {.
    importc: "gtk_test_slider_get_value", libgtk.}
proc test_spin_button_click*(spinner: SpinButton; button: guint; 
                                 upwards: gboolean): gboolean {.
    importc: "gtk_test_spin_button_click", libgtk.}
proc test_widget_wait_for_draw*(widget: Widget) {.
    importc: "gtk_test_widget_wait_for_draw", libgtk.}
proc test_widget_click*(widget: Widget; button: guint; 
                            modifiers: gdk3.ModifierType): gboolean {.
    importc: "gtk_test_widget_click", libgtk.}
proc test_widget_send_key*(widget: Widget; keyval: guint; 
                               modifiers: gdk3.ModifierType): gboolean {.
    importc: "gtk_test_widget_send_key", libgtk.}
proc test_text_set*(widget: Widget; string: cstring) {.
    importc: "gtk_test_text_set", libgtk.}
proc test_text_get*(widget: Widget): cstring {.
    importc: "gtk_test_text_get", libgtk.}
proc test_find_sibling*(base_widget: Widget; widget_type: GType): Widget {.
    importc: "gtk_test_find_sibling", libgtk.}
proc test_find_label*(widget: Widget; label_pattern: cstring): Widget {.
    importc: "gtk_test_find_label", libgtk.}

template gtk_tree_drag_source*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_drag_source_get_type(), 
                              TreeDragSourceObj))

template gtk_is_tree_drag_source*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_drag_source_get_type()))

template gtk_tree_drag_source_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, tree_drag_source_get_type(), 
                                 TreeDragSourceIfaceObj))

type 
  TreeDragSource* =  ptr TreeDragSourceObj
  TreeDragSourcePtr* = ptr TreeDragSourceObj
  TreeDragSourceObj* = object 
  
type 
  TreeDragSourceIface* =  ptr TreeDragSourceIfaceObj
  TreeDragSourceIfacePtr* = ptr TreeDragSourceIfaceObj
  TreeDragSourceIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    row_draggable*: proc (drag_source: TreeDragSource; 
                          path: TreePath): gboolean {.cdecl.}
    drag_data_get*: proc (drag_source: TreeDragSource; 
                          path: TreePath; 
                          selection_data: SelectionData): gboolean {.cdecl.}
    drag_data_delete*: proc (drag_source: TreeDragSource; 
                             path: TreePath): gboolean {.cdecl.}

proc tree_drag_source_get_type*(): GType {.
    importc: "gtk_tree_drag_source_get_type", libgtk.}
proc row_draggable*(drag_source: TreeDragSource; 
    path: TreePath): gboolean {.
    importc: "gtk_tree_drag_source_row_draggable", libgtk.}
proc drag_data_delete*(
    drag_source: TreeDragSource; path: TreePath): gboolean {.
    importc: "gtk_tree_drag_source_drag_data_delete", libgtk.}
proc drag_data_get*(drag_source: TreeDragSource; 
    path: TreePath; selection_data: SelectionData): gboolean {.
    importc: "gtk_tree_drag_source_drag_data_get", libgtk.}
template gtk_tree_drag_dest*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_drag_dest_get_type(), TreeDragDestObj))

template gtk_is_tree_drag_dest*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_drag_dest_get_type()))

template gtk_tree_drag_dest_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, tree_drag_dest_get_type(), 
                                 TreeDragDestIfaceObj))

type 
  TreeDragDest* =  ptr TreeDragDestObj
  TreeDragDestPtr* = ptr TreeDragDestObj
  TreeDragDestObj* = object 
  
type 
  TreeDragDestIface* =  ptr TreeDragDestIfaceObj
  TreeDragDestIfacePtr* = ptr TreeDragDestIfaceObj
  TreeDragDestIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    drag_data_received*: proc (drag_dest: TreeDragDest; 
                               dest: TreePath; 
                               selection_data: SelectionData): gboolean {.cdecl.}
    row_drop_possible*: proc (drag_dest: TreeDragDest; 
                              dest_path: TreePath; 
                              selection_data: SelectionData): gboolean {.cdecl.}

proc tree_drag_dest_get_type*(): GType {.
    importc: "gtk_tree_drag_dest_get_type", libgtk.}
proc drag_data_received*(drag_dest: TreeDragDest; 
    dest: TreePath; selection_data: SelectionData): gboolean {.
    importc: "gtk_tree_drag_dest_drag_data_received", libgtk.}
proc row_drop_possible*(drag_dest: TreeDragDest; 
    dest_path: TreePath; selection_data: SelectionData): gboolean {.
    importc: "gtk_tree_drag_dest_row_drop_possible", libgtk.}
proc tree_set_row_drag_data*(selection_data: SelectionData; 
                                 tree_model: TreeModel; 
                                 path: TreePath): gboolean {.
    importc: "gtk_tree_set_row_drag_data", libgtk.}
proc tree_get_row_drag_data*(selection_data: SelectionData; 
                                 tree_model: var TreeModel; 
                                 path: var TreePath): gboolean {.
    importc: "gtk_tree_get_row_drag_data", libgtk.}

template gtk_tree_model_sort*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_model_sort_get_type(), 
                              TreeModelSortObj))

template gtk_tree_model_sort_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_model_sort_get_type(), 
                           TreeModelSortClassObj))

template gtk_is_tree_model_sort*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_model_sort_get_type()))

template gtk_is_tree_model_sort_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_model_sort_get_type()))

template gtk_tree_model_sort_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_model_sort_get_type(), 
                             TreeModelSortClassObj))

type 
  TreeModelSortPrivateObj = object 
  
type 
  TreeModelSort* =  ptr TreeModelSortObj
  TreeModelSortPtr* = ptr TreeModelSortObj
  TreeModelSortObj*{.final.} = object of GObjectObj
    priv122: ptr TreeModelSortPrivateObj

type 
  TreeModelSortClass* =  ptr TreeModelSortClassObj
  TreeModelSortClassPtr* = ptr TreeModelSortClassObj
  TreeModelSortClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved1251: proc () {.cdecl.}
    gtk_reserved1252: proc () {.cdecl.}
    gtk_reserved1253: proc () {.cdecl.}
    gtk_reserved1254: proc () {.cdecl.}

proc tree_model_sort_get_type*(): GType {.
    importc: "gtk_tree_model_sort_get_type", libgtk.}
proc sort_new_with_model*(child_model: TreeModel): TreeModel {.
    importc: "gtk_tree_model_sort_new_with_model", libgtk.}
proc get_model*(tree_model: TreeModelSort): TreeModel {.
    importc: "gtk_tree_model_sort_get_model", libgtk.}
proc model*(tree_model: TreeModelSort): TreeModel {.
    importc: "gtk_tree_model_sort_get_model", libgtk.}
proc convert_child_path_to_path*(
    tree_model_sort: TreeModelSort; child_path: TreePath): TreePath {.
    importc: "gtk_tree_model_sort_convert_child_path_to_path", libgtk.}
proc convert_child_iter_to_iter*(
    tree_model_sort: TreeModelSort; sort_iter: TreeIter; 
    child_iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_sort_convert_child_iter_to_iter", libgtk.}
proc convert_path_to_child_path*(
    tree_model_sort: TreeModelSort; sorted_path: TreePath): TreePath {.
    importc: "gtk_tree_model_sort_convert_path_to_child_path", libgtk.}
proc convert_iter_to_child_iter*(
    tree_model_sort: TreeModelSort; child_iter: TreeIter; 
    sorted_iter: TreeIter) {.importc: "gtk_tree_model_sort_convert_iter_to_child_iter", 
                                    libgtk.}
proc reset_default_sort_func*(
    tree_model_sort: TreeModelSort) {.
    importc: "gtk_tree_model_sort_reset_default_sort_func", libgtk.}
proc clear_cache*(tree_model_sort: TreeModelSort) {.
    importc: "gtk_tree_model_sort_clear_cache", libgtk.}
proc iter_is_valid*(tree_model_sort: TreeModelSort; 
    iter: TreeIter): gboolean {.
    importc: "gtk_tree_model_sort_iter_is_valid", libgtk.}

template gtk_tree_selection*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_selection_get_type(), TreeSelectionObj))

template gtk_tree_selection_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_selection_get_type(), 
                           TreeSelectionClassObj))

template gtk_is_tree_selection*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_selection_get_type()))

template gtk_is_tree_selection_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_selection_get_type()))

template gtk_tree_selection_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_selection_get_type(), 
                             TreeSelectionClassObj))

  
type 
  TreeSelectionFunc* = proc (selection: TreeSelection; 
                                model: TreeModel; 
                                path: TreePath; 
                                path_currently_selected: gboolean; 
                                data: gpointer): gboolean {.cdecl.}
type 
  TreeSelectionForeachFunc* = proc (model: TreeModel; 
      path: TreePath; iter: TreeIter; data: gpointer) {.cdecl.}

type 
  TreeSelectionClass* =  ptr TreeSelectionClassObj
  TreeSelectionClassPtr* = ptr TreeSelectionClassObj
  TreeSelectionClassObj*{.final.} = object of GObjectClassObj
    changed*: proc (selection: TreeSelection) {.cdecl.}
    gtk_reserved1261: proc () {.cdecl.}
    gtk_reserved1262: proc () {.cdecl.}
    gtk_reserved1263: proc () {.cdecl.}
    gtk_reserved1264: proc () {.cdecl.}

proc tree_selection_get_type*(): GType {.
    importc: "gtk_tree_selection_get_type", libgtk.}
proc set_mode*(selection: TreeSelection; 
                                  `type`: SelectionMode) {.
    importc: "gtk_tree_selection_set_mode", libgtk.}
proc `mode=`*(selection: TreeSelection; 
                                  `type`: SelectionMode) {.
    importc: "gtk_tree_selection_set_mode", libgtk.}
proc get_mode*(selection: TreeSelection): SelectionMode {.
    importc: "gtk_tree_selection_get_mode", libgtk.}
proc mode*(selection: TreeSelection): SelectionMode {.
    importc: "gtk_tree_selection_get_mode", libgtk.}
proc set_select_function*(selection: TreeSelection; 
    `func`: TreeSelectionFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_selection_set_select_function", libgtk.}
proc `select_function=`*(selection: TreeSelection; 
    `func`: TreeSelectionFunc; data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_tree_selection_set_select_function", libgtk.}
proc get_user_data*(selection: TreeSelection): gpointer {.
    importc: "gtk_tree_selection_get_user_data", libgtk.}
proc user_data*(selection: TreeSelection): gpointer {.
    importc: "gtk_tree_selection_get_user_data", libgtk.}
proc get_tree_view*(selection: TreeSelection): TreeView {.
    importc: "gtk_tree_selection_get_tree_view", libgtk.}
proc tree_view*(selection: TreeSelection): TreeView {.
    importc: "gtk_tree_selection_get_tree_view", libgtk.}
proc get_select_function*(selection: TreeSelection): TreeSelectionFunc {.
    importc: "gtk_tree_selection_get_select_function", libgtk.}
proc select_function*(selection: TreeSelection): TreeSelectionFunc {.
    importc: "gtk_tree_selection_get_select_function", libgtk.}
proc get_selected*(selection: TreeSelection; 
                                      model: var TreeModel; 
                                      iter: TreeIter): gboolean {.
    importc: "gtk_tree_selection_get_selected", libgtk.}
proc selected*(selection: TreeSelection; 
                                      model: var TreeModel; 
                                      iter: TreeIter): gboolean {.
    importc: "gtk_tree_selection_get_selected", libgtk.}
proc get_selected_rows*(selection: TreeSelection; 
    model: var TreeModel): glib.GList {.
    importc: "gtk_tree_selection_get_selected_rows", libgtk.}
proc selected_rows*(selection: TreeSelection; 
    model: var TreeModel): glib.GList {.
    importc: "gtk_tree_selection_get_selected_rows", libgtk.}
proc count_selected_rows*(selection: TreeSelection): gint {.
    importc: "gtk_tree_selection_count_selected_rows", libgtk.}
proc selected_foreach*(selection: TreeSelection; 
    `func`: TreeSelectionForeachFunc; data: gpointer) {.
    importc: "gtk_tree_selection_selected_foreach", libgtk.}
proc select_path*(selection: TreeSelection; 
                                     path: TreePath) {.
    importc: "gtk_tree_selection_select_path", libgtk.}
proc unselect_path*(selection: TreeSelection; 
    path: TreePath) {.importc: "gtk_tree_selection_unselect_path", 
                             libgtk.}
proc select_iter*(selection: TreeSelection; 
                                     iter: TreeIter) {.
    importc: "gtk_tree_selection_select_iter", libgtk.}
proc unselect_iter*(selection: TreeSelection; 
    iter: TreeIter) {.importc: "gtk_tree_selection_unselect_iter", 
                             libgtk.}
proc path_is_selected*(selection: TreeSelection; 
    path: TreePath): gboolean {.
    importc: "gtk_tree_selection_path_is_selected", libgtk.}
proc iter_is_selected*(selection: TreeSelection; 
    iter: TreeIter): gboolean {.
    importc: "gtk_tree_selection_iter_is_selected", libgtk.}
proc select_all*(selection: TreeSelection) {.
    importc: "gtk_tree_selection_select_all", libgtk.}
proc unselect_all*(selection: TreeSelection) {.
    importc: "gtk_tree_selection_unselect_all", libgtk.}
proc select_range*(selection: TreeSelection; 
                                      start_path: TreePath; 
                                      end_path: TreePath) {.
    importc: "gtk_tree_selection_select_range", libgtk.}
proc unselect_range*(selection: TreeSelection; 
    start_path: TreePath; end_path: TreePath) {.
    importc: "gtk_tree_selection_unselect_range", libgtk.}

template gtk_tree_store*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_store_get_type(), TreeStoreObj))

template gtk_tree_store_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_store_get_type(), TreeStoreClassObj))

template gtk_is_tree_store*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_store_get_type()))

template gtk_is_tree_store_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_store_get_type()))

template gtk_tree_store_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_store_get_type(), TreeStoreClassObj))

type 
  TreeStorePrivateObj = object 
  
type 
  TreeStore* =  ptr TreeStoreObj
  TreeStorePtr* = ptr TreeStoreObj
  TreeStoreObj*{.final.} = object of GObjectObj
    priv124: ptr TreeStorePrivateObj

type 
  TreeStoreClass* =  ptr TreeStoreClassObj
  TreeStoreClassPtr* = ptr TreeStoreClassObj
  TreeStoreClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved1271: proc () {.cdecl.}
    gtk_reserved1272: proc () {.cdecl.}
    gtk_reserved1273: proc () {.cdecl.}
    gtk_reserved1274: proc () {.cdecl.}

proc tree_store_get_type*(): GType {.importc: "gtk_tree_store_get_type", 
    libgtk.}
proc tree_store_new*(n_columns: gint): TreeStore {.varargs, 
    importc: "gtk_tree_store_new", libgtk.}
proc tree_store_newv*(n_columns: gint; types: ptr GType): TreeStore {.
    importc: "gtk_tree_store_newv", libgtk.}
proc set_column_types*(tree_store: TreeStore; 
                                      n_columns: gint; types: ptr GType) {.
    importc: "gtk_tree_store_set_column_types", libgtk.}
proc `column_types=`*(tree_store: TreeStore; 
                                      n_columns: gint; types: ptr GType) {.
    importc: "gtk_tree_store_set_column_types", libgtk.}
proc set_value*(tree_store: TreeStore; 
                               iter: TreeIter; column: gint; 
                               value: gobject.GValue) {.
    importc: "gtk_tree_store_set_value", libgtk.}
proc `value=`*(tree_store: TreeStore; 
                               iter: TreeIter; column: gint; 
                               value: gobject.GValue) {.
    importc: "gtk_tree_store_set_value", libgtk.}
proc set*(tree_store: TreeStore; iter: TreeIter) {.
    varargs, importc: "gtk_tree_store_set", libgtk.}
proc set_valuesv*(tree_store: TreeStore; 
                                 iter: TreeIter; columns: var gint; 
                                 values: gobject.GValue; n_values: gint) {.
    importc: "gtk_tree_store_set_valuesv", libgtk.}
proc `valuesv=`*(tree_store: TreeStore; 
                                 iter: TreeIter; columns: var gint; 
                                 values: gobject.GValue; n_values: gint) {.
    importc: "gtk_tree_store_set_valuesv", libgtk.}

discard """ proc "set_valist*(tree_store: TreeStore; 
                                iter: TreeIter; var_args: va_list) {.
    importc: "gtk_tree_store_set_valist", libgtk.}"""

proc remove*(tree_store: TreeStore; 
                            iter: TreeIter): gboolean {.
    importc: "gtk_tree_store_remove", libgtk.}
proc insert*(tree_store: TreeStore; 
                            iter: TreeIter; parent: TreeIter; 
                            position: gint) {.
    importc: "gtk_tree_store_insert", libgtk.}
proc insert_before*(tree_store: TreeStore; 
                                   iter: TreeIter; 
                                   parent: TreeIter; 
                                   sibling: TreeIter) {.
    importc: "gtk_tree_store_insert_before", libgtk.}
proc insert_after*(tree_store: TreeStore; 
                                  iter: TreeIter; 
                                  parent: TreeIter; 
                                  sibling: TreeIter) {.
    importc: "gtk_tree_store_insert_after", libgtk.}
proc insert_with_values*(tree_store: TreeStore; 
    iter: TreeIter; parent: TreeIter; position: gint) {.varargs, 
    importc: "gtk_tree_store_insert_with_values", libgtk.}
proc insert_with_valuesv*(tree_store: TreeStore; 
    iter: TreeIter; parent: TreeIter; position: gint; 
    columns: var gint; values: gobject.GValue; n_values: gint) {.
    importc: "gtk_tree_store_insert_with_valuesv", libgtk.}
proc prepend*(tree_store: TreeStore; 
                             iter: TreeIter; parent: TreeIter) {.
    importc: "gtk_tree_store_prepend", libgtk.}
proc append*(tree_store: TreeStore; 
                            iter: TreeIter; parent: TreeIter) {.
    importc: "gtk_tree_store_append", libgtk.}
proc is_ancestor*(tree_store: TreeStore; 
                                 iter: TreeIter; 
                                 descendant: TreeIter): gboolean {.
    importc: "gtk_tree_store_is_ancestor", libgtk.}
proc iter_depth*(tree_store: TreeStore; 
                                iter: TreeIter): gint {.
    importc: "gtk_tree_store_iter_depth", libgtk.}
proc clear*(tree_store: TreeStore) {.
    importc: "gtk_tree_store_clear", libgtk.}
proc iter_is_valid*(tree_store: TreeStore; 
                                   iter: TreeIter): gboolean {.
    importc: "gtk_tree_store_iter_is_valid", libgtk.}
proc reorder*(tree_store: TreeStore; 
                             parent: TreeIter; new_order: var gint) {.
    importc: "gtk_tree_store_reorder", libgtk.}
proc swap*(tree_store: TreeStore; a: TreeIter; 
                          b: TreeIter) {.
    importc: "gtk_tree_store_swap", libgtk.}
proc move_before*(tree_store: TreeStore; 
                                 iter: TreeIter; 
                                 position: TreeIter) {.
    importc: "gtk_tree_store_move_before", libgtk.}
proc move_after*(tree_store: TreeStore; 
                                iter: TreeIter; 
                                position: TreeIter) {.
    importc: "gtk_tree_store_move_after", libgtk.}

proc license_get_type*(): GType {.importc: "gtk_license_get_type", 
                                      libgtk.}
proc accel_flags_get_type*(): GType {.importc: "gtk_accel_flags_get_type", 
    libgtk.}
proc application_inhibit_flags_get_type*(): GType {.
    importc: "gtk_application_inhibit_flags_get_type", libgtk.}
proc assistant_page_type_get_type*(): GType {.
    importc: "gtk_assistant_page_type_get_type", libgtk.}
proc button_box_style_get_type*(): GType {.
    importc: "gtk_button_box_style_get_type", libgtk.}
proc builder_error_get_type*(): GType {.
    importc: "gtk_builder_error_get_type", libgtk.}
proc calendar_display_options_get_type*(): GType {.
    importc: "gtk_calendar_display_options_get_type", libgtk.}
proc cell_renderer_state_get_type*(): GType {.
    importc: "gtk_cell_renderer_state_get_type", libgtk.}
proc cell_renderer_mode_get_type*(): GType {.
    importc: "gtk_cell_renderer_mode_get_type", libgtk.}
proc cell_renderer_accel_mode_get_type*(): GType {.
    importc: "gtk_cell_renderer_accel_mode_get_type", libgtk.}
proc resize_mode_get_type*(): GType {.importc: "gtk_resize_mode_get_type", 
    libgtk.}
proc css_provider_error_get_type*(): GType {.
    importc: "gtk_css_provider_error_get_type", libgtk.}
proc css_section_type_get_type*(): GType {.
    importc: "gtk_css_section_type_get_type", libgtk.}
proc debug_flag_get_type*(): GType {.importc: "gtk_debug_flag_get_type", 
    libgtk.}
proc dialog_flags_get_type*(): GType {.
    importc: "gtk_dialog_flags_get_type", libgtk.}
proc response_type_get_type*(): GType {.
    importc: "gtk_response_type_get_type", libgtk.}
proc dest_defaults_get_type*(): GType {.
    importc: "gtk_dest_defaults_get_type", libgtk.}
proc target_flags_get_type*(): GType {.
    importc: "gtk_target_flags_get_type", libgtk.}
proc entry_icon_position_get_type*(): GType {.
    importc: "gtk_entry_icon_position_get_type", libgtk.}
proc align_get_type*(): GType {.importc: "gtk_align_get_type", libgtk.}
proc arrow_type_get_type*(): GType {.importc: "gtk_arrow_type_get_type", 
    libgtk.}
proc baseline_position_get_type*(): GType {.
    importc: "gtk_baseline_position_get_type", libgtk.}
proc delete_type_get_type*(): GType {.importc: "gtk_delete_type_get_type", 
    libgtk.}
proc direction_type_get_type*(): GType {.
    importc: "gtk_direction_type_get_type", libgtk.}
proc icon_size_get_type*(): GType {.importc: "gtk_icon_size_get_type", 
    libgtk.}
proc sensitivity_type_get_type*(): GType {.
    importc: "gtk_sensitivity_type_get_type", libgtk.}
proc text_direction_get_type*(): GType {.
    importc: "gtk_text_direction_get_type", libgtk.}
proc justification_get_type*(): GType {.
    importc: "gtk_justification_get_type", libgtk.}
proc menu_direction_type_get_type*(): GType {.
    importc: "gtk_menu_direction_type_get_type", libgtk.}
proc message_type_get_type*(): GType {.
    importc: "gtk_message_type_get_type", libgtk.}
proc movement_step_get_type*(): GType {.
    importc: "gtk_movement_step_get_type", libgtk.}
proc scroll_step_get_type*(): GType {.importc: "gtk_scroll_step_get_type", 
    libgtk.}
proc orientation_get_type*(): GType {.importc: "gtk_orientation_get_type", 
    libgtk.}
proc pack_type_get_type*(): GType {.importc: "gtk_pack_type_get_type", 
    libgtk.}
proc position_type_get_type*(): GType {.
    importc: "gtk_position_type_get_type", libgtk.}
proc relief_style_get_type*(): GType {.
    importc: "gtk_relief_style_get_type", libgtk.}
proc scroll_type_get_type*(): GType {.importc: "gtk_scroll_type_get_type", 
    libgtk.}
proc selection_mode_get_type*(): GType {.
    importc: "gtk_selection_mode_get_type", libgtk.}
proc shadow_type_get_type*(): GType {.importc: "gtk_shadow_type_get_type", 
    libgtk.}
proc state_type_get_type*(): GType {.importc: "gtk_state_type_get_type", 
    libgtk.}
proc toolbar_style_get_type*(): GType {.
    importc: "gtk_toolbar_style_get_type", libgtk.}
proc wrap_mode_get_type*(): GType {.importc: "gtk_wrap_mode_get_type", 
    libgtk.}
proc sort_type_get_type*(): GType {.importc: "gtk_sort_type_get_type", 
    libgtk.}
proc im_preedit_style_get_type*(): GType {.
    importc: "gtk_im_preedit_style_get_type", libgtk.}
proc im_status_style_get_type*(): GType {.
    importc: "gtk_im_status_style_get_type", libgtk.}
proc pack_direction_get_type*(): GType {.
    importc: "gtk_pack_direction_get_type", libgtk.}
proc print_pages_get_type*(): GType {.importc: "gtk_print_pages_get_type", 
    libgtk.}
proc page_set_get_type*(): GType {.importc: "gtk_page_set_get_type", 
    libgtk.}
proc number_up_layout_get_type*(): GType {.
    importc: "gtk_number_up_layout_get_type", libgtk.}
proc page_orientation_get_type*(): GType {.
    importc: "gtk_page_orientation_get_type", libgtk.}
proc print_quality_get_type*(): GType {.
    importc: "gtk_print_quality_get_type", libgtk.}
proc print_duplex_get_type*(): GType {.
    importc: "gtk_print_duplex_get_type", libgtk.}
proc unit_get_type*(): GType {.importc: "gtk_unit_get_type", libgtk.}
proc tree_view_grid_lines_get_type*(): GType {.
    importc: "gtk_tree_view_grid_lines_get_type", libgtk.}
proc drag_result_get_type*(): GType {.importc: "gtk_drag_result_get_type", 
    libgtk.}
proc size_group_mode_get_type*(): GType {.
    importc: "gtk_size_group_mode_get_type", libgtk.}
proc size_request_mode_get_type*(): GType {.
    importc: "gtk_size_request_mode_get_type", libgtk.}
proc scrollable_policy_get_type*(): GType {.
    importc: "gtk_scrollable_policy_get_type", libgtk.}
proc state_flags_get_type*(): GType {.importc: "gtk_state_flags_get_type", 
    libgtk.}
proc region_flags_get_type*(): GType {.
    importc: "gtk_region_flags_get_type", libgtk.}
proc junction_sides_get_type*(): GType {.
    importc: "gtk_junction_sides_get_type", libgtk.}
proc border_style_get_type*(): GType {.
    importc: "gtk_border_style_get_type", libgtk.}
proc level_bar_mode_get_type*(): GType {.
    importc: "gtk_level_bar_mode_get_type", libgtk.}
proc input_purpose_get_type*(): GType {.
    importc: "gtk_input_purpose_get_type", libgtk.}
proc input_hints_get_type*(): GType {.importc: "gtk_input_hints_get_type", 
    libgtk.}
proc propagation_phase_get_type*(): GType {.
    importc: "gtk_propagation_phase_get_type", libgtk.}
proc event_sequence_state_get_type*(): GType {.
    importc: "gtk_event_sequence_state_get_type", libgtk.}
proc pan_direction_get_type*(): GType {.
    importc: "gtk_pan_direction_get_type", libgtk.}
proc file_chooser_action_get_type*(): GType {.
    importc: "gtk_file_chooser_action_get_type", libgtk.}
proc file_chooser_confirmation_get_type*(): GType {.
    importc: "gtk_file_chooser_confirmation_get_type", libgtk.}
proc file_chooser_error_get_type*(): GType {.
    importc: "gtk_file_chooser_error_get_type", libgtk.}
proc file_filter_flags_get_type*(): GType {.
    importc: "gtk_file_filter_flags_get_type", libgtk.}
proc icon_lookup_flags_get_type*(): GType {.
    importc: "gtk_icon_lookup_flags_get_type", libgtk.}
proc icon_theme_error_get_type*(): GType {.
    importc: "gtk_icon_theme_error_get_type", libgtk.}
proc icon_view_drop_position_get_type*(): GType {.
    importc: "gtk_icon_view_drop_position_get_type", libgtk.}
proc image_type_get_type*(): GType {.importc: "gtk_image_type_get_type", 
    libgtk.}
proc arrow_placement_get_type*(): GType {.
    importc: "gtk_arrow_placement_get_type", libgtk.}
proc buttons_type_get_type*(): GType {.
    importc: "gtk_buttons_type_get_type", libgtk.}
proc button_role_get_type*(): GType {.importc: "gtk_button_role_get_type", 
    libgtk.}
proc notebook_tab_get_type*(): GType {.
    importc: "gtk_notebook_tab_get_type", libgtk.}
proc places_open_flags_get_type*(): GType {.
    importc: "gtk_places_open_flags_get_type", libgtk.}
proc print_status_get_type*(): GType {.
    importc: "gtk_print_status_get_type", libgtk.}
proc print_operation_result_get_type*(): GType {.
    importc: "gtk_print_operation_result_get_type", libgtk.}
proc print_operation_action_get_type*(): GType {.
    importc: "gtk_print_operation_action_get_type", libgtk.}
proc print_error_get_type*(): GType {.importc: "gtk_print_error_get_type", 
    libgtk.}
proc recent_sort_type_get_type*(): GType {.
    importc: "gtk_recent_sort_type_get_type", libgtk.}
proc recent_chooser_error_get_type*(): GType {.
    importc: "gtk_recent_chooser_error_get_type", libgtk.}
proc recent_filter_flags_get_type*(): GType {.
    importc: "gtk_recent_filter_flags_get_type", libgtk.}
proc recent_manager_error_get_type*(): GType {.
    importc: "gtk_recent_manager_error_get_type", libgtk.}
proc revealer_transition_type_get_type*(): GType {.
    importc: "gtk_revealer_transition_type_get_type", libgtk.}
proc corner_type_get_type*(): GType {.importc: "gtk_corner_type_get_type", 
    libgtk.}
proc policy_type_get_type*(): GType {.importc: "gtk_policy_type_get_type", 
    libgtk.}
proc spin_button_update_policy_get_type*(): GType {.
    importc: "gtk_spin_button_update_policy_get_type", libgtk.}
proc spin_type_get_type*(): GType {.importc: "gtk_spin_type_get_type", 
    libgtk.}
proc stack_transition_type_get_type*(): GType {.
    importc: "gtk_stack_transition_type_get_type", libgtk.}
proc text_buffer_target_info_get_type*(): GType {.
    importc: "gtk_text_buffer_target_info_get_type", libgtk.}
proc text_search_flags_get_type*(): GType {.
    importc: "gtk_text_search_flags_get_type", libgtk.}
proc text_window_type_get_type*(): GType {.
    importc: "gtk_text_window_type_get_type", libgtk.}
proc text_view_layer_get_type*(): GType {.
    importc: "gtk_text_view_layer_get_type", libgtk.}
proc text_extend_selection_get_type*(): GType {.
    importc: "gtk_text_extend_selection_get_type", libgtk.}
proc toolbar_space_style_get_type*(): GType {.
    importc: "gtk_toolbar_space_style_get_type", libgtk.}
proc tool_palette_drag_targets_get_type*(): GType {.
    importc: "gtk_tool_palette_drag_targets_get_type", libgtk.}
proc tree_model_flags_get_type*(): GType {.
    importc: "gtk_tree_model_flags_get_type", libgtk.}
proc tree_view_drop_position_get_type*(): GType {.
    importc: "gtk_tree_view_drop_position_get_type", libgtk.}
proc tree_view_column_sizing_get_type*(): GType {.
    importc: "gtk_tree_view_column_sizing_get_type", libgtk.}
proc widget_help_type_get_type*(): GType {.
    importc: "gtk_widget_help_type_get_type", libgtk.}
proc window_type_get_type*(): GType {.importc: "gtk_window_type_get_type", 
    libgtk.}
proc window_position_get_type*(): GType {.
    importc: "gtk_window_position_get_type", libgtk.}
proc rc_flags_get_type*(): GType {.importc: "gtk_rc_flags_get_type", 
    libgtk.}
proc rc_token_type_get_type*(): GType {.
    importc: "gtk_rc_token_type_get_type", libgtk.}
proc path_priority_type_get_type*(): GType {.
    importc: "gtk_path_priority_type_get_type", libgtk.}
proc path_type_get_type*(): GType {.importc: "gtk_path_type_get_type", 
    libgtk.}
proc expander_style_get_type*(): GType {.
    importc: "gtk_expander_style_get_type", libgtk.}
proc attach_options_get_type*(): GType {.
    importc: "gtk_attach_options_get_type", libgtk.}
proc ui_manager_item_type_get_type*(): GType {.
    importc: "gtk_ui_manager_item_type_get_type", libgtk.}

template gtk_viewport*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, viewport_get_type(), ViewportObj))

template gtk_viewport_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, viewport_get_type(), ViewportClassObj))

template gtk_is_viewport*(obj: expr): expr = 
  (g_type_check_instance_type(obj, viewport_get_type()))

template gtk_is_viewport_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, viewport_get_type()))

template gtk_viewport_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, viewport_get_type(), ViewportClassObj))

type 
  ViewportPrivateObj = object 
  
type 
  Viewport* =  ptr ViewportObj
  ViewportPtr* = ptr ViewportObj
  ViewportObj*{.final.} = object of BinObj
    priv125: ptr ViewportPrivateObj

type 
  ViewportClass* =  ptr ViewportClassObj
  ViewportClassPtr* = ptr ViewportClassObj
  ViewportClassObj*{.final.} = object of BinClassObj
    gtk_reserved1281: proc () {.cdecl.}
    gtk_reserved1282: proc () {.cdecl.}
    gtk_reserved1283: proc () {.cdecl.}
    gtk_reserved1284: proc () {.cdecl.}

proc viewport_get_type*(): GType {.importc: "gtk_viewport_get_type", 
    libgtk.}
proc viewport_new*(hadjustment: Adjustment; 
                       vadjustment: Adjustment): Viewport {.
    importc: "gtk_viewport_new", libgtk.}
proc get_hadjustment*(viewport: Viewport): Adjustment {.
    importc: "gtk_viewport_get_hadjustment", libgtk.}
proc hadjustment*(viewport: Viewport): Adjustment {.
    importc: "gtk_viewport_get_hadjustment", libgtk.}
proc get_vadjustment*(viewport: Viewport): Adjustment {.
    importc: "gtk_viewport_get_vadjustment", libgtk.}
proc vadjustment*(viewport: Viewport): Adjustment {.
    importc: "gtk_viewport_get_vadjustment", libgtk.}
proc set_hadjustment*(viewport: Viewport; 
                                   adjustment: Adjustment) {.
    importc: "gtk_viewport_set_hadjustment", libgtk.}
proc `hadjustment=`*(viewport: Viewport; 
                                   adjustment: Adjustment) {.
    importc: "gtk_viewport_set_hadjustment", libgtk.}
proc set_vadjustment*(viewport: Viewport; 
                                   adjustment: Adjustment) {.
    importc: "gtk_viewport_set_vadjustment", libgtk.}
proc `vadjustment=`*(viewport: Viewport; 
                                   adjustment: Adjustment) {.
    importc: "gtk_viewport_set_vadjustment", libgtk.}
proc set_shadow_type*(viewport: Viewport; 
                                   `type`: ShadowType) {.
    importc: "gtk_viewport_set_shadow_type", libgtk.}
proc `shadow_type=`*(viewport: Viewport; 
                                   `type`: ShadowType) {.
    importc: "gtk_viewport_set_shadow_type", libgtk.}
proc get_shadow_type*(viewport: Viewport): ShadowType {.
    importc: "gtk_viewport_get_shadow_type", libgtk.}
proc shadow_type*(viewport: Viewport): ShadowType {.
    importc: "gtk_viewport_get_shadow_type", libgtk.}
proc get_bin_window*(viewport: Viewport): gdk3.Window {.
    importc: "gtk_viewport_get_bin_window", libgtk.}
proc bin_window*(viewport: Viewport): gdk3.Window {.
    importc: "gtk_viewport_get_bin_window", libgtk.}
proc get_view_window*(viewport: Viewport): gdk3.Window {.
    importc: "gtk_viewport_get_view_window", libgtk.}
proc view_window*(viewport: Viewport): gdk3.Window {.
    importc: "gtk_viewport_get_view_window", libgtk.}

template gtk_volume_button*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, volume_button_get_type(), VolumeButtonObj))

template gtk_volume_button_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, volume_button_get_type(), 
                           VolumeButtonClassObj))

template gtk_is_volume_button*(obj: expr): expr = 
  (g_type_check_instance_type(obj, volume_button_get_type()))

template gtk_is_volume_button_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, volume_button_get_type()))

template gtk_volume_button_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, volume_button_get_type(), 
                             VolumeButtonClassObj))

type 
  VolumeButton* =  ptr VolumeButtonObj
  VolumeButtonPtr* = ptr VolumeButtonObj
  VolumeButtonObj*{.final.} = object of ScaleButtonObj

type 
  VolumeButtonClass* =  ptr VolumeButtonClassObj
  VolumeButtonClassPtr* = ptr VolumeButtonClassObj
  VolumeButtonClassObj*{.final.} = object of ScaleButtonClassObj
    gtk_reserved1291: proc () {.cdecl.}
    gtk_reserved1292: proc () {.cdecl.}
    gtk_reserved1293: proc () {.cdecl.}
    gtk_reserved1294: proc () {.cdecl.}

proc volume_button_get_type*(): GType {.
    importc: "gtk_volume_button_get_type", libgtk.}
proc volume_button_new*(): VolumeButton {.
    importc: "gtk_volume_button_new", libgtk.}

proc widget_path_get_type*(): GType {.importc: "gtk_widget_path_get_type", 
    libgtk.}
proc widget_path_new*(): WidgetPath {.
    importc: "gtk_widget_path_new", libgtk.}
proc copy*(path: WidgetPath): WidgetPath {.
    importc: "gtk_widget_path_copy", libgtk.}
proc `ref`*(path: WidgetPath): WidgetPath {.
    importc: "gtk_widget_path_ref", libgtk.}
proc unref*(path: WidgetPath) {.
    importc: "gtk_widget_path_unref", libgtk.}
proc free*(path: WidgetPath) {.
    importc: "gtk_widget_path_free", libgtk.}
proc to_string*(path: WidgetPath): cstring {.
    importc: "gtk_widget_path_to_string", libgtk.}
proc length*(path: WidgetPath): gint {.
    importc: "gtk_widget_path_length", libgtk.}
proc append_type*(path: WidgetPath; `type`: GType): gint {.
    importc: "gtk_widget_path_append_type", libgtk.}
proc prepend_type*(path: WidgetPath; `type`: GType) {.
    importc: "gtk_widget_path_prepend_type", libgtk.}
proc append_with_siblings*(path: WidgetPath; 
    siblings: WidgetPath; sibling_index: guint): gint {.
    importc: "gtk_widget_path_append_with_siblings", libgtk.}
proc append_for_widget*(path: WidgetPath; 
    widget: Widget): gint {.importc: "gtk_widget_path_append_for_widget", 
                                   libgtk.}
proc iter_get_object_type*(path: WidgetPath; pos: gint): GType {.
    importc: "gtk_widget_path_iter_get_object_type", libgtk.}
proc iter_set_object_type*(path: WidgetPath; pos: gint; 
    `type`: GType) {.importc: "gtk_widget_path_iter_set_object_type", 
                   libgtk.}
proc iter_get_siblings*(path: WidgetPath; pos: gint): WidgetPath {.
    importc: "gtk_widget_path_iter_get_siblings", libgtk.}
proc iter_get_sibling_index*(path: WidgetPath; 
    pos: gint): guint {.importc: "gtk_widget_path_iter_get_sibling_index", 
                        libgtk.}
proc iter_get_name*(path: WidgetPath; pos: gint): cstring {.
    importc: "gtk_widget_path_iter_get_name", libgtk.}
proc iter_set_name*(path: WidgetPath; pos: gint; 
                                    name: cstring) {.
    importc: "gtk_widget_path_iter_set_name", libgtk.}
proc iter_has_name*(path: WidgetPath; pos: gint; 
                                    name: cstring): gboolean {.
    importc: "gtk_widget_path_iter_has_name", libgtk.}
proc iter_has_qname*(path: WidgetPath; pos: gint; 
                                     qname: GQuark): gboolean {.
    importc: "gtk_widget_path_iter_has_qname", libgtk.}
proc iter_get_state*(path: WidgetPath; pos: gint): StateFlags {.
    importc: "gtk_widget_path_iter_get_state", libgtk.}
proc iter_set_state*(path: WidgetPath; pos: gint; 
                                     state: StateFlags) {.
    importc: "gtk_widget_path_iter_set_state", libgtk.}
proc iter_add_class*(path: WidgetPath; pos: gint; 
                                     name: cstring) {.
    importc: "gtk_widget_path_iter_add_class", libgtk.}
proc iter_remove_class*(path: WidgetPath; pos: gint; 
    name: cstring) {.importc: "gtk_widget_path_iter_remove_class", 
                       libgtk.}
proc iter_clear_classes*(path: WidgetPath; pos: gint) {.
    importc: "gtk_widget_path_iter_clear_classes", libgtk.}
proc iter_list_classes*(path: WidgetPath; pos: gint): glib.GSList {.
    importc: "gtk_widget_path_iter_list_classes", libgtk.}
proc iter_has_class*(path: WidgetPath; pos: gint; 
                                     name: cstring): gboolean {.
    importc: "gtk_widget_path_iter_has_class", libgtk.}
proc iter_has_qclass*(path: WidgetPath; pos: gint; 
                                      qname: GQuark): gboolean {.
    importc: "gtk_widget_path_iter_has_qclass", libgtk.}
proc iter_add_region*(path: WidgetPath; pos: gint; 
                                      name: cstring; flags: RegionFlags) {.
    importc: "gtk_widget_path_iter_add_region", libgtk.}
proc iter_remove_region*(path: WidgetPath; pos: gint; 
    name: cstring) {.importc: "gtk_widget_path_iter_remove_region", 
                       libgtk.}
proc iter_clear_regions*(path: WidgetPath; pos: gint) {.
    importc: "gtk_widget_path_iter_clear_regions", libgtk.}
proc iter_list_regions*(path: WidgetPath; pos: gint): glib.GSList {.
    importc: "gtk_widget_path_iter_list_regions", libgtk.}
proc iter_has_region*(path: WidgetPath; pos: gint; 
                                      name: cstring; 
                                      flags: ptr RegionFlags): gboolean {.
    importc: "gtk_widget_path_iter_has_region", libgtk.}
proc iter_has_qregion*(path: WidgetPath; pos: gint; 
    qname: GQuark; flags: ptr RegionFlags): gboolean {.
    importc: "gtk_widget_path_iter_has_qregion", libgtk.}
proc get_object_type*(path: WidgetPath): GType {.
    importc: "gtk_widget_path_get_object_type", libgtk.}
proc object_type*(path: WidgetPath): GType {.
    importc: "gtk_widget_path_get_object_type", libgtk.}
proc is_type*(path: WidgetPath; `type`: GType): gboolean {.
    importc: "gtk_widget_path_is_type", libgtk.}
proc has_parent*(path: WidgetPath; `type`: GType): gboolean {.
    importc: "gtk_widget_path_has_parent", libgtk.}

template gtk_window_group*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, window_group_get_type(), WindowGroupObj))

template gtk_window_group_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, window_group_get_type(), WindowGroupClassObj))

template gtk_is_window_group*(obj: expr): expr = 
  (g_type_check_instance_type(obj, window_group_get_type()))

template gtk_is_window_group_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, window_group_get_type()))

template gtk_window_group_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, window_group_get_type(), WindowGroupClassObj))

type 
  WindowGroupClass* =  ptr WindowGroupClassObj
  WindowGroupClassPtr* = ptr WindowGroupClassObj
  WindowGroupClassObj*{.final.} = object of GObjectClassObj
    gtk_reserved1301: proc () {.cdecl.}
    gtk_reserved1302: proc () {.cdecl.}
    gtk_reserved1303: proc () {.cdecl.}
    gtk_reserved1304: proc () {.cdecl.}

proc window_group_get_type*(): GType {.
    importc: "gtk_window_group_get_type", libgtk.}
proc window_group_new*(): WindowGroup {.
    importc: "gtk_window_group_new", libgtk.}
proc add_window*(window_group: WindowGroup; 
                                  window: Window) {.
    importc: "gtk_window_group_add_window", libgtk.}
proc remove_window*(window_group: WindowGroup; 
                                     window: Window) {.
    importc: "gtk_window_group_remove_window", libgtk.}
proc list_windows*(window_group: WindowGroup): glib.GList {.
    importc: "gtk_window_group_list_windows", libgtk.}
proc get_current_grab*(window_group: WindowGroup): Widget {.
    importc: "gtk_window_group_get_current_grab", libgtk.}
proc current_grab*(window_group: WindowGroup): Widget {.
    importc: "gtk_window_group_get_current_grab", libgtk.}
proc get_current_device_grab*(
    window_group: WindowGroup; device: gdk3.Device): Widget {.
    importc: "gtk_window_group_get_current_device_grab", libgtk.}
proc current_device_grab*(
    window_group: WindowGroup; device: gdk3.Device): Widget {.
    importc: "gtk_window_group_get_current_device_grab", libgtk.}

template gtk_arrow*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, arrow_get_type(), ArrowObj))

template gtk_arrow_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, arrow_get_type(), ArrowClassObj))

template gtk_is_arrow*(obj: expr): expr = 
  (g_type_check_instance_type(obj, arrow_get_type()))

template gtk_is_arrow_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, arrow_get_type()))

template gtk_arrow_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, arrow_get_type(), ArrowClassObj))

type 
  ArrowPrivateObj = object 
  
type 
  Arrow* =  ptr ArrowObj
  ArrowPtr* = ptr ArrowObj
  ArrowObj*{.final.} = object of MiscObj
    priv127: ptr ArrowPrivateObj

type 
  ArrowClass* =  ptr ArrowClassObj
  ArrowClassPtr* = ptr ArrowClassObj
  ArrowClassObj*{.final.} = object of MiscClassObj
    gtk_reserved1311: proc () {.cdecl.}
    gtk_reserved1312: proc () {.cdecl.}
    gtk_reserved1313: proc () {.cdecl.}
    gtk_reserved1314: proc () {.cdecl.}

proc arrow_get_type*(): GType {.importc: "gtk_arrow_get_type", libgtk.}
proc arrow_new*(arrow_type: ArrowType; shadow_type: ShadowType): Arrow {.
    importc: "gtk_arrow_new", libgtk.}
proc set*(arrow: Arrow; arrow_type: ArrowType; 
                    shadow_type: ShadowType) {.importc: "gtk_arrow_set", 
    libgtk.}

template gtk_action*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, action_get_type(), ActionObj))

template gtk_action_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, action_get_type(), ActionClassObj))

template gtk_is_action*(obj: expr): expr = 
  (g_type_check_instance_type(obj, action_get_type()))

template gtk_is_action_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, action_get_type()))

template gtk_action_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, action_get_type(), ActionClassObj))

type 
  ActionPrivateObj = object 
  
type 
  Action* =  ptr ActionObj
  ActionPtr* = ptr ActionObj
  ActionObj* = object of GObjectObj
    private_data00*: ptr ActionPrivateObj

type 
  ActionClass* =  ptr ActionClassObj
  ActionClassPtr* = ptr ActionClassObj
  ActionClassObj = object of GObjectClassObj
    activate*: proc (action: Action) {.cdecl.}
    menu_item_type*: GType
    toolbar_item_type*: GType
    create_menu_item*: proc (action: Action): Widget {.cdecl.}
    create_tool_item*: proc (action: Action): Widget {.cdecl.}
    connect_proxy*: proc (action: Action; proxy: Widget) {.cdecl.}
    disconnect_proxy*: proc (action: Action; proxy: Widget) {.cdecl.}
    create_menu*: proc (action: Action): Widget {.cdecl.}
    gtk_reserved1321: proc () {.cdecl.}
    gtk_reserved1322: proc () {.cdecl.}
    gtk_reserved1323: proc () {.cdecl.}
    gtk_reserved1324: proc () {.cdecl.}

proc action_get_type*(): GType {.importc: "gtk_action_get_type", 
                                     libgtk.}
proc action_new*(name: cstring; label: cstring; tooltip: cstring; 
                     stock_id: cstring): Action {.
    importc: "gtk_action_new", libgtk.}
proc get_name*(action: Action): cstring {.
    importc: "gtk_action_get_name", libgtk.}
proc name*(action: Action): cstring {.
    importc: "gtk_action_get_name", libgtk.}
proc is_sensitive*(action: Action): gboolean {.
    importc: "gtk_action_is_sensitive", libgtk.}
proc get_sensitive*(action: Action): gboolean {.
    importc: "gtk_action_get_sensitive", libgtk.}
proc sensitive*(action: Action): gboolean {.
    importc: "gtk_action_get_sensitive", libgtk.}
proc set_sensitive*(action: Action; sensitive: gboolean) {.
    importc: "gtk_action_set_sensitive", libgtk.}
proc `sensitive=`*(action: Action; sensitive: gboolean) {.
    importc: "gtk_action_set_sensitive", libgtk.}
proc is_visible*(action: Action): gboolean {.
    importc: "gtk_action_is_visible", libgtk.}
proc get_visible*(action: Action): gboolean {.
    importc: "gtk_action_get_visible", libgtk.}
proc visible*(action: Action): gboolean {.
    importc: "gtk_action_get_visible", libgtk.}
proc set_visible*(action: Action; visible: gboolean) {.
    importc: "gtk_action_set_visible", libgtk.}
proc `visible=`*(action: Action; visible: gboolean) {.
    importc: "gtk_action_set_visible", libgtk.}
proc activate*(action: Action) {.
    importc: "gtk_action_activate", libgtk.}
proc create_icon*(action: Action; icon_size: IconSize): Widget {.
    importc: "gtk_action_create_icon", libgtk.}
proc create_menu_item*(action: Action): MenuItem {.
    importc: "gtk_action_create_menu_item", libgtk.}
proc create_tool_item*(action: Action): Widget {.
    importc: "gtk_action_create_tool_item", libgtk.}
proc create_menu*(action: Action): Menu {.
    importc: "gtk_action_create_menu", libgtk.}
proc get_proxies*(action: Action): glib.GSList {.
    importc: "gtk_action_get_proxies", libgtk.}
proc proxies*(action: Action): glib.GSList {.
    importc: "gtk_action_get_proxies", libgtk.}
proc connect_accelerator*(action: Action) {.
    importc: "gtk_action_connect_accelerator", libgtk.}
proc disconnect_accelerator*(action: Action) {.
    importc: "gtk_action_disconnect_accelerator", libgtk.}
proc get_accel_path*(action: Action): cstring {.
    importc: "gtk_action_get_accel_path", libgtk.}
proc accel_path*(action: Action): cstring {.
    importc: "gtk_action_get_accel_path", libgtk.}
proc get_accel_closure*(action: Action): gobject.GClosure {.
    importc: "gtk_action_get_accel_closure", libgtk.}
proc accel_closure*(action: Action): gobject.GClosure {.
    importc: "gtk_action_get_accel_closure", libgtk.}
proc block_activate*(action: Action) {.
    importc: "gtk_action_block_activate", libgtk.}
proc unblock_activate*(action: Action) {.
    importc: "gtk_action_unblock_activate", libgtk.}

proc set_accel_path*(action: Action; accel_path: cstring) {.
    importc: "gtk_action_set_accel_path", libgtk.}

proc `accel_path=`*(action: Action; accel_path: cstring) {.
    importc: "gtk_action_set_accel_path", libgtk.}
proc set_accel_group*(action: Action; 
                                 accel_group: AccelGroup) {.
    importc: "gtk_action_set_accel_group", libgtk.}
proc `accel_group=`*(action: Action; 
                                 accel_group: AccelGroup) {.
    importc: "gtk_action_set_accel_group", libgtk.}

proc set_label*(action: Action; label: cstring) {.
    importc: "gtk_action_set_label", libgtk.}

proc `label=`*(action: Action; label: cstring) {.
    importc: "gtk_action_set_label", libgtk.}
proc get_label*(action: Action): cstring {.
    importc: "gtk_action_get_label", libgtk.}
proc label*(action: Action): cstring {.
    importc: "gtk_action_get_label", libgtk.}
proc set_short_label*(action: Action; short_label: cstring) {.
    importc: "gtk_action_set_short_label", libgtk.}
proc `short_label=`*(action: Action; short_label: cstring) {.
    importc: "gtk_action_set_short_label", libgtk.}
proc get_short_label*(action: Action): cstring {.
    importc: "gtk_action_get_short_label", libgtk.}
proc short_label*(action: Action): cstring {.
    importc: "gtk_action_get_short_label", libgtk.}
proc set_tooltip*(action: Action; tooltip: cstring) {.
    importc: "gtk_action_set_tooltip", libgtk.}
proc `tooltip=`*(action: Action; tooltip: cstring) {.
    importc: "gtk_action_set_tooltip", libgtk.}
proc get_tooltip*(action: Action): cstring {.
    importc: "gtk_action_get_tooltip", libgtk.}
proc tooltip*(action: Action): cstring {.
    importc: "gtk_action_get_tooltip", libgtk.}
proc set_stock_id*(action: Action; stock_id: cstring) {.
    importc: "gtk_action_set_stock_id", libgtk.}
proc `stock_id=`*(action: Action; stock_id: cstring) {.
    importc: "gtk_action_set_stock_id", libgtk.}
proc get_stock_id*(action: Action): cstring {.
    importc: "gtk_action_get_stock_id", libgtk.}
proc stock_id*(action: Action): cstring {.
    importc: "gtk_action_get_stock_id", libgtk.}
proc set_gicon*(action: Action; icon: gio.GIcon) {.
    importc: "gtk_action_set_gicon", libgtk.}
proc `gicon=`*(action: Action; icon: gio.GIcon) {.
    importc: "gtk_action_set_gicon", libgtk.}
proc get_gicon*(action: Action): gio.GIcon {.
    importc: "gtk_action_get_gicon", libgtk.}
proc gicon*(action: Action): gio.GIcon {.
    importc: "gtk_action_get_gicon", libgtk.}
proc set_icon_name*(action: Action; icon_name: cstring) {.
    importc: "gtk_action_set_icon_name", libgtk.}
proc `icon_name=`*(action: Action; icon_name: cstring) {.
    importc: "gtk_action_set_icon_name", libgtk.}
proc get_icon_name*(action: Action): cstring {.
    importc: "gtk_action_get_icon_name", libgtk.}
proc icon_name*(action: Action): cstring {.
    importc: "gtk_action_get_icon_name", libgtk.}
proc set_visible_horizontal*(action: Action; 
    visible_horizontal: gboolean) {.importc: "gtk_action_set_visible_horizontal", 
                                    libgtk.}
proc `visible_horizontal=`*(action: Action; 
    visible_horizontal: gboolean) {.importc: "gtk_action_set_visible_horizontal", 
                                    libgtk.}
proc get_visible_horizontal*(action: Action): gboolean {.
    importc: "gtk_action_get_visible_horizontal", libgtk.}
proc visible_horizontal*(action: Action): gboolean {.
    importc: "gtk_action_get_visible_horizontal", libgtk.}
proc set_visible_vertical*(action: Action; 
                                      visible_vertical: gboolean) {.
    importc: "gtk_action_set_visible_vertical", libgtk.}
proc `visible_vertical=`*(action: Action; 
                                      visible_vertical: gboolean) {.
    importc: "gtk_action_set_visible_vertical", libgtk.}
proc get_visible_vertical*(action: Action): gboolean {.
    importc: "gtk_action_get_visible_vertical", libgtk.}
proc visible_vertical*(action: Action): gboolean {.
    importc: "gtk_action_get_visible_vertical", libgtk.}
proc set_is_important*(action: Action; 
                                  is_important: gboolean) {.
    importc: "gtk_action_set_is_important", libgtk.}
proc `is_important=`*(action: Action; 
                                  is_important: gboolean) {.
    importc: "gtk_action_set_is_important", libgtk.}
proc get_is_important*(action: Action): gboolean {.
    importc: "gtk_action_get_is_important", libgtk.}
proc is_important*(action: Action): gboolean {.
    importc: "gtk_action_get_is_important", libgtk.}
proc set_always_show_image*(action: Action; 
    always_show: gboolean) {.importc: "gtk_action_set_always_show_image", 
                             libgtk.}
proc `always_show_image=`*(action: Action; 
    always_show: gboolean) {.importc: "gtk_action_set_always_show_image", 
                             libgtk.}
proc get_always_show_image*(action: Action): gboolean {.
    importc: "gtk_action_get_always_show_image", libgtk.}
proc always_show_image*(action: Action): gboolean {.
    importc: "gtk_action_get_always_show_image", libgtk.}

template gtk_activatable*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, activatable_get_type(), ActivatableObj))

template gtk_activatable_class*(obj: expr): expr = 
  (g_type_check_class_cast(obj, activatable_get_type(), ActivatableIfaceObj))

template gtk_is_activatable*(obj: expr): expr = 
  (g_type_check_instance_type(obj, activatable_get_type()))

template gtk_activatable_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, activatable_get_type(), 
                                 ActivatableIfaceObj))

type 
  Activatable* =  ptr ActivatableObj
  ActivatablePtr* = ptr ActivatableObj
  ActivatableObj* = object 
  
type 
  ActivatableIface* =  ptr ActivatableIfaceObj
  ActivatableIfacePtr* = ptr ActivatableIfaceObj
  ActivatableIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    update*: proc (activatable: Activatable; action: Action; 
                   property_name: cstring) {.cdecl.}
    sync_action_properties*: proc (activatable: Activatable; 
                                   action: Action) {.cdecl.}

proc activatable_get_type*(): GType {.importc: "gtk_activatable_get_type", 
    libgtk.}
proc sync_action_properties*(activatable: Activatable; 
    action: Action) {.importc: "gtk_activatable_sync_action_properties", 
                             libgtk.}
proc set_related_action*(activatable: Activatable; 
    action: Action) {.importc: "gtk_activatable_set_related_action", 
                             libgtk.}
proc `related_action=`*(activatable: Activatable; 
    action: Action) {.importc: "gtk_activatable_set_related_action", 
                             libgtk.}
proc get_related_action*(activatable: Activatable): Action {.
    importc: "gtk_activatable_get_related_action", libgtk.}
proc related_action*(activatable: Activatable): Action {.
    importc: "gtk_activatable_get_related_action", libgtk.}
proc set_use_action_appearance*(
    activatable: Activatable; use_appearance: gboolean) {.
    importc: "gtk_activatable_set_use_action_appearance", libgtk.}
proc `use_action_appearance=`*(
    activatable: Activatable; use_appearance: gboolean) {.
    importc: "gtk_activatable_set_use_action_appearance", libgtk.}
proc get_use_action_appearance*(
    activatable: Activatable): gboolean {.
    importc: "gtk_activatable_get_use_action_appearance", libgtk.}
proc use_action_appearance*(
    activatable: Activatable): gboolean {.
    importc: "gtk_activatable_get_use_action_appearance", libgtk.}
proc do_set_related_action*(activatable: Activatable; 
    action: Action) {.importc: "gtk_activatable_do_set_related_action", 
                             libgtk.}

type 
  TranslateFunc* = proc (path: cstring; func_data: gpointer): cstring {.cdecl.}
type 
  StockItem* =  ptr StockItemObj
  StockItemPtr* = ptr StockItemObj
  StockItemObj* = object 
    stock_id*: cstring
    label*: cstring
    modifier*: gdk3.ModifierType
    keyval*: guint
    translation_domain*: cstring

proc stock_add*(items: StockItem; n_items: guint) {.
    importc: "gtk_stock_add", libgtk.}
proc stock_add_static*(items: StockItem; n_items: guint) {.
    importc: "gtk_stock_add_static", libgtk.}
proc stock_lookup*(stock_id: cstring; item: StockItem): gboolean {.
    importc: "gtk_stock_lookup", libgtk.}
proc stock_list_ids*(): glib.GSList {.importc: "gtk_stock_list_ids", 
    libgtk.}
proc copy*(item: StockItem): StockItem {.
    importc: "gtk_stock_item_copy", libgtk.}
proc free*(item: StockItem) {.
    importc: "gtk_stock_item_free", libgtk.}
proc stock_set_translate_func*(domain: cstring; `func`: TranslateFunc; 
                                   data: gpointer; notify: GDestroyNotify) {.
    importc: "gtk_stock_set_translate_func", libgtk.}
when not DISABLE_DEPRECATED: 
  const 
    STOCK_ABOUT* = "gtk-about"
  const 
    STOCK_ADD* = "gtk-add"
  const 
    STOCK_APPLY* = "gtk-apply"
  const 
    STOCK_BOLD* = "gtk-bold"
  const 
    STOCK_CANCEL* = "gtk-cancel"
  const 
    STOCK_CAPS_LOCK_WARNING* = "gtk-caps-lock-warning"
  const 
    STOCK_CDROM* = "gtk-cdrom"
  const 
    STOCK_CLEAR* = "gtk-clear"
  const 
    STOCK_CLOSE* = "gtk-close"
  const 
    STOCK_COLOR_PICKER* = "gtk-color-picker"
  const 
    STOCK_CONNECT* = "gtk-connect"
  const 
    STOCK_CONVERT* = "gtk-convert"
  const 
    STOCK_COPY* = "gtk-copy"
  const 
    STOCK_CUT* = "gtk-cut"
  const 
    STOCK_DELETE* = "gtk-delete"
  const STOCK_DIALOG_AUTHENTICATION* = "gtk-dialog-authentication"
  const 
    STOCK_DIALOG_INFO* = "gtk-dialog-info"
  const 
    STOCK_DIALOG_WARNING* = "gtk-dialog-warning"
  const 
    STOCK_DIALOG_ERROR* = "gtk-dialog-error"
  const 
    STOCK_DIALOG_QUESTION* = "gtk-dialog-question"
  const 
    STOCK_DIRECTORY* = "gtk-directory"
  const 
    STOCK_DISCARD* = "gtk-discard"
  const 
    STOCK_DISCONNECT* = "gtk-disconnect"
  const 
    STOCK_DND* = "gtk-dnd"
  const 
    STOCK_DND_MULTIPLE* = "gtk-dnd-multiple"
  const 
    STOCK_EDIT* = "gtk-edit"
  const 
    STOCK_EXECUTE* = "gtk-execute"
  const 
    STOCK_FILE* = "gtk-file"
  const 
    STOCK_FIND* = "gtk-find"
  const 
    STOCK_FIND_AND_REPLACE* = "gtk-find-and-replace"
  const 
    STOCK_FLOPPY* = "gtk-floppy"
  const 
    STOCK_FULLSCREEN* = "gtk-fullscreen"
  const 
    STOCK_GOTO_BOTTOM* = "gtk-goto-bottom"
  const 
    STOCK_GOTO_FIRST* = "gtk-goto-first"
  const 
    STOCK_GOTO_LAST* = "gtk-goto-last"
  const 
    STOCK_GOTO_TOP* = "gtk-goto-top"
  const 
    STOCK_GO_BACK* = "gtk-go-back"
  const 
    STOCK_GO_DOWN* = "gtk-go-down"
  const 
    STOCK_GO_FORWARD* = "gtk-go-forward"
  const 
    STOCK_GO_UP* = "gtk-go-up"
  const 
    STOCK_HARDDISK* = "gtk-harddisk"
  const 
    STOCK_HELP* = "gtk-help"
  const 
    STOCK_HOME* = "gtk-home"
  const 
    STOCK_INDEX* = "gtk-index"
  const 
    STOCK_INDENT* = "gtk-indent"
  const 
    STOCK_INFO* = "gtk-info"
  const 
    STOCK_ITALIC* = "gtk-italic"
  const 
    STOCK_JUMP_TO* = "gtk-jump-to"
  const 
    STOCK_JUSTIFY_CENTER* = "gtk-justify-center"
  const 
    STOCK_JUSTIFY_FILL* = "gtk-justify-fill"
  const 
    STOCK_JUSTIFY_LEFT* = "gtk-justify-left"
  const 
    STOCK_JUSTIFY_RIGHT* = "gtk-justify-right"
  const 
    STOCK_LEAVE_FULLSCREEN* = "gtk-leave-fullscreen"
  const 
    STOCK_MISSING_IMAGE* = "gtk-missing-image"
  const 
    STOCK_MEDIA_FORWARD* = "gtk-media-forward"
  const 
    STOCK_MEDIA_NEXT* = "gtk-media-next"
  const 
    STOCK_MEDIA_PAUSE* = "gtk-media-pause"
  const 
    STOCK_MEDIA_PLAY* = "gtk-media-play"
  const 
    STOCK_MEDIA_PREVIOUS* = "gtk-media-previous"
  const 
    STOCK_MEDIA_RECORD* = "gtk-media-record"
  const 
    STOCK_MEDIA_REWIND* = "gtk-media-rewind"
  const 
    STOCK_MEDIA_STOP* = "gtk-media-stop"
  const 
    STOCK_NETWORK* = "gtk-network"
  const 
    STOCK_NEW* = "gtk-new"
  const 
    STOCK_NO* = "gtk-no"
  const 
    STOCK_OK* = "gtk-ok"
  const 
    STOCK_OPEN* = "gtk-open"
  const
    STOCK_ORIENTATION_PORTRAIT* = "gtk-orientation-portrait"
  const 
    STOCK_ORIENTATION_LANDSCAPE* = "gtk-orientation-landscape"
  const 
    STOCK_ORIENTATION_REVERSE_LANDSCAPE* = "gtk-orientation-reverse-landscape"
  const 
    STOCK_ORIENTATION_REVERSE_PORTRAIT* = "gtk-orientation-reverse-portrait"
  const 
    STOCK_PAGE_SETUP* = "gtk-page-setup"
  const 
    STOCK_PASTE* = "gtk-paste"
  const 
    STOCK_PREFERENCES* = "gtk-preferences"
  const 
    STOCK_PRINT* = "gtk-print"
  const 
    STOCK_PRINT_ERROR* = "gtk-print-error"
  const 
    STOCK_PRINT_PAUSED* = "gtk-print-paused"
  const 
    STOCK_PRINT_PREVIEW* = "gtk-print-preview"
  const 
    STOCK_PRINT_REPORT* = "gtk-print-report"
  const 
    STOCK_PRINT_WARNING* = "gtk-print-warning"
  const 
    STOCK_PROPERTIES* = "gtk-properties"
  const 
    STOCK_QUIT* = "gtk-quit"
  const 
    STOCK_REDO* = "gtk-redo"
  const 
    STOCK_REFRESH* = "gtk-refresh"
  const 
    STOCK_REMOVE* = "gtk-remove"
  const 
    STOCK_REVERT_TO_SAVED* = "gtk-revert-to-saved"
  const 
    STOCK_SAVE* = "gtk-save"
  const 
    STOCK_SAVE_AS* = "gtk-save-as"
  const 
    STOCK_SELECT_ALL* = "gtk-select-all"
  const 
    STOCK_SELECT_COLOR* = "gtk-select-color"
  const 
    STOCK_SELECT_FONT* = "gtk-select-font"
  const 
    STOCK_SORT_ASCENDING* = "gtk-sort-ascending"
  const 
    STOCK_SORT_DESCENDING* = "gtk-sort-descending"
  const 
    STOCK_SPELL_CHECK* = "gtk-spell-check"
  const 
    STOCK_STOP* = "gtk-stop"
  const 
    STOCK_STRIKETHROUGH* = "gtk-strikethrough"
  const 
    STOCK_UNDELETE* = "gtk-undelete"
  const 
    STOCK_UNDERLINE* = "gtk-underline"
  const 
    STOCK_UNDO* = "gtk-undo"
  const 
    STOCK_UNINDENT* = "gtk-unindent"
  const 
    STOCK_YES* = "gtk-yes"
  const 
    STOCK_ZOOM_100* = "gtk-zoom-100"
  const 
    STOCK_ZOOM_FIT* = "gtk-zoom-fit"
  const 
    STOCK_ZOOM_IN* = "gtk-zoom-in"
  const 
    STOCK_ZOOM_OUT* = "gtk-zoom-out"

template gtk_action_group*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, action_group_get_type(), ActionGroupObj))

template gtk_action_group_class*(vtable: expr): expr = 
  (g_type_check_class_cast(vtable, action_group_get_type(), 
                           ActionGroupClassObj))

template gtk_is_action_group*(obj: expr): expr = 
  (g_type_check_instance_type(obj, action_group_get_type()))

template gtk_is_action_group_class*(vtable: expr): expr = 
  (g_type_check_class_type(vtable, action_group_get_type()))

template gtk_action_group_get_class*(inst: expr): expr = 
  (g_type_instance_get_class(inst, action_group_get_type(), 
                             ActionGroupClassObj))

type 
  ActionGroupPrivateObj = object 
  
type 
  ActionGroup* =  ptr ActionGroupObj
  ActionGroupPtr* = ptr ActionGroupObj
  ActionGroupObj*{.final.} = object of GObjectObj
    priv128: ptr ActionGroupPrivateObj

type 
  ActionGroupClass* =  ptr ActionGroupClassObj
  ActionGroupClassPtr* = ptr ActionGroupClassObj
  ActionGroupClassObj*{.final.} = object of GObjectClassObj
    get_action*: proc (action_group: ActionGroup; 
                       action_name: cstring): Action {.cdecl.}
    gtk_reserved1331: proc () {.cdecl.}
    gtk_reserved1332: proc () {.cdecl.}
    gtk_reserved1333: proc () {.cdecl.}
    gtk_reserved1334: proc () {.cdecl.}

type 
  ActionEntry* =  ptr ActionEntryObj
  ActionEntryPtr* = ptr ActionEntryObj
  ActionEntryObj* = object 
    name*: cstring
    stock_id*: cstring
    label*: cstring
    accelerator*: cstring
    tooltip*: cstring
    callback*: GCallback

type 
  ToggleActionEntry* =  ptr ToggleActionEntryObj
  ToggleActionEntryPtr* = ptr ToggleActionEntryObj
  ToggleActionEntryObj* = object 
    name*: cstring
    stock_id*: cstring
    label*: cstring
    accelerator*: cstring
    tooltip*: cstring
    callback*: GCallback
    is_active*: gboolean

type 
  RadioActionEntry* =  ptr RadioActionEntryObj
  RadioActionEntryPtr* = ptr RadioActionEntryObj
  RadioActionEntryObj* = object 
    name*: cstring
    stock_id*: cstring
    label*: cstring
    accelerator*: cstring
    tooltip*: cstring
    value*: gint

proc action_group_get_type*(): GType {.
    importc: "gtk_action_group_get_type", libgtk.}
proc action_group_new*(name: cstring): ActionGroup {.
    importc: "gtk_action_group_new", libgtk.}
proc get_name*(action_group: ActionGroup): cstring {.
    importc: "gtk_action_group_get_name", libgtk.}
proc name*(action_group: ActionGroup): cstring {.
    importc: "gtk_action_group_get_name", libgtk.}
proc get_sensitive*(action_group: ActionGroup): gboolean {.
    importc: "gtk_action_group_get_sensitive", libgtk.}
proc sensitive*(action_group: ActionGroup): gboolean {.
    importc: "gtk_action_group_get_sensitive", libgtk.}
proc set_sensitive*(action_group: ActionGroup; 
                                     sensitive: gboolean) {.
    importc: "gtk_action_group_set_sensitive", libgtk.}
proc `sensitive=`*(action_group: ActionGroup; 
                                     sensitive: gboolean) {.
    importc: "gtk_action_group_set_sensitive", libgtk.}
proc get_visible*(action_group: ActionGroup): gboolean {.
    importc: "gtk_action_group_get_visible", libgtk.}
proc visible*(action_group: ActionGroup): gboolean {.
    importc: "gtk_action_group_get_visible", libgtk.}
proc set_visible*(action_group: ActionGroup; 
                                   visible: gboolean) {.
    importc: "gtk_action_group_set_visible", libgtk.}
proc `visible=`*(action_group: ActionGroup; 
                                   visible: gboolean) {.
    importc: "gtk_action_group_set_visible", libgtk.}
proc get_accel_group*(action_group: ActionGroup): AccelGroup {.
    importc: "gtk_action_group_get_accel_group", libgtk.}
proc accel_group*(action_group: ActionGroup): AccelGroup {.
    importc: "gtk_action_group_get_accel_group", libgtk.}
proc set_accel_group*(action_group: ActionGroup; 
    accel_group: AccelGroup) {.importc: "gtk_action_group_set_accel_group", 
                                      libgtk.}
proc `accel_group=`*(action_group: ActionGroup; 
    accel_group: AccelGroup) {.importc: "gtk_action_group_set_accel_group", 
                                      libgtk.}
proc get_action*(action_group: ActionGroup; 
                                  action_name: cstring): Action {.
    importc: "gtk_action_group_get_action", libgtk.}
proc action*(action_group: ActionGroup; 
                                  action_name: cstring): Action {.
    importc: "gtk_action_group_get_action", libgtk.}
proc list_actions*(action_group: ActionGroup): glib.GList {.
    importc: "gtk_action_group_list_actions", libgtk.}
proc add_action*(action_group: ActionGroup; 
                                  action: Action) {.
    importc: "gtk_action_group_add_action", libgtk.}
proc add_action_with_accel*(action_group: ActionGroup; 
    action: Action; accelerator: cstring) {.
    importc: "gtk_action_group_add_action_with_accel", libgtk.}
proc remove_action*(action_group: ActionGroup; 
                                     action: Action) {.
    importc: "gtk_action_group_remove_action", libgtk.}
proc add_actions*(action_group: ActionGroup; 
                                   entries: ActionEntry; 
                                   n_entries: guint; user_data: gpointer) {.
    importc: "gtk_action_group_add_actions", libgtk.}
proc add_toggle_actions*(action_group: ActionGroup; 
    entries: ToggleActionEntry; n_entries: guint; user_data: gpointer) {.
    importc: "gtk_action_group_add_toggle_actions", libgtk.}
proc add_radio_actions*(action_group: ActionGroup; 
    entries: RadioActionEntry; n_entries: guint; value: gint; 
    on_change: GCallback; user_data: gpointer) {.
    importc: "gtk_action_group_add_radio_actions", libgtk.}
proc add_actions_full*(action_group: ActionGroup; 
    entries: ActionEntry; n_entries: guint; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_action_group_add_actions_full", 
                               libgtk.}
proc add_toggle_actions_full*(
    action_group: ActionGroup; entries: ToggleActionEntry; 
    n_entries: guint; user_data: gpointer; destroy: GDestroyNotify) {.
    importc: "gtk_action_group_add_toggle_actions_full", libgtk.}
proc add_radio_actions_full*(
    action_group: ActionGroup; entries: RadioActionEntry; 
    n_entries: guint; value: gint; on_change: GCallback; user_data: gpointer; 
    destroy: GDestroyNotify) {.importc: "gtk_action_group_add_radio_actions_full", 
                               libgtk.}
proc set_translate_func*(action_group: ActionGroup; 
    `func`: TranslateFunc; data: gpointer; notify: GDestroyNotify) {.
    importc: "gtk_action_group_set_translate_func", libgtk.}
proc `translate_func=`*(action_group: ActionGroup; 
    `func`: TranslateFunc; data: gpointer; notify: GDestroyNotify) {.
    importc: "gtk_action_group_set_translate_func", libgtk.}
proc set_translation_domain*(
    action_group: ActionGroup; domain: cstring) {.
    importc: "gtk_action_group_set_translation_domain", libgtk.}
proc `translation_domain=`*(
    action_group: ActionGroup; domain: cstring) {.
    importc: "gtk_action_group_set_translation_domain", libgtk.}
proc translate_string*(action_group: ActionGroup; 
    string: cstring): cstring {.importc: "gtk_action_group_translate_string", 
                                    libgtk.}

template gtk_alignment*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, alignment_get_type(), AlignmentObj))

template gtk_alignment_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, alignment_get_type(), AlignmentClassObj))

template gtk_is_alignment*(obj: expr): expr = 
  (g_type_check_instance_type(obj, alignment_get_type()))

template gtk_is_alignment_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, alignment_get_type()))

template gtk_alignment_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, alignment_get_type(), AlignmentClassObj))

type 
  AlignmentPrivateObj = object 
  
type 
  Alignment* =  ptr AlignmentObj
  AlignmentPtr* = ptr AlignmentObj
  AlignmentObj*{.final.} = object of BinObj
    priv129: ptr AlignmentPrivateObj

type 
  AlignmentClass* =  ptr AlignmentClassObj
  AlignmentClassPtr* = ptr AlignmentClassObj
  AlignmentClassObj*{.final.} = object of BinClassObj
    gtk_reserved1341: proc () {.cdecl.}
    gtk_reserved1342: proc () {.cdecl.}
    gtk_reserved1343: proc () {.cdecl.}
    gtk_reserved1344: proc () {.cdecl.}

proc alignment_get_type*(): GType {.importc: "gtk_alignment_get_type", 
    libgtk.}
proc alignment_new*(xalign: gfloat; yalign: gfloat; xscale: gfloat; 
                        yscale: gfloat): Alignment {.
    importc: "gtk_alignment_new", libgtk.}
proc set*(alignment: Alignment; xalign: gfloat; 
                        yalign: gfloat; xscale: gfloat; yscale: gfloat) {.
    importc: "gtk_alignment_set", libgtk.}
proc set_padding*(alignment: Alignment; 
                                padding_top: guint; padding_bottom: guint; 
                                padding_left: guint; padding_right: guint) {.
    importc: "gtk_alignment_set_padding", libgtk.}
proc `padding=`*(alignment: Alignment; 
                                padding_top: guint; padding_bottom: guint; 
                                padding_left: guint; padding_right: guint) {.
    importc: "gtk_alignment_set_padding", libgtk.}
proc get_padding*(alignment: Alignment; 
                                padding_top: var guint; 
                                padding_bottom: var guint; 
                                padding_left: var guint; 
                                padding_right: var guint) {.
    importc: "gtk_alignment_get_padding", libgtk.}

template gtk_color_selection*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_selection_get_type(), 
                              ColorSelectionObj))

template gtk_color_selection_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, color_selection_get_type(), 
                           ColorSelectionClassObj))

template gtk_is_color_selection*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_selection_get_type()))

template gtk_is_color_selection_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, color_selection_get_type()))

template gtk_color_selection_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, color_selection_get_type(), 
                             ColorSelectionClassObj))

type 
  ColorSelectionPrivateObj = object 
  
type 
  ColorSelectionChangePaletteFunc* = proc (colors: gdk3.Color; 
      n_colors: gint) {.cdecl.}
type 
  ColorSelectionChangePaletteWithScreenFunc* = proc (screen: gdk3.Screen; 
      colors: gdk3.Color; n_colors: gint) {.cdecl.}
type 
  ColorSelection* =  ptr ColorSelectionObj
  ColorSelectionPtr* = ptr ColorSelectionObj
  ColorSelectionObj*{.final.} = object of BoxObj
    private_data*: ptr ColorSelectionPrivateObj

type 
  ColorSelectionClass* =  ptr ColorSelectionClassObj
  ColorSelectionClassPtr* = ptr ColorSelectionClassObj
  ColorSelectionClassObj*{.final.} = object of BoxClassObj
    color_changed*: proc (color_selection: ColorSelection) {.cdecl.}
    gtk_reserved1351: proc () {.cdecl.}
    gtk_reserved1352: proc () {.cdecl.}
    gtk_reserved1353: proc () {.cdecl.}
    gtk_reserved1354: proc () {.cdecl.}

proc color_selection_get_type*(): GType {.
    importc: "gtk_color_selection_get_type", libgtk.}
proc color_selection_new*(): ColorSelection {.
    importc: "gtk_color_selection_new", libgtk.}
proc get_has_opacity_control*(
    colorsel: ColorSelection): gboolean {.
    importc: "gtk_color_selection_get_has_opacity_control", libgtk.}
proc has_opacity_control*(
    colorsel: ColorSelection): gboolean {.
    importc: "gtk_color_selection_get_has_opacity_control", libgtk.}
proc set_has_opacity_control*(
    colorsel: ColorSelection; has_opacity: gboolean) {.
    importc: "gtk_color_selection_set_has_opacity_control", libgtk.}
proc `has_opacity_control=`*(
    colorsel: ColorSelection; has_opacity: gboolean) {.
    importc: "gtk_color_selection_set_has_opacity_control", libgtk.}
proc get_has_palette*(colorsel: ColorSelection): gboolean {.
    importc: "gtk_color_selection_get_has_palette", libgtk.}
proc has_palette*(colorsel: ColorSelection): gboolean {.
    importc: "gtk_color_selection_get_has_palette", libgtk.}
proc set_has_palette*(colorsel: ColorSelection; 
    has_palette: gboolean) {.importc: "gtk_color_selection_set_has_palette", 
                             libgtk.}
proc `has_palette=`*(colorsel: ColorSelection; 
    has_palette: gboolean) {.importc: "gtk_color_selection_set_has_palette", 
                             libgtk.}
proc set_current_alpha*(colorsel: ColorSelection; 
    alpha: guint16) {.importc: "gtk_color_selection_set_current_alpha", 
                      libgtk.}
proc `current_alpha=`*(colorsel: ColorSelection; 
    alpha: guint16) {.importc: "gtk_color_selection_set_current_alpha", 
                      libgtk.}
proc get_current_alpha*(colorsel: ColorSelection): guint16 {.
    importc: "gtk_color_selection_get_current_alpha", libgtk.}
proc current_alpha*(colorsel: ColorSelection): guint16 {.
    importc: "gtk_color_selection_get_current_alpha", libgtk.}
proc set_previous_alpha*(colorsel: ColorSelection; 
    alpha: guint16) {.importc: "gtk_color_selection_set_previous_alpha", 
                      libgtk.}
proc `previous_alpha=`*(colorsel: ColorSelection; 
    alpha: guint16) {.importc: "gtk_color_selection_set_previous_alpha", 
                      libgtk.}
proc get_previous_alpha*(colorsel: ColorSelection): guint16 {.
    importc: "gtk_color_selection_get_previous_alpha", libgtk.}
proc previous_alpha*(colorsel: ColorSelection): guint16 {.
    importc: "gtk_color_selection_get_previous_alpha", libgtk.}
proc set_current_rgba*(colorsel: ColorSelection; 
    rgba: gdk3.RGBA) {.importc: "gtk_color_selection_set_current_rgba", 
                         libgtk.}
proc `current_rgba=`*(colorsel: ColorSelection; 
    rgba: gdk3.RGBA) {.importc: "gtk_color_selection_set_current_rgba", 
                         libgtk.}
proc get_current_rgba*(colorsel: ColorSelection; 
    rgba: var gdk3.RGBAObj) {.importc: "gtk_color_selection_get_current_rgba", 
                         libgtk.}
proc set_previous_rgba*(colorsel: ColorSelection; 
    rgba: gdk3.RGBA) {.importc: "gtk_color_selection_set_previous_rgba", 
                         libgtk.}
proc `previous_rgba=`*(colorsel: ColorSelection; 
    rgba: gdk3.RGBA) {.importc: "gtk_color_selection_set_previous_rgba", 
                         libgtk.}
proc get_previous_rgba*(colorsel: ColorSelection; 
    rgba: var gdk3.RGBAObj) {.importc: "gtk_color_selection_get_previous_rgba", 
                         libgtk.}
proc is_adjusting*(colorsel: ColorSelection): gboolean {.
    importc: "gtk_color_selection_is_adjusting", libgtk.}
proc color_selection_palette_from_string*(str: cstring; 
    colors: var gdk3.Color; n_colors: var gint): gboolean {.
    importc: "gtk_color_selection_palette_from_string", libgtk.}
proc color_selection_palette_to_string*(colors: gdk3.Color; 
    n_colors: gint): cstring {.importc: "gtk_color_selection_palette_to_string", 
                                 libgtk.}
proc color_selection_set_change_palette_with_screen_hook*(
    `func`: ColorSelectionChangePaletteWithScreenFunc): ColorSelectionChangePaletteWithScreenFunc {.
    importc: "gtk_color_selection_set_change_palette_with_screen_hook", 
    libgtk.}
proc set_current_color*(colorsel: ColorSelection; 
    color: gdk3.Color) {.importc: "gtk_color_selection_set_current_color", 
                           libgtk.}
proc `current_color=`*(colorsel: ColorSelection; 
    color: gdk3.Color) {.importc: "gtk_color_selection_set_current_color", 
                           libgtk.}
proc get_current_color*(colorsel: ColorSelection; 
    color: var gdk3.ColorObj) {.importc: "gtk_color_selection_get_current_color", 
                           libgtk.}
proc set_previous_color*(colorsel: ColorSelection; 
    color: gdk3.Color) {.importc: "gtk_color_selection_set_previous_color", 
                           libgtk.}
proc `previous_color=`*(colorsel: ColorSelection; 
    color: gdk3.Color) {.importc: "gtk_color_selection_set_previous_color", 
                           libgtk.}
proc get_previous_color*(colorsel: ColorSelection; 
    color: var gdk3.ColorObj) {.importc: "gtk_color_selection_get_previous_color", 
                           libgtk.}

template gtk_color_selection_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, color_selection_dialog_get_type(), 
                              ColorSelectionDialogObj))

template gtk_color_selection_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, color_selection_dialog_get_type(), 
                           ColorSelectionDialogClassObj))

template gtk_is_color_selection_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, color_selection_dialog_get_type()))

template gtk_is_color_selection_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, color_selection_dialog_get_type()))

template gtk_color_selection_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, color_selection_dialog_get_type(), 
                             ColorSelectionDialogClassObj))

type 
  ColorSelectionDialogPrivateObj = object 
  
type 
  ColorSelectionDialog* =  ptr ColorSelectionDialogObj
  ColorSelectionDialogPtr* = ptr ColorSelectionDialogObj
  ColorSelectionDialogObj*{.final.} = object of DialogObj
    priv130: ptr ColorSelectionDialogPrivateObj

type 
  ColorSelectionDialogClass* =  ptr ColorSelectionDialogClassObj
  ColorSelectionDialogClassPtr* = ptr ColorSelectionDialogClassObj
  ColorSelectionDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved1361: proc () {.cdecl.}
    gtk_reserved1362: proc () {.cdecl.}
    gtk_reserved1363: proc () {.cdecl.}
    gtk_reserved1364: proc () {.cdecl.}

proc color_selection_dialog_get_type*(): GType {.
    importc: "gtk_color_selection_dialog_get_type", libgtk.}
proc color_selection_dialog_new*(title: cstring): ColorSelectionDialog {.
    importc: "gtk_color_selection_dialog_new", libgtk.}
proc get_color_selection*(
    colorsel: ColorSelectionDialog): ColorSelection {.
    importc: "gtk_color_selection_dialog_get_color_selection", libgtk.}
proc color_selection*(
    colorsel: ColorSelectionDialog): ColorSelection {.
    importc: "gtk_color_selection_dialog_get_color_selection", libgtk.}

template gtk_font_selection*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_selection_get_type(), FontSelectionObj))

template gtk_font_selection_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, font_selection_get_type(), 
                           FontSelectionClassObj))

template gtk_is_font_selection*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_selection_get_type()))

template gtk_is_font_selection_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, font_selection_get_type()))

template gtk_font_selection_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, font_selection_get_type(), 
                             FontSelectionClassObj))

template gtk_font_selection_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, font_selection_dialog_get_type(), 
                              FontSelectionDialogObj))

template gtk_font_selection_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, font_selection_dialog_get_type(), 
                           FontSelectionDialogClassObj))

template gtk_is_font_selection_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, font_selection_dialog_get_type()))

template gtk_is_font_selection_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, font_selection_dialog_get_type()))

template gtk_font_selection_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, font_selection_dialog_get_type(), 
                             FontSelectionDialogClassObj))

type 
  FontSelectionPrivateObj = object 
  
  FontSelectionDialogPrivateObj = object 
  
type 
  FontSelection* =  ptr FontSelectionObj
  FontSelectionPtr* = ptr FontSelectionObj
  FontSelectionObj*{.final.} = object of BoxObj
    priv131: ptr FontSelectionPrivateObj

type 
  FontSelectionClass* =  ptr FontSelectionClassObj
  FontSelectionClassPtr* = ptr FontSelectionClassObj
  FontSelectionClassObj*{.final.} = object of BoxClassObj
    gtk_reserved1371: proc () {.cdecl.}
    gtk_reserved1372: proc () {.cdecl.}
    gtk_reserved1373: proc () {.cdecl.}
    gtk_reserved1374: proc () {.cdecl.}

type 
  FontSelectionDialog* =  ptr FontSelectionDialogObj
  FontSelectionDialogPtr* = ptr FontSelectionDialogObj
  FontSelectionDialogObj*{.final.} = object of DialogObj
    priv132: ptr FontSelectionDialogPrivateObj

type 
  FontSelectionDialogClass* =  ptr FontSelectionDialogClassObj
  FontSelectionDialogClassPtr* = ptr FontSelectionDialogClassObj
  FontSelectionDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved1381: proc () {.cdecl.}
    gtk_reserved1382: proc () {.cdecl.}
    gtk_reserved1383: proc () {.cdecl.}
    gtk_reserved1384: proc () {.cdecl.}

proc font_selection_get_type*(): GType {.
    importc: "gtk_font_selection_get_type", libgtk.}
proc font_selection_new*(): FontSelection {.
    importc: "gtk_font_selection_new", libgtk.}
proc get_family_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_family_list", libgtk.}
proc family_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_family_list", libgtk.}
proc get_face_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_face_list", libgtk.}
proc face_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_face_list", libgtk.}
proc get_size_entry*(fontsel: FontSelection): Entry {.
    importc: "gtk_font_selection_get_size_entry", libgtk.}
proc size_entry*(fontsel: FontSelection): Entry {.
    importc: "gtk_font_selection_get_size_entry", libgtk.}
proc get_size_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_size_list", libgtk.}
proc size_list*(fontsel: FontSelection): Widget {.
    importc: "gtk_font_selection_get_size_list", libgtk.}
proc get_preview_entry*(fontsel: FontSelection): Entry {.
    importc: "gtk_font_selection_get_preview_entry", libgtk.}
proc preview_entry*(fontsel: FontSelection): Entry {.
    importc: "gtk_font_selection_get_preview_entry", libgtk.}
proc get_family*(fontsel: FontSelection): pango.FontFamily {.
    importc: "gtk_font_selection_get_family", libgtk.}
proc family*(fontsel: FontSelection): pango.FontFamily {.
    importc: "gtk_font_selection_get_family", libgtk.}
proc get_face*(fontsel: FontSelection): pango.FontFace {.
    importc: "gtk_font_selection_get_face", libgtk.}
proc face*(fontsel: FontSelection): pango.FontFace {.
    importc: "gtk_font_selection_get_face", libgtk.}
proc get_size*(fontsel: FontSelection): gint {.
    importc: "gtk_font_selection_get_size", libgtk.}
proc size*(fontsel: FontSelection): gint {.
    importc: "gtk_font_selection_get_size", libgtk.}
proc get_font_name*(fontsel: FontSelection): cstring {.
    importc: "gtk_font_selection_get_font_name", libgtk.}
proc font_name*(fontsel: FontSelection): cstring {.
    importc: "gtk_font_selection_get_font_name", libgtk.}
proc set_font_name*(fontsel: FontSelection; 
    fontname: cstring): gboolean {.importc: "gtk_font_selection_set_font_name", 
                                     libgtk.}
proc get_preview_text*(fontsel: FontSelection): cstring {.
    importc: "gtk_font_selection_get_preview_text", libgtk.}
proc preview_text*(fontsel: FontSelection): cstring {.
    importc: "gtk_font_selection_get_preview_text", libgtk.}
proc set_preview_text*(fontsel: FontSelection; 
    text: cstring) {.importc: "gtk_font_selection_set_preview_text", 
                       libgtk.}
proc `preview_text=`*(fontsel: FontSelection; 
    text: cstring) {.importc: "gtk_font_selection_set_preview_text", 
                       libgtk.}
proc font_selection_dialog_get_type*(): GType {.
    importc: "gtk_font_selection_dialog_get_type", libgtk.}
proc font_selection_dialog_new*(title: cstring): FontSelectionDialog {.
    importc: "gtk_font_selection_dialog_new", libgtk.}
proc get_ok_button*(fsd: FontSelectionDialog): Button {.
    importc: "gtk_font_selection_dialog_get_ok_button", libgtk.}
proc ok_button*(fsd: FontSelectionDialog): Button {.
    importc: "gtk_font_selection_dialog_get_ok_button", libgtk.}
proc get_cancel_button*(
    fsd: FontSelectionDialog): Button {.
    importc: "gtk_font_selection_dialog_get_cancel_button", libgtk.}
proc cancel_button*(
    fsd: FontSelectionDialog): Button {.
    importc: "gtk_font_selection_dialog_get_cancel_button", libgtk.}
proc get_font_selection*(
    fsd: FontSelectionDialog): FontSelection {.
    importc: "gtk_font_selection_dialog_get_font_selection", libgtk.}
proc font_selection*(
    fsd: FontSelectionDialog): FontSelection {.
    importc: "gtk_font_selection_dialog_get_font_selection", libgtk.}
proc get_font_name*(fsd: FontSelectionDialog): cstring {.
    importc: "gtk_font_selection_dialog_get_font_name", libgtk.}
proc font_name*(fsd: FontSelectionDialog): cstring {.
    importc: "gtk_font_selection_dialog_get_font_name", libgtk.}
proc set_font_name*(fsd: FontSelectionDialog; 
    fontname: cstring): gboolean {.importc: "gtk_font_selection_dialog_set_font_name", 
                                     libgtk.}
proc get_preview_text*(
    fsd: FontSelectionDialog): cstring {.
    importc: "gtk_font_selection_dialog_get_preview_text", libgtk.}
proc preview_text*(
    fsd: FontSelectionDialog): cstring {.
    importc: "gtk_font_selection_dialog_get_preview_text", libgtk.}
proc set_preview_text*(
    fsd: FontSelectionDialog; text: cstring) {.
    importc: "gtk_font_selection_dialog_set_preview_text", libgtk.}
proc `preview_text=`*(
    fsd: FontSelectionDialog; text: cstring) {.
    importc: "gtk_font_selection_dialog_set_preview_text", libgtk.}

proc symbolic_color_get_type*(): GType {.
    importc: "gtk_symbolic_color_get_type", libgtk.}
proc symbolic_color_new_literal*(color: gdk3.RGBA): SymbolicColor {.
    importc: "gtk_symbolic_color_new_literal", libgtk.}
proc symbolic_color_new_name*(name: cstring): SymbolicColor {.
    importc: "gtk_symbolic_color_new_name", libgtk.}
proc new_shade*(color: SymbolicColor; 
                                   factor: gdouble): SymbolicColor {.
    importc: "gtk_symbolic_color_new_shade", libgtk.}
proc new_alpha*(color: SymbolicColor; 
                                   factor: gdouble): SymbolicColor {.
    importc: "gtk_symbolic_color_new_alpha", libgtk.}
proc new_mix*(color1: SymbolicColor; 
                                 color2: SymbolicColor; factor: gdouble): SymbolicColor {.
    importc: "gtk_symbolic_color_new_mix", libgtk.}
proc symbolic_color_new_win32*(theme_class: cstring; id: gint): SymbolicColor {.
    importc: "gtk_symbolic_color_new_win32", libgtk.}
proc `ref`*(color: SymbolicColor): SymbolicColor {.
    importc: "gtk_symbolic_color_ref", libgtk.}
proc unref*(color: SymbolicColor) {.
    importc: "gtk_symbolic_color_unref", libgtk.}
proc to_string*(color: SymbolicColor): cstring {.
    importc: "gtk_symbolic_color_to_string", libgtk.}
proc resolve*(color: SymbolicColor; 
                                 props: StyleProperties; 
                                 resolved_color: gdk3.RGBA): gboolean {.
    importc: "gtk_symbolic_color_resolve", libgtk.}

proc gradient_get_type*(): GType {.importc: "gtk_gradient_get_type", 
    libgtk.}
proc gradient_new_linear*(x0: gdouble; y0: gdouble; x1: gdouble; 
                              y1: gdouble): Gradient {.
    importc: "gtk_gradient_new_linear", libgtk.}
proc gradient_new_radial*(x0: gdouble; y0: gdouble; radius0: gdouble; 
                              x1: gdouble; y1: gdouble; radius1: gdouble): Gradient {.
    importc: "gtk_gradient_new_radial", libgtk.}
proc add_color_stop*(gradient: Gradient; offset: gdouble; 
                                  color: SymbolicColor) {.
    importc: "gtk_gradient_add_color_stop", libgtk.}
proc `ref`*(gradient: Gradient): Gradient {.
    importc: "gtk_gradient_ref", libgtk.}
proc unref*(gradient: Gradient) {.
    importc: "gtk_gradient_unref", libgtk.}
proc resolve*(gradient: Gradient; 
                           props: StyleProperties; 
                           resolved_gradient: var cairo.Pattern): gboolean {.
    importc: "gtk_gradient_resolve", libgtk.}
proc resolve_for_context*(gradient: Gradient; 
    context: StyleContext): cairo.Pattern {.
    importc: "gtk_gradient_resolve_for_context", libgtk.}
proc to_string*(gradient: Gradient): cstring {.
    importc: "gtk_gradient_to_string", libgtk.}

template gtk_handle_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, handle_box_get_type(), HandleBoxObj))

template gtk_handle_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, handle_box_get_type(), HandleBoxClassObj))

template gtk_is_handle_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, handle_box_get_type()))

template gtk_is_handle_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, handle_box_get_type()))

template gtk_handle_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, handle_box_get_type(), HandleBoxClassObj))

type 
  HandleBoxPrivateObj = object 
  
type 
  HandleBox* =  ptr HandleBoxObj
  HandleBoxPtr* = ptr HandleBoxObj
  HandleBoxObj*{.final.} = object of BinObj
    priv133: ptr HandleBoxPrivateObj

type 
  HandleBoxClass* =  ptr HandleBoxClassObj
  HandleBoxClassPtr* = ptr HandleBoxClassObj
  HandleBoxClassObj*{.final.} = object of BinClassObj
    child_attached*: proc (handle_box: HandleBox; child: Widget) {.cdecl.}
    child_detached*: proc (handle_box: HandleBox; child: Widget) {.cdecl.}
    gtk_reserved1391: proc () {.cdecl.}
    gtk_reserved1392: proc () {.cdecl.}
    gtk_reserved1393: proc () {.cdecl.}
    gtk_reserved1394: proc () {.cdecl.}

proc handle_box_get_type*(): GType {.importc: "gtk_handle_box_get_type", 
    libgtk.}
proc handle_box_new*(): HandleBox {.importc: "gtk_handle_box_new", 
    libgtk.}
proc set_shadow_type*(handle_box: HandleBox; 
                                     `type`: ShadowType) {.
    importc: "gtk_handle_box_set_shadow_type", libgtk.}
proc `shadow_type=`*(handle_box: HandleBox; 
                                     `type`: ShadowType) {.
    importc: "gtk_handle_box_set_shadow_type", libgtk.}
proc get_shadow_type*(handle_box: HandleBox): ShadowType {.
    importc: "gtk_handle_box_get_shadow_type", libgtk.}
proc shadow_type*(handle_box: HandleBox): ShadowType {.
    importc: "gtk_handle_box_get_shadow_type", libgtk.}
proc set_handle_position*(handle_box: HandleBox; 
    position: PositionType) {.importc: "gtk_handle_box_set_handle_position", 
                                 libgtk.}
proc `handle_position=`*(handle_box: HandleBox; 
    position: PositionType) {.importc: "gtk_handle_box_set_handle_position", 
                                 libgtk.}
proc get_handle_position*(handle_box: HandleBox): PositionType {.
    importc: "gtk_handle_box_get_handle_position", libgtk.}
proc handle_position*(handle_box: HandleBox): PositionType {.
    importc: "gtk_handle_box_get_handle_position", libgtk.}
proc set_snap_edge*(handle_box: HandleBox; 
                                   edge: PositionType) {.
    importc: "gtk_handle_box_set_snap_edge", libgtk.}
proc `snap_edge=`*(handle_box: HandleBox; 
                                   edge: PositionType) {.
    importc: "gtk_handle_box_set_snap_edge", libgtk.}
proc get_snap_edge*(handle_box: HandleBox): PositionType {.
    importc: "gtk_handle_box_get_snap_edge", libgtk.}
proc snap_edge*(handle_box: HandleBox): PositionType {.
    importc: "gtk_handle_box_get_snap_edge", libgtk.}
proc get_child_detached*(handle_box: HandleBox): gboolean {.
    importc: "gtk_handle_box_get_child_detached", libgtk.}
proc child_detached*(handle_box: HandleBox): gboolean {.
    importc: "gtk_handle_box_get_child_detached", libgtk.}

template gtk_hbutton_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hbutton_box_get_type(), HButtonBoxObj))

template gtk_hbutton_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hbutton_box_get_type(), HButtonBoxClassObj))

template gtk_is_hbutton_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hbutton_box_get_type()))

template gtk_is_hbutton_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hbutton_box_get_type()))

template gtk_hbutton_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hbutton_box_get_type(), HButtonBoxClassObj))

type 
  HButtonBox* =  ptr HButtonBoxObj
  HButtonBoxPtr* = ptr HButtonBoxObj
  HButtonBoxObj*{.final.} = object of ButtonBoxObj

type 
  HButtonBoxClass* =  ptr HButtonBoxClassObj
  HButtonBoxClassPtr* = ptr HButtonBoxClassObj
  HButtonBoxClassObj*{.final.} = object of ButtonBoxClassObj

proc hbutton_box_get_type*(): GType {.importc: "gtk_hbutton_box_get_type", 
    libgtk.}
proc hbutton_box_new*(): HbuttonBox {.importc: "gtk_hbutton_box_new", 
    libgtk.}

template gtk_hbox*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hbox_get_type(), HBoxObj))

template gtk_hbox_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hbox_get_type(), HBoxClassObj))

template gtk_is_hbox*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hbox_get_type()))

template gtk_is_hbox_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hbox_get_type()))

template gtk_hbox_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hbox_get_type(), HBoxClassObj))

type 
  HBox* =  ptr HBoxObj
  HBoxPtr* = ptr HBoxObj
  HBoxObj*{.final.} = object of BoxObj

type 
  HBoxClass* =  ptr HBoxClassObj
  HBoxClassPtr* = ptr HBoxClassObj
  HBoxClassObj*{.final.} = object of BoxClassObj

proc hbox_get_type*(): GType {.importc: "gtk_hbox_get_type", libgtk.}
proc hbox_new*(homogeneous: gboolean; spacing: gint): Hbox {.
    importc: "gtk_hbox_new", libgtk.}

template gtk_hpaned*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hpaned_get_type(), HPanedObj))

template gtk_hpaned_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hpaned_get_type(), HPanedClassObj))

template gtk_is_hpaned*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hpaned_get_type()))

template gtk_is_hpaned_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hpaned_get_type()))

template gtk_hpaned_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hpaned_get_type(), HPanedClassObj))

type 
  HPaned* =  ptr HPanedObj
  HPanedPtr* = ptr HPanedObj
  HPanedObj*{.final.} = object of PanedObj

type 
  HPanedClass* =  ptr HPanedClassObj
  HPanedClassPtr* = ptr HPanedClassObj
  HPanedClassObj*{.final.} = object of PanedClassObj

proc hpaned_get_type*(): GType {.importc: "gtk_hpaned_get_type", 
                                     libgtk.}
proc hpaned_new*(): Hpaned {.importc: "gtk_hpaned_new", libgtk.}

template gtk_hsv*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hsv_get_type(), HSVObj))

template gtk_hsv_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hsv_get_type(), HSVClassObj))

template gtk_is_hsv*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hsv_get_type()))

template gtk_is_hsv_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hsv_get_type()))

template gtk_hsv_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hsv_get_type(), HSVClassObj))

type 
  HSVPrivateObj = object 
  
type 
  HSV* =  ptr HSVObj
  HSVPtr* = ptr HSVObj
  HSVObj*{.final.} = object of WidgetObj
    priv134: ptr HSVPrivateObj

type 
  HSVClass* =  ptr HSVClassObj
  HSVClassPtr* = ptr HSVClassObj
  HSVClassObj*{.final.} = object of WidgetClassObj
    changed*: proc (hsv: HSV) {.cdecl.}
    move*: proc (hsv: HSV; `type`: DirectionType) {.cdecl.}
    gtk_reserved1401: proc () {.cdecl.}
    gtk_reserved1402: proc () {.cdecl.}
    gtk_reserved1403: proc () {.cdecl.}
    gtk_reserved1404: proc () {.cdecl.}

proc hsv_get_type*(): GType {.importc: "gtk_hsv_get_type", libgtk.}
proc hsv_new*(): Hsv {.importc: "gtk_hsv_new", libgtk.}
proc set_color*(hsv: HSV; h: cdouble; s: cdouble; v: cdouble) {.
    importc: "gtk_hsv_set_color", libgtk.}
proc `color=`*(hsv: HSV; h: cdouble; s: cdouble; v: cdouble) {.
    importc: "gtk_hsv_set_color", libgtk.}
proc get_color*(hsv: HSV; h: ptr gdouble; s: var gdouble; 
                        v: var gdouble) {.importc: "gtk_hsv_get_color", 
    libgtk.}
proc set_metrics*(hsv: HSV; size: gint; ring_width: gint) {.
    importc: "gtk_hsv_set_metrics", libgtk.}
proc `metrics=`*(hsv: HSV; size: gint; ring_width: gint) {.
    importc: "gtk_hsv_set_metrics", libgtk.}
proc get_metrics*(hsv: HSV; size: var gint; 
                          ring_width: var gint) {.
    importc: "gtk_hsv_get_metrics", libgtk.}
proc is_adjusting*(hsv: HSV): gboolean {.
    importc: "gtk_hsv_is_adjusting", libgtk.}

template gtk_hscale*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hscale_get_type(), HScaleObj))

template gtk_hscale_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hscale_get_type(), HScaleClassObj))

template gtk_is_hscale*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hscale_get_type()))

template gtk_is_hscale_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hscale_get_type()))

template gtk_hscale_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hscale_get_type(), HScaleClassObj))

type 
  HScale* =  ptr HScaleObj
  HScalePtr* = ptr HScaleObj
  HScaleObj*{.final.} = object of ScaleObj

type 
  HScaleClass* =  ptr HScaleClassObj
  HScaleClassPtr* = ptr HScaleClassObj
  HScaleClassObj*{.final.} = object of ScaleClassObj

proc hscale_get_type*(): GType {.importc: "gtk_hscale_get_type", 
                                     libgtk.}
proc hscale_new*(adjustment: Adjustment): Hscale {.
    importc: "gtk_hscale_new", libgtk.}
proc hscale_new_with_range*(min: gdouble; max: gdouble; step: gdouble): Hscale {.
    importc: "gtk_hscale_new_with_range", libgtk.}

template gtk_hscrollbar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hscrollbar_get_type(), HScrollbarObj))

template gtk_hscrollbar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hscrollbar_get_type(), HScrollbarClassObj))

template gtk_is_hscrollbar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hscrollbar_get_type()))

template gtk_is_hscrollbar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hscrollbar_get_type()))

template gtk_hscrollbar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hscrollbar_get_type(), HScrollbarClassObj))

type 
  HScrollbarClass* =  ptr HScrollbarClassObj
  HScrollbarClassPtr* = ptr HScrollbarClassObj
  HScrollbarClassObj*{.final.} = object of ScrollbarClassObj

proc hscrollbar_get_type*(): GType {.importc: "gtk_hscrollbar_get_type", 
    libgtk.}
proc hscrollbar_new*(adjustment: Adjustment): Hscrollbar {.
    importc: "gtk_hscrollbar_new", libgtk.}

template gtk_hseparator*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, hseparator_get_type(), HSeparatorObj))

template gtk_hseparator_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, hseparator_get_type(), HSeparatorClassObj))

template gtk_is_hseparator*(obj: expr): expr = 
  (g_type_check_instance_type(obj, hseparator_get_type()))

template gtk_is_hseparator_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, hseparator_get_type()))

template gtk_hseparator_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, hseparator_get_type(), HSeparatorClassObj))

type 
  HSeparator* =  ptr HSeparatorObj
  HSeparatorPtr* = ptr HSeparatorObj
  HSeparatorObj*{.final.} = object of SeparatorObj

type 
  HSeparatorClass* =  ptr HSeparatorClassObj
  HSeparatorClassPtr* = ptr HSeparatorClassObj
  HSeparatorClassObj*{.final.} = object of SeparatorClassObj

proc hseparator_get_type*(): GType {.importc: "gtk_hseparator_get_type", 
    libgtk.}
proc hseparator_new*(): Hseparator {.importc: "gtk_hseparator_new", 
    libgtk.}

template gtk_image_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, image_menu_item_get_type(), 
                              ImageMenuItemObj))

template gtk_image_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, image_menu_item_get_type(), 
                           ImageMenuItemClassObj))

template gtk_is_image_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, image_menu_item_get_type()))

template gtk_is_image_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, image_menu_item_get_type()))

template gtk_image_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, image_menu_item_get_type(), 
                             ImageMenuItemClassObj))

type 
  ImageMenuItemPrivateObj = object 
  
type 
  ImageMenuItem* =  ptr ImageMenuItemObj
  ImageMenuItemPtr* = ptr ImageMenuItemObj
  ImageMenuItemObj*{.final.} = object of MenuItemObj
    priv135: ptr ImageMenuItemPrivateObj

type 
  ImageMenuItemClass* =  ptr ImageMenuItemClassObj
  ImageMenuItemClassPtr* = ptr ImageMenuItemClassObj
  ImageMenuItemClassObj*{.final.} = object of MenuItemClassObj
    gtk_reserved1411: proc () {.cdecl.}
    gtk_reserved1412: proc () {.cdecl.}
    gtk_reserved1413: proc () {.cdecl.}
    gtk_reserved1414: proc () {.cdecl.}

proc image_menu_item_get_type*(): GType {.
    importc: "gtk_image_menu_item_get_type", libgtk.}
proc image_menu_item_new*(): ImageMenuItem {.
    importc: "gtk_image_menu_item_new", libgtk.}
proc image_menu_item_new_with_label*(label: cstring): ImageMenuItem {.
    importc: "gtk_image_menu_item_new_with_label", libgtk.}
proc image_menu_item_new*(label: cstring): ImageMenuItem {.
    importc: "gtk_image_menu_item_new_with_label", libgtk.}
proc image_menu_item_new_with_mnemonic*(label: cstring): ImageMenuItem {.
    importc: "gtk_image_menu_item_new_with_mnemonic", libgtk.}
proc image_menu_item_new_from_stock*(stock_id: cstring; 
    accel_group: AccelGroup): ImageMenuItem {.
    importc: "gtk_image_menu_item_new_from_stock", libgtk.}
proc set_always_show_image*(
    image_menu_item: ImageMenuItem; always_show: gboolean) {.
    importc: "gtk_image_menu_item_set_always_show_image", libgtk.}
proc `always_show_image=`*(
    image_menu_item: ImageMenuItem; always_show: gboolean) {.
    importc: "gtk_image_menu_item_set_always_show_image", libgtk.}
proc get_always_show_image*(
    image_menu_item: ImageMenuItem): gboolean {.
    importc: "gtk_image_menu_item_get_always_show_image", libgtk.}
proc always_show_image*(
    image_menu_item: ImageMenuItem): gboolean {.
    importc: "gtk_image_menu_item_get_always_show_image", libgtk.}
proc set_image*(image_menu_item: ImageMenuItem; 
                                    image: Widget) {.
    importc: "gtk_image_menu_item_set_image", libgtk.}
proc `image=`*(image_menu_item: ImageMenuItem; 
                                    image: Widget) {.
    importc: "gtk_image_menu_item_set_image", libgtk.}
proc get_image*(image_menu_item: ImageMenuItem): Image {.
    importc: "gtk_image_menu_item_get_image", libgtk.}
proc image*(image_menu_item: ImageMenuItem): Image {.
    importc: "gtk_image_menu_item_get_image", libgtk.}
proc set_use_stock*(image_menu_item: ImageMenuItem; 
    use_stock: gboolean) {.importc: "gtk_image_menu_item_set_use_stock", 
                           libgtk.}
proc `use_stock=`*(image_menu_item: ImageMenuItem; 
    use_stock: gboolean) {.importc: "gtk_image_menu_item_set_use_stock", 
                           libgtk.}
proc get_use_stock*(image_menu_item: ImageMenuItem): gboolean {.
    importc: "gtk_image_menu_item_get_use_stock", libgtk.}
proc use_stock*(image_menu_item: ImageMenuItem): gboolean {.
    importc: "gtk_image_menu_item_get_use_stock", libgtk.}
proc set_accel_group*(
    image_menu_item: ImageMenuItem; accel_group: AccelGroup) {.
    importc: "gtk_image_menu_item_set_accel_group", libgtk.}
proc `accel_group=`*(
    image_menu_item: ImageMenuItem; accel_group: AccelGroup) {.
    importc: "gtk_image_menu_item_set_accel_group", libgtk.}

template gtk_numerable_icon*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, numerable_icon_get_type(), NumerableIconObj))

template gtk_numerable_icon_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, numerable_icon_get_type(), 
                           NumerableIconClassObj))

template gtk_is_numerable_icon*(obj: expr): expr = 
  (g_type_check_instance_type(obj, numerable_icon_get_type()))

template gtk_is_numerable_icon_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, numerable_icon_get_type()))

template gtk_numerable_icon_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, numerable_icon_get_type(), 
                             NumerableIconClassObj))

type 
  NumerableIconPrivateObj = object 
  
type 
  NumerableIcon* =  ptr NumerableIconObj
  NumerableIconPtr* = ptr NumerableIconObj
  NumerableIconObj*{.final.} = object of gio.GEmblemedIconObj
    priv136: ptr NumerableIconPrivateObj

type 
  NumerableIconClass* =  ptr NumerableIconClassObj
  NumerableIconClassPtr* = ptr NumerableIconClassObj
  NumerableIconClassObj*{.final.} = object of gio.GEmblemedIconClassObj
    padding*: array[16, gpointer]

proc numerable_icon_get_type*(): GType {.
    importc: "gtk_numerable_icon_get_type", libgtk.}
proc numerable_icon_new*(base_icon: gio.GIcon): gio.GIcon {.
    importc: "gtk_numerable_icon_new", libgtk.}
proc numerable_icon_new_with_style_context*(base_icon: gio.GIcon; 
    context: StyleContext): gio.GIcon {.
    importc: "gtk_numerable_icon_new_with_style_context", libgtk.}
proc get_style_context*(self: NumerableIcon): StyleContext {.
    importc: "gtk_numerable_icon_get_style_context", libgtk.}
proc style_context*(self: NumerableIcon): StyleContext {.
    importc: "gtk_numerable_icon_get_style_context", libgtk.}
proc set_style_context*(self: NumerableIcon; 
    style: StyleContext) {.importc: "gtk_numerable_icon_set_style_context", 
                                  libgtk.}
proc `style_context=`*(self: NumerableIcon; 
    style: StyleContext) {.importc: "gtk_numerable_icon_set_style_context", 
                                  libgtk.}
proc get_count*(self: NumerableIcon): gint {.
    importc: "gtk_numerable_icon_get_count", libgtk.}
proc count*(self: NumerableIcon): gint {.
    importc: "gtk_numerable_icon_get_count", libgtk.}
proc set_count*(self: NumerableIcon; count: gint) {.
    importc: "gtk_numerable_icon_set_count", libgtk.}
proc `count=`*(self: NumerableIcon; count: gint) {.
    importc: "gtk_numerable_icon_set_count", libgtk.}
proc get_label*(self: NumerableIcon): cstring {.
    importc: "gtk_numerable_icon_get_label", libgtk.}
proc label*(self: NumerableIcon): cstring {.
    importc: "gtk_numerable_icon_get_label", libgtk.}
proc set_label*(self: NumerableIcon; 
                                   label: cstring) {.
    importc: "gtk_numerable_icon_set_label", libgtk.}
proc `label=`*(self: NumerableIcon; 
                                   label: cstring) {.
    importc: "gtk_numerable_icon_set_label", libgtk.}
proc set_background_gicon*(self: NumerableIcon; 
    icon: gio.GIcon) {.importc: "gtk_numerable_icon_set_background_gicon", 
                       libgtk.}
proc `background_gicon=`*(self: NumerableIcon; 
    icon: gio.GIcon) {.importc: "gtk_numerable_icon_set_background_gicon", 
                       libgtk.}
proc get_background_gicon*(self: NumerableIcon): gio.GIcon {.
    importc: "gtk_numerable_icon_get_background_gicon", libgtk.}
proc background_gicon*(self: NumerableIcon): gio.GIcon {.
    importc: "gtk_numerable_icon_get_background_gicon", libgtk.}
proc set_background_icon_name*(self: NumerableIcon; 
    icon_name: cstring) {.importc: "gtk_numerable_icon_set_background_icon_name", 
                            libgtk.}
proc `background_icon_name=`*(self: NumerableIcon; 
    icon_name: cstring) {.importc: "gtk_numerable_icon_set_background_icon_name", 
                            libgtk.}
proc get_background_icon_name*(self: NumerableIcon): cstring {.
    importc: "gtk_numerable_icon_get_background_icon_name", libgtk.}
proc background_icon_name*(self: NumerableIcon): cstring {.
    importc: "gtk_numerable_icon_get_background_icon_name", libgtk.}

template gtk_toggle_action*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toggle_action_get_type(), ToggleActionObj))

template gtk_toggle_action_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toggle_action_get_type(), 
                           ToggleActionClassObj))

template gtk_is_toggle_action*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toggle_action_get_type()))

template gtk_is_toggle_action_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toggle_action_get_type()))

template gtk_toggle_action_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toggle_action_get_type(), 
                             ToggleActionClassObj))

type 
  ToggleActionPrivateObj = object 
  
type 
  ToggleAction* =  ptr ToggleActionObj
  ToggleActionPtr* = ptr ToggleActionObj
  ToggleActionObj = object of ActionObj
    private_data01*: ptr ToggleActionPrivateObj

type 
  ToggleActionClass* =  ptr ToggleActionClassObj
  ToggleActionClassPtr* = ptr ToggleActionClassObj
  ToggleActionClassObj = object of ActionClassObj
    toggled*: proc (action: ToggleAction) {.cdecl.}
    gtk_reserved1421: proc () {.cdecl.}
    gtk_reserved1422: proc () {.cdecl.}
    gtk_reserved1423: proc () {.cdecl.}
    gtk_reserved1424: proc () {.cdecl.}

proc toggle_action_get_type*(): GType {.
    importc: "gtk_toggle_action_get_type", libgtk.}
proc toggle_action_new*(name: cstring; label: cstring; 
                            tooltip: cstring; stock_id: cstring): ToggleAction {.
    importc: "gtk_toggle_action_new", libgtk.}
proc toggled*(action: ToggleAction) {.
    importc: "gtk_toggle_action_toggled", libgtk.}
proc set_active*(action: ToggleAction; 
                                   is_active: gboolean) {.
    importc: "gtk_toggle_action_set_active", libgtk.}
proc `active=`*(action: ToggleAction; 
                                   is_active: gboolean) {.
    importc: "gtk_toggle_action_set_active", libgtk.}
proc get_active*(action: ToggleAction): gboolean {.
    importc: "gtk_toggle_action_get_active", libgtk.}
proc active*(action: ToggleAction): gboolean {.
    importc: "gtk_toggle_action_get_active", libgtk.}
proc set_draw_as_radio*(action: ToggleAction; 
    draw_as_radio: gboolean) {.importc: "gtk_toggle_action_set_draw_as_radio", 
                               libgtk.}
proc `draw_as_radio=`*(action: ToggleAction; 
    draw_as_radio: gboolean) {.importc: "gtk_toggle_action_set_draw_as_radio", 
                               libgtk.}
proc get_draw_as_radio*(action: ToggleAction): gboolean {.
    importc: "gtk_toggle_action_get_draw_as_radio", libgtk.}
proc draw_as_radio*(action: ToggleAction): gboolean {.
    importc: "gtk_toggle_action_get_draw_as_radio", libgtk.}

template gtk_radio_action*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_action_get_type(), RadioActionObj))

template gtk_radio_action_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_action_get_type(), RadioActionClassObj))

template gtk_is_radio_action*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_action_get_type()))

template gtk_is_radio_action_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_action_get_type()))

template gtk_radio_action_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_action_get_type(), RadioActionClassObj))

type 
  RadioActionPrivateObj = object 
  
type 
  RadioAction* =  ptr RadioActionObj
  RadioActionPtr* = ptr RadioActionObj
  RadioActionObj*{.final.} = object of ToggleActionObj
    private_data*: ptr RadioActionPrivateObj

type 
  RadioActionClass* =  ptr RadioActionClassObj
  RadioActionClassPtr* = ptr RadioActionClassObj
  RadioActionClassObj*{.final.} = object of ToggleActionClassObj
    changed*: proc (action: RadioAction; current: RadioAction) {.cdecl.}
    gtk_reserved1431: proc () {.cdecl.}
    gtk_reserved1432: proc () {.cdecl.}
    gtk_reserved1433: proc () {.cdecl.}
    gtk_reserved1434: proc () {.cdecl.}

proc radio_action_get_type*(): GType {.
    importc: "gtk_radio_action_get_type", libgtk.}
proc radio_action_new*(name: cstring; label: cstring; 
                           tooltip: cstring; stock_id: cstring; 
                           value: gint): RadioAction {.
    importc: "gtk_radio_action_new", libgtk.}
proc get_group*(action: RadioAction): glib.GSList {.
    importc: "gtk_radio_action_get_group", libgtk.}
proc group*(action: RadioAction): glib.GSList {.
    importc: "gtk_radio_action_get_group", libgtk.}
proc set_group*(action: RadioAction; group: glib.GSList) {.
    importc: "gtk_radio_action_set_group", libgtk.}
proc `group=`*(action: RadioAction; group: glib.GSList) {.
    importc: "gtk_radio_action_set_group", libgtk.}
proc join_group*(action: RadioAction; 
                                  group_source: RadioAction) {.
    importc: "gtk_radio_action_join_group", libgtk.}
proc get_current_value*(action: RadioAction): gint {.
    importc: "gtk_radio_action_get_current_value", libgtk.}
proc current_value*(action: RadioAction): gint {.
    importc: "gtk_radio_action_get_current_value", libgtk.}
proc set_current_value*(action: RadioAction; 
    current_value: gint) {.importc: "gtk_radio_action_set_current_value", 
                           libgtk.}
proc `current_value=`*(action: RadioAction; 
    current_value: gint) {.importc: "gtk_radio_action_set_current_value", 
                           libgtk.}

template gtk_rc_style*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, rc_style_get_type(), RcStyleObj))

template gtk_rc_style_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, rc_style_get_type(), RcStyleClassObj))

template gtk_is_rc_style*(obj: expr): expr = 
  (g_type_check_instance_type(obj, rc_style_get_type()))

template gtk_is_rc_style_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, rc_style_get_type()))

template gtk_rc_style_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, rc_style_get_type(), RcStyleClassObj))

type 
  RcStyleClass* =  ptr RcStyleClassObj
  RcStyleClassPtr* = ptr RcStyleClassObj
  RcStyleClassObj*{.final.} = object of GObjectClassObj
    create_rc_style*: proc (rc_style: RcStyle): RcStyle {.cdecl.}
    parse*: proc (rc_style: RcStyle; settings: Settings; 
                  scanner: glib.GScanner): guint {.cdecl.}
    merge*: proc (dest: RcStyle; src: RcStyle) {.cdecl.}
    create_style*: proc (rc_style: RcStyle): Style {.cdecl.}
    gtk_reserved1441: proc () {.cdecl.}
    gtk_reserved1442: proc () {.cdecl.}
    gtk_reserved1443: proc () {.cdecl.}
    gtk_reserved1444: proc () {.cdecl.}

proc rc_add_default_file*(filename: cstring) {.
    importc: "gtk_rc_add_default_file", libgtk.}
proc rc_set_default_files*(filenames: var cstring) {.
    importc: "gtk_rc_set_default_files", libgtk.}
proc rc_get_default_files*(): cstringArray {.
    importc: "gtk_rc_get_default_files", libgtk.}
proc rc_get_style*(widget: Widget): Style {.
    importc: "gtk_rc_get_style", libgtk.}
proc rc_get_style_by_paths*(settings: Settings; 
                                widget_path: cstring; class_path: cstring; 
                                `type`: GType): Style {.
    importc: "gtk_rc_get_style_by_paths", libgtk.}
proc rc_reparse_all_for_settings*(settings: Settings; 
                                      force_load: gboolean): gboolean {.
    importc: "gtk_rc_reparse_all_for_settings", libgtk.}
proc rc_reset_styles*(settings: Settings) {.
    importc: "gtk_rc_reset_styles", libgtk.}
proc rc_find_pixmap_in_path*(settings: Settings; 
                                 scanner: glib.GScanner; pixmap_file: cstring): cstring {.
    importc: "gtk_rc_find_pixmap_in_path", libgtk.}
proc rc_parse*(filename: cstring) {.importc: "gtk_rc_parse", libgtk.}
proc rc_parse_string*(rc_string: cstring) {.
    importc: "gtk_rc_parse_string", libgtk.}
proc rc_reparse_all*(): gboolean {.importc: "gtk_rc_reparse_all", 
    libgtk.}
proc rc_style_get_type*(): GType {.importc: "gtk_rc_style_get_type", 
    libgtk.}
proc rc_style_new*(): RcStyle {.importc: "gtk_rc_style_new", 
    libgtk.}
proc copy*(orig: RcStyle): RcStyle {.
    importc: "gtk_rc_style_copy", libgtk.}
proc rc_find_module_in_path*(module_file: cstring): cstring {.
    importc: "gtk_rc_find_module_in_path", libgtk.}
proc rc_get_theme_dir*(): cstring {.importc: "gtk_rc_get_theme_dir", 
    libgtk.}
proc rc_get_module_dir*(): cstring {.importc: "gtk_rc_get_module_dir", 
    libgtk.}
proc rc_get_im_module_path*(): cstring {.
    importc: "gtk_rc_get_im_module_path", libgtk.}
proc rc_get_im_module_file*(): cstring {.
    importc: "gtk_rc_get_im_module_file", libgtk.}
type 
  RcTokenType* {.size: sizeof(cint), pure.} = enum 
    INVALID = glib.GTokenType.LAST, `INCLUDE`, 
    NORMAL, ACTIVE, PRELIGHT, 
    SELECTED, INSENSITIVE, FG, 
    BG, TEXT, BASE, 
    XTHICKNESS, YTHICKNESS, FONT, 
    FONTSET, FONT_NAME, BG_PIXMAP, 
    PIXMAP_PATH, STYLE, BINDING, 
    `BIND`, WIDGET, WIDGET_CLASS, 
    CLASS, LOWEST, GTK, 
    APPLICATION, THEME, RC, 
    HIGHEST, ENGINE, MODULE_PATH, 
    IM_MODULE_PATH, IM_MODULE_FILE, 
    STOCK, LTR, RTL, 
    COLOR, UNBIND, LAST
type 
  PathPriorityType* {.size: sizeof(cint), pure.} = enum 
    PRIO_LOWEST = 0, PRIO_GTK = 4, 
    PRIO_APPLICATION = 8, PRIO_THEME = 10, 
    PRIO_RC = 12, PRIO_HIGHEST = 15
const 
  PATH_PRIO_MASK* = 0xF
type 
  PathType* {.size: sizeof(cint), pure.} = enum 
    WIDGET, WIDGET_CLASS, CLASS
proc rc_scanner_new*(): glib.GScanner {.importc: "gtk_rc_scanner_new", 
    libgtk.}
proc rc_parse_color*(scanner: glib.GScanner; color: gdk3.Color): guint {.
    importc: "gtk_rc_parse_color", libgtk.}
proc rc_parse_color_full*(scanner: glib.GScanner; style: RcStyle; 
                              color: gdk3.Color): guint {.
    importc: "gtk_rc_parse_color_full", libgtk.}
proc rc_parse_state*(scanner: glib.GScanner; state: ptr StateType): guint {.
    importc: "gtk_rc_parse_state", libgtk.}
proc rc_parse_priority*(scanner: glib.GScanner; 
                            priority: ptr PathPriorityType): guint {.
    importc: "gtk_rc_parse_priority", libgtk.}
type 
  RcProperty* =  ptr RcPropertyObj
  RcPropertyPtr* = ptr RcPropertyObj
  RcPropertyObj* = object 
    type_name*: GQuark
    property_name*: GQuark
    origin*: cstring
    value*: gobject.GValueObj

proc add_path*(binding_set: BindingSet; 
                               path_type: PathType; 
                               path_pattern: cstring; 
                               priority: PathPriorityType) {.
    importc: "gtk_binding_set_add_path", libgtk.}

template gtk_recent_action*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, recent_action_get_type(), RecentActionObj))

template gtk_is_recent_action*(obj: expr): expr = 
  (g_type_check_instance_type(obj, recent_action_get_type()))

template gtk_recent_action_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, recent_action_get_type(), 
                           RecentActionClassObj))

template gtk_is_recent_action_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, recent_action_get_type()))

template gtk_recent_action_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, recent_action_get_type(), 
                             RecentActionClassObj))

type 
  RecentActionPrivateObj = object 
  
type 
  RecentAction* =  ptr RecentActionObj
  RecentActionPtr* = ptr RecentActionObj
  RecentActionObj*{.final.} = object of ActionObj
    priv137: ptr RecentActionPrivateObj

type 
  RecentActionClass* =  ptr RecentActionClassObj
  RecentActionClassPtr* = ptr RecentActionClassObj
  RecentActionClassObj*{.final.} = object of ActionClassObj
    gtk_reserved1451: proc () {.cdecl.}
    gtk_reserved1452: proc () {.cdecl.}
    gtk_reserved1453: proc () {.cdecl.}
    gtk_reserved1454: proc () {.cdecl.}

proc recent_action_get_type*(): GType {.
    importc: "gtk_recent_action_get_type", libgtk.}
proc recent_action_new*(name: cstring; label: cstring; 
                            tooltip: cstring; stock_id: cstring): Action {.
    importc: "gtk_recent_action_new", libgtk.}
proc recent_action_new_for_manager*(name: cstring; label: cstring; 
    tooltip: cstring; stock_id: cstring; manager: RecentManager): Action {.
    importc: "gtk_recent_action_new_for_manager", libgtk.}
proc get_show_numbers*(action: RecentAction): gboolean {.
    importc: "gtk_recent_action_get_show_numbers", libgtk.}
proc show_numbers*(action: RecentAction): gboolean {.
    importc: "gtk_recent_action_get_show_numbers", libgtk.}
proc set_show_numbers*(action: RecentAction; 
    show_numbers: gboolean) {.importc: "gtk_recent_action_set_show_numbers", 
                              libgtk.}
proc `show_numbers=`*(action: RecentAction; 
    show_numbers: gboolean) {.importc: "gtk_recent_action_set_show_numbers", 
                              libgtk.}

template gtk_status_icon*(o: expr): expr = 
  (g_type_check_instance_cast(o, status_icon_get_type(), StatusIconObj))

template gtk_status_icon_class*(k: expr): expr = 
  (g_type_check_class_cast(k, status_icon_get_type(), StatusIconClassObj))

template gtk_is_status_icon*(o: expr): expr = 
  (g_type_check_instance_type(o, status_icon_get_type()))

template gtk_is_status_icon_class*(k: expr): expr = 
  (g_type_check_class_type(k, status_icon_get_type()))

template gtk_status_icon_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, status_icon_get_type(), StatusIconClassObj))

type 
  StatusIconPrivateObj = object 
  
type 
  StatusIcon* =  ptr StatusIconObj
  StatusIconPtr* = ptr StatusIconObj
  StatusIconObj*{.final.} = object of GObjectObj
    priv138: ptr StatusIconPrivateObj

type 
  StatusIconClass* =  ptr StatusIconClassObj
  StatusIconClassPtr* = ptr StatusIconClassObj
  StatusIconClassObj*{.final.} = object of GObjectClassObj
    activate*: proc (status_icon: StatusIcon) {.cdecl.}
    popup_menu*: proc (status_icon: StatusIcon; button: guint; 
                       activate_time: guint32) {.cdecl.}
    size_changed*: proc (status_icon: StatusIcon; size: gint): gboolean {.cdecl.}
    button_press_event*: proc (status_icon: StatusIcon; 
                               event: gdk3.EventButton): gboolean {.cdecl.}
    button_release_event*: proc (status_icon: StatusIcon; 
                                 event: gdk3.EventButton): gboolean {.cdecl.}
    scroll_event*: proc (status_icon: StatusIcon; 
                         event: gdk3.EventScroll): gboolean {.cdecl.}
    query_tooltip*: proc (status_icon: StatusIcon; x: gint; y: gint; 
                          keyboard_mode: gboolean; tooltip: Tooltip): gboolean {.cdecl.}
    gtk_reserved1: proc () {.cdecl.}
    gtk_reserved2: proc () {.cdecl.}
    gtk_reserved3: proc () {.cdecl.}
    gtk_reserved4: proc () {.cdecl.}

proc status_icon_get_type*(): GType {.importc: "gtk_status_icon_get_type", 
    libgtk.}
proc status_icon_new*(): StatusIcon {.
    importc: "gtk_status_icon_new", libgtk.}
proc status_icon_new_from_pixbuf*(pixbuf: gdk_pixbuf.GdkPixbuf): StatusIcon {.
    importc: "gtk_status_icon_new_from_pixbuf", libgtk.}
proc status_icon_new_from_file*(filename: cstring): StatusIcon {.
    importc: "gtk_status_icon_new_from_file", libgtk.}
proc status_icon_new_from_stock*(stock_id: cstring): StatusIcon {.
    importc: "gtk_status_icon_new_from_stock", libgtk.}
proc status_icon_new_from_icon_name*(icon_name: cstring): StatusIcon {.
    importc: "gtk_status_icon_new_from_icon_name", libgtk.}
proc status_icon_new_from_gicon*(icon: gio.GIcon): StatusIcon {.
    importc: "gtk_status_icon_new_from_gicon", libgtk.}
proc set_from_pixbuf*(status_icon: StatusIcon; 
                                      pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_status_icon_set_from_pixbuf", libgtk.}
proc `from_pixbuf=`*(status_icon: StatusIcon; 
                                      pixbuf: gdk_pixbuf.GdkPixbuf) {.
    importc: "gtk_status_icon_set_from_pixbuf", libgtk.}
proc set_from_file*(status_icon: StatusIcon; 
                                    filename: cstring) {.
    importc: "gtk_status_icon_set_from_file", libgtk.}
proc `from_file=`*(status_icon: StatusIcon; 
                                    filename: cstring) {.
    importc: "gtk_status_icon_set_from_file", libgtk.}
proc set_from_stock*(status_icon: StatusIcon; 
                                     stock_id: cstring) {.
    importc: "gtk_status_icon_set_from_stock", libgtk.}
proc `from_stock=`*(status_icon: StatusIcon; 
                                     stock_id: cstring) {.
    importc: "gtk_status_icon_set_from_stock", libgtk.}
proc set_from_icon_name*(status_icon: StatusIcon; 
    icon_name: cstring) {.importc: "gtk_status_icon_set_from_icon_name", 
                            libgtk.}
proc `from_icon_name=`*(status_icon: StatusIcon; 
    icon_name: cstring) {.importc: "gtk_status_icon_set_from_icon_name", 
                            libgtk.}
proc set_from_gicon*(status_icon: StatusIcon; 
                                     icon: gio.GIcon) {.
    importc: "gtk_status_icon_set_from_gicon", libgtk.}
proc `from_gicon=`*(status_icon: StatusIcon; 
                                     icon: gio.GIcon) {.
    importc: "gtk_status_icon_set_from_gicon", libgtk.}
proc get_storage_type*(status_icon: StatusIcon): ImageType {.
    importc: "gtk_status_icon_get_storage_type", libgtk.}
proc storage_type*(status_icon: StatusIcon): ImageType {.
    importc: "gtk_status_icon_get_storage_type", libgtk.}
proc get_pixbuf*(status_icon: StatusIcon): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_status_icon_get_pixbuf", libgtk.}
proc pixbuf*(status_icon: StatusIcon): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_status_icon_get_pixbuf", libgtk.}
proc get_stock*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_stock", libgtk.}
proc stock*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_stock", libgtk.}
proc get_icon_name*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_icon_name", libgtk.}
proc icon_name*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_icon_name", libgtk.}
proc get_gicon*(status_icon: StatusIcon): gio.GIcon {.
    importc: "gtk_status_icon_get_gicon", libgtk.}
proc gicon*(status_icon: StatusIcon): gio.GIcon {.
    importc: "gtk_status_icon_get_gicon", libgtk.}
proc get_size*(status_icon: StatusIcon): gint {.
    importc: "gtk_status_icon_get_size", libgtk.}
proc size*(status_icon: StatusIcon): gint {.
    importc: "gtk_status_icon_get_size", libgtk.}
proc set_screen*(status_icon: StatusIcon; 
                                 screen: gdk3.Screen) {.
    importc: "gtk_status_icon_set_screen", libgtk.}
proc `screen=`*(status_icon: StatusIcon; 
                                 screen: gdk3.Screen) {.
    importc: "gtk_status_icon_set_screen", libgtk.}
proc get_screen*(status_icon: StatusIcon): gdk3.Screen {.
    importc: "gtk_status_icon_get_screen", libgtk.}
proc screen*(status_icon: StatusIcon): gdk3.Screen {.
    importc: "gtk_status_icon_get_screen", libgtk.}
proc set_has_tooltip*(status_icon: StatusIcon; 
                                      has_tooltip: gboolean) {.
    importc: "gtk_status_icon_set_has_tooltip", libgtk.}
proc `has_tooltip=`*(status_icon: StatusIcon; 
                                      has_tooltip: gboolean) {.
    importc: "gtk_status_icon_set_has_tooltip", libgtk.}
proc set_tooltip_text*(status_icon: StatusIcon; 
    text: cstring) {.importc: "gtk_status_icon_set_tooltip_text", 
                       libgtk.}
proc `tooltip_text=`*(status_icon: StatusIcon; 
    text: cstring) {.importc: "gtk_status_icon_set_tooltip_text", 
                       libgtk.}
proc set_tooltip_markup*(status_icon: StatusIcon; 
    markup: cstring) {.importc: "gtk_status_icon_set_tooltip_markup", 
                         libgtk.}
proc `tooltip_markup=`*(status_icon: StatusIcon; 
    markup: cstring) {.importc: "gtk_status_icon_set_tooltip_markup", 
                         libgtk.}
proc set_title*(status_icon: StatusIcon; 
                                title: cstring) {.
    importc: "gtk_status_icon_set_title", libgtk.}
proc `title=`*(status_icon: StatusIcon; 
                                title: cstring) {.
    importc: "gtk_status_icon_set_title", libgtk.}
proc get_title*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_title", libgtk.}
proc title*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_title", libgtk.}
proc set_name*(status_icon: StatusIcon; name: cstring) {.
    importc: "gtk_status_icon_set_name", libgtk.}
proc `name=`*(status_icon: StatusIcon; name: cstring) {.
    importc: "gtk_status_icon_set_name", libgtk.}
proc set_visible*(status_icon: StatusIcon; 
                                  visible: gboolean) {.
    importc: "gtk_status_icon_set_visible", libgtk.}
proc `visible=`*(status_icon: StatusIcon; 
                                  visible: gboolean) {.
    importc: "gtk_status_icon_set_visible", libgtk.}
proc get_visible*(status_icon: StatusIcon): gboolean {.
    importc: "gtk_status_icon_get_visible", libgtk.}
proc visible*(status_icon: StatusIcon): gboolean {.
    importc: "gtk_status_icon_get_visible", libgtk.}
proc is_embedded*(status_icon: StatusIcon): gboolean {.
    importc: "gtk_status_icon_is_embedded", libgtk.}
proc status_icon_position_menu*(menu: Menu; x: var gint; 
                                    y: var gint; push_in: var gboolean; 
                                    user_data: gpointer) {.
    importc: "gtk_status_icon_position_menu", libgtk.}
proc get_geometry*(status_icon: StatusIcon; 
                                   screen: var gdk3.Screen; 
                                   area: gdk3.Rectangle; 
                                   orientation: ptr Orientation): gboolean {.
    importc: "gtk_status_icon_get_geometry", libgtk.}
proc geometry*(status_icon: StatusIcon; 
                                   screen: var gdk3.Screen; 
                                   area: gdk3.Rectangle; 
                                   orientation: ptr Orientation): gboolean {.
    importc: "gtk_status_icon_get_geometry", libgtk.}
proc get_has_tooltip*(status_icon: StatusIcon): gboolean {.
    importc: "gtk_status_icon_get_has_tooltip", libgtk.}
proc has_tooltip*(status_icon: StatusIcon): gboolean {.
    importc: "gtk_status_icon_get_has_tooltip", libgtk.}
proc get_tooltip_text*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_tooltip_text", libgtk.}
proc tooltip_text*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_tooltip_text", libgtk.}
proc get_tooltip_markup*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_tooltip_markup", libgtk.}
proc tooltip_markup*(status_icon: StatusIcon): cstring {.
    importc: "gtk_status_icon_get_tooltip_markup", libgtk.}
proc get_x11_window_id*(status_icon: StatusIcon): guint32 {.
    importc: "gtk_status_icon_get_x11_window_id", libgtk.}
proc x11_window_id*(status_icon: StatusIcon): guint32 {.
    importc: "gtk_status_icon_get_x11_window_id", libgtk.}

template gtk_style*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, style_get_type(), StyleObj))

template gtk_style_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, style_get_type(), StyleClassObj))

template gtk_is_style*(obj: expr): expr = 
  (g_type_check_instance_type(obj, style_get_type()))

template gtk_is_style_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, style_get_type()))

template gtk_style_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, style_get_type(), StyleClassObj))

type 
  ExpanderStyle* {.size: sizeof(cint), pure.} = enum 
    COLLAPSED, SEMI_COLLAPSED, 
    SEMI_EXPANDED, EXPANDED
template gtk_style_attached*(style: expr): expr = 
  (gtk_style(style).attach_count > 0)

type 
  StyleClass* =  ptr StyleClassObj
  StyleClassPtr* = ptr StyleClassObj
  StyleClassObj*{.final.} = object of GObjectClassObj
    realize*: proc (style: Style) {.cdecl.}
    unrealize*: proc (style: Style) {.cdecl.}
    copy*: proc (style: Style; src: Style) {.cdecl.}
    clone*: proc (style: Style): Style {.cdecl.}
    init_from_rc*: proc (style: Style; rc_style: RcStyle) {.cdecl.}
    set_background*: proc (style: Style; window: gdk3.Window; 
                           state_type: StateType) {.cdecl.}
    render_icon*: proc (style: Style; source: IconSource; 
                        direction: TextDirection; state: StateType; 
                        size: IconSize; widget: Widget; 
                        detail: cstring): gdk_pixbuf.GdkPixbuf {.cdecl.}
    draw_hline*: proc (style: Style; cr: cairo.Context; 
                       state_type: StateType; widget: Widget; 
                       detail: cstring; x1: gint; x2: gint; y: gint) {.cdecl.}
    draw_vline*: proc (style: Style; cr: cairo.Context; 
                       state_type: StateType; widget: Widget; 
                       detail: cstring; y1: gint; y2: gint; x: gint) {.cdecl.}
    draw_shadow*: proc (style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint) {.cdecl.}
    draw_arrow*: proc (style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; 
                       arrow_type: ArrowType; fill: gboolean; x: gint; 
                       y: gint; width: gint; height: gint) {.cdecl.}
    draw_diamond*: proc (style: Style; cr: cairo.Context; 
                         state_type: StateType; shadow_type: ShadowType; 
                         widget: Widget; detail: cstring; x: gint; 
                         y: gint; width: gint; height: gint) {.cdecl.}
    draw_box*: proc (style: Style; cr: cairo.Context; 
                     state_type: StateType; shadow_type: ShadowType; 
                     widget: Widget; detail: cstring; x: gint; 
                     y: gint; width: gint; height: gint) {.cdecl.}
    draw_flat_box*: proc (style: Style; cr: cairo.Context; 
                          state_type: StateType; 
                          shadow_type: ShadowType; widget: Widget; 
                          detail: cstring; x: gint; y: gint; width: gint; 
                          height: gint) {.cdecl.}
    draw_check*: proc (style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; width: gint; height: gint) {.cdecl.}
    draw_option*: proc (style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint) {.cdecl.}
    draw_tab*: proc (style: Style; cr: cairo.Context; 
                     state_type: StateType; shadow_type: ShadowType; 
                     widget: Widget; detail: cstring; x: gint; 
                     y: gint; width: gint; height: gint) {.cdecl.}
    draw_shadow_gap*: proc (style: Style; cr: cairo.Context; 
                            state_type: StateType; 
                            shadow_type: ShadowType; widget: Widget; 
                            detail: cstring; x: gint; y: gint; width: gint; 
                            height: gint; gap_side: PositionType; 
                            gap_x: gint; gap_width: gint) {.cdecl.}
    draw_box_gap*: proc (style: Style; cr: cairo.Context; 
                         state_type: StateType; shadow_type: ShadowType; 
                         widget: Widget; detail: cstring; x: gint; 
                         y: gint; width: gint; height: gint; 
                         gap_side: PositionType; gap_x: gint; 
                         gap_width: gint) {.cdecl.}
    draw_extension*: proc (style: Style; cr: cairo.Context; 
                           state_type: StateType; 
                           shadow_type: ShadowType; widget: Widget; 
                           detail: cstring; x: gint; y: gint; width: gint; 
                           height: gint; gap_side: PositionType) {.cdecl.}
    draw_focus*: proc (style: Style; cr: cairo.Context; 
                       state_type: StateType; widget: Widget; 
                       detail: cstring; x: gint; y: gint; width: gint; 
                       height: gint) {.cdecl.}
    draw_slider*: proc (style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint; 
                        orientation: Orientation) {.cdecl.}
    draw_handle*: proc (style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint; 
                        orientation: Orientation) {.cdecl.}
    draw_expander*: proc (style: Style; cr: cairo.Context; 
                          state_type: StateType; widget: Widget; 
                          detail: cstring; x: gint; y: gint; 
                          expander_style: ExpanderStyle) {.cdecl.}
    draw_layout*: proc (style: Style; cr: cairo.Context; 
                        state_type: StateType; use_text: gboolean; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; layout: pango.Layout) {.cdecl.}
    draw_resize_grip*: proc (style: Style; cr: cairo.Context; 
                             state_type: StateType; widget: Widget; 
                             detail: cstring; edge: gdk3.WindowEdge; x: gint; 
                             y: gint; width: gint; height: gint) {.cdecl.}
    draw_spinner*: proc (style: Style; cr: cairo.Context; 
                         state_type: StateType; widget: Widget; 
                         detail: cstring; step: guint; x: gint; y: gint; 
                         width: gint; height: gint) {.cdecl.}
    gtk_reserved1461: proc () {.cdecl.}
    gtk_reserved1462: proc () {.cdecl.}
    gtk_reserved1463: proc () {.cdecl.}
    gtk_reserved1464: proc () {.cdecl.}
    gtk_reserved1465: proc () {.cdecl.}
    gtk_reserved1466: proc () {.cdecl.}
    gtk_reserved1467: proc () {.cdecl.}
    gtk_reserved1468: proc () {.cdecl.}
    gtk_reserved1469: proc () {.cdecl.}
    gtk_reserved10: proc () {.cdecl.}
    gtk_reserved11: proc () {.cdecl.}

proc style_get_type*(): GType {.importc: "gtk_style_get_type", libgtk.}
proc style_new*(): Style {.importc: "gtk_style_new", libgtk.}
proc copy*(style: Style): Style {.
    importc: "gtk_style_copy", libgtk.}
proc attach*(style: Style; window: gdk3.Window): Style {.
    importc: "gtk_style_attach", libgtk.}
proc detach*(style: Style) {.importc: "gtk_style_detach", 
    libgtk.}
proc set_background*(style: Style; window: gdk3.Window; 
                               state_type: StateType) {.
    importc: "gtk_style_set_background", libgtk.}
proc `background=`*(style: Style; window: gdk3.Window; 
                               state_type: StateType) {.
    importc: "gtk_style_set_background", libgtk.}
proc apply_default_background*(style: Style; cr: cairo.Context; 
    window: gdk3.Window; state_type: StateType; x: gint; y: gint; 
    width: gint; height: gint) {.importc: "gtk_style_apply_default_background", 
                                 libgtk.}
proc lookup_icon_set*(style: Style; stock_id: cstring): IconSet {.
    importc: "gtk_style_lookup_icon_set", libgtk.}
proc lookup_color*(style: Style; color_name: cstring; 
                             color: gdk3.Color): gboolean {.
    importc: "gtk_style_lookup_color", libgtk.}
proc render_icon*(style: Style; source: IconSource; 
                            direction: TextDirection; state: StateType; 
                            size: IconSize; widget: Widget; 
                            detail: cstring): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_style_render_icon", libgtk.}
proc paint_hline*(style: Style; cr: cairo.Context; 
                      state_type: StateType; widget: Widget; 
                      detail: cstring; x1: gint; x2: gint; y: gint) {.
    importc: "gtk_paint_hline", libgtk.}
proc paint_vline*(style: Style; cr: cairo.Context; 
                      state_type: StateType; widget: Widget; 
                      detail: cstring; y1: gint; y2: gint; x: gint) {.
    importc: "gtk_paint_vline", libgtk.}
proc paint_shadow*(style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_shadow", libgtk.}
proc paint_arrow*(style: Style; cr: cairo.Context; 
                      state_type: StateType; shadow_type: ShadowType; 
                      widget: Widget; detail: cstring; 
                      arrow_type: ArrowType; fill: gboolean; x: gint; 
                      y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_arrow", libgtk.}
proc paint_diamond*(style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_diamond", libgtk.}
proc paint_box*(style: Style; cr: cairo.Context; 
                    state_type: StateType; shadow_type: ShadowType; 
                    widget: Widget; detail: cstring; x: gint; 
                    y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_box", libgtk.}
proc paint_flat_box*(style: Style; cr: cairo.Context; 
                         state_type: StateType; shadow_type: ShadowType; 
                         widget: Widget; detail: cstring; x: gint; 
                         y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_flat_box", libgtk.}
proc paint_check*(style: Style; cr: cairo.Context; 
                      state_type: StateType; shadow_type: ShadowType; 
                      widget: Widget; detail: cstring; x: gint; 
                      y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_check", libgtk.}
proc paint_option*(style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_option", libgtk.}
proc paint_tab*(style: Style; cr: cairo.Context; 
                    state_type: StateType; shadow_type: ShadowType; 
                    widget: Widget; detail: cstring; x: gint; 
                    y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_tab", libgtk.}
proc paint_shadow_gap*(style: Style; cr: cairo.Context; 
                           state_type: StateType; 
                           shadow_type: ShadowType; widget: Widget; 
                           detail: cstring; x: gint; y: gint; width: gint; 
                           height: gint; gap_side: PositionType; 
                           gap_x: gint; gap_width: gint) {.
    importc: "gtk_paint_shadow_gap", libgtk.}
proc paint_box_gap*(style: Style; cr: cairo.Context; 
                        state_type: StateType; shadow_type: ShadowType; 
                        widget: Widget; detail: cstring; x: gint; 
                        y: gint; width: gint; height: gint; 
                        gap_side: PositionType; gap_x: gint; 
                        gap_width: gint) {.importc: "gtk_paint_box_gap", 
    libgtk.}
proc paint_extension*(style: Style; cr: cairo.Context; 
                          state_type: StateType; 
                          shadow_type: ShadowType; widget: Widget; 
                          detail: cstring; x: gint; y: gint; width: gint; 
                          height: gint; gap_side: PositionType) {.
    importc: "gtk_paint_extension", libgtk.}
proc paint_focus*(style: Style; cr: cairo.Context; 
                      state_type: StateType; widget: Widget; 
                      detail: cstring; x: gint; y: gint; width: gint; 
                      height: gint) {.importc: "gtk_paint_focus", libgtk.}
proc paint_slider*(style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; width: gint; height: gint; 
                       orientation: Orientation) {.
    importc: "gtk_paint_slider", libgtk.}
proc paint_handle*(style: Style; cr: cairo.Context; 
                       state_type: StateType; shadow_type: ShadowType; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; width: gint; height: gint; 
                       orientation: Orientation) {.
    importc: "gtk_paint_handle", libgtk.}
proc paint_expander*(style: Style; cr: cairo.Context; 
                         state_type: StateType; widget: Widget; 
                         detail: cstring; x: gint; y: gint; 
                         expander_style: ExpanderStyle) {.
    importc: "gtk_paint_expander", libgtk.}
proc paint_layout*(style: Style; cr: cairo.Context; 
                       state_type: StateType; use_text: gboolean; 
                       widget: Widget; detail: cstring; x: gint; 
                       y: gint; layout: pango.Layout) {.
    importc: "gtk_paint_layout", libgtk.}
proc paint_resize_grip*(style: Style; cr: cairo.Context; 
                            state_type: StateType; widget: Widget; 
                            detail: cstring; edge: gdk3.WindowEdge; x: gint; 
                            y: gint; width: gint; height: gint) {.
    importc: "gtk_paint_resize_grip", libgtk.}
proc paint_spinner*(style: Style; cr: cairo.Context; 
                        state_type: StateType; widget: Widget; 
                        detail: cstring; step: guint; x: gint; y: gint; 
                        width: gint; height: gint) {.
    importc: "gtk_paint_spinner", libgtk.}
proc get_style_property*(style: Style; widget_type: GType; 
                                   property_name: cstring; value: var gobject.GValueObj) {.
    importc: "gtk_style_get_style_property", libgtk.}

discard """ proc "get_valist*(style: Style; widget_type: GType; 
                           first_property_name: cstring; var_args: va_list) {.
    importc: "gtk_style_get_valist", libgtk.}"""

proc get*(style: Style; widget_type: GType; 
                    first_property_name: cstring) {.varargs, 
    importc: "gtk_style_get", libgtk.}

proc has_context*(style: Style): gboolean {.
    importc: "gtk_style_has_context", libgtk.}
proc style_attach*(widget: Widget) {.
    importc: "gtk_widget_style_attach", libgtk.}
proc has_rc_style*(widget: Widget): gboolean {.
    importc: "gtk_widget_has_rc_style", libgtk.}
proc set_style*(widget: Widget; style: Style) {.
    importc: "gtk_widget_set_style", libgtk.}
proc `style=`*(widget: Widget; style: Style) {.
    importc: "gtk_widget_set_style", libgtk.}
proc ensure_style*(widget: Widget) {.
    importc: "gtk_widget_ensure_style", libgtk.}
proc get_style*(widget: Widget): Style {.
    importc: "gtk_widget_get_style", libgtk.}
proc style*(widget: Widget): Style {.
    importc: "gtk_widget_get_style", libgtk.}
proc modify_style*(widget: Widget; style: RcStyle) {.
    importc: "gtk_widget_modify_style", libgtk.}
proc get_modifier_style*(widget: Widget): RcStyle {.
    importc: "gtk_widget_get_modifier_style", libgtk.}
proc modifier_style*(widget: Widget): RcStyle {.
    importc: "gtk_widget_get_modifier_style", libgtk.}
proc modify_fg*(widget: Widget; state: StateType; 
                           color: gdk3.Color) {.
    importc: "gtk_widget_modify_fg", libgtk.}
proc modify_bg*(widget: Widget; state: StateType; 
                           color: gdk3.Color) {.
    importc: "gtk_widget_modify_bg", libgtk.}
proc modify_text*(widget: Widget; state: StateType; 
                             color: gdk3.Color) {.
    importc: "gtk_widget_modify_text", libgtk.}
proc modify_base*(widget: Widget; state: StateType; 
                             color: gdk3.Color) {.
    importc: "gtk_widget_modify_base", libgtk.}
proc modify_cursor*(widget: Widget; primary: gdk3.Color; 
                               secondary: gdk3.Color) {.
    importc: "gtk_widget_modify_cursor", libgtk.}
proc modify_font*(widget: Widget; 
                             font_desc: pango.FontDescription) {.
    importc: "gtk_widget_modify_font", libgtk.}
proc reset_rc_styles*(widget: Widget) {.
    importc: "gtk_widget_reset_rc_styles", libgtk.}
proc widget_get_default_style*(): Style {.
    importc: "gtk_widget_get_default_style", libgtk.}
proc path*(widget: Widget; path_length: var guint; 
                      path: cstringArray; path_reversed: var cstring) {.
    importc: "gtk_widget_path", libgtk.}
proc class_path*(widget: Widget; path_length: var guint; 
                            path: cstringArray; path_reversed: var cstring) {.
    importc: "gtk_widget_class_path", libgtk.}
proc render_icon*(widget: Widget; stock_id: cstring; 
                             size: IconSize; detail: cstring): gdk_pixbuf.GdkPixbuf {.
    importc: "gtk_widget_render_icon", libgtk.}

template gtk_table*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, table_get_type(), TableObj))

template gtk_table_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, table_get_type(), TableClassObj))

template gtk_is_table*(obj: expr): expr = 
  (g_type_check_instance_type(obj, table_get_type()))

template gtk_is_table_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, table_get_type()))

template gtk_table_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, table_get_type(), TableClassObj))

type 
  TablePrivateObj = object 
  
type 
  Table* =  ptr TableObj
  TablePtr* = ptr TableObj
  TableObj*{.final.} = object of ContainerObj
    priv139: ptr TablePrivateObj

type 
  TableClass* =  ptr TableClassObj
  TableClassPtr* = ptr TableClassObj
  TableClassObj*{.final.} = object of ContainerClassObj
    gtk_reserved1471: proc () {.cdecl.}
    gtk_reserved1472: proc () {.cdecl.}
    gtk_reserved1473: proc () {.cdecl.}
    gtk_reserved1474: proc () {.cdecl.}

type 
  TableChild* =  ptr TableChildObj
  TableChildPtr* = ptr TableChildObj
  TableChildObj* = object 
    widget*: Widget
    left_attach*: guint16
    right_attach*: guint16
    top_attach*: guint16
    bottom_attach*: guint16
    xpadding*: guint16
    ypadding*: guint16
    bitfield0GtkTableChild*: guint

type 
  TableRowCol* =  ptr TableRowColObj
  TableRowColPtr* = ptr TableRowColObj
  TableRowColObj* = object 
    requisition*: guint16
    allocation*: guint16
    spacing*: guint16
    bitfield0GtkTableRowCol*: guint

type 
  AttachOptions* {.size: sizeof(cint), pure.} = enum 
    EXPAND = 1 shl 0, SHRINK = 1 shl 1, FILL = 1 shl 2
proc table_get_type*(): GType {.importc: "gtk_table_get_type", libgtk.}
proc table_new*(rows: guint; columns: guint; homogeneous: gboolean): Table {.
    importc: "gtk_table_new", libgtk.}
proc resize*(table: Table; rows: guint; columns: guint) {.
    importc: "gtk_table_resize", libgtk.}
proc attach*(table: Table; child: Widget; 
                       left_attach: guint; right_attach: guint; 
                       top_attach: guint; bottom_attach: guint; 
                       xoptions: AttachOptions; yoptions: AttachOptions; 
                       xpadding: guint; ypadding: guint) {.
    importc: "gtk_table_attach", libgtk.}
proc attach_defaults*(table: Table; widget: Widget; 
                                left_attach: guint; right_attach: guint; 
                                top_attach: guint; bottom_attach: guint) {.
    importc: "gtk_table_attach_defaults", libgtk.}
proc set_row_spacing*(table: Table; row: guint; 
                                spacing: guint) {.
    importc: "gtk_table_set_row_spacing", libgtk.}
proc `row_spacing=`*(table: Table; row: guint; 
                                spacing: guint) {.
    importc: "gtk_table_set_row_spacing", libgtk.}
proc get_row_spacing*(table: Table; row: guint): guint {.
    importc: "gtk_table_get_row_spacing", libgtk.}
proc row_spacing*(table: Table; row: guint): guint {.
    importc: "gtk_table_get_row_spacing", libgtk.}
proc set_col_spacing*(table: Table; column: guint; 
                                spacing: guint) {.
    importc: "gtk_table_set_col_spacing", libgtk.}
proc `col_spacing=`*(table: Table; column: guint; 
                                spacing: guint) {.
    importc: "gtk_table_set_col_spacing", libgtk.}
proc get_col_spacing*(table: Table; column: guint): guint {.
    importc: "gtk_table_get_col_spacing", libgtk.}
proc col_spacing*(table: Table; column: guint): guint {.
    importc: "gtk_table_get_col_spacing", libgtk.}
proc set_row_spacings*(table: Table; spacing: guint) {.
    importc: "gtk_table_set_row_spacings", libgtk.}
proc `row_spacings=`*(table: Table; spacing: guint) {.
    importc: "gtk_table_set_row_spacings", libgtk.}
proc get_default_row_spacing*(table: Table): guint {.
    importc: "gtk_table_get_default_row_spacing", libgtk.}
proc default_row_spacing*(table: Table): guint {.
    importc: "gtk_table_get_default_row_spacing", libgtk.}
proc set_col_spacings*(table: Table; spacing: guint) {.
    importc: "gtk_table_set_col_spacings", libgtk.}
proc `col_spacings=`*(table: Table; spacing: guint) {.
    importc: "gtk_table_set_col_spacings", libgtk.}
proc get_default_col_spacing*(table: Table): guint {.
    importc: "gtk_table_get_default_col_spacing", libgtk.}
proc default_col_spacing*(table: Table): guint {.
    importc: "gtk_table_get_default_col_spacing", libgtk.}
proc set_homogeneous*(table: Table; homogeneous: gboolean) {.
    importc: "gtk_table_set_homogeneous", libgtk.}
proc `homogeneous=`*(table: Table; homogeneous: gboolean) {.
    importc: "gtk_table_set_homogeneous", libgtk.}
proc get_homogeneous*(table: Table): gboolean {.
    importc: "gtk_table_get_homogeneous", libgtk.}
proc homogeneous*(table: Table): gboolean {.
    importc: "gtk_table_get_homogeneous", libgtk.}
proc get_size*(table: Table; rows: var guint; 
                         columns: var guint) {.importc: "gtk_table_get_size", 
    libgtk.}

template gtk_tearoff_menu_item*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tearoff_menu_item_get_type(), 
                              TearoffMenuItemObj))

template gtk_tearoff_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tearoff_menu_item_get_type(), 
                           TearoffMenuItemClassObj))

template gtk_is_tearoff_menu_item*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tearoff_menu_item_get_type()))

template gtk_is_tearoff_menu_item_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tearoff_menu_item_get_type()))

template gtk_tearoff_menu_item_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tearoff_menu_item_get_type(), 
                             TearoffMenuItemClassObj))

type 
  TearoffMenuItemPrivateObj = object 
  
type 
  TearoffMenuItem* =  ptr TearoffMenuItemObj
  TearoffMenuItemPtr* = ptr TearoffMenuItemObj
  TearoffMenuItemObj*{.final.} = object of MenuItemObj
    priv140: ptr TearoffMenuItemPrivateObj

type 
  TearoffMenuItemClass* =  ptr TearoffMenuItemClassObj
  TearoffMenuItemClassPtr* = ptr TearoffMenuItemClassObj
  TearoffMenuItemClassObj*{.final.} = object of MenuItemClassObj
    gtk_reserved1481: proc () {.cdecl.}
    gtk_reserved1482: proc () {.cdecl.}
    gtk_reserved1483: proc () {.cdecl.}
    gtk_reserved1484: proc () {.cdecl.}

proc tearoff_menu_item_get_type*(): GType {.
    importc: "gtk_tearoff_menu_item_get_type", libgtk.}
proc tearoff_menu_item_new*(): TearoffMenuItem {.
    importc: "gtk_tearoff_menu_item_new", libgtk.}

template gtk_theming_engine*(o: expr): expr = 
  (g_type_check_instance_cast(o, theming_engine_get_type(), ThemingEngineObj))

template gtk_theming_engine_class*(c: expr): expr = 
  (g_type_check_class_cast(c, theming_engine_get_type(), ThemingEngineClassObj))

template gtk_is_theming_engine*(o: expr): expr = 
  (g_type_check_instance_type(o, theming_engine_get_type()))

template gtk_is_theming_engine_class*(c: expr): expr = 
  (g_type_check_class_type(c, theming_engine_get_type()))

template gtk_theming_engine_get_class*(o: expr): expr = 
  (g_type_instance_get_class(o, theming_engine_get_type(), 
                             ThemingEngineClassObj))

type 
  ThemingEnginePrivateObj = object 
  
type 
  ThemingEngine* =  ptr ThemingEngineObj
  ThemingEnginePtr* = ptr ThemingEngineObj
  ThemingEngineObj*{.final.} = object of GObjectObj
    priv141: ptr ThemingEnginePrivateObj

type 
  ThemingEngineClass* =  ptr ThemingEngineClassObj
  ThemingEngineClassPtr* = ptr ThemingEngineClassObj
  ThemingEngineClassObj*{.final.} = object of GObjectClassObj
    render_line*: proc (engine: ThemingEngine; cr: cairo.Context; 
                        x0: gdouble; y0: gdouble; x1: gdouble; y1: gdouble) {.cdecl.}
    render_background*: proc (engine: ThemingEngine; cr: cairo.Context; 
                              x: gdouble; y: gdouble; width: gdouble; 
                              height: gdouble) {.cdecl.}
    render_frame*: proc (engine: ThemingEngine; cr: cairo.Context; 
                         x: gdouble; y: gdouble; width: gdouble; 
                         height: gdouble) {.cdecl.}
    render_frame_gap*: proc (engine: ThemingEngine; cr: cairo.Context; 
                             x: gdouble; y: gdouble; width: gdouble; 
                             height: gdouble; gap_side: PositionType; 
                             xy0_gap: gdouble; xy1_gap: gdouble) {.cdecl.}
    render_extension*: proc (engine: ThemingEngine; cr: cairo.Context; 
                             x: gdouble; y: gdouble; width: gdouble; 
                             height: gdouble; gap_side: PositionType) {.cdecl.}
    render_check*: proc (engine: ThemingEngine; cr: cairo.Context; 
                         x: gdouble; y: gdouble; width: gdouble; 
                         height: gdouble) {.cdecl.}
    render_option*: proc (engine: ThemingEngine; cr: cairo.Context; 
                          x: gdouble; y: gdouble; width: gdouble; 
                          height: gdouble) {.cdecl.}
    render_arrow*: proc (engine: ThemingEngine; cr: cairo.Context; 
                         angle: gdouble; x: gdouble; y: gdouble; size: gdouble) {.cdecl.}
    render_expander*: proc (engine: ThemingEngine; cr: cairo.Context; 
                            x: gdouble; y: gdouble; width: gdouble; 
                            height: gdouble) {.cdecl.}
    render_focus*: proc (engine: ThemingEngine; cr: cairo.Context; 
                         x: gdouble; y: gdouble; width: gdouble; 
                         height: gdouble) {.cdecl.}
    render_layout*: proc (engine: ThemingEngine; cr: cairo.Context; 
                          x: gdouble; y: gdouble; layout: pango.Layout) {.cdecl.}
    render_slider*: proc (engine: ThemingEngine; cr: cairo.Context; 
                          x: gdouble; y: gdouble; width: gdouble; 
                          height: gdouble; orientation: Orientation) {.cdecl.}
    render_handle*: proc (engine: ThemingEngine; cr: cairo.Context; 
                          x: gdouble; y: gdouble; width: gdouble; 
                          height: gdouble) {.cdecl.}
    render_activity*: proc (engine: ThemingEngine; cr: cairo.Context; 
                            x: gdouble; y: gdouble; width: gdouble; 
                            height: gdouble) {.cdecl.}
    render_icon_pixbuf*: proc (engine: ThemingEngine; 
                               source: IconSource; size: IconSize): gdk_pixbuf.GdkPixbuf {.cdecl.}
    render_icon*: proc (engine: ThemingEngine; cr: cairo.Context; 
                        pixbuf: gdk_pixbuf.GdkPixbuf; x: gdouble; y: gdouble) {.cdecl.}
    render_icon_surface*: proc (engine: ThemingEngine; cr: cairo.Context; 
                                surface: cairo.Surface; x: gdouble; 
                                y: gdouble) {.cdecl.}
    padding*: array[14, gpointer]

proc theming_engine_get_type*(): GType {.
    importc: "gtk_theming_engine_get_type", libgtk.}
proc theming_engine_register_property*(name_space: cstring; 
    parse_func: StylePropertyParser; pspec: gobject.GParamSpec) {.
    importc: "gtk_theming_engine_register_property", libgtk.}
proc get_property*(engine: ThemingEngine; 
                                      property: cstring; 
                                      state: StateFlags; value: var gobject.GValueObj) {.
    importc: "gtk_theming_engine_get_property", libgtk.}

discard """ proc "get_valist*(engine: ThemingEngine; 
                                    state: StateFlags; args: va_list) {.
    importc: "gtk_theming_engine_get_valist", libgtk.}"""

proc get*(engine: ThemingEngine; 
                             state: StateFlags) {.varargs, 
    importc: "gtk_theming_engine_get", libgtk.}
proc get_style_property*(engine: ThemingEngine; 
    property_name: cstring; value: var gobject.GValueObj) {.
    importc: "gtk_theming_engine_get_style_property", libgtk.}

discard """ proc "get_style_valist*(engine: ThemingEngine; 
    args: va_list) {.importc: "gtk_theming_engine_get_style_valist", 
                     libgtk.}"""

proc get_style*(engine: ThemingEngine) {.varargs, 
    importc: "gtk_theming_engine_get_style", libgtk.}
proc lookup_color*(engine: ThemingEngine; 
                                      color_name: cstring; 
                                      color: gdk3.RGBA): gboolean {.
    importc: "gtk_theming_engine_lookup_color", libgtk.}
proc get_path*(engine: ThemingEngine): WidgetPath {.
    importc: "gtk_theming_engine_get_path", libgtk.}
proc path*(engine: ThemingEngine): WidgetPath {.
    importc: "gtk_theming_engine_get_path", libgtk.}
proc has_class*(engine: ThemingEngine; 
                                   style_class: cstring): gboolean {.
    importc: "gtk_theming_engine_has_class", libgtk.}
proc has_region*(engine: ThemingEngine; 
                                    style_region: cstring; 
                                    flags: ptr RegionFlags): gboolean {.
    importc: "gtk_theming_engine_has_region", libgtk.}
proc get_state*(engine: ThemingEngine): StateFlags {.
    importc: "gtk_theming_engine_get_state", libgtk.}
proc state*(engine: ThemingEngine): StateFlags {.
    importc: "gtk_theming_engine_get_state", libgtk.}
proc state_is_running*(engine: ThemingEngine; 
    state: StateType; progress: var gdouble): gboolean {.
    importc: "gtk_theming_engine_state_is_running", libgtk.}
proc get_direction*(engine: ThemingEngine): TextDirection {.
    importc: "gtk_theming_engine_get_direction", libgtk.}
proc direction*(engine: ThemingEngine): TextDirection {.
    importc: "gtk_theming_engine_get_direction", libgtk.}
proc get_junction_sides*(engine: ThemingEngine): JunctionSides {.
    importc: "gtk_theming_engine_get_junction_sides", libgtk.}
proc junction_sides*(engine: ThemingEngine): JunctionSides {.
    importc: "gtk_theming_engine_get_junction_sides", libgtk.}
proc get_color*(engine: ThemingEngine; 
                                   state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_theming_engine_get_color", libgtk.}
proc get_background_color*(engine: ThemingEngine; 
    state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_theming_engine_get_background_color", libgtk.}
proc get_border_color*(engine: ThemingEngine; 
    state: StateFlags; color: var gdk3.RGBAObj) {.
    importc: "gtk_theming_engine_get_border_color", libgtk.}
proc get_border*(engine: ThemingEngine; 
                                    state: StateFlags; 
                                    border: var BorderObj) {.
    importc: "gtk_theming_engine_get_border", libgtk.}
proc get_padding*(engine: ThemingEngine; 
                                     state: StateFlags; 
                                     padding: var BorderObj) {.
    importc: "gtk_theming_engine_get_padding", libgtk.}
proc get_margin*(engine: ThemingEngine; 
                                    state: StateFlags; 
                                    margin: var BorderObj) {.
    importc: "gtk_theming_engine_get_margin", libgtk.}
proc get_font*(engine: ThemingEngine; 
                                  state: StateFlags): pango.FontDescription {.
    importc: "gtk_theming_engine_get_font", libgtk.}
proc font*(engine: ThemingEngine; 
                                  state: StateFlags): pango.FontDescription {.
    importc: "gtk_theming_engine_get_font", libgtk.}
proc theming_engine_load*(name: cstring): ThemingEngine {.
    importc: "gtk_theming_engine_load", libgtk.}
proc get_screen*(engine: ThemingEngine): gdk3.Screen {.
    importc: "gtk_theming_engine_get_screen", libgtk.}
proc screen*(engine: ThemingEngine): gdk3.Screen {.
    importc: "gtk_theming_engine_get_screen", libgtk.}

template gtk_ui_manager*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, ui_manager_get_type(), UIManagerObj))

template gtk_ui_manager_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, ui_manager_get_type(), UIManagerClassObj))

template gtk_is_ui_manager*(obj: expr): expr = 
  (g_type_check_instance_type(obj, ui_manager_get_type()))

template gtk_is_ui_manager_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, ui_manager_get_type()))

template gtk_ui_manager_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, ui_manager_get_type(), UIManagerClassObj))

type 
  UIManagerPrivateObj = object 
  
type 
  UIManager* =  ptr UIManagerObj
  UIManagerPtr* = ptr UIManagerObj
  UIManagerObj*{.final.} = object of GObjectObj
    private_data*: ptr UIManagerPrivateObj

type 
  UIManagerClass* =  ptr UIManagerClassObj
  UIManagerClassPtr* = ptr UIManagerClassObj
  UIManagerClassObj*{.final.} = object of GObjectClassObj
    add_widget*: proc (manager: UIManager; widget: Widget) {.cdecl.}
    actions_changed*: proc (manager: UIManager) {.cdecl.}
    connect_proxy*: proc (manager: UIManager; action: Action; 
                          proxy: Widget) {.cdecl.}
    disconnect_proxy*: proc (manager: UIManager; action: Action; 
                             proxy: Widget) {.cdecl.}
    pre_activate*: proc (manager: UIManager; action: Action) {.cdecl.}
    post_activate*: proc (manager: UIManager; action: Action) {.cdecl.}
    get_widget*: proc (manager: UIManager; path: cstring): Widget {.cdecl.}
    get_action*: proc (manager: UIManager; path: cstring): Action {.cdecl.}
    gtk_reserved1491: proc () {.cdecl.}
    gtk_reserved1492: proc () {.cdecl.}
    gtk_reserved1493: proc () {.cdecl.}
    gtk_reserved1494: proc () {.cdecl.}

type 
  UIManagerItemType* {.size: sizeof(cint), pure.} = enum 
    AUTO = 0, MENUBAR = 1 shl 0, 
    MENU = 1 shl 1, TOOLBAR = 1 shl 2, 
    PLACEHOLDER = 1 shl 3, POPUP = 1 shl 4, 
    MENUITEM = 1 shl 5, TOOLITEM = 1 shl 6, 
    SEPARATOR = 1 shl 7, ACCELERATOR = 1 shl
        8, UI_MANAGER_POPUP_WITH_ACCELS = 1 shl 9
proc ui_manager_get_type*(): GType {.importc: "gtk_ui_manager_get_type", 
    libgtk.}
proc ui_manager_new*(): UIManager {.importc: "gtk_ui_manager_new", 
    libgtk.}
proc set_add_tearoffs*(manager: UIManager; 
                                      add_tearoffs: gboolean) {.
    importc: "gtk_ui_manager_set_add_tearoffs", libgtk.}
proc `add_tearoffs=`*(manager: UIManager; 
                                      add_tearoffs: gboolean) {.
    importc: "gtk_ui_manager_set_add_tearoffs", libgtk.}
proc get_add_tearoffs*(manager: UIManager): gboolean {.
    importc: "gtk_ui_manager_get_add_tearoffs", libgtk.}
proc add_tearoffs*(manager: UIManager): gboolean {.
    importc: "gtk_ui_manager_get_add_tearoffs", libgtk.}
proc insert_action_group*(manager: UIManager; 
    action_group: ActionGroup; pos: gint) {.
    importc: "gtk_ui_manager_insert_action_group", libgtk.}
proc remove_action_group*(manager: UIManager; 
    action_group: ActionGroup) {.
    importc: "gtk_ui_manager_remove_action_group", libgtk.}
proc get_action_groups*(manager: UIManager): glib.GList {.
    importc: "gtk_ui_manager_get_action_groups", libgtk.}
proc action_groups*(manager: UIManager): glib.GList {.
    importc: "gtk_ui_manager_get_action_groups", libgtk.}
proc get_accel_group*(manager: UIManager): AccelGroup {.
    importc: "gtk_ui_manager_get_accel_group", libgtk.}
proc accel_group*(manager: UIManager): AccelGroup {.
    importc: "gtk_ui_manager_get_accel_group", libgtk.}
proc get_widget*(manager: UIManager; path: cstring): Widget {.
    importc: "gtk_ui_manager_get_widget", libgtk.}
proc widget*(manager: UIManager; path: cstring): Widget {.
    importc: "gtk_ui_manager_get_widget", libgtk.}
proc get_toplevels*(manager: UIManager; 
                                   types: UIManagerItemType): glib.GSList {.
    importc: "gtk_ui_manager_get_toplevels", libgtk.}
proc toplevels*(manager: UIManager; 
                                   types: UIManagerItemType): glib.GSList {.
    importc: "gtk_ui_manager_get_toplevels", libgtk.}
proc get_action*(manager: UIManager; path: cstring): Action {.
    importc: "gtk_ui_manager_get_action", libgtk.}
proc action*(manager: UIManager; path: cstring): Action {.
    importc: "gtk_ui_manager_get_action", libgtk.}
proc add_ui_from_string*(manager: UIManager; 
    buffer: cstring; length: gssize; error: var glib.GError): guint {.
    importc: "gtk_ui_manager_add_ui_from_string", libgtk.}
proc add_ui_from_file*(manager: UIManager; 
                                      filename: cstring; 
                                      error: var glib.GError): guint {.
    importc: "gtk_ui_manager_add_ui_from_file", libgtk.}
proc add_ui_from_resource*(manager: UIManager; 
    resource_path: cstring; error: var glib.GError): guint {.
    importc: "gtk_ui_manager_add_ui_from_resource", libgtk.}
proc add_ui*(manager: UIManager; merge_id: guint; 
                            path: cstring; name: cstring; 
                            action: cstring; `type`: UIManagerItemType; 
                            top: gboolean) {.importc: "gtk_ui_manager_add_ui", 
    libgtk.}
proc remove_ui*(manager: UIManager; merge_id: guint) {.
    importc: "gtk_ui_manager_remove_ui", libgtk.}
proc get_ui*(manager: UIManager): cstring {.
    importc: "gtk_ui_manager_get_ui", libgtk.}
proc ui*(manager: UIManager): cstring {.
    importc: "gtk_ui_manager_get_ui", libgtk.}
proc ensure_update*(manager: UIManager) {.
    importc: "gtk_ui_manager_ensure_update", libgtk.}
proc new_merge_id*(manager: UIManager): guint {.
    importc: "gtk_ui_manager_new_merge_id", libgtk.}

template gtk_vbutton_box*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vbutton_box_get_type(), VButtonBoxObj))

template gtk_vbutton_box_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vbutton_box_get_type(), VButtonBoxClassObj))

template gtk_is_vbutton_box*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vbutton_box_get_type()))

template gtk_is_vbutton_box_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vbutton_box_get_type()))

template gtk_vbutton_box_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vbutton_box_get_type(), VButtonBoxClassObj))

type 
  VButtonBox* =  ptr VButtonBoxObj
  VButtonBoxPtr* = ptr VButtonBoxObj
  VButtonBoxObj*{.final.} = object of ButtonBoxObj

type 
  VButtonBoxClass* =  ptr VButtonBoxClassObj
  VButtonBoxClassPtr* = ptr VButtonBoxClassObj
  VButtonBoxClassObj*{.final.} = object of ButtonBoxClassObj

proc vbutton_box_get_type*(): GType {.importc: "gtk_vbutton_box_get_type", 
    libgtk.}
proc vbutton_box_new*(): VbuttonBox {.importc: "gtk_vbutton_box_new", 
    libgtk.}

template gtk_vbox*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vbox_get_type(), VBoxObj))

template gtk_vbox_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vbox_get_type(), VBoxClassObj))

template gtk_is_vbox*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vbox_get_type()))

template gtk_is_vbox_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vbox_get_type()))

template gtk_vbox_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vbox_get_type(), VBoxClassObj))

type 
  VBox* =  ptr VBoxObj
  VBoxPtr* = ptr VBoxObj
  VBoxObj*{.final.} = object of BoxObj

type 
  VBoxClass* =  ptr VBoxClassObj
  VBoxClassPtr* = ptr VBoxClassObj
  VBoxClassObj*{.final.} = object of BoxClassObj

proc vbox_get_type*(): GType {.importc: "gtk_vbox_get_type", libgtk.}
proc vbox_new*(homogeneous: gboolean; spacing: gint): Vbox {.
    importc: "gtk_vbox_new", libgtk.}

template gtk_vpaned*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vpaned_get_type(), VPanedObj))

template gtk_vpaned_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vpaned_get_type(), VPanedClassObj))

template gtk_is_vpaned*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vpaned_get_type()))

template gtk_is_vpaned_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vpaned_get_type()))

template gtk_vpaned_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vpaned_get_type(), VPanedClassObj))

type 
  VPaned* =  ptr VPanedObj
  VPanedPtr* = ptr VPanedObj
  VPanedObj*{.final.} = object of PanedObj

type 
  VPanedClass* =  ptr VPanedClassObj
  VPanedClassPtr* = ptr VPanedClassObj
  VPanedClassObj*{.final.} = object of PanedClassObj

proc vpaned_get_type*(): GType {.importc: "gtk_vpaned_get_type", 
                                     libgtk.}
proc vpaned_new*(): Vpaned {.importc: "gtk_vpaned_new", libgtk.}

template gtk_vscale*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vscale_get_type(), VScaleObj))

template gtk_vscale_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vscale_get_type(), VScaleClassObj))

template gtk_is_vscale*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vscale_get_type()))

template gtk_is_vscale_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vscale_get_type()))

template gtk_vscale_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vscale_get_type(), VScaleClassObj))

type 
  VScale* =  ptr VScaleObj
  VScalePtr* = ptr VScaleObj
  VScaleObj*{.final.} = object of ScaleObj

type 
  VScaleClass* =  ptr VScaleClassObj
  VScaleClassPtr* = ptr VScaleClassObj
  VScaleClassObj*{.final.} = object of ScaleClassObj

proc vscale_get_type*(): GType {.importc: "gtk_vscale_get_type", 
                                     libgtk.}
proc vscale_new*(adjustment: Adjustment): Vscale {.
    importc: "gtk_vscale_new", libgtk.}
proc vscale_new_with_range*(min: gdouble; max: gdouble; step: gdouble): Vscale {.
    importc: "gtk_vscale_new_with_range", libgtk.}

template gtk_vscrollbar*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vscrollbar_get_type(), VScrollbarObj))

template gtk_vscrollbar_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vscrollbar_get_type(), VScrollbarClassObj))

template gtk_is_vscrollbar*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vscrollbar_get_type()))

template gtk_is_vscrollbar_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vscrollbar_get_type()))

template gtk_vscrollbar_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vscrollbar_get_type(), VScrollbarClassObj))

type 
  VScrollbarClass* =  ptr VScrollbarClassObj
  VScrollbarClassPtr* = ptr VScrollbarClassObj
  VScrollbarClassObj*{.final.} = object of ScrollbarClassObj

proc vscrollbar_get_type*(): GType {.importc: "gtk_vscrollbar_get_type", 
    libgtk.}
proc vscrollbar_new*(adjustment: Adjustment): Vscrollbar {.
    importc: "gtk_vscrollbar_new", libgtk.}

template gtk_vseparator*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, vseparator_get_type(), VSeparatorObj))

template gtk_vseparator_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, vseparator_get_type(), VSeparatorClassObj))

template gtk_is_vseparator*(obj: expr): expr = 
  (g_type_check_instance_type(obj, vseparator_get_type()))

template gtk_is_vseparator_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, vseparator_get_type()))

template gtk_vseparator_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, vseparator_get_type(), VSeparatorClassObj))

type 
  VSeparator* =  ptr VSeparatorObj
  VSeparatorPtr* = ptr VSeparatorObj
  VSeparatorObj*{.final.} = object of SeparatorObj

type 
  VSeparatorClass* =  ptr VSeparatorClassObj
  VSeparatorClassPtr* = ptr VSeparatorClassObj
  VSeparatorClassObj*{.final.} = object of SeparatorClassObj

proc vseparator_get_type*(): GType {.importc: "gtk_vseparator_get_type", 
    libgtk.}
proc vseparator_new*(): Vseparator {.importc: "gtk_vseparator_new", 
    libgtk.}

template gtk_page_setup_unix_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, page_setup_unix_dialog_get_type(), 
                              PageSetupUnixDialogObj))

template gtk_page_setup_unix_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, page_setup_unix_dialog_get_type(), 
                           PageSetupUnixDialogClassObj))

template gtk_is_page_setup_unix_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, page_setup_unix_dialog_get_type()))

template gtk_is_page_setup_unix_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, page_setup_unix_dialog_get_type()))

template gtk_page_setup_unix_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, page_setup_unix_dialog_get_type(), 
                             PageSetupUnixDialogClassObj))

type 
  PageSetupUnixDialogPrivateObj = object 
  
type 
  PageSetupUnixDialog* =  ptr PageSetupUnixDialogObj
  PageSetupUnixDialogPtr* = ptr PageSetupUnixDialogObj
  PageSetupUnixDialogObj*{.final.} = object of DialogObj
    priv142: ptr PageSetupUnixDialogPrivateObj

type 
  PageSetupUnixDialogClass* =  ptr PageSetupUnixDialogClassObj
  PageSetupUnixDialogClassPtr* = ptr PageSetupUnixDialogClassObj
  PageSetupUnixDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved1501: proc () {.cdecl.}
    gtk_reserved1502: proc () {.cdecl.}
    gtk_reserved1503: proc () {.cdecl.}
    gtk_reserved1504: proc () {.cdecl.}

proc page_setup_unix_dialog_get_type*(): GType {.
    importc: "gtk_page_setup_unix_dialog_get_type", libgtk.}
proc page_setup_unix_dialog_new*(title: cstring; parent: Window): PageSetupUnixDialog {.
    importc: "gtk_page_setup_unix_dialog_new", libgtk.}
proc set_page_setup*(
    dialog: PageSetupUnixDialog; page_setup: PageSetup) {.
    importc: "gtk_page_setup_unix_dialog_set_page_setup", libgtk.}
proc `page_setup=`*(
    dialog: PageSetupUnixDialog; page_setup: PageSetup) {.
    importc: "gtk_page_setup_unix_dialog_set_page_setup", libgtk.}
proc get_page_setup*(
    dialog: PageSetupUnixDialog): PageSetup {.
    importc: "gtk_page_setup_unix_dialog_get_page_setup", libgtk.}
proc page_setup*(
    dialog: PageSetupUnixDialog): PageSetup {.
    importc: "gtk_page_setup_unix_dialog_get_page_setup", libgtk.}
proc set_print_settings*(
    dialog: PageSetupUnixDialog; print_settings: PrintSettings) {.
    importc: "gtk_page_setup_unix_dialog_set_print_settings", libgtk.}
proc `print_settings=`*(
    dialog: PageSetupUnixDialog; print_settings: PrintSettings) {.
    importc: "gtk_page_setup_unix_dialog_set_print_settings", libgtk.}
proc get_print_settings*(
    dialog: PageSetupUnixDialog): PrintSettings {.
    importc: "gtk_page_setup_unix_dialog_get_print_settings", libgtk.}
proc print_settings*(
    dialog: PageSetupUnixDialog): PrintSettings {.
    importc: "gtk_page_setup_unix_dialog_get_print_settings", libgtk.}

type 
  PrintCapabilities* {.size: sizeof(cint), pure.} = enum 
    PAGE_SET = 1 shl 0, 
    COPIES = 1 shl 1, 
    COLLATE = 1 shl 2, 
    REVERSE = 1 shl 3, 
    SCALE = 1 shl 4, 
    GENERATE_PDF = 1 shl 5, 
    GENERATE_PS = 1 shl 6, 
    PREVIEW = 1 shl 7, 
    NUMBER_UP = 1 shl 8, 
    NUMBER_UP_LAYOUT = 1 shl 9
proc print_capabilities_get_type*(): GType {.
    importc: "gtk_print_capabilities_get_type", libgtk.}
template gtk_printer*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, printer_get_type(), PrinterObj))

template gtk_printer_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, printer_get_type(), PrinterClassObj))

template gtk_is_printer*(obj: expr): expr = 
  (g_type_check_instance_type(obj, printer_get_type()))

template gtk_is_printer_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, printer_get_type()))

template gtk_printer_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, printer_get_type(), PrinterClassObj))

type 
  PrinterPrivateObj = object 
  
type 
  PrintBackend* =  ptr PrintBackendObj
  PrintBackendPtr* = ptr PrintBackendObj
  PrintBackendObj* = object 
  
type 
  Printer* =  ptr PrinterObj
  PrinterPtr* = ptr PrinterObj
  PrinterObj*{.final.} = object of GObjectObj
    priv143: ptr PrinterPrivateObj

type 
  PrinterClass* =  ptr PrinterClassObj
  PrinterClassPtr* = ptr PrinterClassObj
  PrinterClassObj*{.final.} = object of GObjectClassObj
    details_acquired*: proc (printer: Printer; success: gboolean) {.cdecl.}
    gtk_reserved1511: proc () {.cdecl.}
    gtk_reserved1512: proc () {.cdecl.}
    gtk_reserved1513: proc () {.cdecl.}
    gtk_reserved1514: proc () {.cdecl.}
    gtk_reserved1515: proc () {.cdecl.}
    gtk_reserved1516: proc () {.cdecl.}
    gtk_reserved1517: proc () {.cdecl.}
    gtk_reserved1518: proc () {.cdecl.}

proc printer_get_type*(): GType {.importc: "gtk_printer_get_type", 
                                      libgtk.}
proc printer_new*(name: cstring; backend: PrintBackend; 
                      virtual: gboolean): Printer {.
    importc: "gtk_printer_new", libgtk.}
proc get_backend*(printer: Printer): PrintBackend {.
    importc: "gtk_printer_get_backend", libgtk.}
proc backend*(printer: Printer): PrintBackend {.
    importc: "gtk_printer_get_backend", libgtk.}
proc get_name*(printer: Printer): cstring {.
    importc: "gtk_printer_get_name", libgtk.}
proc name*(printer: Printer): cstring {.
    importc: "gtk_printer_get_name", libgtk.}
proc get_state_message*(printer: Printer): cstring {.
    importc: "gtk_printer_get_state_message", libgtk.}
proc state_message*(printer: Printer): cstring {.
    importc: "gtk_printer_get_state_message", libgtk.}
proc get_description*(printer: Printer): cstring {.
    importc: "gtk_printer_get_description", libgtk.}
proc description*(printer: Printer): cstring {.
    importc: "gtk_printer_get_description", libgtk.}
proc get_location*(printer: Printer): cstring {.
    importc: "gtk_printer_get_location", libgtk.}
proc location*(printer: Printer): cstring {.
    importc: "gtk_printer_get_location", libgtk.}
proc get_icon_name*(printer: Printer): cstring {.
    importc: "gtk_printer_get_icon_name", libgtk.}
proc icon_name*(printer: Printer): cstring {.
    importc: "gtk_printer_get_icon_name", libgtk.}
proc get_job_count*(printer: Printer): gint {.
    importc: "gtk_printer_get_job_count", libgtk.}
proc job_count*(printer: Printer): gint {.
    importc: "gtk_printer_get_job_count", libgtk.}
proc is_active*(printer: Printer): gboolean {.
    importc: "gtk_printer_is_active", libgtk.}
proc is_paused*(printer: Printer): gboolean {.
    importc: "gtk_printer_is_paused", libgtk.}
proc is_accepting_jobs*(printer: Printer): gboolean {.
    importc: "gtk_printer_is_accepting_jobs", libgtk.}
proc is_virtual*(printer: Printer): gboolean {.
    importc: "gtk_printer_is_virtual", libgtk.}
proc is_default*(printer: Printer): gboolean {.
    importc: "gtk_printer_is_default", libgtk.}
proc accepts_pdf*(printer: Printer): gboolean {.
    importc: "gtk_printer_accepts_pdf", libgtk.}
proc accepts_ps*(printer: Printer): gboolean {.
    importc: "gtk_printer_accepts_ps", libgtk.}
proc list_papers*(printer: Printer): glib.GList {.
    importc: "gtk_printer_list_papers", libgtk.}
proc get_default_page_size*(printer: Printer): PageSetup {.
    importc: "gtk_printer_get_default_page_size", libgtk.}
proc default_page_size*(printer: Printer): PageSetup {.
    importc: "gtk_printer_get_default_page_size", libgtk.}
proc compare*(a: Printer; b: Printer): gint {.
    importc: "gtk_printer_compare", libgtk.}
proc has_details*(printer: Printer): gboolean {.
    importc: "gtk_printer_has_details", libgtk.}
proc request_details*(printer: Printer) {.
    importc: "gtk_printer_request_details", libgtk.}
proc get_capabilities*(printer: Printer): PrintCapabilities {.
    importc: "gtk_printer_get_capabilities", libgtk.}
proc capabilities*(printer: Printer): PrintCapabilities {.
    importc: "gtk_printer_get_capabilities", libgtk.}
proc get_hard_margins*(printer: Printer; top: ptr gdouble; 
                                   bottom: ptr gdouble; left: var gdouble; 
                                   right: var gdouble): gboolean {.
    importc: "gtk_printer_get_hard_margins", libgtk.}
proc hard_margins*(printer: Printer; top: ptr gdouble; 
                                   bottom: ptr gdouble; left: var gdouble; 
                                   right: var gdouble): gboolean {.
    importc: "gtk_printer_get_hard_margins", libgtk.}
type 
  PrinterFunc* = proc (printer: Printer; data: gpointer): gboolean {.cdecl.}
proc enumerate_printers*(fn: PrinterFunc; data: gpointer; 
                             destroy: GDestroyNotify; wait: gboolean) {.
    importc: "gtk_enumerate_printers", libgtk.}

template gtk_print_job*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_job_get_type(), PrintJobObj))

template gtk_print_job_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, print_job_get_type(), PrintJobClassObj))

template gtk_is_print_job*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_job_get_type()))

template gtk_is_print_job_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, print_job_get_type()))

template gtk_print_job_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, print_job_get_type(), PrintJobClassObj))

type 
  PrintJobPrivateObj = object 
  
type 
  PrintJobCompleteFunc* = proc (print_job: PrintJob; 
                                   user_data: gpointer; error: glib.GError) {.cdecl.}
  PrintJob* =  ptr PrintJobObj
  PrintJobPtr* = ptr PrintJobObj
  PrintJobObj*{.final.} = object of GObjectObj
    priv144: ptr PrintJobPrivateObj

type 
  PrintJobClass* =  ptr PrintJobClassObj
  PrintJobClassPtr* = ptr PrintJobClassObj
  PrintJobClassObj*{.final.} = object of GObjectClassObj
    status_changed*: proc (job: PrintJob) {.cdecl.}
    gtk_reserved1521: proc () {.cdecl.}
    gtk_reserved1522: proc () {.cdecl.}
    gtk_reserved1523: proc () {.cdecl.}
    gtk_reserved1524: proc () {.cdecl.}

proc print_job_get_type*(): GType {.importc: "gtk_print_job_get_type", 
    libgtk.}
proc print_job_new*(title: cstring; printer: Printer; 
                        settings: PrintSettings; 
                        page_setup: PageSetup): PrintJob {.
    importc: "gtk_print_job_new", libgtk.}
proc get_settings*(job: PrintJob): PrintSettings {.
    importc: "gtk_print_job_get_settings", libgtk.}
proc settings*(job: PrintJob): PrintSettings {.
    importc: "gtk_print_job_get_settings", libgtk.}
proc get_printer*(job: PrintJob): Printer {.
    importc: "gtk_print_job_get_printer", libgtk.}
proc printer*(job: PrintJob): Printer {.
    importc: "gtk_print_job_get_printer", libgtk.}
proc get_title*(job: PrintJob): cstring {.
    importc: "gtk_print_job_get_title", libgtk.}
proc title*(job: PrintJob): cstring {.
    importc: "gtk_print_job_get_title", libgtk.}
proc get_status*(job: PrintJob): PrintStatus {.
    importc: "gtk_print_job_get_status", libgtk.}
proc status*(job: PrintJob): PrintStatus {.
    importc: "gtk_print_job_get_status", libgtk.}
proc set_source_file*(job: PrintJob; filename: cstring; 
                                    error: var glib.GError): gboolean {.
    importc: "gtk_print_job_set_source_file", libgtk.}
proc get_surface*(job: PrintJob; error: var glib.GError): cairo.Surface {.
    importc: "gtk_print_job_get_surface", libgtk.}
proc surface*(job: PrintJob; error: var glib.GError): cairo.Surface {.
    importc: "gtk_print_job_get_surface", libgtk.}
proc set_track_print_status*(job: PrintJob; 
    track_status: gboolean) {.importc: "gtk_print_job_set_track_print_status", 
                              libgtk.}
proc `track_print_status=`*(job: PrintJob; 
    track_status: gboolean) {.importc: "gtk_print_job_set_track_print_status", 
                              libgtk.}
proc get_track_print_status*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_track_print_status", libgtk.}
proc track_print_status*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_track_print_status", libgtk.}
proc send*(job: PrintJob; 
                         callback: PrintJobCompleteFunc; 
                         user_data: gpointer; dnotify: GDestroyNotify) {.
    importc: "gtk_print_job_send", libgtk.}
proc get_pages*(job: PrintJob): PrintPages {.
    importc: "gtk_print_job_get_pages", libgtk.}
proc pages*(job: PrintJob): PrintPages {.
    importc: "gtk_print_job_get_pages", libgtk.}
proc set_pages*(job: PrintJob; pages: PrintPages) {.
    importc: "gtk_print_job_set_pages", libgtk.}
proc `pages=`*(job: PrintJob; pages: PrintPages) {.
    importc: "gtk_print_job_set_pages", libgtk.}
proc get_page_ranges*(job: PrintJob; n_ranges: var gint): PageRange {.
    importc: "gtk_print_job_get_page_ranges", libgtk.}
proc page_ranges*(job: PrintJob; n_ranges: var gint): PageRange {.
    importc: "gtk_print_job_get_page_ranges", libgtk.}
proc set_page_ranges*(job: PrintJob; 
                                    ranges: PageRange; n_ranges: gint) {.
    importc: "gtk_print_job_set_page_ranges", libgtk.}
proc `page_ranges=`*(job: PrintJob; 
                                    ranges: PageRange; n_ranges: gint) {.
    importc: "gtk_print_job_set_page_ranges", libgtk.}
proc get_page_set*(job: PrintJob): PageSet {.
    importc: "gtk_print_job_get_page_set", libgtk.}
proc page_set*(job: PrintJob): PageSet {.
    importc: "gtk_print_job_get_page_set", libgtk.}
proc set_page_set*(job: PrintJob; page_set: PageSet) {.
    importc: "gtk_print_job_set_page_set", libgtk.}
proc `page_set=`*(job: PrintJob; page_set: PageSet) {.
    importc: "gtk_print_job_set_page_set", libgtk.}
proc get_num_copies*(job: PrintJob): gint {.
    importc: "gtk_print_job_get_num_copies", libgtk.}
proc num_copies*(job: PrintJob): gint {.
    importc: "gtk_print_job_get_num_copies", libgtk.}
proc set_num_copies*(job: PrintJob; num_copies: gint) {.
    importc: "gtk_print_job_set_num_copies", libgtk.}
proc `num_copies=`*(job: PrintJob; num_copies: gint) {.
    importc: "gtk_print_job_set_num_copies", libgtk.}
proc get_scale*(job: PrintJob): gdouble {.
    importc: "gtk_print_job_get_scale", libgtk.}
proc scale*(job: PrintJob): gdouble {.
    importc: "gtk_print_job_get_scale", libgtk.}
proc set_scale*(job: PrintJob; scale: gdouble) {.
    importc: "gtk_print_job_set_scale", libgtk.}
proc `scale=`*(job: PrintJob; scale: gdouble) {.
    importc: "gtk_print_job_set_scale", libgtk.}
proc get_n_up*(job: PrintJob): guint {.
    importc: "gtk_print_job_get_n_up", libgtk.}
proc n_up*(job: PrintJob): guint {.
    importc: "gtk_print_job_get_n_up", libgtk.}
proc set_n_up*(job: PrintJob; n_up: guint) {.
    importc: "gtk_print_job_set_n_up", libgtk.}
proc `n_up=`*(job: PrintJob; n_up: guint) {.
    importc: "gtk_print_job_set_n_up", libgtk.}
proc get_n_up_layout*(job: PrintJob): NumberUpLayout {.
    importc: "gtk_print_job_get_n_up_layout", libgtk.}
proc n_up_layout*(job: PrintJob): NumberUpLayout {.
    importc: "gtk_print_job_get_n_up_layout", libgtk.}
proc set_n_up_layout*(job: PrintJob; 
                                    layout: NumberUpLayout) {.
    importc: "gtk_print_job_set_n_up_layout", libgtk.}
proc `n_up_layout=`*(job: PrintJob; 
                                    layout: NumberUpLayout) {.
    importc: "gtk_print_job_set_n_up_layout", libgtk.}
proc get_rotate*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_rotate", libgtk.}
proc rotate*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_rotate", libgtk.}
proc set_rotate*(job: PrintJob; rotate: gboolean) {.
    importc: "gtk_print_job_set_rotate", libgtk.}
proc `rotate=`*(job: PrintJob; rotate: gboolean) {.
    importc: "gtk_print_job_set_rotate", libgtk.}
proc get_collate*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_collate", libgtk.}
proc collate*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_collate", libgtk.}
proc set_collate*(job: PrintJob; collate: gboolean) {.
    importc: "gtk_print_job_set_collate", libgtk.}
proc `collate=`*(job: PrintJob; collate: gboolean) {.
    importc: "gtk_print_job_set_collate", libgtk.}
proc get_reverse*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_reverse", libgtk.}
proc reverse*(job: PrintJob): gboolean {.
    importc: "gtk_print_job_get_reverse", libgtk.}
proc set_reverse*(job: PrintJob; reverse: gboolean) {.
    importc: "gtk_print_job_set_reverse", libgtk.}
proc `reverse=`*(job: PrintJob; reverse: gboolean) {.
    importc: "gtk_print_job_set_reverse", libgtk.}

template gtk_print_unix_dialog*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, print_unix_dialog_get_type(), 
                              PrintUnixDialogObj))

template gtk_print_unix_dialog_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, print_unix_dialog_get_type(), 
                           PrintUnixDialogClassObj))

template gtk_is_print_unix_dialog*(obj: expr): expr = 
  (g_type_check_instance_type(obj, print_unix_dialog_get_type()))

template gtk_is_print_unix_dialog_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, print_unix_dialog_get_type()))

template gtk_print_unix_dialog_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, print_unix_dialog_get_type(), 
                             PrintUnixDialogClassObj))

type 
  PrintUnixDialogPrivateObj = object 
  
type 
  PrintUnixDialog* =  ptr PrintUnixDialogObj
  PrintUnixDialogPtr* = ptr PrintUnixDialogObj
  PrintUnixDialogObj*{.final.} = object of DialogObj
    priv145: ptr PrintUnixDialogPrivateObj

type 
  PrintUnixDialogClass* =  ptr PrintUnixDialogClassObj
  PrintUnixDialogClassPtr* = ptr PrintUnixDialogClassObj
  PrintUnixDialogClassObj*{.final.} = object of DialogClassObj
    gtk_reserved1531: proc () {.cdecl.}
    gtk_reserved1532: proc () {.cdecl.}
    gtk_reserved1533: proc () {.cdecl.}
    gtk_reserved1534: proc () {.cdecl.}

proc print_unix_dialog_get_type*(): GType {.
    importc: "gtk_print_unix_dialog_get_type", libgtk.}
proc print_unix_dialog_new*(title: cstring; parent: Window): PrintUnixDialog {.
    importc: "gtk_print_unix_dialog_new", libgtk.}
proc set_page_setup*(dialog: PrintUnixDialog; 
    page_setup: PageSetup) {.importc: "gtk_print_unix_dialog_set_page_setup", 
                                    libgtk.}
proc `page_setup=`*(dialog: PrintUnixDialog; 
    page_setup: PageSetup) {.importc: "gtk_print_unix_dialog_set_page_setup", 
                                    libgtk.}
proc get_page_setup*(dialog: PrintUnixDialog): PageSetup {.
    importc: "gtk_print_unix_dialog_get_page_setup", libgtk.}
proc page_setup*(dialog: PrintUnixDialog): PageSetup {.
    importc: "gtk_print_unix_dialog_get_page_setup", libgtk.}
proc set_current_page*(dialog: PrintUnixDialog; 
    current_page: gint) {.importc: "gtk_print_unix_dialog_set_current_page", 
                          libgtk.}
proc `current_page=`*(dialog: PrintUnixDialog; 
    current_page: gint) {.importc: "gtk_print_unix_dialog_set_current_page", 
                          libgtk.}
proc get_current_page*(dialog: PrintUnixDialog): gint {.
    importc: "gtk_print_unix_dialog_get_current_page", libgtk.}
proc current_page*(dialog: PrintUnixDialog): gint {.
    importc: "gtk_print_unix_dialog_get_current_page", libgtk.}
proc set_settings*(dialog: PrintUnixDialog; 
    settings: PrintSettings) {.importc: "gtk_print_unix_dialog_set_settings", 
                                      libgtk.}
proc `settings=`*(dialog: PrintUnixDialog; 
    settings: PrintSettings) {.importc: "gtk_print_unix_dialog_set_settings", 
                                      libgtk.}
proc get_settings*(dialog: PrintUnixDialog): PrintSettings {.
    importc: "gtk_print_unix_dialog_get_settings", libgtk.}
proc settings*(dialog: PrintUnixDialog): PrintSettings {.
    importc: "gtk_print_unix_dialog_get_settings", libgtk.}
proc get_selected_printer*(
    dialog: PrintUnixDialog): Printer {.
    importc: "gtk_print_unix_dialog_get_selected_printer", libgtk.}
proc selected_printer*(
    dialog: PrintUnixDialog): Printer {.
    importc: "gtk_print_unix_dialog_get_selected_printer", libgtk.}
proc add_custom_tab*(dialog: PrintUnixDialog; 
    child: Widget; tab_label: Widget) {.
    importc: "gtk_print_unix_dialog_add_custom_tab", libgtk.}
proc set_manual_capabilities*(
    dialog: PrintUnixDialog; capabilities: PrintCapabilities) {.
    importc: "gtk_print_unix_dialog_set_manual_capabilities", libgtk.}
proc `manual_capabilities=`*(
    dialog: PrintUnixDialog; capabilities: PrintCapabilities) {.
    importc: "gtk_print_unix_dialog_set_manual_capabilities", libgtk.}
proc get_manual_capabilities*(
    dialog: PrintUnixDialog): PrintCapabilities {.
    importc: "gtk_print_unix_dialog_get_manual_capabilities", libgtk.}
proc manual_capabilities*(
    dialog: PrintUnixDialog): PrintCapabilities {.
    importc: "gtk_print_unix_dialog_get_manual_capabilities", libgtk.}
proc set_support_selection*(
    dialog: PrintUnixDialog; support_selection: gboolean) {.
    importc: "gtk_print_unix_dialog_set_support_selection", libgtk.}
proc `support_selection=`*(
    dialog: PrintUnixDialog; support_selection: gboolean) {.
    importc: "gtk_print_unix_dialog_set_support_selection", libgtk.}
proc get_support_selection*(
    dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_support_selection", libgtk.}
proc support_selection*(
    dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_support_selection", libgtk.}
proc set_has_selection*(dialog: PrintUnixDialog; 
    has_selection: gboolean) {.importc: "gtk_print_unix_dialog_set_has_selection", 
                               libgtk.}
proc `has_selection=`*(dialog: PrintUnixDialog; 
    has_selection: gboolean) {.importc: "gtk_print_unix_dialog_set_has_selection", 
                               libgtk.}
proc get_has_selection*(dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_has_selection", libgtk.}
proc has_selection*(dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_has_selection", libgtk.}
proc set_embed_page_setup*(
    dialog: PrintUnixDialog; embed: gboolean) {.
    importc: "gtk_print_unix_dialog_set_embed_page_setup", libgtk.}
proc `embed_page_setup=`*(
    dialog: PrintUnixDialog; embed: gboolean) {.
    importc: "gtk_print_unix_dialog_set_embed_page_setup", libgtk.}
proc get_embed_page_setup*(
    dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_embed_page_setup", libgtk.}
proc embed_page_setup*(
    dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_embed_page_setup", libgtk.}
proc get_page_setup_set*(dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_page_setup_set", libgtk.}
proc page_setup_set*(dialog: PrintUnixDialog): gboolean {.
    importc: "gtk_print_unix_dialog_get_page_setup_set", libgtk.}

template gtk_widget_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, widget_accessible_get_type(), 
                              WidgetAccessibleObj))

template gtk_widget_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, widget_accessible_get_type(), 
                           WidgetAccessibleClassObj))

template gtk_is_widget_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, widget_accessible_get_type()))

template gtk_is_widget_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, widget_accessible_get_type()))

template gtk_widget_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, widget_accessible_get_type(), 
                             WidgetAccessibleClassObj))

type 
  WidgetAccessiblePrivateObj = object 
  
type 
  WidgetAccessible* =  ptr WidgetAccessibleObj
  WidgetAccessiblePtr* = ptr WidgetAccessibleObj
  WidgetAccessibleObj = object of AccessibleObj
    priv146: ptr WidgetAccessiblePrivateObj

type 
  WidgetAccessibleClass* =  ptr WidgetAccessibleClassObj
  WidgetAccessibleClassPtr* = ptr WidgetAccessibleClassObj
  WidgetAccessibleClassObj = object of AccessibleClassObj
    notify_gtk*: proc (`object`: GObject; pspec: gobject.GParamSpec) {.cdecl.}

proc widget_accessible_get_type*(): GType {.
    importc: "gtk_widget_accessible_get_type", libgtk.}

template gtk_arrow_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, arrow_accessible_get_type(), 
                              ArrowAccessibleObj))

template gtk_arrow_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, arrow_accessible_get_type(), 
                           ArrowAccessibleClassObj))

template gtk_is_arrow_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, arrow_accessible_get_type()))

template gtk_is_arrow_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, arrow_accessible_get_type()))

template gtk_arrow_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, arrow_accessible_get_type(), 
                             ArrowAccessibleClassObj))

type 
  ArrowAccessiblePrivateObj = object 
  
type 
  ArrowAccessible* =  ptr ArrowAccessibleObj
  ArrowAccessiblePtr* = ptr ArrowAccessibleObj
  ArrowAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv147: ptr ArrowAccessiblePrivateObj

type 
  ArrowAccessibleClass* =  ptr ArrowAccessibleClassObj
  ArrowAccessibleClassPtr* = ptr ArrowAccessibleClassObj
  ArrowAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc arrow_accessible_get_type*(): GType {.
    importc: "gtk_arrow_accessible_get_type", libgtk.}

template gtk_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, cell_accessible_get_type(), 
                              CellAccessibleObj))

template gtk_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, cell_accessible_get_type(), 
                           CellAccessibleClassObj))

template gtk_is_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, cell_accessible_get_type()))

template gtk_is_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, cell_accessible_get_type()))

template gtk_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, cell_accessible_get_type(), 
                             CellAccessibleClassObj))

type 
  CellAccessiblePrivateObj = object 
  
type 
  CellAccessible* =  ptr CellAccessibleObj
  CellAccessiblePtr* = ptr CellAccessibleObj
  CellAccessibleObj = object of AccessibleObj
    priv148: ptr CellAccessiblePrivateObj

type 
  CellAccessibleClass* =  ptr CellAccessibleClassObj
  CellAccessibleClassPtr* = ptr CellAccessibleClassObj
  CellAccessibleClassObj = object of AccessibleClassObj
    update_cache*: proc (cell: CellAccessible) {.cdecl.}

proc cell_accessible_get_type*(): GType {.
    importc: "gtk_cell_accessible_get_type", libgtk.}

template gtk_renderer_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, renderer_cell_accessible_get_type(), 
                              RendererCellAccessibleObj))

template gtk_renderer_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, renderer_cell_accessible_get_type(), 
                           RendererCellAccessibleClassObj))

template gtk_is_renderer_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, renderer_cell_accessible_get_type()))

template gtk_is_renderer_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, renderer_cell_accessible_get_type()))

template gtk_renderer_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, renderer_cell_accessible_get_type(), 
                             RendererCellAccessibleClassObj))

type 
  RendererCellAccessiblePrivateObj = object 
  
type 
  RendererCellAccessible* =  ptr RendererCellAccessibleObj
  RendererCellAccessiblePtr* = ptr RendererCellAccessibleObj
  RendererCellAccessibleObj = object of CellAccessibleObj
    priv149: ptr RendererCellAccessiblePrivateObj

type 
  RendererCellAccessibleClass* =  ptr RendererCellAccessibleClassObj
  RendererCellAccessibleClassPtr* = ptr RendererCellAccessibleClassObj
  RendererCellAccessibleClassObj = object of CellAccessibleClassObj

proc renderer_cell_accessible_get_type*(): GType {.
    importc: "gtk_renderer_cell_accessible_get_type", libgtk.}
proc renderer_cell_accessible_new*(renderer: CellRenderer): atk.Object {.
    importc: "gtk_renderer_cell_accessible_new", libgtk.}

template gtk_boolean_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, boolean_cell_accessible_get_type(), 
                              BooleanCellAccessibleObj))

template gtk_boolean_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, GAIL_BOOLEAN_CELL, 
                           BooleanCellAccessibleClassObj))

template gtk_is_boolean_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, boolean_cell_accessible_get_type()))

template gtk_is_boolean_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, boolean_cell_accessible_get_type()))

template gtk_boolean_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, boolean_cell_accessible_get_type(), 
                             BooleanCellAccessibleClassObj))

type 
  BooleanCellAccessiblePrivateObj = object 
  
type 
  BooleanCellAccessible* =  ptr BooleanCellAccessibleObj
  BooleanCellAccessiblePtr* = ptr BooleanCellAccessibleObj
  BooleanCellAccessibleObj*{.final.} = object of RendererCellAccessibleObj
    priv150: ptr BooleanCellAccessiblePrivateObj

type 
  BooleanCellAccessibleClass* =  ptr BooleanCellAccessibleClassObj
  BooleanCellAccessibleClassPtr* = ptr BooleanCellAccessibleClassObj
  BooleanCellAccessibleClassObj*{.final.} = object of RendererCellAccessibleClassObj

proc boolean_cell_accessible_get_type*(): GType {.
    importc: "gtk_boolean_cell_accessible_get_type", libgtk.}

template gtk_container_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, container_accessible_get_type(), 
                              ContainerAccessibleObj))

template gtk_container_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, container_accessible_get_type(), 
                           ContainerAccessibleClassObj))

template gtk_is_container_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, container_accessible_get_type()))

template gtk_is_container_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, container_accessible_get_type()))

template gtk_container_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, container_accessible_get_type(), 
                             ContainerAccessibleClassObj))

type 
  ContainerAccessiblePrivateObj = object 
  
type 
  ContainerAccessible* =  ptr ContainerAccessibleObj
  ContainerAccessiblePtr* = ptr ContainerAccessibleObj
  ContainerAccessibleObj = object of WidgetAccessibleObj
    priv151: ptr ContainerAccessiblePrivateObj

type 
  ContainerAccessibleClass* =  ptr ContainerAccessibleClassObj
  ContainerAccessibleClassPtr* = ptr ContainerAccessibleClassObj
  ContainerAccessibleClassObj = object of WidgetAccessibleClassObj
    add_gtk*: proc (container: Container; widget: Widget; 
                    data: gpointer): gint {.cdecl.}
    remove_gtk*: proc (container: Container; widget: Widget; 
                       data: gpointer): gint {.cdecl.}

proc container_accessible_get_type*(): GType {.
    importc: "gtk_container_accessible_get_type", libgtk.}

template gtk_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, button_accessible_get_type(), 
                              ButtonAccessibleObj))

template gtk_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, button_accessible_get_type(), 
                           ButtonAccessibleClassObj))

template gtk_is_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, button_accessible_get_type()))

template gtk_is_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, button_accessible_get_type()))

template gtk_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, button_accessible_get_type(), 
                             ButtonAccessibleClassObj))

type 
  ButtonAccessiblePrivateObj = object 
  
type 
  ButtonAccessible* =  ptr ButtonAccessibleObj
  ButtonAccessiblePtr* = ptr ButtonAccessibleObj
  ButtonAccessibleObj = object of ContainerAccessibleObj
    priv152: ptr ButtonAccessiblePrivateObj

type 
  ButtonAccessibleClass* =  ptr ButtonAccessibleClassObj
  ButtonAccessibleClassPtr* = ptr ButtonAccessibleClassObj
  ButtonAccessibleClassObj = object of ContainerAccessibleClassObj

proc button_accessible_get_type*(): GType {.
    importc: "gtk_button_accessible_get_type", libgtk.}

template gtk_is_cell_accessible_parent*(obj: expr): expr = 
  g_type_check_instance_type(obj, cell_accessible_parent_get_type())

template gtk_cell_accessible_parent*(obj: expr): expr = 
  g_type_check_instance_cast(obj, cell_accessible_parent_get_type(), 
                             CellAccessibleParentObj)

template gtk_cell_accessible_parent_get_iface*(obj: expr): expr = 
  (g_type_instance_get_interface(obj, cell_accessible_parent_get_type(), 
                                 CellAccessibleParentIfaceObj))

type 
  CellAccessibleParent* =  ptr CellAccessibleParentObj
  CellAccessibleParentPtr* = ptr CellAccessibleParentObj
  CellAccessibleParentObj* = object 
  
type 
  CellAccessibleParentIface* =  ptr CellAccessibleParentIfaceObj
  CellAccessibleParentIfacePtr* = ptr CellAccessibleParentIfaceObj
  CellAccessibleParentIfaceObj*{.final.} = object of gobject.GTypeInterfaceObj
    get_cell_extents*: proc (parent: CellAccessibleParent; 
                             cell: CellAccessible; x: var gint; 
                             y: var gint; width: var gint; height: var gint; 
                             coord_type: atk.CoordType) {.cdecl.}
    get_cell_area*: proc (parent: CellAccessibleParent; 
                          cell: CellAccessible; 
                          cell_rect: gdk3.Rectangle) {.cdecl.}
    grab_focus*: proc (parent: CellAccessibleParent; 
                       cell: CellAccessible): gboolean {.cdecl.}
    get_child_index*: proc (parent: CellAccessibleParent; 
                            cell: CellAccessible): cint {.cdecl.}
    get_renderer_state*: proc (parent: CellAccessibleParent; 
                               cell: CellAccessible): CellRendererState {.cdecl.}
    expand_collapse*: proc (parent: CellAccessibleParent; 
                            cell: CellAccessible) {.cdecl.}
    activate*: proc (parent: CellAccessibleParent; 
                     cell: CellAccessible) {.cdecl.}
    edit*: proc (parent: CellAccessibleParent; 
                 cell: CellAccessible) {.cdecl.}
    update_relationset*: proc (parent: CellAccessibleParent; 
                               cell: CellAccessible; 
                               relationset: atk.RelationSet) {.cdecl.}

proc cell_accessible_parent_get_type*(): GType {.
    importc: "gtk_cell_accessible_parent_get_type", libgtk.}
proc get_cell_extents*(
    parent: CellAccessibleParent; cell: CellAccessible; 
    x: var gint; y: var gint; width: var gint; height: var gint; 
    coord_type: atk.CoordType) {.importc: "gtk_cell_accessible_parent_get_cell_extents", 
                                libgtk.}
proc get_cell_area*(
    parent: CellAccessibleParent; cell: CellAccessible; 
    cell_rect: var gdk3.RectangleObj) {.importc: "gtk_cell_accessible_parent_get_cell_area", 
                                   libgtk.}
proc grab_focus*(
    parent: CellAccessibleParent; cell: CellAccessible): gboolean {.
    importc: "gtk_cell_accessible_parent_grab_focus", libgtk.}
proc get_child_index*(
    parent: CellAccessibleParent; cell: CellAccessible): cint {.
    importc: "gtk_cell_accessible_parent_get_child_index", libgtk.}
proc child_index*(
    parent: CellAccessibleParent; cell: CellAccessible): cint {.
    importc: "gtk_cell_accessible_parent_get_child_index", libgtk.}
proc get_renderer_state*(
    parent: CellAccessibleParent; cell: CellAccessible): CellRendererState {.
    importc: "gtk_cell_accessible_parent_get_renderer_state", libgtk.}
proc renderer_state*(
    parent: CellAccessibleParent; cell: CellAccessible): CellRendererState {.
    importc: "gtk_cell_accessible_parent_get_renderer_state", libgtk.}
proc expand_collapse*(
    parent: CellAccessibleParent; cell: CellAccessible) {.
    importc: "gtk_cell_accessible_parent_expand_collapse", libgtk.}
proc activate*(parent: CellAccessibleParent; 
    cell: CellAccessible) {.importc: "gtk_cell_accessible_parent_activate", 
                                   libgtk.}
proc edit*(parent: CellAccessibleParent; 
                                      cell: CellAccessible) {.
    importc: "gtk_cell_accessible_parent_edit", libgtk.}
proc update_relationset*(
    parent: CellAccessibleParent; cell: CellAccessible; 
    relationset: atk.RelationSet) {.
    importc: "gtk_cell_accessible_parent_update_relationset", libgtk.}

template gtk_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_item_accessible_get_type(), 
                              MenuItemAccessibleObj))

template gtk_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_item_accessible_get_type(), 
                           MenuItemAccessibleClassObj))

template gtk_is_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_item_accessible_get_type()))

template gtk_is_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_item_accessible_get_type()))

template gtk_menu_item_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_item_accessible_get_type(), 
                             MenuItemAccessibleClassObj))

type 
  MenuItemAccessiblePrivateObj = object 
  
type 
  MenuItemAccessible* =  ptr MenuItemAccessibleObj
  MenuItemAccessiblePtr* = ptr MenuItemAccessibleObj
  MenuItemAccessibleObj = object of ContainerAccessibleObj
    priv153: ptr MenuItemAccessiblePrivateObj

type 
  MenuItemAccessibleClass* =  ptr MenuItemAccessibleClassObj
  MenuItemAccessibleClassPtr* = ptr MenuItemAccessibleClassObj
  MenuItemAccessibleClassObj = object of ContainerAccessibleClassObj

proc menu_item_accessible_get_type*(): GType {.
    importc: "gtk_menu_item_accessible_get_type", libgtk.}

template gtk_check_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, check_menu_item_accessible_get_type(), 
                              CheckMenuItemAccessibleObj))

template gtk_check_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, check_menu_item_accessible_get_type(), 
                           CheckMenuItemAccessibleClassObj))

template gtk_is_check_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, check_menu_item_accessible_get_type()))

template gtk_is_check_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, check_menu_item_accessible_get_type()))

template gtk_check_menu_item_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, check_menu_item_accessible_get_type(), 
                             CheckMenuItemAccessibleClassObj))

type 
  CheckMenuItemAccessiblePrivateObj = object 
  
type 
  CheckMenuItemAccessible* =  ptr CheckMenuItemAccessibleObj
  CheckMenuItemAccessiblePtr* = ptr CheckMenuItemAccessibleObj
  CheckMenuItemAccessibleObj = object of MenuItemAccessibleObj
    priv154: ptr CheckMenuItemAccessiblePrivateObj

type 
  CheckMenuItemAccessibleClass* =  ptr CheckMenuItemAccessibleClassObj
  CheckMenuItemAccessibleClassPtr* = ptr CheckMenuItemAccessibleClassObj
  CheckMenuItemAccessibleClassObj = object of MenuItemAccessibleClassObj

proc check_menu_item_accessible_get_type*(): GType {.
    importc: "gtk_check_menu_item_accessible_get_type", libgtk.}

template gtk_combo_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, combo_box_accessible_get_type(), 
                              ComboBoxAccessibleObj))

template gtk_combo_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, combo_box_accessible_get_type(), 
                           ComboBoxAccessibleClassObj))

template gtk_is_combo_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, combo_box_accessible_get_type()))

template gtk_is_combo_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, combo_box_accessible_get_type()))

template gtk_combo_box_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, combo_box_accessible_get_type(), 
                             ComboBoxAccessibleClassObj))

type 
  ComboBoxAccessiblePrivateObj = object 
  
type 
  ComboBoxAccessible* =  ptr ComboBoxAccessibleObj
  ComboBoxAccessiblePtr* = ptr ComboBoxAccessibleObj
  ComboBoxAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv155: ptr ComboBoxAccessiblePrivateObj

type 
  ComboBoxAccessibleClass* =  ptr ComboBoxAccessibleClassObj
  ComboBoxAccessibleClassPtr* = ptr ComboBoxAccessibleClassObj
  ComboBoxAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc combo_box_accessible_get_type*(): GType {.
    importc: "gtk_combo_box_accessible_get_type", libgtk.}

template gtk_container_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, container_cell_accessible_get_type(), 
                              ContainerCellAccessibleObj))

template gtk_container_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, container_cell_accessible_get_type(), 
                           ContainerCellAccessibleClassObj))

template gtk_is_container_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, container_cell_accessible_get_type()))

template gtk_is_container_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, container_cell_accessible_get_type()))

template gtk_container_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, container_cell_accessible_get_type(), 
                             ContainerCellAccessibleClassObj))

type 
  ContainerCellAccessiblePrivateObj = object 
  
type 
  ContainerCellAccessible* =  ptr ContainerCellAccessibleObj
  ContainerCellAccessiblePtr* = ptr ContainerCellAccessibleObj
  ContainerCellAccessibleObj*{.final.} = object of CellAccessibleObj
    priv156: ptr ContainerCellAccessiblePrivateObj

type 
  ContainerCellAccessibleClass* =  ptr ContainerCellAccessibleClassObj
  ContainerCellAccessibleClassPtr* = ptr ContainerCellAccessibleClassObj
  ContainerCellAccessibleClassObj*{.final.} = object of CellAccessibleClassObj

proc container_cell_accessible_get_type*(): GType {.
    importc: "gtk_container_cell_accessible_get_type", libgtk.}
proc container_cell_accessible_new*(): ContainerCellAccessible {.
    importc: "gtk_container_cell_accessible_new", libgtk.}
proc add_child*(
    container: ContainerCellAccessible; child: CellAccessible) {.
    importc: "gtk_container_cell_accessible_add_child", libgtk.}
proc remove_child*(
    container: ContainerCellAccessible; child: CellAccessible) {.
    importc: "gtk_container_cell_accessible_remove_child", libgtk.}
proc get_children*(
    container: ContainerCellAccessible): glib.GList {.
    importc: "gtk_container_cell_accessible_get_children", libgtk.}
proc children*(
    container: ContainerCellAccessible): glib.GList {.
    importc: "gtk_container_cell_accessible_get_children", libgtk.}

template gtk_entry_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, entry_accessible_get_type(), 
                              EntryAccessibleObj))

template gtk_entry_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, entry_accessible_get_type(), 
                           EntryAccessibleClassObj))

template gtk_is_entry_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, entry_accessible_get_type()))

template gtk_is_entry_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, entry_accessible_get_type()))

template gtk_entry_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, entry_accessible_get_type(), 
                             EntryAccessibleClassObj))

type 
  EntryAccessiblePrivateObj = object 
  
type 
  EntryAccessible* =  ptr EntryAccessibleObj
  EntryAccessiblePtr* = ptr EntryAccessibleObj
  EntryAccessibleObj = object of WidgetAccessibleObj
    priv157: ptr EntryAccessiblePrivateObj

type 
  EntryAccessibleClass* =  ptr EntryAccessibleClassObj
  EntryAccessibleClassPtr* = ptr EntryAccessibleClassObj
  EntryAccessibleClassObj = object of WidgetAccessibleClassObj

proc entry_accessible_get_type*(): GType {.
    importc: "gtk_entry_accessible_get_type", libgtk.}
proc entry_icon_accessible_get_type*(): GType {.
    importc: "gtk_entry_icon_accessible_get_type", libgtk.}

template gtk_expander_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, expander_accessible_get_type(), 
                              ExpanderAccessibleObj))

template gtk_expander_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, expander_accessible_get_type(), 
                           ExpanderAccessibleClassObj))

template gtk_is_expander_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, expander_accessible_get_type()))

template gtk_is_expander_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, expander_accessible_get_type()))

template gtk_expander_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, expander_accessible_get_type(), 
                             ExpanderAccessibleClassObj))

type 
  ExpanderAccessiblePrivateObj = object 
  
type 
  ExpanderAccessible* =  ptr ExpanderAccessibleObj
  ExpanderAccessiblePtr* = ptr ExpanderAccessibleObj
  ExpanderAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv158: ptr ExpanderAccessiblePrivateObj

type 
  ExpanderAccessibleClass* =  ptr ExpanderAccessibleClassObj
  ExpanderAccessibleClassPtr* = ptr ExpanderAccessibleClassObj
  ExpanderAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc expander_accessible_get_type*(): GType {.
    importc: "gtk_expander_accessible_get_type", libgtk.}

template gtk_flow_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, flow_box_accessible_get_type(), 
                              FlowBoxAccessibleObj))

template gtk_flow_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, flow_box_accessible_get_type(), 
                           FlowBoxAccessibleClassObj))

template gtk_is_flow_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, flow_box_accessible_get_type()))

template gtk_is_flow_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, flow_box_accessible_get_type()))

template gtk_flow_box_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, flow_box_accessible_get_type(), 
                             FlowBoxAccessibleClassObj))

type 
  FlowBoxAccessiblePrivateObj = object 
  
type 
  FlowBoxAccessible* =  ptr FlowBoxAccessibleObj
  FlowBoxAccessiblePtr* = ptr FlowBoxAccessibleObj
  FlowBoxAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv159: ptr FlowBoxAccessiblePrivateObj

type 
  FlowBoxAccessibleClass* =  ptr FlowBoxAccessibleClassObj
  FlowBoxAccessibleClassPtr* = ptr FlowBoxAccessibleClassObj
  FlowBoxAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc flow_box_accessible_get_type*(): GType {.
    importc: "gtk_flow_box_accessible_get_type", libgtk.}

template gtk_flow_box_child_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, flow_box_child_accessible_get_type(), 
                              FlowBoxChildAccessibleObj))

template gtk_flow_box_child_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, flow_box_child_accessible_get_type(), 
                           FlowBoxChildAccessibleClassObj))

template gtk_is_flow_box_child_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, flow_box_child_accessible_get_type()))

template gtk_is_flow_box_child_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, flow_box_child_accessible_get_type()))

template gtk_flow_box_child_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, flow_box_child_accessible_get_type(), 
                             FlowBoxChildAccessibleClassObj))

type 
  FlowBoxChildAccessible* =  ptr FlowBoxChildAccessibleObj
  FlowBoxChildAccessiblePtr* = ptr FlowBoxChildAccessibleObj
  FlowBoxChildAccessibleObj*{.final.} = object of ContainerAccessibleObj

type 
  FlowBoxChildAccessibleClass* =  ptr FlowBoxChildAccessibleClassObj
  FlowBoxChildAccessibleClassPtr* = ptr FlowBoxChildAccessibleClassObj
  FlowBoxChildAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc flow_box_child_accessible_get_type*(): GType {.
    importc: "gtk_flow_box_child_accessible_get_type", libgtk.}

template gtk_frame_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, frame_accessible_get_type(), 
                              FrameAccessibleObj))

template gtk_frame_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, frame_accessible_get_type(), 
                           FrameAccessibleClassObj))

template gtk_is_frame_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, frame_accessible_get_type()))

template gtk_is_frame_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, frame_accessible_get_type()))

template gtk_frame_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, frame_accessible_get_type(), 
                             FrameAccessibleClassObj))

type 
  FrameAccessiblePrivateObj = object 
  
type 
  FrameAccessible* =  ptr FrameAccessibleObj
  FrameAccessiblePtr* = ptr FrameAccessibleObj
  FrameAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv160: ptr FrameAccessiblePrivateObj

type 
  FrameAccessibleClass* =  ptr FrameAccessibleClassObj
  FrameAccessibleClassPtr* = ptr FrameAccessibleClassObj
  FrameAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc frame_accessible_get_type*(): GType {.
    importc: "gtk_frame_accessible_get_type", libgtk.}

template gtk_icon_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, icon_view_accessible_get_type(), 
                              IconViewAccessibleObj))

template gtk_icon_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, icon_view_accessible_get_type(), 
                           IconViewAccessibleClassObj))

template gtk_is_icon_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, icon_view_accessible_get_type()))

template gtk_is_icon_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, icon_view_accessible_get_type()))

template gtk_icon_view_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, icon_view_accessible_get_type(), 
                             IconViewAccessibleClassObj))

type 
  IconViewAccessiblePrivateObj = object 
  
type 
  IconViewAccessible* =  ptr IconViewAccessibleObj
  IconViewAccessiblePtr* = ptr IconViewAccessibleObj
  IconViewAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv161: ptr IconViewAccessiblePrivateObj

type 
  IconViewAccessibleClass* =  ptr IconViewAccessibleClassObj
  IconViewAccessibleClassPtr* = ptr IconViewAccessibleClassObj
  IconViewAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc icon_view_accessible_get_type*(): GType {.
    importc: "gtk_icon_view_accessible_get_type", libgtk.}

template gtk_image_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, image_accessible_get_type(), 
                              ImageAccessibleObj))

template gtk_image_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, image_accessible_get_type(), 
                           ImageAccessibleClassObj))

template gtk_is_image_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, image_accessible_get_type()))

template gtk_is_image_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, image_accessible_get_type()))

template gtk_image_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, image_accessible_get_type(), 
                             ImageAccessibleClassObj))

type 
  ImageAccessiblePrivateObj = object 
  
type 
  ImageAccessible* =  ptr ImageAccessibleObj
  ImageAccessiblePtr* = ptr ImageAccessibleObj
  ImageAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv162: ptr ImageAccessiblePrivateObj

type 
  ImageAccessibleClass* =  ptr ImageAccessibleClassObj
  ImageAccessibleClassPtr* = ptr ImageAccessibleClassObj
  ImageAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc image_accessible_get_type*(): GType {.
    importc: "gtk_image_accessible_get_type", libgtk.}

template gtk_image_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, image_cell_accessible_get_type(), 
                              ImageCellAccessibleObj))

template gtk_image_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, gtk_image_cell_accessible, 
                           ImageCellAccessibleClassObj))

template gtk_is_image_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, image_cell_accessible_get_type()))

template gtk_is_image_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, image_cell_accessible_get_type()))

template gtk_image_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, image_cell_accessible_get_type(), 
                             ImageCellAccessibleClassObj))

type 
  ImageCellAccessiblePrivateObj = object 
  
type 
  ImageCellAccessible* =  ptr ImageCellAccessibleObj
  ImageCellAccessiblePtr* = ptr ImageCellAccessibleObj
  ImageCellAccessibleObj*{.final.} = object of RendererCellAccessibleObj
    priv163: ptr ImageCellAccessiblePrivateObj

type 
  ImageCellAccessibleClass* =  ptr ImageCellAccessibleClassObj
  ImageCellAccessibleClassPtr* = ptr ImageCellAccessibleClassObj
  ImageCellAccessibleClassObj*{.final.} = object of RendererCellAccessibleClassObj

proc image_cell_accessible_get_type*(): GType {.
    importc: "gtk_image_cell_accessible_get_type", libgtk.}

template gtk_label_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, label_accessible_get_type(), 
                              LabelAccessibleObj))

template gtk_label_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, label_accessible_get_type(), 
                           LabelAccessibleClassObj))

template gtk_is_label_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, label_accessible_get_type()))

template gtk_is_label_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, label_accessible_get_type()))

template gtk_label_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, label_accessible_get_type(), 
                             LabelAccessibleClassObj))

type 
  LabelAccessiblePrivateObj = object 
  
type 
  LabelAccessible* =  ptr LabelAccessibleObj
  LabelAccessiblePtr* = ptr LabelAccessibleObj
  LabelAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv164: ptr LabelAccessiblePrivateObj

type 
  LabelAccessibleClass* =  ptr LabelAccessibleClassObj
  LabelAccessibleClassPtr* = ptr LabelAccessibleClassObj
  LabelAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc label_accessible_get_type*(): GType {.
    importc: "gtk_label_accessible_get_type", libgtk.}

template gtk_level_bar_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, level_bar_accessible_get_type(), 
                              LevelBarAccessibleObj))

template gtk_level_bar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, level_bar_accessible_get_type(), 
                           LevelBarAccessibleClassObj))

template gtk_is_level_bar_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, level_bar_accessible_get_type()))

template gtk_is_level_bar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, level_bar_accessible_get_type()))

template gtk_level_bar_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, level_bar_accessible_get_type(), 
                             LevelBarAccessibleClassObj))

type 
  LevelBarAccessiblePrivateObj = object 
  
type 
  LevelBarAccessible* =  ptr LevelBarAccessibleObj
  LevelBarAccessiblePtr* = ptr LevelBarAccessibleObj
  LevelBarAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv165: ptr LevelBarAccessiblePrivateObj

type 
  LevelBarAccessibleClass* =  ptr LevelBarAccessibleClassObj
  LevelBarAccessibleClassPtr* = ptr LevelBarAccessibleClassObj
  LevelBarAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc level_bar_accessible_get_type*(): GType {.
    importc: "gtk_level_bar_accessible_get_type", libgtk.}

template gtk_link_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, link_button_accessible_get_type(), 
                              LinkButtonAccessibleObj))

template gtk_link_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, link_button_accessible_get_type(), 
                           LinkButtonAccessibleClassObj))

template gtk_is_link_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, link_button_accessible_get_type()))

template gtk_is_link_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, link_button_accessible_get_type()))

template gtk_link_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, link_button_accessible_get_type(), 
                             LinkButtonAccessibleClassObj))

type 
  LinkButtonAccessiblePrivateObj = object 
  
type 
  LinkButtonAccessible* =  ptr LinkButtonAccessibleObj
  LinkButtonAccessiblePtr* = ptr LinkButtonAccessibleObj
  LinkButtonAccessibleObj*{.final.} = object of ButtonAccessibleObj
    priv166: ptr LinkButtonAccessiblePrivateObj

type 
  LinkButtonAccessibleClass* =  ptr LinkButtonAccessibleClassObj
  LinkButtonAccessibleClassPtr* = ptr LinkButtonAccessibleClassObj
  LinkButtonAccessibleClassObj*{.final.} = object of ButtonAccessibleClassObj

proc link_button_accessible_get_type*(): GType {.
    importc: "gtk_link_button_accessible_get_type", libgtk.}

template gtk_list_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, list_box_accessible_get_type(), 
                              ListBoxAccessibleObj))

template gtk_list_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, list_box_accessible_get_type(), 
                           ListBoxAccessibleClassObj))

template gtk_is_list_box_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, list_box_accessible_get_type()))

template gtk_is_list_box_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, list_box_accessible_get_type()))

template gtk_list_box_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, list_box_accessible_get_type(), 
                             ListBoxAccessibleClassObj))

type 
  ListBoxAccessiblePrivateObj = object 
  
type 
  ListBoxAccessible* =  ptr ListBoxAccessibleObj
  ListBoxAccessiblePtr* = ptr ListBoxAccessibleObj
  ListBoxAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv167: ptr ListBoxAccessiblePrivateObj

type 
  ListBoxAccessibleClass* =  ptr ListBoxAccessibleClassObj
  ListBoxAccessibleClassPtr* = ptr ListBoxAccessibleClassObj
  ListBoxAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc list_box_accessible_get_type*(): GType {.
    importc: "gtk_list_box_accessible_get_type", libgtk.}

template gtk_list_box_row_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, list_box_row_accessible_get_type(), 
                              ListBoxRowAccessibleObj))

template gtk_list_box_row_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, list_box_row_accessible_get_type(), 
                           ListBoxRowAccessibleClassObj))

template gtk_is_list_box_row_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, list_box_row_accessible_get_type()))

template gtk_is_list_box_row_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, list_box_row_accessible_get_type()))

template gtk_list_box_row_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, list_box_row_accessible_get_type(), 
                             ListBoxRowAccessibleClassObj))

type 
  ListBoxRowAccessible* =  ptr ListBoxRowAccessibleObj
  ListBoxRowAccessiblePtr* = ptr ListBoxRowAccessibleObj
  ListBoxRowAccessibleObj*{.final.} = object of ContainerAccessibleObj

type 
  ListBoxRowAccessibleClass* =  ptr ListBoxRowAccessibleClassObj
  ListBoxRowAccessibleClassPtr* = ptr ListBoxRowAccessibleClassObj
  ListBoxRowAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc list_box_row_accessible_get_type*(): GType {.
    importc: "gtk_list_box_row_accessible_get_type", libgtk.}

template gtk_lock_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, lock_button_accessible_get_type(), 
                              LockButtonAccessibleObj))

template gtk_lock_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, lock_button_accessible_get_type(), 
                           LockButtonAccessibleClassObj))

template gtk_is_lock_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, lock_button_accessible_get_type()))

template gtk_is_lock_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, lock_button_accessible_get_type()))

template gtk_lock_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, lock_button_accessible_get_type(), 
                             LockButtonAccessibleClassObj))

type 
  LockButtonAccessiblePrivateObj = object 
  
type 
  LockButtonAccessible* =  ptr LockButtonAccessibleObj
  LockButtonAccessiblePtr* = ptr LockButtonAccessibleObj
  LockButtonAccessibleObj*{.final.} = object of ButtonAccessibleObj
    priv168: ptr LockButtonAccessiblePrivateObj

type 
  LockButtonAccessibleClass* =  ptr LockButtonAccessibleClassObj
  LockButtonAccessibleClassPtr* = ptr LockButtonAccessibleClassObj
  LockButtonAccessibleClassObj*{.final.} = object of ButtonAccessibleClassObj

proc lock_button_accessible_get_type*(): GType {.
    importc: "gtk_lock_button_accessible_get_type", libgtk.}

template gtk_menu_shell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_shell_accessible_get_type(), 
                              MenuShellAccessibleObj))

template gtk_menu_shell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_shell_accessible_get_type(), 
                           MenuShellAccessibleClassObj))

template gtk_is_menu_shell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_shell_accessible_get_type()))

template gtk_is_menu_shell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_shell_accessible_get_type()))

template gtk_menu_shell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_shell_accessible_get_type(), 
                             MenuShellAccessibleClassObj))

type 
  MenuShellAccessiblePrivateObj = object 
  
type 
  MenuShellAccessible* =  ptr MenuShellAccessibleObj
  MenuShellAccessiblePtr* = ptr MenuShellAccessibleObj
  MenuShellAccessibleObj = object of ContainerAccessibleObj
    priv169: ptr MenuShellAccessiblePrivateObj

type 
  MenuShellAccessibleClass* =  ptr MenuShellAccessibleClassObj
  MenuShellAccessibleClassPtr* = ptr MenuShellAccessibleClassObj
  MenuShellAccessibleClassObj = object of ContainerAccessibleClassObj

proc menu_shell_accessible_get_type*(): GType {.
    importc: "gtk_menu_shell_accessible_get_type", libgtk.}

template gtk_menu_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_accessible_get_type(), 
                              MenuAccessibleObj))

template gtk_menu_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_accessible_get_type(), 
                           MenuAccessibleClassObj))

template gtk_is_menu_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_accessible_get_type()))

template gtk_is_menu_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_accessible_get_type()))

template gtk_menu_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_accessible_get_type(), 
                             MenuAccessibleClassObj))

type 
  MenuAccessiblePrivateObj = object 
  
type 
  MenuAccessible* =  ptr MenuAccessibleObj
  MenuAccessiblePtr* = ptr MenuAccessibleObj
  MenuAccessibleObj*{.final.} = object of MenuShellAccessibleObj
    priv170: ptr MenuAccessiblePrivateObj

type 
  MenuAccessibleClass* =  ptr MenuAccessibleClassObj
  MenuAccessibleClassPtr* = ptr MenuAccessibleClassObj
  MenuAccessibleClassObj*{.final.} = object of MenuShellAccessibleClassObj

proc menu_accessible_get_type*(): GType {.
    importc: "gtk_menu_accessible_get_type", libgtk.}

template gtk_toggle_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toggle_button_accessible_get_type(), 
                              ToggleButtonAccessibleObj))

template gtk_toggle_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toggle_button_accessible_get_type(), 
                           ToggleButtonAccessibleClassObj))

template gtk_is_toggle_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toggle_button_accessible_get_type()))

template gtk_is_toggle_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toggle_button_accessible_get_type()))

template gtk_toggle_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toggle_button_accessible_get_type(), 
                             ToggleButtonAccessibleClassObj))

type 
  ToggleButtonAccessiblePrivateObj = object 
  
type 
  ToggleButtonAccessible* =  ptr ToggleButtonAccessibleObj
  ToggleButtonAccessiblePtr* = ptr ToggleButtonAccessibleObj
  ToggleButtonAccessibleObj = object of ButtonAccessibleObj
    priv171: ptr ToggleButtonAccessiblePrivateObj

type 
  ToggleButtonAccessibleClass* =  ptr ToggleButtonAccessibleClassObj
  ToggleButtonAccessibleClassPtr* = ptr ToggleButtonAccessibleClassObj
  ToggleButtonAccessibleClassObj = object of ButtonAccessibleClassObj

proc toggle_button_accessible_get_type*(): GType {.
    importc: "gtk_toggle_button_accessible_get_type", libgtk.}

template gtk_menu_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, menu_button_accessible_get_type(), 
                              MenuButtonAccessibleObj))

template gtk_menu_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, menu_button_accessible_get_type(), 
                           MenuButtonAccessibleClassObj))

template gtk_is_menu_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, menu_button_accessible_get_type()))

template gtk_is_menu_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, menu_button_accessible_get_type()))

template gtk_menu_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, menu_button_accessible_get_type(), 
                             MenuButtonAccessibleClassObj))

type 
  MenuButtonAccessiblePrivateObj = object 
  
type 
  MenuButtonAccessible* =  ptr MenuButtonAccessibleObj
  MenuButtonAccessiblePtr* = ptr MenuButtonAccessibleObj
  MenuButtonAccessibleObj*{.final.} = object of ToggleButtonAccessibleObj
    priv172: ptr MenuButtonAccessiblePrivateObj

type 
  MenuButtonAccessibleClass* =  ptr MenuButtonAccessibleClassObj
  MenuButtonAccessibleClassPtr* = ptr MenuButtonAccessibleClassObj
  MenuButtonAccessibleClassObj*{.final.} = object of ToggleButtonAccessibleClassObj

proc menu_button_accessible_get_type*(): GType {.
    importc: "gtk_menu_button_accessible_get_type", libgtk.}

template gtk_notebook_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, notebook_accessible_get_type(), 
                              NotebookAccessibleObj))

template gtk_notebook_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, notebook_accessible_get_type(), 
                           NotebookAccessibleClassObj))

template gtk_is_notebook_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, notebook_accessible_get_type()))

template gtk_is_notebook_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, notebook_accessible_get_type()))

template gtk_notebook_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, notebook_accessible_get_type(), 
                             NotebookAccessibleClassObj))

type 
  NotebookAccessiblePrivateObj = object 
  
type 
  NotebookAccessible* =  ptr NotebookAccessibleObj
  NotebookAccessiblePtr* = ptr NotebookAccessibleObj
  NotebookAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv173: ptr NotebookAccessiblePrivateObj

type 
  NotebookAccessibleClass* =  ptr NotebookAccessibleClassObj
  NotebookAccessibleClassPtr* = ptr NotebookAccessibleClassObj
  NotebookAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc notebook_accessible_get_type*(): GType {.
    importc: "gtk_notebook_accessible_get_type", libgtk.}

template gtk_notebook_page_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, notebook_page_accessible_get_type(), 
                              NotebookPageAccessibleObj))

template gtk_notebook_page_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, notebook_page_accessible_get_type(), 
                           NotebookPageAccessibleClassObj))

template gtk_is_notebook_page_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, notebook_page_accessible_get_type()))

template gtk_is_notebook_page_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, notebook_page_accessible_get_type()))

template gtk_notebook_page_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, notebook_page_accessible_get_type(), 
                             NotebookPageAccessibleClassObj))

type 
  NotebookPageAccessiblePrivateObj = object 
  
type 
  NotebookPageAccessible* =  ptr NotebookPageAccessibleObj
  NotebookPageAccessiblePtr* = ptr NotebookPageAccessibleObj
  NotebookPageAccessibleObj*{.final.} = object of atk.ObjectObj
    priv174: ptr NotebookPageAccessiblePrivateObj

type 
  NotebookPageAccessibleClass* =  ptr NotebookPageAccessibleClassObj
  NotebookPageAccessibleClassPtr* = ptr NotebookPageAccessibleClassObj
  NotebookPageAccessibleClassObj*{.final.} = object of atk.ObjectClassObj

proc notebook_page_accessible_get_type*(): GType {.
    importc: "gtk_notebook_page_accessible_get_type", libgtk.}
proc notebook_page_accessible_new*(notebook: NotebookAccessible; 
    child: Widget): atk.Object {.
    importc: "gtk_notebook_page_accessible_new", libgtk.}
proc invalidate*(
    page: NotebookPageAccessible) {.
    importc: "gtk_notebook_page_accessible_invalidate", libgtk.}

template gtk_popover_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, popover_accessible_get_type(), 
                              PopoverAccessibleObj))

template gtk_popover_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, popover_accessible_get_type(), 
                           PopoverAccessibleClassObj))

template gtk_is_popover_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, popover_accessible_get_type()))

template gtk_is_popover_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, popover_accessible_get_type()))

template gtk_popover_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, popover_accessible_get_type(), 
                             PopoverAccessibleClassObj))

type 
  PopoverAccessible* =  ptr PopoverAccessibleObj
  PopoverAccessiblePtr* = ptr PopoverAccessibleObj
  PopoverAccessibleObj*{.final.} = object of ContainerAccessibleObj

type 
  PopoverAccessibleClass* =  ptr PopoverAccessibleClassObj
  PopoverAccessibleClassPtr* = ptr PopoverAccessibleClassObj
  PopoverAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc popover_accessible_get_type*(): GType {.
    importc: "gtk_popover_accessible_get_type", libgtk.}

template gtk_paned_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, paned_accessible_get_type(), 
                              PanedAccessibleObj))

template gtk_paned_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, paned_accessible_get_type(), 
                           PanedAccessibleClassObj))

template gtk_is_paned_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, paned_accessible_get_type()))

template gtk_is_paned_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, paned_accessible_get_type()))

template gtk_paned_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, paned_accessible_get_type(), 
                             PanedAccessibleClassObj))

type 
  PanedAccessiblePrivateObj = object 
  
type 
  PanedAccessible* =  ptr PanedAccessibleObj
  PanedAccessiblePtr* = ptr PanedAccessibleObj
  PanedAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv175: ptr PanedAccessiblePrivateObj

type 
  PanedAccessibleClass* =  ptr PanedAccessibleClassObj
  PanedAccessibleClassPtr* = ptr PanedAccessibleClassObj
  PanedAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc paned_accessible_get_type*(): GType {.
    importc: "gtk_paned_accessible_get_type", libgtk.}

template gtk_progress_bar_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, progress_bar_accessible_get_type(), 
                              ProgressBarAccessibleObj))

template gtk_progress_bar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, progress_bar_accessible_get_type(), 
                           ProgressBarAccessibleClassObj))

template gtk_is_progress_bar_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, progress_bar_accessible_get_type()))

template gtk_is_progress_bar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, progress_bar_accessible_get_type()))

template gtk_progress_bar_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, progress_bar_accessible_get_type(), 
                             ProgressBarAccessibleClassObj))

type 
  ProgressBarAccessiblePrivateObj = object 
  
type 
  ProgressBarAccessible* =  ptr ProgressBarAccessibleObj
  ProgressBarAccessiblePtr* = ptr ProgressBarAccessibleObj
  ProgressBarAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv176: ptr ProgressBarAccessiblePrivateObj

type 
  ProgressBarAccessibleClass* =  ptr ProgressBarAccessibleClassObj
  ProgressBarAccessibleClassPtr* = ptr ProgressBarAccessibleClassObj
  ProgressBarAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc progress_bar_accessible_get_type*(): GType {.
    importc: "gtk_progress_bar_accessible_get_type", libgtk.}

template gtk_radio_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_button_accessible_get_type(), 
                              RadioButtonAccessibleObj))

template gtk_radio_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_button_accessible_get_type(), 
                           RadioButtonAccessibleClassObj))

template gtk_is_radio_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_button_accessible_get_type()))

template gtk_is_radio_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_button_accessible_get_type()))

template gtk_radio_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_button_accessible_get_type(), 
                             RadioButtonAccessibleClassObj))

type 
  RadioButtonAccessiblePrivateObj = object 
  
type 
  RadioButtonAccessible* =  ptr RadioButtonAccessibleObj
  RadioButtonAccessiblePtr* = ptr RadioButtonAccessibleObj
  RadioButtonAccessibleObj*{.final.} = object of ToggleButtonAccessibleObj
    priv177: ptr RadioButtonAccessiblePrivateObj

type 
  RadioButtonAccessibleClass* =  ptr RadioButtonAccessibleClassObj
  RadioButtonAccessibleClassPtr* = ptr RadioButtonAccessibleClassObj
  RadioButtonAccessibleClassObj*{.final.} = object of ToggleButtonAccessibleClassObj

proc radio_button_accessible_get_type*(): GType {.
    importc: "gtk_radio_button_accessible_get_type", libgtk.}

template gtk_radio_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, radio_menu_item_accessible_get_type(), 
                              RadioMenuItemAccessibleObj))

template gtk_radio_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, radio_menu_item_accessible_get_type(), 
                           RadioMenuItemAccessibleClassObj))

template gtk_is_radio_menu_item_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, radio_menu_item_accessible_get_type()))

template gtk_is_radio_menu_item_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, radio_menu_item_accessible_get_type()))

template gtk_radio_menu_item_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, radio_menu_item_accessible_get_type(), 
                             RadioMenuItemAccessibleClassObj))

type 
  RadioMenuItemAccessiblePrivateObj = object 
  
type 
  RadioMenuItemAccessible* =  ptr RadioMenuItemAccessibleObj
  RadioMenuItemAccessiblePtr* = ptr RadioMenuItemAccessibleObj
  RadioMenuItemAccessibleObj*{.final.} = object of CheckMenuItemAccessibleObj
    priv178: ptr RadioMenuItemAccessiblePrivateObj

type 
  RadioMenuItemAccessibleClass* =  ptr RadioMenuItemAccessibleClassObj
  RadioMenuItemAccessibleClassPtr* = ptr RadioMenuItemAccessibleClassObj
  RadioMenuItemAccessibleClassObj*{.final.} = object of CheckMenuItemAccessibleClassObj

proc radio_menu_item_accessible_get_type*(): GType {.
    importc: "gtk_radio_menu_item_accessible_get_type", libgtk.}

template gtk_range_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, range_accessible_get_type(), 
                              RangeAccessibleObj))

template gtk_range_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, range_accessible_get_type(), 
                           RangeAccessibleClassObj))

template gtk_is_range_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, range_accessible_get_type()))

template gtk_is_range_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, range_accessible_get_type()))

template gtk_range_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, range_accessible_get_type(), 
                             RangeAccessibleClassObj))

type 
  RangeAccessiblePrivateObj = object 
  
type 
  RangeAccessible* =  ptr RangeAccessibleObj
  RangeAccessiblePtr* = ptr RangeAccessibleObj
  RangeAccessibleObj = object of WidgetAccessibleObj
    priv179: ptr RangeAccessiblePrivateObj

type 
  RangeAccessibleClass* =  ptr RangeAccessibleClassObj
  RangeAccessibleClassPtr* = ptr RangeAccessibleClassObj
  RangeAccessibleClassObj = object of WidgetAccessibleClassObj

proc range_accessible_get_type*(): GType {.
    importc: "gtk_range_accessible_get_type", libgtk.}

template gtk_scale_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scale_accessible_get_type(), 
                              ScaleAccessibleObj))

template gtk_scale_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scale_accessible_get_type(), 
                           ScaleAccessibleClassObj))

template gtk_is_scale_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scale_accessible_get_type()))

template gtk_is_scale_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scale_accessible_get_type()))

template gtk_scale_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scale_accessible_get_type(), 
                             ScaleAccessibleClassObj))

type 
  ScaleAccessiblePrivateObj = object 
  
type 
  ScaleAccessible* =  ptr ScaleAccessibleObj
  ScaleAccessiblePtr* = ptr ScaleAccessibleObj
  ScaleAccessibleObj*{.final.} = object of RangeAccessibleObj
    priv180: ptr ScaleAccessiblePrivateObj

type 
  ScaleAccessibleClass* =  ptr ScaleAccessibleClassObj
  ScaleAccessibleClassPtr* = ptr ScaleAccessibleClassObj
  ScaleAccessibleClassObj*{.final.} = object of RangeAccessibleClassObj

proc scale_accessible_get_type*(): GType {.
    importc: "gtk_scale_accessible_get_type", libgtk.}

template gtk_scale_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scale_button_accessible_get_type(), 
                              ScaleButtonAccessibleObj))

template gtk_scale_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scale_button_accessible_get_type(), 
                           ScaleButtonAccessibleClassObj))

template gtk_is_scale_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scale_button_accessible_get_type()))

template gtk_is_scale_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scale_button_accessible_get_type()))

template gtk_scale_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scale_button_accessible_get_type(), 
                             ScaleButtonAccessibleClassObj))

type 
  ScaleButtonAccessiblePrivateObj = object 
  
type 
  ScaleButtonAccessible* =  ptr ScaleButtonAccessibleObj
  ScaleButtonAccessiblePtr* = ptr ScaleButtonAccessibleObj
  ScaleButtonAccessibleObj*{.final.} = object of ButtonAccessibleObj
    priv181: ptr ScaleButtonAccessiblePrivateObj

type 
  ScaleButtonAccessibleClass* =  ptr ScaleButtonAccessibleClassObj
  ScaleButtonAccessibleClassPtr* = ptr ScaleButtonAccessibleClassObj
  ScaleButtonAccessibleClassObj*{.final.} = object of ButtonAccessibleClassObj

proc scale_button_accessible_get_type*(): GType {.
    importc: "gtk_scale_button_accessible_get_type", libgtk.}

template gtk_scrolled_window_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, scrolled_window_accessible_get_type(), 
                              ScrolledWindowAccessibleObj))

template gtk_scrolled_window_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, scrolled_window_accessible_get_type(), 
                           ScrolledWindowAccessibleClassObj))

template gtk_is_scrolled_window_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, scrolled_window_accessible_get_type()))

template gtk_is_scrolled_window_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, scrolled_window_accessible_get_type()))

template gtk_scrolled_window_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, scrolled_window_accessible_get_type(), 
                             ScrolledWindowAccessibleClassObj))

type 
  ScrolledWindowAccessiblePrivateObj = object 
  
type 
  ScrolledWindowAccessible* =  ptr ScrolledWindowAccessibleObj
  ScrolledWindowAccessiblePtr* = ptr ScrolledWindowAccessibleObj
  ScrolledWindowAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv182: ptr ScrolledWindowAccessiblePrivateObj

type 
  ScrolledWindowAccessibleClass* =  ptr ScrolledWindowAccessibleClassObj
  ScrolledWindowAccessibleClassPtr* = ptr ScrolledWindowAccessibleClassObj
  ScrolledWindowAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc scrolled_window_accessible_get_type*(): GType {.
    importc: "gtk_scrolled_window_accessible_get_type", libgtk.}

template gtk_spin_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, spin_button_accessible_get_type(), 
                              SpinButtonAccessibleObj))

template gtk_spin_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, spin_button_accessible_get_type(), 
                           SpinButtonAccessibleClassObj))

template gtk_is_spin_button_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, spin_button_accessible_get_type()))

template gtk_is_spin_button_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, spin_button_accessible_get_type()))

template gtk_spin_button_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, spin_button_accessible_get_type(), 
                             SpinButtonAccessibleClassObj))

type 
  SpinButtonAccessiblePrivateObj = object 
  
type 
  SpinButtonAccessible* =  ptr SpinButtonAccessibleObj
  SpinButtonAccessiblePtr* = ptr SpinButtonAccessibleObj
  SpinButtonAccessibleObj*{.final.} = object of EntryAccessibleObj
    priv183: ptr SpinButtonAccessiblePrivateObj

type 
  SpinButtonAccessibleClass* =  ptr SpinButtonAccessibleClassObj
  SpinButtonAccessibleClassPtr* = ptr SpinButtonAccessibleClassObj
  SpinButtonAccessibleClassObj*{.final.} = object of EntryAccessibleClassObj

proc spin_button_accessible_get_type*(): GType {.
    importc: "gtk_spin_button_accessible_get_type", libgtk.}

template gtk_spinner_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, spinner_accessible_get_type(), 
                              SpinnerAccessibleObj))

template gtk_spinner_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, spinner_accessible_get_type(), 
                           SpinnerAccessibleClassObj))

template gtk_is_spinner_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, spinner_accessible_get_type()))

template gtk_is_spinner_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, spinner_accessible_get_type()))

template gtk_spinner_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, spinner_accessible_get_type(), 
                             SpinnerAccessibleClassObj))

type 
  SpinnerAccessiblePrivateObj = object 
  
type 
  SpinnerAccessible* =  ptr SpinnerAccessibleObj
  SpinnerAccessiblePtr* = ptr SpinnerAccessibleObj
  SpinnerAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv184: ptr SpinnerAccessiblePrivateObj

type 
  SpinnerAccessibleClass* =  ptr SpinnerAccessibleClassObj
  SpinnerAccessibleClassPtr* = ptr SpinnerAccessibleClassObj
  SpinnerAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc spinner_accessible_get_type*(): GType {.
    importc: "gtk_spinner_accessible_get_type", libgtk.}

template gtk_statusbar_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, statusbar_accessible_get_type(), 
                              StatusbarAccessibleObj))

template gtk_statusbar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, statusbar_accessible_get_type(), 
                           StatusbarAccessibleClassObj))

template gtk_is_statusbar_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, statusbar_accessible_get_type()))

template gtk_is_statusbar_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, statusbar_accessible_get_type()))

template gtk_statusbar_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, statusbar_accessible_get_type(), 
                             StatusbarAccessibleClassObj))

type 
  StatusbarAccessiblePrivateObj = object 
  
type 
  StatusbarAccessible* =  ptr StatusbarAccessibleObj
  StatusbarAccessiblePtr* = ptr StatusbarAccessibleObj
  StatusbarAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv185: ptr StatusbarAccessiblePrivateObj

type 
  StatusbarAccessibleClass* =  ptr StatusbarAccessibleClassObj
  StatusbarAccessibleClassPtr* = ptr StatusbarAccessibleClassObj
  StatusbarAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc statusbar_accessible_get_type*(): GType {.
    importc: "gtk_statusbar_accessible_get_type", libgtk.}

template gtk_switch_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, switch_accessible_get_type(), 
                              SwitchAccessibleObj))

template gtk_switch_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, switch_accessible_get_type(), 
                           SwitchAccessibleClassObj))

template gtk_is_switch_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, switch_accessible_get_type()))

template gtk_is_switch_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, switch_accessible_get_type()))

template gtk_switch_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, switch_accessible_get_type(), 
                             SwitchAccessibleClassObj))

type 
  SwitchAccessiblePrivateObj = object 
  
type 
  SwitchAccessible* =  ptr SwitchAccessibleObj
  SwitchAccessiblePtr* = ptr SwitchAccessibleObj
  SwitchAccessibleObj*{.final.} = object of WidgetAccessibleObj
    priv186: ptr SwitchAccessiblePrivateObj

type 
  SwitchAccessibleClass* =  ptr SwitchAccessibleClassObj
  SwitchAccessibleClassPtr* = ptr SwitchAccessibleClassObj
  SwitchAccessibleClassObj*{.final.} = object of WidgetAccessibleClassObj

proc switch_accessible_get_type*(): GType {.
    importc: "gtk_switch_accessible_get_type", libgtk.}

template gtk_text_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_cell_accessible_get_type(), 
                              TextCellAccessibleObj))

template gtk_text_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, gtk_text_cell_accessible, 
                           TextCellAccessibleClassObj))

template gtk_is_text_cell_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_cell_accessible_get_type()))

template gtk_is_text_cell_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_cell_accessible_get_type()))

template gtk_text_cell_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_cell_accessible_get_type(), 
                             TextCellAccessibleClassObj))

type 
  TextCellAccessiblePrivateObj = object 
  
type 
  TextCellAccessible* =  ptr TextCellAccessibleObj
  TextCellAccessiblePtr* = ptr TextCellAccessibleObj
  TextCellAccessibleObj*{.final.} = object of RendererCellAccessibleObj
    priv187: ptr TextCellAccessiblePrivateObj

type 
  TextCellAccessibleClass* =  ptr TextCellAccessibleClassObj
  TextCellAccessibleClassPtr* = ptr TextCellAccessibleClassObj
  TextCellAccessibleClassObj*{.final.} = object of RendererCellAccessibleClassObj

proc text_cell_accessible_get_type*(): GType {.
    importc: "gtk_text_cell_accessible_get_type", libgtk.}

template gtk_text_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, text_view_accessible_get_type(), 
                              TextViewAccessibleObj))

template gtk_text_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, text_view_accessible_get_type(), 
                           TextViewAccessibleClassObj))

template gtk_is_text_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, text_view_accessible_get_type()))

template gtk_is_text_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, text_view_accessible_get_type()))

template gtk_text_view_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, text_view_accessible_get_type(), 
                             TextViewAccessibleClassObj))

type 
  TextViewAccessiblePrivateObj = object 
  
type 
  TextViewAccessible* =  ptr TextViewAccessibleObj
  TextViewAccessiblePtr* = ptr TextViewAccessibleObj
  TextViewAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv188: ptr TextViewAccessiblePrivateObj

type 
  TextViewAccessibleClass* =  ptr TextViewAccessibleClassObj
  TextViewAccessibleClassPtr* = ptr TextViewAccessibleClassObj
  TextViewAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc text_view_accessible_get_type*(): GType {.
    importc: "gtk_text_view_accessible_get_type", libgtk.}

template gtk_toplevel_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, toplevel_accessible_get_type(), 
                              ToplevelAccessibleObj))

template gtk_toplevel_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, toplevel_accessible_get_type(), 
                           ToplevelAccessibleClassObj))

template gtk_is_toplevel_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, toplevel_accessible_get_type()))

template gtk_is_toplevel_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, toplevel_accessible_get_type()))

template gtk_toplevel_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, toplevel_accessible_get_type(), 
                             ToplevelAccessibleClassObj))

type 
  ToplevelAccessiblePrivateObj = object 
  
type 
  ToplevelAccessible* =  ptr ToplevelAccessibleObj
  ToplevelAccessiblePtr* = ptr ToplevelAccessibleObj
  ToplevelAccessibleObj*{.final.} = object of atk.ObjectObj
    priv189: ptr ToplevelAccessiblePrivateObj

type 
  ToplevelAccessibleClass* =  ptr ToplevelAccessibleClassObj
  ToplevelAccessibleClassPtr* = ptr ToplevelAccessibleClassObj
  ToplevelAccessibleClassObj*{.final.} = object of atk.ObjectClassObj

proc toplevel_accessible_get_type*(): GType {.
    importc: "gtk_toplevel_accessible_get_type", libgtk.}
proc get_children*(
    accessible: ToplevelAccessible): glib.GList {.
    importc: "gtk_toplevel_accessible_get_children", libgtk.}
proc children*(
    accessible: ToplevelAccessible): glib.GList {.
    importc: "gtk_toplevel_accessible_get_children", libgtk.}

template gtk_tree_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, tree_view_accessible_get_type(), 
                              TreeViewAccessibleObj))

template gtk_tree_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, tree_view_accessible_get_type(), 
                           TreeViewAccessibleClassObj))

template gtk_is_tree_view_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, tree_view_accessible_get_type()))

template gtk_is_tree_view_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, tree_view_accessible_get_type()))

template gtk_tree_view_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, tree_view_accessible_get_type(), 
                             TreeViewAccessibleClassObj))

type 
  TreeViewAccessiblePrivateObj = object 
  
type 
  TreeViewAccessible* =  ptr TreeViewAccessibleObj
  TreeViewAccessiblePtr* = ptr TreeViewAccessibleObj
  TreeViewAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv190: ptr TreeViewAccessiblePrivateObj

type 
  TreeViewAccessibleClass* =  ptr TreeViewAccessibleClassObj
  TreeViewAccessibleClassPtr* = ptr TreeViewAccessibleClassObj
  TreeViewAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc tree_view_accessible_get_type*(): GType {.
    importc: "gtk_tree_view_accessible_get_type", libgtk.}

template gtk_window_accessible*(obj: expr): expr = 
  (g_type_check_instance_cast(obj, window_accessible_get_type(), 
                              WindowAccessibleObj))

template gtk_window_accessible_class*(klass: expr): expr = 
  (g_type_check_class_cast(klass, window_accessible_get_type(), 
                           WindowAccessibleClassObj))

template gtk_is_window_accessible*(obj: expr): expr = 
  (g_type_check_instance_type(obj, window_accessible_get_type()))

template gtk_is_window_accessible_class*(klass: expr): expr = 
  (g_type_check_class_type(klass, window_accessible_get_type()))

template gtk_window_accessible_get_class*(obj: expr): expr = 
  (g_type_instance_get_class(obj, window_accessible_get_type(), 
                             WindowAccessibleClassObj))

type 
  WindowAccessiblePrivateObj = object 
  
type 
  WindowAccessible* =  ptr WindowAccessibleObj
  WindowAccessiblePtr* = ptr WindowAccessibleObj
  WindowAccessibleObj*{.final.} = object of ContainerAccessibleObj
    priv191: ptr WindowAccessiblePrivateObj

type 
  WindowAccessibleClass* =  ptr WindowAccessibleClassObj
  WindowAccessibleClassPtr* = ptr WindowAccessibleClassObj
  WindowAccessibleClassObj*{.final.} = object of ContainerAccessibleClassObj

proc window_accessible_get_type*(): GType {.
    importc: "gtk_window_accessible_get_type", libgtk.}

{.deprecated: [PAccelGroup: AccelGroup, TAccelGroup: AccelGroupObj].}
{.deprecated: [PAccelGroupClass: AccelGroupClass, TAccelGroupClass: AccelGroupClassObj].}
{.deprecated: [PAccelKey: AccelKey, TAccelKey: AccelKeyObj].}
{.deprecated: [PAccelGroupEntry: AccelGroupEntry, TAccelGroupEntry: AccelGroupEntryObj].}
{.deprecated: [PBorder: Border, TBorder: BorderObj].}
{.deprecated: [PClipboard: Clipboard, TClipboard: ClipboardObj].}
{.deprecated: [PIconSet: IconSet, TIconSet: IconSetObj].}
{.deprecated: [PIconSource: IconSource, TIconSource: IconSourceObj].}
{.deprecated: [PSelectionData: SelectionData, TSelectionData: SelectionDataObj].}
{.deprecated: [PTooltip: Tooltip, TTooltip: TooltipObj].}
{.deprecated: [PWidgetPath: WidgetPath, TWidgetPath: WidgetPathObj].}
{.deprecated: [PAllocation: Allocation, TAllocation: AllocationObj].}
{.deprecated: [PRequisition: Requisition, TRequisition: RequisitionObj].}
{.deprecated: [PWidget: Widget, TWidget: WidgetObj].}
{.deprecated: [PWidgetClass: WidgetClass, TWidgetClass: WidgetClassObj].}
{.deprecated: [PWidgetAuxInfo: WidgetAuxInfo, TWidgetAuxInfo: WidgetAuxInfoObj].}
{.deprecated: [PApplication: Application, TApplication: ApplicationObj].}
{.deprecated: [PApplicationClass: ApplicationClass, TApplicationClass: ApplicationClassObj].}
{.deprecated: [PContainer: Container, TContainer: ContainerObj].}
{.deprecated: [PContainerClass: ContainerClass, TContainerClass: ContainerClassObj].}
{.deprecated: [PBin: Bin, TBin: BinObj].}
{.deprecated: [PBinClass: BinClass, TBinClass: BinClassObj].}
{.deprecated: [PWindow: Window, TWindow: WindowObj].}
{.deprecated: [PWindowClass: WindowClass, TWindowClass: WindowClassObj].}
{.deprecated: [PDialog: Dialog, TDialog: DialogObj].}
{.deprecated: [PDialogClass: DialogClass, TDialogClass: DialogClassObj].}
{.deprecated: [PAboutDialog: AboutDialog, TAboutDialog: AboutDialogObj].}
{.deprecated: [PAboutDialogClass: AboutDialogClass, TAboutDialogClass: AboutDialogClassObj].}
{.deprecated: [PMisc: Misc, TMisc: MiscObj].}
{.deprecated: [PMiscClass: MiscClass, TMiscClass: MiscClassObj].}
{.deprecated: [PMenuShell: MenuShell, TMenuShell: MenuShellObj].}
{.deprecated: [PMenuShellClass: MenuShellClass, TMenuShellClass: MenuShellClassObj].}
{.deprecated: [PMenu: Menu, TMenu: MenuObj].}
{.deprecated: [PMenuClass: MenuClass, TMenuClass: MenuClassObj].}
{.deprecated: [PLabel: Label, TLabel: LabelObj].}
{.deprecated: [PLabelClass: LabelClass, TLabelClass: LabelClassObj].}
{.deprecated: [PAccelLabel: AccelLabel, TAccelLabel: AccelLabelObj].}
{.deprecated: [PAccelLabelClass: AccelLabelClass, TAccelLabelClass: AccelLabelClassObj].}
{.deprecated: [PAccelMap: AccelMap, TAccelMap: AccelMapObj].}
{.deprecated: [PAccessible: Accessible, TAccessible: AccessibleObj].}
{.deprecated: [PAccessibleClass: AccessibleClass, TAccessibleClass: AccessibleClassObj].}
{.deprecated: [PActionable: Actionable, TActionable: ActionableObj].}
{.deprecated: [PActionableInterface: ActionableInterface, TActionableInterface: ActionableInterfaceObj].}
{.deprecated: [PActionBar: ActionBar, TActionBar: ActionBarObj].}
{.deprecated: [PActionBarClass: ActionBarClass, TActionBarClass: ActionBarClassObj].}
{.deprecated: [PAdjustment: Adjustment, TAdjustment: AdjustmentObj].}
{.deprecated: [PAdjustmentClass: AdjustmentClass, TAdjustmentClass: AdjustmentClassObj].}
{.deprecated: [PAppChooser: AppChooser, TAppChooser: AppChooserObj].}
{.deprecated: [PAppChooserDialog: AppChooserDialog, TAppChooserDialog: AppChooserDialogObj].}
{.deprecated: [PAppChooserDialogClass: AppChooserDialogClass, TAppChooserDialogClass: AppChooserDialogClassObj].}
{.deprecated: [PBox: Box, TBox: BoxObj].}
{.deprecated: [PBoxClass: BoxClass, TBoxClass: BoxClassObj].}
{.deprecated: [PAppChooserWidget: AppChooserWidget, TAppChooserWidget: AppChooserWidgetObj].}
{.deprecated: [PAppChooserWidgetClass: AppChooserWidgetClass, TAppChooserWidgetClass: AppChooserWidgetClassObj].}
{.deprecated: [PTreePath: TreePath, TTreePath: TreePathObj].}
{.deprecated: [PTreeRowReference: TreeRowReference, TTreeRowReference: TreeRowReferenceObj].}
{.deprecated: [PTreeModel: TreeModel, TTreeModel: TreeModelObj].}
{.deprecated: [PTreeIter: TreeIter, TTreeIter: TreeIterObj].}
{.deprecated: [PTreeModelIface: TreeModelIface, TTreeModelIface: TreeModelIfaceObj].}
{.deprecated: [PCellEditable: CellEditable, TCellEditable: CellEditableObj].}
{.deprecated: [PCellEditableIface: CellEditableIface, TCellEditableIface: CellEditableIfaceObj].}
{.deprecated: [PCellRenderer: CellRenderer, TCellRenderer: CellRendererObj].}
{.deprecated: [PCellRendererClass: CellRendererClass, TCellRendererClass: CellRendererClassObj].}
{.deprecated: [PTreeSortable: TreeSortable, TTreeSortable: TreeSortableObj].}
{.deprecated: [PTreeSortableIface: TreeSortableIface, TTreeSortableIface: TreeSortableIfaceObj].}
{.deprecated: [PCellArea: CellArea, TCellArea: CellAreaObj].}
{.deprecated: [PCellAreaClass: CellAreaClass, TCellAreaClass: CellAreaClassObj].}
{.deprecated: [PTreeViewColumn: TreeViewColumn, TTreeViewColumn: TreeViewColumnObj].}
{.deprecated: [PTreeViewColumnClass: TreeViewColumnClass, TTreeViewColumnClass: TreeViewColumnClassObj].}
{.deprecated: [PTextAppearance: TextAppearance, TTextAppearance: TextAppearanceObj].}
{.deprecated: [PTextAttributes: TextAttributes, TTextAttributes: TextAttributesObj].}
{.deprecated: [PTextChildAnchor: TextChildAnchor, TTextChildAnchor: TextChildAnchorObj].}
{.deprecated: [PTextChildAnchorClass: TextChildAnchorClass, TTextChildAnchorClass: TextChildAnchorClassObj].}
{.deprecated: [PTextTag: TextTag, TTextTag: TextTagObj].}
{.deprecated: [PTextTagClass: TextTagClass, TTextTagClass: TextTagClassObj].}
{.deprecated: [PTextIter: TextIter, TTextIter: TextIterObj].}
{.deprecated: [PTargetPair: TargetPair, TTargetPair: TargetPairObj].}
{.deprecated: [PTargetList: TargetList, TTargetList: TargetListObj].}
{.deprecated: [PTargetEntry: TargetEntry, TTargetEntry: TargetEntryObj].}
{.deprecated: [PEditable: Editable, TEditable: EditableObj].}
{.deprecated: [PEditableInterface: EditableInterface, TEditableInterface: EditableInterfaceObj].}
{.deprecated: [PIMContext: IMContext, TIMContext: IMContextObj].}
{.deprecated: [PIMContextClass: IMContextClass, TIMContextClass: IMContextClassObj].}
{.deprecated: [PEntryBuffer: EntryBuffer, TEntryBuffer: EntryBufferObj].}
{.deprecated: [PEntryBufferClass: EntryBufferClass, TEntryBufferClass: EntryBufferClassObj].}
{.deprecated: [PListStore: ListStore, TListStore: ListStoreObj].}
{.deprecated: [PListStoreClass: ListStoreClass, TListStoreClass: ListStoreClassObj].}
{.deprecated: [PTreeModelFilter: TreeModelFilter, TTreeModelFilter: TreeModelFilterObj].}
{.deprecated: [PTreeModelFilterClass: TreeModelFilterClass, TTreeModelFilterClass: TreeModelFilterClassObj].}
{.deprecated: [PEntryCompletion: EntryCompletion, TEntryCompletion: EntryCompletionObj].}
{.deprecated: [PEntryCompletionClass: EntryCompletionClass, TEntryCompletionClass: EntryCompletionClassObj].}
{.deprecated: [PImage: Image, TImage: ImageObj].}
{.deprecated: [PImageClass: ImageClass, TImageClass: ImageClassObj].}
{.deprecated: [PEntry: Entry, TEntry: EntryObj].}
{.deprecated: [PEntryClass: EntryClass, TEntryClass: EntryClassObj].}
{.deprecated: [PTreeView: TreeView, TTreeView: TreeViewObj].}
{.deprecated: [PTreeViewClass: TreeViewClass, TTreeViewClass: TreeViewClassObj].}
{.deprecated: [PComboBox: ComboBox, TComboBox: ComboBoxObj].}
{.deprecated: [PComboBoxClass: ComboBoxClass, TComboBoxClass: ComboBoxClassObj].}
{.deprecated: [PAppChooserButton: AppChooserButton, TAppChooserButton: AppChooserButtonObj].}
{.deprecated: [PAppChooserButtonClass: AppChooserButtonClass, TAppChooserButtonClass: AppChooserButtonClassObj].}
{.deprecated: [PApplicationWindow: ApplicationWindow, TApplicationWindow: ApplicationWindowObj].}
{.deprecated: [PApplicationWindowClass: ApplicationWindowClass, TApplicationWindowClass: ApplicationWindowClassObj].}
{.deprecated: [PFrame: Frame, TFrame: FrameObj].}
{.deprecated: [PFrameClass: FrameClass, TFrameClass: FrameClassObj].}
{.deprecated: [PAspectFrame: AspectFrame, TAspectFrame: AspectFrameObj].}
{.deprecated: [PAspectFrameClass: AspectFrameClass, TAspectFrameClass: AspectFrameClassObj].}
{.deprecated: [PAssistant: Assistant, TAssistant: AssistantObj].}
{.deprecated: [PAssistantClass: AssistantClass, TAssistantClass: AssistantClassObj].}
{.deprecated: [PButtonBox: ButtonBox, TButtonBox: ButtonBoxObj].}
{.deprecated: [PButtonBoxClass: ButtonBoxClass, TButtonBoxClass: ButtonBoxClassObj].}
{.deprecated: [PBindingSet: BindingSet, TBindingSet: BindingSetObj].}
{.deprecated: [PBindingEntry: BindingEntry, TBindingEntry: BindingEntryObj].}
{.deprecated: [PBindingArg: BindingArg, TBindingArg: BindingArgObj].}
{.deprecated: [PBindingSignal: BindingSignal, TBindingSignal: BindingSignalObj].}
{.deprecated: [PBuilder: Builder, TBuilder: BuilderObj].}
{.deprecated: [PBuilderClass: BuilderClass, TBuilderClass: BuilderClassObj].}
{.deprecated: [PBuildable: Buildable, TBuildable: BuildableObj].}
{.deprecated: [PBuildableIface: BuildableIface, TBuildableIface: BuildableIfaceObj].}
{.deprecated: [PButton: Button, TButton: ButtonObj].}
{.deprecated: [PButtonClass: ButtonClass, TButtonClass: ButtonClassObj].}
{.deprecated: [PCalendar: Calendar, TCalendar: CalendarObj].}
{.deprecated: [PCalendarClass: CalendarClass, TCalendarClass: CalendarClassObj].}
{.deprecated: [PCellAreaBox: CellAreaBox, TCellAreaBox: CellAreaBoxObj].}
{.deprecated: [PCellAreaBoxClass: CellAreaBoxClass, TCellAreaBoxClass: CellAreaBoxClassObj].}
{.deprecated: [PCellAreaContext: CellAreaContext, TCellAreaContext: CellAreaContextObj].}
{.deprecated: [PCellAreaContextClass: CellAreaContextClass, TCellAreaContextClass: CellAreaContextClassObj].}
{.deprecated: [PCellLayout: CellLayout, TCellLayout: CellLayoutObj].}
{.deprecated: [PCellLayoutIface: CellLayoutIface, TCellLayoutIface: CellLayoutIfaceObj].}
{.deprecated: [PCellRendererText: CellRendererText, TCellRendererText: CellRendererTextObj].}
{.deprecated: [PCellRendererTextClass: CellRendererTextClass, TCellRendererTextClass: CellRendererTextClassObj].}
{.deprecated: [PCellRendererAccel: CellRendererAccel, TCellRendererAccel: CellRendererAccelObj].}
{.deprecated: [PCellRendererAccelClass: CellRendererAccelClass, TCellRendererAccelClass: CellRendererAccelClassObj].}
{.deprecated: [PCellRendererCombo: CellRendererCombo, TCellRendererCombo: CellRendererComboObj].}
{.deprecated: [PCellRendererComboClass: CellRendererComboClass, TCellRendererComboClass: CellRendererComboClassObj].}
{.deprecated: [PCellRendererPixbuf: CellRendererPixbuf, TCellRendererPixbuf: CellRendererPixbufObj].}
{.deprecated: [PCellRendererPixbufClass: CellRendererPixbufClass, TCellRendererPixbufClass: CellRendererPixbufClassObj].}
{.deprecated: [PCellRendererProgress: CellRendererProgress, TCellRendererProgress: CellRendererProgressObj].}
{.deprecated: [PCellRendererProgressClass: CellRendererProgressClass, TCellRendererProgressClass: CellRendererProgressClassObj].}
{.deprecated: [PCellRendererSpin: CellRendererSpin, TCellRendererSpin: CellRendererSpinObj].}
{.deprecated: [PCellRendererSpinClass: CellRendererSpinClass, TCellRendererSpinClass: CellRendererSpinClassObj].}
{.deprecated: [PCellRendererSpinner: CellRendererSpinner, TCellRendererSpinner: CellRendererSpinnerObj].}
{.deprecated: [PCellRendererSpinnerClass: CellRendererSpinnerClass, TCellRendererSpinnerClass: CellRendererSpinnerClassObj].}
{.deprecated: [PCellRendererToggle: CellRendererToggle, TCellRendererToggle: CellRendererToggleObj].}
{.deprecated: [PCellRendererToggleClass: CellRendererToggleClass, TCellRendererToggleClass: CellRendererToggleClassObj].}
{.deprecated: [PCellView: CellView, TCellView: CellViewObj].}
{.deprecated: [PCellViewClass: CellViewClass, TCellViewClass: CellViewClassObj].}
{.deprecated: [PToggleButton: ToggleButton, TToggleButton: ToggleButtonObj].}
{.deprecated: [PToggleButtonClass: ToggleButtonClass, TToggleButtonClass: ToggleButtonClassObj].}
{.deprecated: [PCheckButton: CheckButton, TCheckButton: CheckButtonObj].}
{.deprecated: [PCheckButtonClass: CheckButtonClass, TCheckButtonClass: CheckButtonClassObj].}
{.deprecated: [PMenuItem: MenuItem, TMenuItem: MenuItemObj].}
{.deprecated: [PMenuItemClass: MenuItemClass, TMenuItemClass: MenuItemClassObj].}
{.deprecated: [PCheckMenuItem: CheckMenuItem, TCheckMenuItem: CheckMenuItemObj].}
{.deprecated: [PCheckMenuItemClass: CheckMenuItemClass, TCheckMenuItemClass: CheckMenuItemClassObj].}
{.deprecated: [PColorButton: ColorButton, TColorButton: ColorButtonObj].}
{.deprecated: [PColorButtonClass: ColorButtonClass, TColorButtonClass: ColorButtonClassObj].}
{.deprecated: [PColorChooser: ColorChooser, TColorChooser: ColorChooserObj].}
{.deprecated: [PColorChooserInterface: ColorChooserInterface, TColorChooserInterface: ColorChooserInterfaceObj].}
{.deprecated: [PColorChooserDialog: ColorChooserDialog, TColorChooserDialog: ColorChooserDialogObj].}
{.deprecated: [PColorChooserDialogClass: ColorChooserDialogClass, TColorChooserDialogClass: ColorChooserDialogClassObj].}
{.deprecated: [PColorChooserWidget: ColorChooserWidget, TColorChooserWidget: ColorChooserWidgetObj].}
{.deprecated: [PColorChooserWidgetClass: ColorChooserWidgetClass, TColorChooserWidgetClass: ColorChooserWidgetClassObj].}
{.deprecated: [PComboBoxText: ComboBoxText, TComboBoxText: ComboBoxTextObj].}
{.deprecated: [PComboBoxTextClass: ComboBoxTextClass, TComboBoxTextClass: ComboBoxTextClassObj].}
{.deprecated: [PCssSection: CssSection, TCssSection: CssSectionObj].}
{.deprecated: [PCssProvider: CssProvider, TCssProvider: CssProviderObj].}
{.deprecated: [PCssProviderClass: CssProviderClass, TCssProviderClass: CssProviderClassObj].}
{.deprecated: [PDrawingArea: DrawingArea, TDrawingArea: DrawingAreaObj].}
{.deprecated: [PDrawingAreaClass: DrawingAreaClass, TDrawingAreaClass: DrawingAreaClassObj].}
{.deprecated: [PEventBox: EventBox, TEventBox: EventBoxObj].}
{.deprecated: [PEventBoxClass: EventBoxClass, TEventBoxClass: EventBoxClassObj].}
{.deprecated: [PEventController: EventController, TEventController: EventControllerObj].}
{.deprecated: [PExpander: Expander, TExpander: ExpanderObj].}
{.deprecated: [PExpanderClass: ExpanderClass, TExpanderClass: ExpanderClassObj].}
{.deprecated: [PFixed: Fixed, TFixed: FixedObj].}
{.deprecated: [PFixedClass: FixedClass, TFixedClass: FixedClassObj].}
{.deprecated: [PFixedChild: FixedChild, TFixedChild: FixedChildObj].}
{.deprecated: [PFileFilter: FileFilter, TFileFilter: FileFilterObj].}
{.deprecated: [PFileFilterInfo: FileFilterInfo, TFileFilterInfo: FileFilterInfoObj].}
{.deprecated: [PFileChooser: FileChooser, TFileChooser: FileChooserObj].}
{.deprecated: [PFileChooserButton: FileChooserButton, TFileChooserButton: FileChooserButtonObj].}
{.deprecated: [PFileChooserButtonClass: FileChooserButtonClass, TFileChooserButtonClass: FileChooserButtonClassObj].}
{.deprecated: [PFileChooserDialog: FileChooserDialog, TFileChooserDialog: FileChooserDialogObj].}
{.deprecated: [PFileChooserDialogClass: FileChooserDialogClass, TFileChooserDialogClass: FileChooserDialogClassObj].}
{.deprecated: [PFileChooserWidget: FileChooserWidget, TFileChooserWidget: FileChooserWidgetObj].}
{.deprecated: [PFileChooserWidgetClass: FileChooserWidgetClass, TFileChooserWidgetClass: FileChooserWidgetClassObj].}
{.deprecated: [PFlowBox: FlowBox, TFlowBox: FlowBoxObj].}
{.deprecated: [PFlowBoxClass: FlowBoxClass, TFlowBoxClass: FlowBoxClassObj].}
{.deprecated: [PFlowBoxChild: FlowBoxChild, TFlowBoxChild: FlowBoxChildObj].}
{.deprecated: [PFlowBoxChildClass: FlowBoxChildClass, TFlowBoxChildClass: FlowBoxChildClassObj].}
{.deprecated: [PFontButton: FontButton, TFontButton: FontButtonObj].}
{.deprecated: [PFontButtonClass: FontButtonClass, TFontButtonClass: FontButtonClassObj].}
{.deprecated: [PFontChooser: FontChooser, TFontChooser: FontChooserObj].}
{.deprecated: [PFontChooserIface: FontChooserIface, TFontChooserIface: FontChooserIfaceObj].}
{.deprecated: [PFontChooserDialog: FontChooserDialog, TFontChooserDialog: FontChooserDialogObj].}
{.deprecated: [PFontChooserDialogClass: FontChooserDialogClass, TFontChooserDialogClass: FontChooserDialogClassObj].}
{.deprecated: [PFontChooserWidget: FontChooserWidget, TFontChooserWidget: FontChooserWidgetObj].}
{.deprecated: [PFontChooserWidgetClass: FontChooserWidgetClass, TFontChooserWidgetClass: FontChooserWidgetClassObj].}
{.deprecated: [PGesture: Gesture, TGesture: GestureObj].}
{.deprecated: [PGestureSingle: GestureSingle, TGestureSingle: GestureSingleObj].}
{.deprecated: [PGestureDrag: GestureDrag, TGestureDrag: GestureDragObj].}
{.deprecated: [PGestureMultiPress: GestureMultiPress, TGestureMultiPress: GestureMultiPressObj].}
{.deprecated: [PGesturePan: GesturePan, TGesturePan: GesturePanObj].}
{.deprecated: [PGestureRotate: GestureRotate, TGestureRotate: GestureRotateObj].}
{.deprecated: [PGestureSwipe: GestureSwipe, TGestureSwipe: GestureSwipeObj].}
{.deprecated: [PGestureZoom: GestureZoom, TGestureZoom: GestureZoomObj].}
{.deprecated: [PGLArea: GLArea, TGLArea: GLAreaObj].}
{.deprecated: [PGLAreaClass: GLAreaClass, TGLAreaClass: GLAreaClassObj].}
{.deprecated: [PGrid: Grid, TGrid: GridObj].}
{.deprecated: [PGridClass: GridClass, TGridClass: GridClassObj].}
{.deprecated: [PHeaderBar: HeaderBar, THeaderBar: HeaderBarObj].}
{.deprecated: [PHeaderBarClass: HeaderBarClass, THeaderBarClass: HeaderBarClassObj].}
{.deprecated: [PIconFactory: IconFactory, TIconFactory: IconFactoryObj].}
{.deprecated: [PIconFactoryClass: IconFactoryClass, TIconFactoryClass: IconFactoryClassObj].}
{.deprecated: [PSymbolicColor: SymbolicColor, TSymbolicColor: SymbolicColorObj].}
{.deprecated: [PGradient: Gradient, TGradient: GradientObj].}
{.deprecated: [PStyleProperties: StyleProperties, TStyleProperties: StylePropertiesObj].}
{.deprecated: [PStylePropertiesClass: StylePropertiesClass, TStylePropertiesClass: StylePropertiesClassObj].}
{.deprecated: [PStyleProvider: StyleProvider, TStyleProvider: StyleProviderObj].}
{.deprecated: [PStyleProviderIface: StyleProviderIface, TStyleProviderIface: StyleProviderIfaceObj].}
{.deprecated: [PStyleContext: StyleContext, TStyleContext: StyleContextObj].}
{.deprecated: [PStyleContextClass: StyleContextClass, TStyleContextClass: StyleContextClassObj].}
{.deprecated: [PIconInfo: IconInfo, TIconInfo: IconInfoObj].}
{.deprecated: [PIconTheme: IconTheme, TIconTheme: IconThemeObj].}
{.deprecated: [PIconThemeClass: IconThemeClass, TIconThemeClass: IconThemeClassObj].}
{.deprecated: [PIconView: IconView, TIconView: IconViewObj].}
{.deprecated: [PIconViewClass: IconViewClass, TIconViewClass: IconViewClassObj].}
{.deprecated: [PIMContextInfo: IMContextInfo, TIMContextInfo: IMContextInfoObj].}
{.deprecated: [PIMContextSimple: IMContextSimple, TIMContextSimple: IMContextSimpleObj].}
{.deprecated: [PIMContextSimpleClass: IMContextSimpleClass, TIMContextSimpleClass: IMContextSimpleClassObj].}
{.deprecated: [PIMMulticontext: IMMulticontext, TIMMulticontext: IMMulticontextObj].}
{.deprecated: [PIMMulticontextClass: IMMulticontextClass, TIMMulticontextClass: IMMulticontextClassObj].}
{.deprecated: [PInfoBar: InfoBar, TInfoBar: InfoBarObj].}
{.deprecated: [PInfoBarClass: InfoBarClass, TInfoBarClass: InfoBarClassObj].}
{.deprecated: [PInvisible: Invisible, TInvisible: InvisibleObj].}
{.deprecated: [PInvisibleClass: InvisibleClass, TInvisibleClass: InvisibleClassObj].}
{.deprecated: [PLayout: Layout, TLayout: LayoutObj].}
{.deprecated: [PLayoutClass: LayoutClass, TLayoutClass: LayoutClassObj].}
{.deprecated: [PLevelBar: LevelBar, TLevelBar: LevelBarObj].}
{.deprecated: [PLevelBarClass: LevelBarClass, TLevelBarClass: LevelBarClassObj].}
{.deprecated: [PLinkButton: LinkButton, TLinkButton: LinkButtonObj].}
{.deprecated: [PLinkButtonClass: LinkButtonClass, TLinkButtonClass: LinkButtonClassObj].}
{.deprecated: [PListBox: ListBox, TListBox: ListBoxObj].}
{.deprecated: [PListBoxClass: ListBoxClass, TListBoxClass: ListBoxClassObj].}
{.deprecated: [PListBoxRow: ListBoxRow, TListBoxRow: ListBoxRowObj].}
{.deprecated: [PListBoxRowClass: ListBoxRowClass, TListBoxRowClass: ListBoxRowClassObj].}
{.deprecated: [PLockButton: LockButton, TLockButton: LockButtonObj].}
{.deprecated: [PLockButtonClass: LockButtonClass, TLockButtonClass: LockButtonClassObj].}
{.deprecated: [PMenuBar: MenuBar, TMenuBar: MenuBarObj].}
{.deprecated: [PMenuBarClass: MenuBarClass, TMenuBarClass: MenuBarClassObj].}
{.deprecated: [PPopover: Popover, TPopover: PopoverObj].}
{.deprecated: [PPopoverClass: PopoverClass, TPopoverClass: PopoverClassObj].}
{.deprecated: [PMenuButton: MenuButton, TMenuButton: MenuButtonObj].}
{.deprecated: [PMenuButtonClass: MenuButtonClass, TMenuButtonClass: MenuButtonClassObj].}
{.deprecated: [PSizeGroup: SizeGroup, TSizeGroup: SizeGroupObj].}
{.deprecated: [PSizeGroupClass: SizeGroupClass, TSizeGroupClass: SizeGroupClassObj].}
{.deprecated: [PToolItem: ToolItem, TToolItem: ToolItemObj].}
{.deprecated: [PToolItemClass: ToolItemClass, TToolItemClass: ToolItemClassObj].}
{.deprecated: [PToolButton: ToolButton, TToolButton: ToolButtonObj].}
{.deprecated: [PToolButtonClass: ToolButtonClass, TToolButtonClass: ToolButtonClassObj].}
{.deprecated: [PMenuToolButton: MenuToolButton, TMenuToolButton: MenuToolButtonObj].}
{.deprecated: [PMenuToolButtonClass: MenuToolButtonClass, TMenuToolButtonClass: MenuToolButtonClassObj].}
{.deprecated: [PMessageDialog: MessageDialog, TMessageDialog: MessageDialogObj].}
{.deprecated: [PMessageDialogClass: MessageDialogClass, TMessageDialogClass: MessageDialogClassObj].}
{.deprecated: [PModelButton: ModelButton, TModelButton: ModelButtonObj].}
{.deprecated: [PMountOperation: MountOperation, TMountOperation: MountOperationObj].}
{.deprecated: [PMountOperationClass: MountOperationClass, TMountOperationClass: MountOperationClassObj].}
{.deprecated: [PNotebook: Notebook, TNotebook: NotebookObj].}
{.deprecated: [PNotebookClass: NotebookClass, TNotebookClass: NotebookClassObj].}
{.deprecated: [POffscreenWindow: OffscreenWindow, TOffscreenWindow: OffscreenWindowObj].}
{.deprecated: [POffscreenWindowClass: OffscreenWindowClass, TOffscreenWindowClass: OffscreenWindowClassObj].}
{.deprecated: [POrientable: Orientable, TOrientable: OrientableObj].}
{.deprecated: [POrientableIface: OrientableIface, TOrientableIface: OrientableIfaceObj].}
{.deprecated: [POverlay: Overlay, TOverlay: OverlayObj].}
{.deprecated: [POverlayClass: OverlayClass, TOverlayClass: OverlayClassObj].}
{.deprecated: [PPaperSize: PaperSize, TPaperSize: PaperSizeObj].}
{.deprecated: [PPageSetup: PageSetup, TPageSetup: PageSetupObj].}
{.deprecated: [PPaned: Paned, TPaned: PanedObj].}
{.deprecated: [PPanedClass: PanedClass, TPanedClass: PanedClassObj].}
{.deprecated: [PPlacesSidebar: PlacesSidebar, TPlacesSidebar: PlacesSidebarObj].}
{.deprecated: [PPopoverMenu: PopoverMenu, TPopoverMenu: PopoverMenuObj].}
{.deprecated: [PPopoverMenuClass: PopoverMenuClass, TPopoverMenuClass: PopoverMenuClassObj].}
{.deprecated: [PPrintContext: PrintContext, TPrintContext: PrintContextObj].}
{.deprecated: [PPrintSettings: PrintSettings, TPrintSettings: PrintSettingsObj].}
{.deprecated: [PPageRange: PageRange, TPageRange: PageRangeObj].}
{.deprecated: [PPrintOperationPreview: PrintOperationPreview, TPrintOperationPreview: PrintOperationPreviewObj].}
{.deprecated: [PPrintOperationPreviewIface: PrintOperationPreviewIface, TPrintOperationPreviewIface: PrintOperationPreviewIfaceObj].}
{.deprecated: [PPrintOperation: PrintOperation, TPrintOperation: PrintOperationObj].}
{.deprecated: [PPrintOperationClass: PrintOperationClass, TPrintOperationClass: PrintOperationClassObj].}
{.deprecated: [PProgressBar: ProgressBar, TProgressBar: ProgressBarObj].}
{.deprecated: [PProgressBarClass: ProgressBarClass, TProgressBarClass: ProgressBarClassObj].}
{.deprecated: [PRadioButton: RadioButton, TRadioButton: RadioButtonObj].}
{.deprecated: [PRadioButtonClass: RadioButtonClass, TRadioButtonClass: RadioButtonClassObj].}
{.deprecated: [PRadioMenuItem: RadioMenuItem, TRadioMenuItem: RadioMenuItemObj].}
{.deprecated: [PRadioMenuItemClass: RadioMenuItemClass, TRadioMenuItemClass: RadioMenuItemClassObj].}
{.deprecated: [PToggleToolButton: ToggleToolButton, TToggleToolButton: ToggleToolButtonObj].}
{.deprecated: [PToggleToolButtonClass: ToggleToolButtonClass, TToggleToolButtonClass: ToggleToolButtonClassObj].}
{.deprecated: [PRadioToolButton: RadioToolButton, TRadioToolButton: RadioToolButtonObj].}
{.deprecated: [PRadioToolButtonClass: RadioToolButtonClass, TRadioToolButtonClass: RadioToolButtonClassObj].}
{.deprecated: [PRange: Range, TRange: RangeObj].}
{.deprecated: [PRangeClass: RangeClass, TRangeClass: RangeClassObj].}
{.deprecated: [PRecentInfo: RecentInfo, TRecentInfo: RecentInfoObj].}
{.deprecated: [PRecentData: RecentData, TRecentData: RecentDataObj].}
{.deprecated: [PRecentManager: RecentManager, TRecentManager: RecentManagerObj].}
{.deprecated: [PRecentManagerClass: RecentManagerClass, TRecentManagerClass: RecentManagerClassObj].}
{.deprecated: [PRecentFilter: RecentFilter, TRecentFilter: RecentFilterObj].}
{.deprecated: [PRecentFilterInfo: RecentFilterInfo, TRecentFilterInfo: RecentFilterInfoObj].}
{.deprecated: [PRecentChooser: RecentChooser, TRecentChooser: RecentChooserObj].}
{.deprecated: [PRecentChooserIface: RecentChooserIface, TRecentChooserIface: RecentChooserIfaceObj].}
{.deprecated: [PRecentChooserDialog: RecentChooserDialog, TRecentChooserDialog: RecentChooserDialogObj].}
{.deprecated: [PRecentChooserDialogClass: RecentChooserDialogClass, TRecentChooserDialogClass: RecentChooserDialogClassObj].}
{.deprecated: [PRecentChooserMenu: RecentChooserMenu, TRecentChooserMenu: RecentChooserMenuObj].}
{.deprecated: [PRecentChooserMenuClass: RecentChooserMenuClass, TRecentChooserMenuClass: RecentChooserMenuClassObj].}
{.deprecated: [PRecentChooserWidget: RecentChooserWidget, TRecentChooserWidget: RecentChooserWidgetObj].}
{.deprecated: [PRecentChooserWidgetClass: RecentChooserWidgetClass, TRecentChooserWidgetClass: RecentChooserWidgetClassObj].}
{.deprecated: [PRevealer: Revealer, TRevealer: RevealerObj].}
{.deprecated: [PRevealerClass: RevealerClass, TRevealerClass: RevealerClassObj].}
{.deprecated: [PScale: Scale, TScale: ScaleObj].}
{.deprecated: [PScaleClass: ScaleClass, TScaleClass: ScaleClassObj].}
{.deprecated: [PScaleButton: ScaleButton, TScaleButton: ScaleButtonObj].}
{.deprecated: [PScaleButtonClass: ScaleButtonClass, TScaleButtonClass: ScaleButtonClassObj].}
{.deprecated: [PScrollable: Scrollable, TScrollable: ScrollableObj].}
{.deprecated: [PScrollableInterface: ScrollableInterface, TScrollableInterface: ScrollableInterfaceObj].}
{.deprecated: [PScrollbar: Scrollbar, TScrollbar: ScrollbarObj].}
{.deprecated: [PScrollbarClass: ScrollbarClass, TScrollbarClass: ScrollbarClassObj].}
{.deprecated: [PScrolledWindow: ScrolledWindow, TScrolledWindow: ScrolledWindowObj].}
{.deprecated: [PScrolledWindowClass: ScrolledWindowClass, TScrolledWindowClass: ScrolledWindowClassObj].}
{.deprecated: [PSearchBar: SearchBar, TSearchBar: SearchBarObj].}
{.deprecated: [PSearchBarClass: SearchBarClass, TSearchBarClass: SearchBarClassObj].}
{.deprecated: [PSearchEntry: SearchEntry, TSearchEntry: SearchEntryObj].}
{.deprecated: [PSearchEntryClass: SearchEntryClass, TSearchEntryClass: SearchEntryClassObj].}
{.deprecated: [PSeparator: Separator, TSeparator: SeparatorObj].}
{.deprecated: [PSeparatorClass: SeparatorClass, TSeparatorClass: SeparatorClassObj].}
{.deprecated: [PSeparatorMenuItem: SeparatorMenuItem, TSeparatorMenuItem: SeparatorMenuItemObj].}
{.deprecated: [PSeparatorMenuItemClass: SeparatorMenuItemClass, TSeparatorMenuItemClass: SeparatorMenuItemClassObj].}
{.deprecated: [PSeparatorToolItem: SeparatorToolItem, TSeparatorToolItem: SeparatorToolItemObj].}
{.deprecated: [PSeparatorToolItemClass: SeparatorToolItemClass, TSeparatorToolItemClass: SeparatorToolItemClassObj].}
{.deprecated: [PSettings: Settings, TSettings: SettingsObj].}
{.deprecated: [PSettingsClass: SettingsClass, TSettingsClass: SettingsClassObj].}
{.deprecated: [PSettingsValue: SettingsValue, TSettingsValue: SettingsValueObj].}
{.deprecated: [PStack: Stack, TStack: StackObj].}
{.deprecated: [PStackClass: StackClass, TStackClass: StackClassObj].}
{.deprecated: [PSidebar: Sidebar, TSidebar: SidebarObj].}
{.deprecated: [PSidebarClass: SidebarClass, TSidebarClass: SidebarClassObj].}
{.deprecated: [PRequestedSize: RequestedSize, TRequestedSize: RequestedSizeObj].}
{.deprecated: [PSpinButton: SpinButton, TSpinButton: SpinButtonObj].}
{.deprecated: [PSpinButtonClass: SpinButtonClass, TSpinButtonClass: SpinButtonClassObj].}
{.deprecated: [PSpinner: Spinner, TSpinner: SpinnerObj].}
{.deprecated: [PSpinnerClass: SpinnerClass, TSpinnerClass: SpinnerClassObj].}
{.deprecated: [PStackSwitcher: StackSwitcher, TStackSwitcher: StackSwitcherObj].}
{.deprecated: [PStackSwitcherClass: StackSwitcherClass, TStackSwitcherClass: StackSwitcherClassObj].}
{.deprecated: [PStatusbar: Statusbar, TStatusbar: StatusbarObj].}
{.deprecated: [PStatusbarClass: StatusbarClass, TStatusbarClass: StatusbarClassObj].}
{.deprecated: [PSwitch: Switch, TSwitch: SwitchObj].}
{.deprecated: [PSwitchClass: SwitchClass, TSwitchClass: SwitchClassObj].}
{.deprecated: [PTextTagTable: TextTagTable, TTextTagTable: TextTagTableObj].}
{.deprecated: [PTextTagTableClass: TextTagTableClass, TTextTagTableClass: TextTagTableClassObj].}
{.deprecated: [PTextMark: TextMark, TTextMark: TextMarkObj].}
{.deprecated: [PTextMarkClass: TextMarkClass, TTextMarkClass: TextMarkClassObj].}
{.deprecated: [PTextBTree: TextBTree, TTextBTree: TextBTreeObj].}
{.deprecated: [PTextBuffer: TextBuffer, TTextBuffer: TextBufferObj].}
{.deprecated: [PTextBufferClass: TextBufferClass, TTextBufferClass: TextBufferClassObj].}
{.deprecated: [PTextView: TextView, TTextView: TextViewObj].}
{.deprecated: [PTextViewClass: TextViewClass, TTextViewClass: TextViewClassObj].}
{.deprecated: [PToolbar: Toolbar, TToolbar: ToolbarObj].}
{.deprecated: [PToolbarClass: ToolbarClass, TToolbarClass: ToolbarClassObj].}
{.deprecated: [PToolItemGroup: ToolItemGroup, TToolItemGroup: ToolItemGroupObj].}
{.deprecated: [PToolItemGroupClass: ToolItemGroupClass, TToolItemGroupClass: ToolItemGroupClassObj].}
{.deprecated: [PToolPalette: ToolPalette, TToolPalette: ToolPaletteObj].}
{.deprecated: [PToolPaletteClass: ToolPaletteClass, TToolPaletteClass: ToolPaletteClassObj].}
{.deprecated: [PToolShell: ToolShell, TToolShell: ToolShellObj].}
{.deprecated: [PToolShellIface: ToolShellIface, TToolShellIface: ToolShellIfaceObj].}
{.deprecated: [PTreeDragSource: TreeDragSource, TTreeDragSource: TreeDragSourceObj].}
{.deprecated: [PTreeDragSourceIface: TreeDragSourceIface, TTreeDragSourceIface: TreeDragSourceIfaceObj].}
{.deprecated: [PTreeDragDest: TreeDragDest, TTreeDragDest: TreeDragDestObj].}
{.deprecated: [PTreeDragDestIface: TreeDragDestIface, TTreeDragDestIface: TreeDragDestIfaceObj].}
{.deprecated: [PTreeModelSort: TreeModelSort, TTreeModelSort: TreeModelSortObj].}
{.deprecated: [PTreeModelSortClass: TreeModelSortClass, TTreeModelSortClass: TreeModelSortClassObj].}
{.deprecated: [PTreeSelection: TreeSelection, TTreeSelection: TreeSelectionObj].}
{.deprecated: [PTreeSelectionClass: TreeSelectionClass, TTreeSelectionClass: TreeSelectionClassObj].}
{.deprecated: [PTreeStore: TreeStore, TTreeStore: TreeStoreObj].}
{.deprecated: [PTreeStoreClass: TreeStoreClass, TTreeStoreClass: TreeStoreClassObj].}
{.deprecated: [PViewport: Viewport, TViewport: ViewportObj].}
{.deprecated: [PViewportClass: ViewportClass, TViewportClass: ViewportClassObj].}
{.deprecated: [PVolumeButton: VolumeButton, TVolumeButton: VolumeButtonObj].}
{.deprecated: [PVolumeButtonClass: VolumeButtonClass, TVolumeButtonClass: VolumeButtonClassObj].}
{.deprecated: [PWindowGroup: WindowGroup, TWindowGroup: WindowGroupObj].}
{.deprecated: [PWindowGroupClass: WindowGroupClass, TWindowGroupClass: WindowGroupClassObj].}
{.deprecated: [PArrow: Arrow, TArrow: ArrowObj].}
{.deprecated: [PArrowClass: ArrowClass, TArrowClass: ArrowClassObj].}
{.deprecated: [PAction: Action, TAction: ActionObj].}
{.deprecated: [PActionClass: ActionClass, TActionClass: ActionClassObj].}
{.deprecated: [PActivatable: Activatable, TActivatable: ActivatableObj].}
{.deprecated: [PActivatableIface: ActivatableIface, TActivatableIface: ActivatableIfaceObj].}
{.deprecated: [PStockItem: StockItem, TStockItem: StockItemObj].}
{.deprecated: [PActionGroup: ActionGroup, TActionGroup: ActionGroupObj].}
{.deprecated: [PActionGroupClass: ActionGroupClass, TActionGroupClass: ActionGroupClassObj].}
{.deprecated: [PActionEntry: ActionEntry, TActionEntry: ActionEntryObj].}
{.deprecated: [PToggleActionEntry: ToggleActionEntry, TToggleActionEntry: ToggleActionEntryObj].}
{.deprecated: [PRadioActionEntry: RadioActionEntry, TRadioActionEntry: RadioActionEntryObj].}
{.deprecated: [PAlignment: Alignment, TAlignment: AlignmentObj].}
{.deprecated: [PAlignmentClass: AlignmentClass, TAlignmentClass: AlignmentClassObj].}
{.deprecated: [PColorSelection: ColorSelection, TColorSelection: ColorSelectionObj].}
{.deprecated: [PColorSelectionClass: ColorSelectionClass, TColorSelectionClass: ColorSelectionClassObj].}
{.deprecated: [PColorSelectionDialog: ColorSelectionDialog, TColorSelectionDialog: ColorSelectionDialogObj].}
{.deprecated: [PColorSelectionDialogClass: ColorSelectionDialogClass, TColorSelectionDialogClass: ColorSelectionDialogClassObj].}
{.deprecated: [PFontSelection: FontSelection, TFontSelection: FontSelectionObj].}
{.deprecated: [PFontSelectionClass: FontSelectionClass, TFontSelectionClass: FontSelectionClassObj].}
{.deprecated: [PFontSelectionDialog: FontSelectionDialog, TFontSelectionDialog: FontSelectionDialogObj].}
{.deprecated: [PFontSelectionDialogClass: FontSelectionDialogClass, TFontSelectionDialogClass: FontSelectionDialogClassObj].}
{.deprecated: [PHandleBox: HandleBox, THandleBox: HandleBoxObj].}
{.deprecated: [PHandleBoxClass: HandleBoxClass, THandleBoxClass: HandleBoxClassObj].}
{.deprecated: [PHButtonBox: HButtonBox, THButtonBox: HButtonBoxObj].}
{.deprecated: [PHButtonBoxClass: HButtonBoxClass, THButtonBoxClass: HButtonBoxClassObj].}
{.deprecated: [PHBox: HBox, THBox: HBoxObj].}
{.deprecated: [PHBoxClass: HBoxClass, THBoxClass: HBoxClassObj].}
{.deprecated: [PHPaned: HPaned, THPaned: HPanedObj].}
{.deprecated: [PHPanedClass: HPanedClass, THPanedClass: HPanedClassObj].}
{.deprecated: [PHSV: HSV, THSV: HSVObj].}
{.deprecated: [PHSVClass: HSVClass, THSVClass: HSVClassObj].}
{.deprecated: [PHScale: HScale, THScale: HScaleObj].}
{.deprecated: [PHScaleClass: HScaleClass, THScaleClass: HScaleClassObj].}
{.deprecated: [PHScrollbar: HScrollbar, THScrollbar: HScrollbarObj].}
{.deprecated: [PHScrollbarClass: HScrollbarClass, THScrollbarClass: HScrollbarClassObj].}
{.deprecated: [PHSeparator: HSeparator, THSeparator: HSeparatorObj].}
{.deprecated: [PHSeparatorClass: HSeparatorClass, THSeparatorClass: HSeparatorClassObj].}
{.deprecated: [PImageMenuItem: ImageMenuItem, TImageMenuItem: ImageMenuItemObj].}
{.deprecated: [PImageMenuItemClass: ImageMenuItemClass, TImageMenuItemClass: ImageMenuItemClassObj].}
{.deprecated: [PNumerableIcon: NumerableIcon, TNumerableIcon: NumerableIconObj].}
{.deprecated: [PNumerableIconClass: NumerableIconClass, TNumerableIconClass: NumerableIconClassObj].}
{.deprecated: [PToggleAction: ToggleAction, TToggleAction: ToggleActionObj].}
{.deprecated: [PToggleActionClass: ToggleActionClass, TToggleActionClass: ToggleActionClassObj].}
{.deprecated: [PRadioAction: RadioAction, TRadioAction: RadioActionObj].}
{.deprecated: [PRadioActionClass: RadioActionClass, TRadioActionClass: RadioActionClassObj].}
{.deprecated: [PRcStyle: RcStyle, TRcStyle: RcStyleObj].}
{.deprecated: [PRcStyleClass: RcStyleClass, TRcStyleClass: RcStyleClassObj].}
{.deprecated: [PRcProperty: RcProperty, TRcProperty: RcPropertyObj].}
{.deprecated: [PRecentAction: RecentAction, TRecentAction: RecentActionObj].}
{.deprecated: [PRecentActionClass: RecentActionClass, TRecentActionClass: RecentActionClassObj].}
{.deprecated: [PStatusIcon: StatusIcon, TStatusIcon: StatusIconObj].}
{.deprecated: [PStatusIconClass: StatusIconClass, TStatusIconClass: StatusIconClassObj].}
{.deprecated: [PStyle: Style, TStyle: StyleObj].}
{.deprecated: [PStyleClass: StyleClass, TStyleClass: StyleClassObj].}
{.deprecated: [PTable: Table, TTable: TableObj].}
{.deprecated: [PTableClass: TableClass, TTableClass: TableClassObj].}
{.deprecated: [PTableChild: TableChild, TTableChild: TableChildObj].}
{.deprecated: [PTableRowCol: TableRowCol, TTableRowCol: TableRowColObj].}
{.deprecated: [PTearoffMenuItem: TearoffMenuItem, TTearoffMenuItem: TearoffMenuItemObj].}
{.deprecated: [PTearoffMenuItemClass: TearoffMenuItemClass, TTearoffMenuItemClass: TearoffMenuItemClassObj].}
{.deprecated: [PThemingEngine: ThemingEngine, TThemingEngine: ThemingEngineObj].}
{.deprecated: [PThemingEngineClass: ThemingEngineClass, TThemingEngineClass: ThemingEngineClassObj].}
{.deprecated: [PUIManager: UIManager, TUIManager: UIManagerObj].}
{.deprecated: [PUIManagerClass: UIManagerClass, TUIManagerClass: UIManagerClassObj].}
{.deprecated: [PVButtonBox: VButtonBox, TVButtonBox: VButtonBoxObj].}
{.deprecated: [PVButtonBoxClass: VButtonBoxClass, TVButtonBoxClass: VButtonBoxClassObj].}
{.deprecated: [PVBox: VBox, TVBox: VBoxObj].}
{.deprecated: [PVBoxClass: VBoxClass, TVBoxClass: VBoxClassObj].}
{.deprecated: [PVPaned: VPaned, TVPaned: VPanedObj].}
{.deprecated: [PVPanedClass: VPanedClass, TVPanedClass: VPanedClassObj].}
{.deprecated: [PVScale: VScale, TVScale: VScaleObj].}
{.deprecated: [PVScaleClass: VScaleClass, TVScaleClass: VScaleClassObj].}
{.deprecated: [PVScrollbar: VScrollbar, TVScrollbar: VScrollbarObj].}
{.deprecated: [PVScrollbarClass: VScrollbarClass, TVScrollbarClass: VScrollbarClassObj].}
{.deprecated: [PVSeparator: VSeparator, TVSeparator: VSeparatorObj].}
{.deprecated: [PVSeparatorClass: VSeparatorClass, TVSeparatorClass: VSeparatorClassObj].}
{.deprecated: [PPageSetupUnixDialog: PageSetupUnixDialog, TPageSetupUnixDialog: PageSetupUnixDialogObj].}
{.deprecated: [PPageSetupUnixDialogClass: PageSetupUnixDialogClass, TPageSetupUnixDialogClass: PageSetupUnixDialogClassObj].}
{.deprecated: [PPrintBackend: PrintBackend, TPrintBackend: PrintBackendObj].}
{.deprecated: [PPrinter: Printer, TPrinter: PrinterObj].}
{.deprecated: [PPrinterClass: PrinterClass, TPrinterClass: PrinterClassObj].}
{.deprecated: [PPrintJob: PrintJob, TPrintJob: PrintJobObj].}
{.deprecated: [PPrintJobClass: PrintJobClass, TPrintJobClass: PrintJobClassObj].}
{.deprecated: [PPrintUnixDialog: PrintUnixDialog, TPrintUnixDialog: PrintUnixDialogObj].}
{.deprecated: [PPrintUnixDialogClass: PrintUnixDialogClass, TPrintUnixDialogClass: PrintUnixDialogClassObj].}
{.deprecated: [PWidgetAccessible: WidgetAccessible, TWidgetAccessible: WidgetAccessibleObj].}
{.deprecated: [PWidgetAccessibleClass: WidgetAccessibleClass, TWidgetAccessibleClass: WidgetAccessibleClassObj].}
{.deprecated: [PArrowAccessible: ArrowAccessible, TArrowAccessible: ArrowAccessibleObj].}
{.deprecated: [PArrowAccessibleClass: ArrowAccessibleClass, TArrowAccessibleClass: ArrowAccessibleClassObj].}
{.deprecated: [PCellAccessible: CellAccessible, TCellAccessible: CellAccessibleObj].}
{.deprecated: [PCellAccessibleClass: CellAccessibleClass, TCellAccessibleClass: CellAccessibleClassObj].}
{.deprecated: [PRendererCellAccessible: RendererCellAccessible, TRendererCellAccessible: RendererCellAccessibleObj].}
{.deprecated: [PRendererCellAccessibleClass: RendererCellAccessibleClass, TRendererCellAccessibleClass: RendererCellAccessibleClassObj].}
{.deprecated: [PBooleanCellAccessible: BooleanCellAccessible, TBooleanCellAccessible: BooleanCellAccessibleObj].}
{.deprecated: [PBooleanCellAccessibleClass: BooleanCellAccessibleClass, TBooleanCellAccessibleClass: BooleanCellAccessibleClassObj].}
{.deprecated: [PContainerAccessible: ContainerAccessible, TContainerAccessible: ContainerAccessibleObj].}
{.deprecated: [PContainerAccessibleClass: ContainerAccessibleClass, TContainerAccessibleClass: ContainerAccessibleClassObj].}
{.deprecated: [PButtonAccessible: ButtonAccessible, TButtonAccessible: ButtonAccessibleObj].}
{.deprecated: [PButtonAccessibleClass: ButtonAccessibleClass, TButtonAccessibleClass: ButtonAccessibleClassObj].}
{.deprecated: [PCellAccessibleParent: CellAccessibleParent, TCellAccessibleParent: CellAccessibleParentObj].}
{.deprecated: [PCellAccessibleParentIface: CellAccessibleParentIface, TCellAccessibleParentIface: CellAccessibleParentIfaceObj].}
{.deprecated: [PMenuItemAccessible: MenuItemAccessible, TMenuItemAccessible: MenuItemAccessibleObj].}
{.deprecated: [PMenuItemAccessibleClass: MenuItemAccessibleClass, TMenuItemAccessibleClass: MenuItemAccessibleClassObj].}
{.deprecated: [PCheckMenuItemAccessible: CheckMenuItemAccessible, TCheckMenuItemAccessible: CheckMenuItemAccessibleObj].}
{.deprecated: [PCheckMenuItemAccessibleClass: CheckMenuItemAccessibleClass, TCheckMenuItemAccessibleClass: CheckMenuItemAccessibleClassObj].}
{.deprecated: [PComboBoxAccessible: ComboBoxAccessible, TComboBoxAccessible: ComboBoxAccessibleObj].}
{.deprecated: [PComboBoxAccessibleClass: ComboBoxAccessibleClass, TComboBoxAccessibleClass: ComboBoxAccessibleClassObj].}
{.deprecated: [PContainerCellAccessible: ContainerCellAccessible, TContainerCellAccessible: ContainerCellAccessibleObj].}
{.deprecated: [PContainerCellAccessibleClass: ContainerCellAccessibleClass, TContainerCellAccessibleClass: ContainerCellAccessibleClassObj].}
{.deprecated: [PEntryAccessible: EntryAccessible, TEntryAccessible: EntryAccessibleObj].}
{.deprecated: [PEntryAccessibleClass: EntryAccessibleClass, TEntryAccessibleClass: EntryAccessibleClassObj].}
{.deprecated: [PExpanderAccessible: ExpanderAccessible, TExpanderAccessible: ExpanderAccessibleObj].}
{.deprecated: [PExpanderAccessibleClass: ExpanderAccessibleClass, TExpanderAccessibleClass: ExpanderAccessibleClassObj].}
{.deprecated: [PFlowBoxAccessible: FlowBoxAccessible, TFlowBoxAccessible: FlowBoxAccessibleObj].}
{.deprecated: [PFlowBoxAccessibleClass: FlowBoxAccessibleClass, TFlowBoxAccessibleClass: FlowBoxAccessibleClassObj].}
{.deprecated: [PFlowBoxChildAccessible: FlowBoxChildAccessible, TFlowBoxChildAccessible: FlowBoxChildAccessibleObj].}
{.deprecated: [PFlowBoxChildAccessibleClass: FlowBoxChildAccessibleClass, TFlowBoxChildAccessibleClass: FlowBoxChildAccessibleClassObj].}
{.deprecated: [PFrameAccessible: FrameAccessible, TFrameAccessible: FrameAccessibleObj].}
{.deprecated: [PFrameAccessibleClass: FrameAccessibleClass, TFrameAccessibleClass: FrameAccessibleClassObj].}
{.deprecated: [PIconViewAccessible: IconViewAccessible, TIconViewAccessible: IconViewAccessibleObj].}
{.deprecated: [PIconViewAccessibleClass: IconViewAccessibleClass, TIconViewAccessibleClass: IconViewAccessibleClassObj].}
{.deprecated: [PImageAccessible: ImageAccessible, TImageAccessible: ImageAccessibleObj].}
{.deprecated: [PImageAccessibleClass: ImageAccessibleClass, TImageAccessibleClass: ImageAccessibleClassObj].}
{.deprecated: [PImageCellAccessible: ImageCellAccessible, TImageCellAccessible: ImageCellAccessibleObj].}
{.deprecated: [PImageCellAccessibleClass: ImageCellAccessibleClass, TImageCellAccessibleClass: ImageCellAccessibleClassObj].}
{.deprecated: [PLabelAccessible: LabelAccessible, TLabelAccessible: LabelAccessibleObj].}
{.deprecated: [PLabelAccessibleClass: LabelAccessibleClass, TLabelAccessibleClass: LabelAccessibleClassObj].}
{.deprecated: [PLevelBarAccessible: LevelBarAccessible, TLevelBarAccessible: LevelBarAccessibleObj].}
{.deprecated: [PLevelBarAccessibleClass: LevelBarAccessibleClass, TLevelBarAccessibleClass: LevelBarAccessibleClassObj].}
{.deprecated: [PLinkButtonAccessible: LinkButtonAccessible, TLinkButtonAccessible: LinkButtonAccessibleObj].}
{.deprecated: [PLinkButtonAccessibleClass: LinkButtonAccessibleClass, TLinkButtonAccessibleClass: LinkButtonAccessibleClassObj].}
{.deprecated: [PListBoxAccessible: ListBoxAccessible, TListBoxAccessible: ListBoxAccessibleObj].}
{.deprecated: [PListBoxAccessibleClass: ListBoxAccessibleClass, TListBoxAccessibleClass: ListBoxAccessibleClassObj].}
{.deprecated: [PListBoxRowAccessible: ListBoxRowAccessible, TListBoxRowAccessible: ListBoxRowAccessibleObj].}
{.deprecated: [PListBoxRowAccessibleClass: ListBoxRowAccessibleClass, TListBoxRowAccessibleClass: ListBoxRowAccessibleClassObj].}
{.deprecated: [PLockButtonAccessible: LockButtonAccessible, TLockButtonAccessible: LockButtonAccessibleObj].}
{.deprecated: [PLockButtonAccessibleClass: LockButtonAccessibleClass, TLockButtonAccessibleClass: LockButtonAccessibleClassObj].}
{.deprecated: [PMenuShellAccessible: MenuShellAccessible, TMenuShellAccessible: MenuShellAccessibleObj].}
{.deprecated: [PMenuShellAccessibleClass: MenuShellAccessibleClass, TMenuShellAccessibleClass: MenuShellAccessibleClassObj].}
{.deprecated: [PMenuAccessible: MenuAccessible, TMenuAccessible: MenuAccessibleObj].}
{.deprecated: [PMenuAccessibleClass: MenuAccessibleClass, TMenuAccessibleClass: MenuAccessibleClassObj].}
{.deprecated: [PToggleButtonAccessible: ToggleButtonAccessible, TToggleButtonAccessible: ToggleButtonAccessibleObj].}
{.deprecated: [PToggleButtonAccessibleClass: ToggleButtonAccessibleClass, TToggleButtonAccessibleClass: ToggleButtonAccessibleClassObj].}
{.deprecated: [PMenuButtonAccessible: MenuButtonAccessible, TMenuButtonAccessible: MenuButtonAccessibleObj].}
{.deprecated: [PMenuButtonAccessibleClass: MenuButtonAccessibleClass, TMenuButtonAccessibleClass: MenuButtonAccessibleClassObj].}
{.deprecated: [PNotebookAccessible: NotebookAccessible, TNotebookAccessible: NotebookAccessibleObj].}
{.deprecated: [PNotebookAccessibleClass: NotebookAccessibleClass, TNotebookAccessibleClass: NotebookAccessibleClassObj].}
{.deprecated: [PNotebookPageAccessible: NotebookPageAccessible, TNotebookPageAccessible: NotebookPageAccessibleObj].}
{.deprecated: [PNotebookPageAccessibleClass: NotebookPageAccessibleClass, TNotebookPageAccessibleClass: NotebookPageAccessibleClassObj].}
{.deprecated: [PPopoverAccessible: PopoverAccessible, TPopoverAccessible: PopoverAccessibleObj].}
{.deprecated: [PPopoverAccessibleClass: PopoverAccessibleClass, TPopoverAccessibleClass: PopoverAccessibleClassObj].}
{.deprecated: [PPanedAccessible: PanedAccessible, TPanedAccessible: PanedAccessibleObj].}
{.deprecated: [PPanedAccessibleClass: PanedAccessibleClass, TPanedAccessibleClass: PanedAccessibleClassObj].}
{.deprecated: [PProgressBarAccessible: ProgressBarAccessible, TProgressBarAccessible: ProgressBarAccessibleObj].}
{.deprecated: [PProgressBarAccessibleClass: ProgressBarAccessibleClass, TProgressBarAccessibleClass: ProgressBarAccessibleClassObj].}
{.deprecated: [PRadioButtonAccessible: RadioButtonAccessible, TRadioButtonAccessible: RadioButtonAccessibleObj].}
{.deprecated: [PRadioButtonAccessibleClass: RadioButtonAccessibleClass, TRadioButtonAccessibleClass: RadioButtonAccessibleClassObj].}
{.deprecated: [PRadioMenuItemAccessible: RadioMenuItemAccessible, TRadioMenuItemAccessible: RadioMenuItemAccessibleObj].}
{.deprecated: [PRadioMenuItemAccessibleClass: RadioMenuItemAccessibleClass, TRadioMenuItemAccessibleClass: RadioMenuItemAccessibleClassObj].}
{.deprecated: [PRangeAccessible: RangeAccessible, TRangeAccessible: RangeAccessibleObj].}
{.deprecated: [PRangeAccessibleClass: RangeAccessibleClass, TRangeAccessibleClass: RangeAccessibleClassObj].}
{.deprecated: [PScaleAccessible: ScaleAccessible, TScaleAccessible: ScaleAccessibleObj].}
{.deprecated: [PScaleAccessibleClass: ScaleAccessibleClass, TScaleAccessibleClass: ScaleAccessibleClassObj].}
{.deprecated: [PScaleButtonAccessible: ScaleButtonAccessible, TScaleButtonAccessible: ScaleButtonAccessibleObj].}
{.deprecated: [PScaleButtonAccessibleClass: ScaleButtonAccessibleClass, TScaleButtonAccessibleClass: ScaleButtonAccessibleClassObj].}
{.deprecated: [PScrolledWindowAccessible: ScrolledWindowAccessible, TScrolledWindowAccessible: ScrolledWindowAccessibleObj].}
{.deprecated: [PScrolledWindowAccessibleClass: ScrolledWindowAccessibleClass, TScrolledWindowAccessibleClass: ScrolledWindowAccessibleClassObj].}
{.deprecated: [PSpinButtonAccessible: SpinButtonAccessible, TSpinButtonAccessible: SpinButtonAccessibleObj].}
{.deprecated: [PSpinButtonAccessibleClass: SpinButtonAccessibleClass, TSpinButtonAccessibleClass: SpinButtonAccessibleClassObj].}
{.deprecated: [PSpinnerAccessible: SpinnerAccessible, TSpinnerAccessible: SpinnerAccessibleObj].}
{.deprecated: [PSpinnerAccessibleClass: SpinnerAccessibleClass, TSpinnerAccessibleClass: SpinnerAccessibleClassObj].}
{.deprecated: [PStatusbarAccessible: StatusbarAccessible, TStatusbarAccessible: StatusbarAccessibleObj].}
{.deprecated: [PStatusbarAccessibleClass: StatusbarAccessibleClass, TStatusbarAccessibleClass: StatusbarAccessibleClassObj].}
{.deprecated: [PSwitchAccessible: SwitchAccessible, TSwitchAccessible: SwitchAccessibleObj].}
{.deprecated: [PSwitchAccessibleClass: SwitchAccessibleClass, TSwitchAccessibleClass: SwitchAccessibleClassObj].}
{.deprecated: [PTextCellAccessible: TextCellAccessible, TTextCellAccessible: TextCellAccessibleObj].}
{.deprecated: [PTextCellAccessibleClass: TextCellAccessibleClass, TTextCellAccessibleClass: TextCellAccessibleClassObj].}
{.deprecated: [PTextViewAccessible: TextViewAccessible, TTextViewAccessible: TextViewAccessibleObj].}
{.deprecated: [PTextViewAccessibleClass: TextViewAccessibleClass, TTextViewAccessibleClass: TextViewAccessibleClassObj].}
{.deprecated: [PToplevelAccessible: ToplevelAccessible, TToplevelAccessible: ToplevelAccessibleObj].}
{.deprecated: [PToplevelAccessibleClass: ToplevelAccessibleClass, TToplevelAccessibleClass: ToplevelAccessibleClassObj].}
{.deprecated: [PTreeViewAccessible: TreeViewAccessible, TTreeViewAccessible: TreeViewAccessibleObj].}
{.deprecated: [PTreeViewAccessibleClass: TreeViewAccessibleClass, TTreeViewAccessibleClass: TreeViewAccessibleClassObj].}
{.deprecated: [PWindowAccessible: WindowAccessible, TWindowAccessible: WindowAccessibleObj].}
{.deprecated: [PWindowAccessibleClass: WindowAccessibleClass, TWindowAccessibleClass: WindowAccessibleClassObj].}
{.deprecated: [GtkAccelGroup:AccelGroup, GtkAccelGroupObj:AccelGroupObj].}
{.deprecated: [GtkAccelGroupClass:AccelGroupClass, GtkAccelGroupClassObj:AccelGroupClassObj].}
{.deprecated: [GtkAccelKey:AccelKey, GtkAccelKeyObj:AccelKeyObj].}
{.deprecated: [GtkAccelGroupEntry:AccelGroupEntry, GtkAccelGroupEntryObj:AccelGroupEntryObj].}
{.deprecated: [GtkBorder:Border, GtkBorderObj:BorderObj].}
{.deprecated: [GtkClipboard:Clipboard, GtkClipboardObj:ClipboardObj].}
{.deprecated: [GtkIconSet:IconSet, GtkIconSetObj:IconSetObj].}
{.deprecated: [GtkIconSource:IconSource, GtkIconSourceObj:IconSourceObj].}
{.deprecated: [GtkSelectionData:SelectionData, GtkSelectionDataObj:SelectionDataObj].}
{.deprecated: [GtkTooltip:Tooltip, GtkTooltipObj:TooltipObj].}
{.deprecated: [GtkWidgetPath:WidgetPath, GtkWidgetPathObj:WidgetPathObj].}
{.deprecated: [GtkAllocation:Allocation, GtkAllocationObj:AllocationObj].}
{.deprecated: [GtkRequisition:Requisition, GtkRequisitionObj:RequisitionObj].}
{.deprecated: [GtkWidget:Widget, GtkWidgetObj:WidgetObj].}
{.deprecated: [GtkWidgetClass:WidgetClass, GtkWidgetClassObj:WidgetClassObj].}
{.deprecated: [GtkWidgetAuxInfo:WidgetAuxInfo, GtkWidgetAuxInfoObj:WidgetAuxInfoObj].}
{.deprecated: [GtkApplication:Application, GtkApplicationObj:ApplicationObj].}
{.deprecated: [GtkApplicationClass:ApplicationClass, GtkApplicationClassObj:ApplicationClassObj].}
{.deprecated: [GtkContainer:Container, GtkContainerObj:ContainerObj].}
{.deprecated: [GtkContainerClass:ContainerClass, GtkContainerClassObj:ContainerClassObj].}
{.deprecated: [GtkBin:Bin, GtkBinObj:BinObj].}
{.deprecated: [GtkBinClass:BinClass, GtkBinClassObj:BinClassObj].}
{.deprecated: [GtkWindow:Window, GtkWindowObj:WindowObj].}
{.deprecated: [GtkWindowClass:WindowClass, GtkWindowClassObj:WindowClassObj].}
{.deprecated: [GtkDialog:Dialog, GtkDialogObj:DialogObj].}
{.deprecated: [GtkDialogClass:DialogClass, GtkDialogClassObj:DialogClassObj].}
{.deprecated: [GtkAboutDialog:AboutDialog, GtkAboutDialogObj:AboutDialogObj].}
{.deprecated: [GtkAboutDialogClass:AboutDialogClass, GtkAboutDialogClassObj:AboutDialogClassObj].}
{.deprecated: [GtkMisc:Misc, GtkMiscObj:MiscObj].}
{.deprecated: [GtkMiscClass:MiscClass, GtkMiscClassObj:MiscClassObj].}
{.deprecated: [GtkMenuShell:MenuShell, GtkMenuShellObj:MenuShellObj].}
{.deprecated: [GtkMenuShellClass:MenuShellClass, GtkMenuShellClassObj:MenuShellClassObj].}
{.deprecated: [GtkMenu:Menu, GtkMenuObj:MenuObj].}
{.deprecated: [GtkMenuClass:MenuClass, GtkMenuClassObj:MenuClassObj].}
{.deprecated: [GtkLabel:Label, GtkLabelObj:LabelObj].}
{.deprecated: [GtkLabelClass:LabelClass, GtkLabelClassObj:LabelClassObj].}
{.deprecated: [GtkAccelLabel:AccelLabel, GtkAccelLabelObj:AccelLabelObj].}
{.deprecated: [GtkAccelLabelClass:AccelLabelClass, GtkAccelLabelClassObj:AccelLabelClassObj].}
{.deprecated: [GtkAccelMap:AccelMap, GtkAccelMapObj:AccelMapObj].}
{.deprecated: [GtkAccessible:Accessible, GtkAccessibleObj:AccessibleObj].}
{.deprecated: [GtkAccessibleClass:AccessibleClass, GtkAccessibleClassObj:AccessibleClassObj].}
{.deprecated: [GtkActionable:Actionable, GtkActionableObj:ActionableObj].}
{.deprecated: [GtkActionableInterface:ActionableInterface, GtkActionableInterfaceObj:ActionableInterfaceObj].}
{.deprecated: [GtkActionBar:ActionBar, GtkActionBarObj:ActionBarObj].}
{.deprecated: [GtkActionBarClass:ActionBarClass, GtkActionBarClassObj:ActionBarClassObj].}
{.deprecated: [GtkAdjustment:Adjustment, GtkAdjustmentObj:AdjustmentObj].}
{.deprecated: [GtkAdjustmentClass:AdjustmentClass, GtkAdjustmentClassObj:AdjustmentClassObj].}
{.deprecated: [GtkAppChooser:AppChooser, GtkAppChooserObj:AppChooserObj].}
{.deprecated: [GtkAppChooserDialog:AppChooserDialog, GtkAppChooserDialogObj:AppChooserDialogObj].}
{.deprecated: [GtkAppChooserDialogClass:AppChooserDialogClass, GtkAppChooserDialogClassObj:AppChooserDialogClassObj].}
{.deprecated: [GtkBox:Box, GtkBoxObj:BoxObj].}
{.deprecated: [GtkBoxClass:BoxClass, GtkBoxClassObj:BoxClassObj].}
{.deprecated: [GtkAppChooserWidget:AppChooserWidget, GtkAppChooserWidgetObj:AppChooserWidgetObj].}
{.deprecated: [GtkAppChooserWidgetClass:AppChooserWidgetClass, GtkAppChooserWidgetClassObj:AppChooserWidgetClassObj].}
{.deprecated: [GtkTreePath:TreePath, GtkTreePathObj:TreePathObj].}
{.deprecated: [GtkTreeRowReference:TreeRowReference, GtkTreeRowReferenceObj:TreeRowReferenceObj].}
{.deprecated: [GtkTreeModel:TreeModel, GtkTreeModelObj:TreeModelObj].}
{.deprecated: [GtkTreeIter:TreeIter, GtkTreeIterObj:TreeIterObj].}
{.deprecated: [GtkTreeModelIface:TreeModelIface, GtkTreeModelIfaceObj:TreeModelIfaceObj].}
{.deprecated: [GtkCellEditable:CellEditable, GtkCellEditableObj:CellEditableObj].}
{.deprecated: [GtkCellEditableIface:CellEditableIface, GtkCellEditableIfaceObj:CellEditableIfaceObj].}
{.deprecated: [GtkCellRenderer:CellRenderer, GtkCellRendererObj:CellRendererObj].}
{.deprecated: [GtkCellRendererClass:CellRendererClass, GtkCellRendererClassObj:CellRendererClassObj].}
{.deprecated: [GtkTreeSortable:TreeSortable, GtkTreeSortableObj:TreeSortableObj].}
{.deprecated: [GtkTreeSortableIface:TreeSortableIface, GtkTreeSortableIfaceObj:TreeSortableIfaceObj].}
{.deprecated: [GtkCellArea:CellArea, GtkCellAreaObj:CellAreaObj].}
{.deprecated: [GtkCellAreaClass:CellAreaClass, GtkCellAreaClassObj:CellAreaClassObj].}
{.deprecated: [GtkTreeViewColumn:TreeViewColumn, GtkTreeViewColumnObj:TreeViewColumnObj].}
{.deprecated: [GtkTreeViewColumnClass:TreeViewColumnClass, GtkTreeViewColumnClassObj:TreeViewColumnClassObj].}
{.deprecated: [GtkTextAppearance:TextAppearance, GtkTextAppearanceObj:TextAppearanceObj].}
{.deprecated: [GtkTextAttributes:TextAttributes, GtkTextAttributesObj:TextAttributesObj].}
{.deprecated: [GtkTextChildAnchor:TextChildAnchor, GtkTextChildAnchorObj:TextChildAnchorObj].}
{.deprecated: [GtkTextChildAnchorClass:TextChildAnchorClass, GtkTextChildAnchorClassObj:TextChildAnchorClassObj].}
{.deprecated: [GtkTextTag:TextTag, GtkTextTagObj:TextTagObj].}
{.deprecated: [GtkTextTagClass:TextTagClass, GtkTextTagClassObj:TextTagClassObj].}
{.deprecated: [GtkTextIter:TextIter, GtkTextIterObj:TextIterObj].}
{.deprecated: [GtkTargetPair:TargetPair, GtkTargetPairObj:TargetPairObj].}
{.deprecated: [GtkTargetList:TargetList, GtkTargetListObj:TargetListObj].}
{.deprecated: [GtkTargetEntry:TargetEntry, GtkTargetEntryObj:TargetEntryObj].}
{.deprecated: [GtkEditable:Editable, GtkEditableObj:EditableObj].}
{.deprecated: [GtkEditableInterface:EditableInterface, GtkEditableInterfaceObj:EditableInterfaceObj].}
{.deprecated: [GtkIMContext:IMContext, GtkIMContextObj:IMContextObj].}
{.deprecated: [GtkIMContextClass:IMContextClass, GtkIMContextClassObj:IMContextClassObj].}
{.deprecated: [GtkEntryBuffer:EntryBuffer, GtkEntryBufferObj:EntryBufferObj].}
{.deprecated: [GtkEntryBufferClass:EntryBufferClass, GtkEntryBufferClassObj:EntryBufferClassObj].}
{.deprecated: [GtkListStore:ListStore, GtkListStoreObj:ListStoreObj].}
{.deprecated: [GtkListStoreClass:ListStoreClass, GtkListStoreClassObj:ListStoreClassObj].}
{.deprecated: [GtkTreeModelFilter:TreeModelFilter, GtkTreeModelFilterObj:TreeModelFilterObj].}
{.deprecated: [GtkTreeModelFilterClass:TreeModelFilterClass, GtkTreeModelFilterClassObj:TreeModelFilterClassObj].}
{.deprecated: [GtkEntryCompletion:EntryCompletion, GtkEntryCompletionObj:EntryCompletionObj].}
{.deprecated: [GtkEntryCompletionClass:EntryCompletionClass, GtkEntryCompletionClassObj:EntryCompletionClassObj].}
{.deprecated: [GtkImage:Image, GtkImageObj:ImageObj].}
{.deprecated: [GtkImageClass:ImageClass, GtkImageClassObj:ImageClassObj].}
{.deprecated: [GtkEntry:Entry, GtkEntryObj:EntryObj].}
{.deprecated: [GtkEntryClass:EntryClass, GtkEntryClassObj:EntryClassObj].}
{.deprecated: [GtkTreeView:TreeView, GtkTreeViewObj:TreeViewObj].}
{.deprecated: [GtkTreeViewClass:TreeViewClass, GtkTreeViewClassObj:TreeViewClassObj].}
{.deprecated: [GtkComboBox:ComboBox, GtkComboBoxObj:ComboBoxObj].}
{.deprecated: [GtkComboBoxClass:ComboBoxClass, GtkComboBoxClassObj:ComboBoxClassObj].}
{.deprecated: [GtkAppChooserButton:AppChooserButton, GtkAppChooserButtonObj:AppChooserButtonObj].}
{.deprecated: [GtkAppChooserButtonClass:AppChooserButtonClass, GtkAppChooserButtonClassObj:AppChooserButtonClassObj].}
{.deprecated: [GtkApplicationWindow:ApplicationWindow, GtkApplicationWindowObj:ApplicationWindowObj].}
{.deprecated: [GtkApplicationWindowClass:ApplicationWindowClass, GtkApplicationWindowClassObj:ApplicationWindowClassObj].}
{.deprecated: [GtkFrame:Frame, GtkFrameObj:FrameObj].}
{.deprecated: [GtkFrameClass:FrameClass, GtkFrameClassObj:FrameClassObj].}
{.deprecated: [GtkAspectFrame:AspectFrame, GtkAspectFrameObj:AspectFrameObj].}
{.deprecated: [GtkAspectFrameClass:AspectFrameClass, GtkAspectFrameClassObj:AspectFrameClassObj].}
{.deprecated: [GtkAssistant:Assistant, GtkAssistantObj:AssistantObj].}
{.deprecated: [GtkAssistantClass:AssistantClass, GtkAssistantClassObj:AssistantClassObj].}
{.deprecated: [GtkButtonBox:ButtonBox, GtkButtonBoxObj:ButtonBoxObj].}
{.deprecated: [GtkButtonBoxClass:ButtonBoxClass, GtkButtonBoxClassObj:ButtonBoxClassObj].}
{.deprecated: [GtkBindingSet:BindingSet, GtkBindingSetObj:BindingSetObj].}
{.deprecated: [GtkBindingEntry:BindingEntry, GtkBindingEntryObj:BindingEntryObj].}
{.deprecated: [GtkBindingArg:BindingArg, GtkBindingArgObj:BindingArgObj].}
{.deprecated: [GtkBindingSignal:BindingSignal, GtkBindingSignalObj:BindingSignalObj].}
{.deprecated: [GtkBuilder:Builder, GtkBuilderObj:BuilderObj].}
{.deprecated: [GtkBuilderClass:BuilderClass, GtkBuilderClassObj:BuilderClassObj].}
{.deprecated: [GtkBuildable:Buildable, GtkBuildableObj:BuildableObj].}
{.deprecated: [GtkBuildableIface:BuildableIface, GtkBuildableIfaceObj:BuildableIfaceObj].}
{.deprecated: [GtkButton:Button, GtkButtonObj:ButtonObj].}
{.deprecated: [GtkButtonClass:ButtonClass, GtkButtonClassObj:ButtonClassObj].}
{.deprecated: [GtkCalendar:Calendar, GtkCalendarObj:CalendarObj].}
{.deprecated: [GtkCalendarClass:CalendarClass, GtkCalendarClassObj:CalendarClassObj].}
{.deprecated: [GtkCellAreaBox:CellAreaBox, GtkCellAreaBoxObj:CellAreaBoxObj].}
{.deprecated: [GtkCellAreaBoxClass:CellAreaBoxClass, GtkCellAreaBoxClassObj:CellAreaBoxClassObj].}
{.deprecated: [GtkCellAreaContext:CellAreaContext, GtkCellAreaContextObj:CellAreaContextObj].}
{.deprecated: [GtkCellAreaContextClass:CellAreaContextClass, GtkCellAreaContextClassObj:CellAreaContextClassObj].}
{.deprecated: [GtkCellLayout:CellLayout, GtkCellLayoutObj:CellLayoutObj].}
{.deprecated: [GtkCellLayoutIface:CellLayoutIface, GtkCellLayoutIfaceObj:CellLayoutIfaceObj].}
{.deprecated: [GtkCellRendererText:CellRendererText, GtkCellRendererTextObj:CellRendererTextObj].}
{.deprecated: [GtkCellRendererTextClass:CellRendererTextClass, GtkCellRendererTextClassObj:CellRendererTextClassObj].}
{.deprecated: [GtkCellRendererAccel:CellRendererAccel, GtkCellRendererAccelObj:CellRendererAccelObj].}
{.deprecated: [GtkCellRendererAccelClass:CellRendererAccelClass, GtkCellRendererAccelClassObj:CellRendererAccelClassObj].}
{.deprecated: [GtkCellRendererCombo:CellRendererCombo, GtkCellRendererComboObj:CellRendererComboObj].}
{.deprecated: [GtkCellRendererComboClass:CellRendererComboClass, GtkCellRendererComboClassObj:CellRendererComboClassObj].}
{.deprecated: [GtkCellRendererPixbuf:CellRendererPixbuf, GtkCellRendererPixbufObj:CellRendererPixbufObj].}
{.deprecated: [GtkCellRendererPixbufClass:CellRendererPixbufClass, GtkCellRendererPixbufClassObj:CellRendererPixbufClassObj].}
{.deprecated: [GtkCellRendererProgress:CellRendererProgress, GtkCellRendererProgressObj:CellRendererProgressObj].}
{.deprecated: [GtkCellRendererProgressClass:CellRendererProgressClass, GtkCellRendererProgressClassObj:CellRendererProgressClassObj].}
{.deprecated: [GtkCellRendererSpin:CellRendererSpin, GtkCellRendererSpinObj:CellRendererSpinObj].}
{.deprecated: [GtkCellRendererSpinClass:CellRendererSpinClass, GtkCellRendererSpinClassObj:CellRendererSpinClassObj].}
{.deprecated: [GtkCellRendererSpinner:CellRendererSpinner, GtkCellRendererSpinnerObj:CellRendererSpinnerObj].}
{.deprecated: [GtkCellRendererSpinnerClass:CellRendererSpinnerClass, GtkCellRendererSpinnerClassObj:CellRendererSpinnerClassObj].}
{.deprecated: [GtkCellRendererToggle:CellRendererToggle, GtkCellRendererToggleObj:CellRendererToggleObj].}
{.deprecated: [GtkCellRendererToggleClass:CellRendererToggleClass, GtkCellRendererToggleClassObj:CellRendererToggleClassObj].}
{.deprecated: [GtkCellView:CellView, GtkCellViewObj:CellViewObj].}
{.deprecated: [GtkCellViewClass:CellViewClass, GtkCellViewClassObj:CellViewClassObj].}
{.deprecated: [GtkToggleButton:ToggleButton, GtkToggleButtonObj:ToggleButtonObj].}
{.deprecated: [GtkToggleButtonClass:ToggleButtonClass, GtkToggleButtonClassObj:ToggleButtonClassObj].}
{.deprecated: [GtkCheckButton:CheckButton, GtkCheckButtonObj:CheckButtonObj].}
{.deprecated: [GtkCheckButtonClass:CheckButtonClass, GtkCheckButtonClassObj:CheckButtonClassObj].}
{.deprecated: [GtkMenuItem:MenuItem, GtkMenuItemObj:MenuItemObj].}
{.deprecated: [GtkMenuItemClass:MenuItemClass, GtkMenuItemClassObj:MenuItemClassObj].}
{.deprecated: [GtkCheckMenuItem:CheckMenuItem, GtkCheckMenuItemObj:CheckMenuItemObj].}
{.deprecated: [GtkCheckMenuItemClass:CheckMenuItemClass, GtkCheckMenuItemClassObj:CheckMenuItemClassObj].}
{.deprecated: [GtkColorButton:ColorButton, GtkColorButtonObj:ColorButtonObj].}
{.deprecated: [GtkColorButtonClass:ColorButtonClass, GtkColorButtonClassObj:ColorButtonClassObj].}
{.deprecated: [GtkColorChooser:ColorChooser, GtkColorChooserObj:ColorChooserObj].}
{.deprecated: [GtkColorChooserInterface:ColorChooserInterface, GtkColorChooserInterfaceObj:ColorChooserInterfaceObj].}
{.deprecated: [GtkColorChooserDialog:ColorChooserDialog, GtkColorChooserDialogObj:ColorChooserDialogObj].}
{.deprecated: [GtkColorChooserDialogClass:ColorChooserDialogClass, GtkColorChooserDialogClassObj:ColorChooserDialogClassObj].}
{.deprecated: [GtkColorChooserWidget:ColorChooserWidget, GtkColorChooserWidgetObj:ColorChooserWidgetObj].}
{.deprecated: [GtkColorChooserWidgetClass:ColorChooserWidgetClass, GtkColorChooserWidgetClassObj:ColorChooserWidgetClassObj].}
{.deprecated: [GtkComboBoxText:ComboBoxText, GtkComboBoxTextObj:ComboBoxTextObj].}
{.deprecated: [GtkComboBoxTextClass:ComboBoxTextClass, GtkComboBoxTextClassObj:ComboBoxTextClassObj].}
{.deprecated: [GtkCssSection:CssSection, GtkCssSectionObj:CssSectionObj].}
{.deprecated: [GtkCssProvider:CssProvider, GtkCssProviderObj:CssProviderObj].}
{.deprecated: [GtkCssProviderClass:CssProviderClass, GtkCssProviderClassObj:CssProviderClassObj].}
{.deprecated: [GtkDrawingArea:DrawingArea, GtkDrawingAreaObj:DrawingAreaObj].}
{.deprecated: [GtkDrawingAreaClass:DrawingAreaClass, GtkDrawingAreaClassObj:DrawingAreaClassObj].}
{.deprecated: [GtkEventBox:EventBox, GtkEventBoxObj:EventBoxObj].}
{.deprecated: [GtkEventBoxClass:EventBoxClass, GtkEventBoxClassObj:EventBoxClassObj].}
{.deprecated: [GtkEventController:EventController, GtkEventControllerObj:EventControllerObj].}
{.deprecated: [GtkExpander:Expander, GtkExpanderObj:ExpanderObj].}
{.deprecated: [GtkExpanderClass:ExpanderClass, GtkExpanderClassObj:ExpanderClassObj].}
{.deprecated: [GtkFixed:Fixed, GtkFixedObj:FixedObj].}
{.deprecated: [GtkFixedClass:FixedClass, GtkFixedClassObj:FixedClassObj].}
{.deprecated: [GtkFixedChild:FixedChild, GtkFixedChildObj:FixedChildObj].}
{.deprecated: [GtkFileFilter:FileFilter, GtkFileFilterObj:FileFilterObj].}
{.deprecated: [GtkFileFilterInfo:FileFilterInfo, GtkFileFilterInfoObj:FileFilterInfoObj].}
{.deprecated: [GtkFileChooser:FileChooser, GtkFileChooserObj:FileChooserObj].}
{.deprecated: [GtkFileChooserButton:FileChooserButton, GtkFileChooserButtonObj:FileChooserButtonObj].}
{.deprecated: [GtkFileChooserButtonClass:FileChooserButtonClass, GtkFileChooserButtonClassObj:FileChooserButtonClassObj].}
{.deprecated: [GtkFileChooserDialog:FileChooserDialog, GtkFileChooserDialogObj:FileChooserDialogObj].}
{.deprecated: [GtkFileChooserDialogClass:FileChooserDialogClass, GtkFileChooserDialogClassObj:FileChooserDialogClassObj].}
{.deprecated: [GtkFileChooserWidget:FileChooserWidget, GtkFileChooserWidgetObj:FileChooserWidgetObj].}
{.deprecated: [GtkFileChooserWidgetClass:FileChooserWidgetClass, GtkFileChooserWidgetClassObj:FileChooserWidgetClassObj].}
{.deprecated: [GtkFlowBox:FlowBox, GtkFlowBoxObj:FlowBoxObj].}
{.deprecated: [GtkFlowBoxClass:FlowBoxClass, GtkFlowBoxClassObj:FlowBoxClassObj].}
{.deprecated: [GtkFlowBoxChild:FlowBoxChild, GtkFlowBoxChildObj:FlowBoxChildObj].}
{.deprecated: [GtkFlowBoxChildClass:FlowBoxChildClass, GtkFlowBoxChildClassObj:FlowBoxChildClassObj].}
{.deprecated: [GtkFontButton:FontButton, GtkFontButtonObj:FontButtonObj].}
{.deprecated: [GtkFontButtonClass:FontButtonClass, GtkFontButtonClassObj:FontButtonClassObj].}
{.deprecated: [GtkFontChooser:FontChooser, GtkFontChooserObj:FontChooserObj].}
{.deprecated: [GtkFontChooserIface:FontChooserIface, GtkFontChooserIfaceObj:FontChooserIfaceObj].}
{.deprecated: [GtkFontChooserDialog:FontChooserDialog, GtkFontChooserDialogObj:FontChooserDialogObj].}
{.deprecated: [GtkFontChooserDialogClass:FontChooserDialogClass, GtkFontChooserDialogClassObj:FontChooserDialogClassObj].}
{.deprecated: [GtkFontChooserWidget:FontChooserWidget, GtkFontChooserWidgetObj:FontChooserWidgetObj].}
{.deprecated: [GtkFontChooserWidgetClass:FontChooserWidgetClass, GtkFontChooserWidgetClassObj:FontChooserWidgetClassObj].}
{.deprecated: [GtkGesture:Gesture, GtkGestureObj:GestureObj].}
{.deprecated: [GtkGestureSingle:GestureSingle, GtkGestureSingleObj:GestureSingleObj].}
{.deprecated: [GtkGestureDrag:GestureDrag, GtkGestureDragObj:GestureDragObj].}
{.deprecated: [GtkGestureMultiPress:GestureMultiPress, GtkGestureMultiPressObj:GestureMultiPressObj].}
{.deprecated: [GtkGesturePan:GesturePan, GtkGesturePanObj:GesturePanObj].}
{.deprecated: [GtkGestureRotate:GestureRotate, GtkGestureRotateObj:GestureRotateObj].}
{.deprecated: [GtkGestureSwipe:GestureSwipe, GtkGestureSwipeObj:GestureSwipeObj].}
{.deprecated: [GtkGestureZoom:GestureZoom, GtkGestureZoomObj:GestureZoomObj].}
{.deprecated: [GtkGLArea:GLArea, GtkGLAreaObj:GLAreaObj].}
{.deprecated: [GtkGLAreaClass:GLAreaClass, GtkGLAreaClassObj:GLAreaClassObj].}
{.deprecated: [GtkGrid:Grid, GtkGridObj:GridObj].}
{.deprecated: [GtkGridClass:GridClass, GtkGridClassObj:GridClassObj].}
{.deprecated: [GtkHeaderBar:HeaderBar, GtkHeaderBarObj:HeaderBarObj].}
{.deprecated: [GtkHeaderBarClass:HeaderBarClass, GtkHeaderBarClassObj:HeaderBarClassObj].}
{.deprecated: [GtkIconFactory:IconFactory, GtkIconFactoryObj:IconFactoryObj].}
{.deprecated: [GtkIconFactoryClass:IconFactoryClass, GtkIconFactoryClassObj:IconFactoryClassObj].}
{.deprecated: [GtkSymbolicColor:SymbolicColor, GtkSymbolicColorObj:SymbolicColorObj].}
{.deprecated: [GtkGradient:Gradient, GtkGradientObj:GradientObj].}
{.deprecated: [GtkStyleProperties:StyleProperties, GtkStylePropertiesObj:StylePropertiesObj].}
{.deprecated: [GtkStylePropertiesClass:StylePropertiesClass, GtkStylePropertiesClassObj:StylePropertiesClassObj].}
{.deprecated: [GtkStyleProvider:StyleProvider, GtkStyleProviderObj:StyleProviderObj].}
{.deprecated: [GtkStyleProviderIface:StyleProviderIface, GtkStyleProviderIfaceObj:StyleProviderIfaceObj].}
{.deprecated: [GtkStyleContext:StyleContext, GtkStyleContextObj:StyleContextObj].}
{.deprecated: [GtkStyleContextClass:StyleContextClass, GtkStyleContextClassObj:StyleContextClassObj].}
{.deprecated: [GtkIconInfo:IconInfo, GtkIconInfoObj:IconInfoObj].}
{.deprecated: [GtkIconTheme:IconTheme, GtkIconThemeObj:IconThemeObj].}
{.deprecated: [GtkIconThemeClass:IconThemeClass, GtkIconThemeClassObj:IconThemeClassObj].}
{.deprecated: [GtkIconView:IconView, GtkIconViewObj:IconViewObj].}
{.deprecated: [GtkIconViewClass:IconViewClass, GtkIconViewClassObj:IconViewClassObj].}
{.deprecated: [GtkIMContextInfo:IMContextInfo, GtkIMContextInfoObj:IMContextInfoObj].}
{.deprecated: [GtkIMContextSimple:IMContextSimple, GtkIMContextSimpleObj:IMContextSimpleObj].}
{.deprecated: [GtkIMContextSimpleClass:IMContextSimpleClass, GtkIMContextSimpleClassObj:IMContextSimpleClassObj].}
{.deprecated: [GtkIMMulticontext:IMMulticontext, GtkIMMulticontextObj:IMMulticontextObj].}
{.deprecated: [GtkIMMulticontextClass:IMMulticontextClass, GtkIMMulticontextClassObj:IMMulticontextClassObj].}
{.deprecated: [GtkInfoBar:InfoBar, GtkInfoBarObj:InfoBarObj].}
{.deprecated: [GtkInfoBarClass:InfoBarClass, GtkInfoBarClassObj:InfoBarClassObj].}
{.deprecated: [GtkInvisible:Invisible, GtkInvisibleObj:InvisibleObj].}
{.deprecated: [GtkInvisibleClass:InvisibleClass, GtkInvisibleClassObj:InvisibleClassObj].}
{.deprecated: [GtkLayout:Layout, GtkLayoutObj:LayoutObj].}
{.deprecated: [GtkLayoutClass:LayoutClass, GtkLayoutClassObj:LayoutClassObj].}
{.deprecated: [GtkLevelBar:LevelBar, GtkLevelBarObj:LevelBarObj].}
{.deprecated: [GtkLevelBarClass:LevelBarClass, GtkLevelBarClassObj:LevelBarClassObj].}
{.deprecated: [GtkLinkButton:LinkButton, GtkLinkButtonObj:LinkButtonObj].}
{.deprecated: [GtkLinkButtonClass:LinkButtonClass, GtkLinkButtonClassObj:LinkButtonClassObj].}
{.deprecated: [GtkListBox:ListBox, GtkListBoxObj:ListBoxObj].}
{.deprecated: [GtkListBoxClass:ListBoxClass, GtkListBoxClassObj:ListBoxClassObj].}
{.deprecated: [GtkListBoxRow:ListBoxRow, GtkListBoxRowObj:ListBoxRowObj].}
{.deprecated: [GtkListBoxRowClass:ListBoxRowClass, GtkListBoxRowClassObj:ListBoxRowClassObj].}
{.deprecated: [GtkLockButton:LockButton, GtkLockButtonObj:LockButtonObj].}
{.deprecated: [GtkLockButtonClass:LockButtonClass, GtkLockButtonClassObj:LockButtonClassObj].}
{.deprecated: [GtkMenuBar:MenuBar, GtkMenuBarObj:MenuBarObj].}
{.deprecated: [GtkMenuBarClass:MenuBarClass, GtkMenuBarClassObj:MenuBarClassObj].}
{.deprecated: [GtkPopover:Popover, GtkPopoverObj:PopoverObj].}
{.deprecated: [GtkPopoverClass:PopoverClass, GtkPopoverClassObj:PopoverClassObj].}
{.deprecated: [GtkMenuButton:MenuButton, GtkMenuButtonObj:MenuButtonObj].}
{.deprecated: [GtkMenuButtonClass:MenuButtonClass, GtkMenuButtonClassObj:MenuButtonClassObj].}
{.deprecated: [GtkSizeGroup:SizeGroup, GtkSizeGroupObj:SizeGroupObj].}
{.deprecated: [GtkSizeGroupClass:SizeGroupClass, GtkSizeGroupClassObj:SizeGroupClassObj].}
{.deprecated: [GtkToolItem:ToolItem, GtkToolItemObj:ToolItemObj].}
{.deprecated: [GtkToolItemClass:ToolItemClass, GtkToolItemClassObj:ToolItemClassObj].}
{.deprecated: [GtkToolButton:ToolButton, GtkToolButtonObj:ToolButtonObj].}
{.deprecated: [GtkToolButtonClass:ToolButtonClass, GtkToolButtonClassObj:ToolButtonClassObj].}
{.deprecated: [GtkMenuToolButton:MenuToolButton, GtkMenuToolButtonObj:MenuToolButtonObj].}
{.deprecated: [GtkMenuToolButtonClass:MenuToolButtonClass, GtkMenuToolButtonClassObj:MenuToolButtonClassObj].}
{.deprecated: [GtkMessageDialog:MessageDialog, GtkMessageDialogObj:MessageDialogObj].}
{.deprecated: [GtkMessageDialogClass:MessageDialogClass, GtkMessageDialogClassObj:MessageDialogClassObj].}
{.deprecated: [GtkModelButton:ModelButton, GtkModelButtonObj:ModelButtonObj].}
{.deprecated: [GtkMountOperation:MountOperation, GtkMountOperationObj:MountOperationObj].}
{.deprecated: [GtkMountOperationClass:MountOperationClass, GtkMountOperationClassObj:MountOperationClassObj].}
{.deprecated: [GtkNotebook:Notebook, GtkNotebookObj:NotebookObj].}
{.deprecated: [GtkNotebookClass:NotebookClass, GtkNotebookClassObj:NotebookClassObj].}
{.deprecated: [GtkOffscreenWindow:OffscreenWindow, GtkOffscreenWindowObj:OffscreenWindowObj].}
{.deprecated: [GtkOffscreenWindowClass:OffscreenWindowClass, GtkOffscreenWindowClassObj:OffscreenWindowClassObj].}
{.deprecated: [GtkOrientable:Orientable, GtkOrientableObj:OrientableObj].}
{.deprecated: [GtkOrientableIface:OrientableIface, GtkOrientableIfaceObj:OrientableIfaceObj].}
{.deprecated: [GtkOverlay:Overlay, GtkOverlayObj:OverlayObj].}
{.deprecated: [GtkOverlayClass:OverlayClass, GtkOverlayClassObj:OverlayClassObj].}
{.deprecated: [GtkPaperSize:PaperSize, GtkPaperSizeObj:PaperSizeObj].}
{.deprecated: [GtkPageSetup:PageSetup, GtkPageSetupObj:PageSetupObj].}
{.deprecated: [GtkPaned:Paned, GtkPanedObj:PanedObj].}
{.deprecated: [GtkPanedClass:PanedClass, GtkPanedClassObj:PanedClassObj].}
{.deprecated: [GtkPlacesSidebar:PlacesSidebar, GtkPlacesSidebarObj:PlacesSidebarObj].}
{.deprecated: [GtkPopoverMenu:PopoverMenu, GtkPopoverMenuObj:PopoverMenuObj].}
{.deprecated: [GtkPopoverMenuClass:PopoverMenuClass, GtkPopoverMenuClassObj:PopoverMenuClassObj].}
{.deprecated: [GtkPrintContext:PrintContext, GtkPrintContextObj:PrintContextObj].}
{.deprecated: [GtkPrintSettings:PrintSettings, GtkPrintSettingsObj:PrintSettingsObj].}
{.deprecated: [GtkPageRange:PageRange, GtkPageRangeObj:PageRangeObj].}
{.deprecated: [GtkPrintOperationPreview:PrintOperationPreview, GtkPrintOperationPreviewObj:PrintOperationPreviewObj].}
{.deprecated: [GtkPrintOperationPreviewIface:PrintOperationPreviewIface, GtkPrintOperationPreviewIfaceObj:PrintOperationPreviewIfaceObj].}
{.deprecated: [GtkPrintOperation:PrintOperation, GtkPrintOperationObj:PrintOperationObj].}
{.deprecated: [GtkPrintOperationClass:PrintOperationClass, GtkPrintOperationClassObj:PrintOperationClassObj].}
{.deprecated: [GtkProgressBar:ProgressBar, GtkProgressBarObj:ProgressBarObj].}
{.deprecated: [GtkProgressBarClass:ProgressBarClass, GtkProgressBarClassObj:ProgressBarClassObj].}
{.deprecated: [GtkRadioButton:RadioButton, GtkRadioButtonObj:RadioButtonObj].}
{.deprecated: [GtkRadioButtonClass:RadioButtonClass, GtkRadioButtonClassObj:RadioButtonClassObj].}
{.deprecated: [GtkRadioMenuItem:RadioMenuItem, GtkRadioMenuItemObj:RadioMenuItemObj].}
{.deprecated: [GtkRadioMenuItemClass:RadioMenuItemClass, GtkRadioMenuItemClassObj:RadioMenuItemClassObj].}
{.deprecated: [GtkToggleToolButton:ToggleToolButton, GtkToggleToolButtonObj:ToggleToolButtonObj].}
{.deprecated: [GtkToggleToolButtonClass:ToggleToolButtonClass, GtkToggleToolButtonClassObj:ToggleToolButtonClassObj].}
{.deprecated: [GtkRadioToolButton:RadioToolButton, GtkRadioToolButtonObj:RadioToolButtonObj].}
{.deprecated: [GtkRadioToolButtonClass:RadioToolButtonClass, GtkRadioToolButtonClassObj:RadioToolButtonClassObj].}
{.deprecated: [GtkRange:Range, GtkRangeObj:RangeObj].}
{.deprecated: [GtkRangeClass:RangeClass, GtkRangeClassObj:RangeClassObj].}
{.deprecated: [GtkRecentInfo:RecentInfo, GtkRecentInfoObj:RecentInfoObj].}
{.deprecated: [GtkRecentData:RecentData, GtkRecentDataObj:RecentDataObj].}
{.deprecated: [GtkRecentManager:RecentManager, GtkRecentManagerObj:RecentManagerObj].}
{.deprecated: [GtkRecentManagerClass:RecentManagerClass, GtkRecentManagerClassObj:RecentManagerClassObj].}
{.deprecated: [GtkRecentFilter:RecentFilter, GtkRecentFilterObj:RecentFilterObj].}
{.deprecated: [GtkRecentFilterInfo:RecentFilterInfo, GtkRecentFilterInfoObj:RecentFilterInfoObj].}
{.deprecated: [GtkRecentChooser:RecentChooser, GtkRecentChooserObj:RecentChooserObj].}
{.deprecated: [GtkRecentChooserIface:RecentChooserIface, GtkRecentChooserIfaceObj:RecentChooserIfaceObj].}
{.deprecated: [GtkRecentChooserDialog:RecentChooserDialog, GtkRecentChooserDialogObj:RecentChooserDialogObj].}
{.deprecated: [GtkRecentChooserDialogClass:RecentChooserDialogClass, GtkRecentChooserDialogClassObj:RecentChooserDialogClassObj].}
{.deprecated: [GtkRecentChooserMenu:RecentChooserMenu, GtkRecentChooserMenuObj:RecentChooserMenuObj].}
{.deprecated: [GtkRecentChooserMenuClass:RecentChooserMenuClass, GtkRecentChooserMenuClassObj:RecentChooserMenuClassObj].}
{.deprecated: [GtkRecentChooserWidget:RecentChooserWidget, GtkRecentChooserWidgetObj:RecentChooserWidgetObj].}
{.deprecated: [GtkRecentChooserWidgetClass:RecentChooserWidgetClass, GtkRecentChooserWidgetClassObj:RecentChooserWidgetClassObj].}
{.deprecated: [GtkRevealer:Revealer, GtkRevealerObj:RevealerObj].}
{.deprecated: [GtkRevealerClass:RevealerClass, GtkRevealerClassObj:RevealerClassObj].}
{.deprecated: [GtkScale:Scale, GtkScaleObj:ScaleObj].}
{.deprecated: [GtkScaleClass:ScaleClass, GtkScaleClassObj:ScaleClassObj].}
{.deprecated: [GtkScaleButton:ScaleButton, GtkScaleButtonObj:ScaleButtonObj].}
{.deprecated: [GtkScaleButtonClass:ScaleButtonClass, GtkScaleButtonClassObj:ScaleButtonClassObj].}
{.deprecated: [GtkScrollable:Scrollable, GtkScrollableObj:ScrollableObj].}
{.deprecated: [GtkScrollableInterface:ScrollableInterface, GtkScrollableInterfaceObj:ScrollableInterfaceObj].}
{.deprecated: [GtkScrollbar:Scrollbar, GtkScrollbarObj:ScrollbarObj].}
{.deprecated: [GtkScrollbarClass:ScrollbarClass, GtkScrollbarClassObj:ScrollbarClassObj].}
{.deprecated: [GtkScrolledWindow:ScrolledWindow, GtkScrolledWindowObj:ScrolledWindowObj].}
{.deprecated: [GtkScrolledWindowClass:ScrolledWindowClass, GtkScrolledWindowClassObj:ScrolledWindowClassObj].}
{.deprecated: [GtkSearchBar:SearchBar, GtkSearchBarObj:SearchBarObj].}
{.deprecated: [GtkSearchBarClass:SearchBarClass, GtkSearchBarClassObj:SearchBarClassObj].}
{.deprecated: [GtkSearchEntry:SearchEntry, GtkSearchEntryObj:SearchEntryObj].}
{.deprecated: [GtkSearchEntryClass:SearchEntryClass, GtkSearchEntryClassObj:SearchEntryClassObj].}
{.deprecated: [GtkSeparator:Separator, GtkSeparatorObj:SeparatorObj].}
{.deprecated: [GtkSeparatorClass:SeparatorClass, GtkSeparatorClassObj:SeparatorClassObj].}
{.deprecated: [GtkSeparatorMenuItem:SeparatorMenuItem, GtkSeparatorMenuItemObj:SeparatorMenuItemObj].}
{.deprecated: [GtkSeparatorMenuItemClass:SeparatorMenuItemClass, GtkSeparatorMenuItemClassObj:SeparatorMenuItemClassObj].}
{.deprecated: [GtkSeparatorToolItem:SeparatorToolItem, GtkSeparatorToolItemObj:SeparatorToolItemObj].}
{.deprecated: [GtkSeparatorToolItemClass:SeparatorToolItemClass, GtkSeparatorToolItemClassObj:SeparatorToolItemClassObj].}
{.deprecated: [GtkSettings:Settings, GtkSettingsObj:SettingsObj].}
{.deprecated: [GtkSettingsClass:SettingsClass, GtkSettingsClassObj:SettingsClassObj].}
{.deprecated: [GtkSettingsValue:SettingsValue, GtkSettingsValueObj:SettingsValueObj].}
{.deprecated: [GtkStack:Stack, GtkStackObj:StackObj].}
{.deprecated: [GtkStackClass:StackClass, GtkStackClassObj:StackClassObj].}
{.deprecated: [GtkSidebar:Sidebar, GtkSidebarObj:SidebarObj].}
{.deprecated: [GtkSidebarClass:SidebarClass, GtkSidebarClassObj:SidebarClassObj].}
{.deprecated: [GtkRequestedSize:RequestedSize, GtkRequestedSizeObj:RequestedSizeObj].}
{.deprecated: [GtkSpinButton:SpinButton, GtkSpinButtonObj:SpinButtonObj].}
{.deprecated: [GtkSpinButtonClass:SpinButtonClass, GtkSpinButtonClassObj:SpinButtonClassObj].}
{.deprecated: [GtkSpinner:Spinner, GtkSpinnerObj:SpinnerObj].}
{.deprecated: [GtkSpinnerClass:SpinnerClass, GtkSpinnerClassObj:SpinnerClassObj].}
{.deprecated: [GtkStackSwitcher:StackSwitcher, GtkStackSwitcherObj:StackSwitcherObj].}
{.deprecated: [GtkStackSwitcherClass:StackSwitcherClass, GtkStackSwitcherClassObj:StackSwitcherClassObj].}
{.deprecated: [GtkStatusbar:Statusbar, GtkStatusbarObj:StatusbarObj].}
{.deprecated: [GtkStatusbarClass:StatusbarClass, GtkStatusbarClassObj:StatusbarClassObj].}
{.deprecated: [GtkSwitch:Switch, GtkSwitchObj:SwitchObj].}
{.deprecated: [GtkSwitchClass:SwitchClass, GtkSwitchClassObj:SwitchClassObj].}
{.deprecated: [GtkTextTagTable:TextTagTable, GtkTextTagTableObj:TextTagTableObj].}
{.deprecated: [GtkTextTagTableClass:TextTagTableClass, GtkTextTagTableClassObj:TextTagTableClassObj].}
{.deprecated: [GtkTextMark:TextMark, GtkTextMarkObj:TextMarkObj].}
{.deprecated: [GtkTextMarkClass:TextMarkClass, GtkTextMarkClassObj:TextMarkClassObj].}
{.deprecated: [GtkTextBTree:TextBTree, GtkTextBTreeObj:TextBTreeObj].}
{.deprecated: [GtkTextBuffer:TextBuffer, GtkTextBufferObj:TextBufferObj].}
{.deprecated: [GtkTextBufferClass:TextBufferClass, GtkTextBufferClassObj:TextBufferClassObj].}
{.deprecated: [GtkTextView:TextView, GtkTextViewObj:TextViewObj].}
{.deprecated: [GtkTextViewClass:TextViewClass, GtkTextViewClassObj:TextViewClassObj].}
{.deprecated: [GtkToolbar:Toolbar, GtkToolbarObj:ToolbarObj].}
{.deprecated: [GtkToolbarClass:ToolbarClass, GtkToolbarClassObj:ToolbarClassObj].}
{.deprecated: [GtkToolItemGroup:ToolItemGroup, GtkToolItemGroupObj:ToolItemGroupObj].}
{.deprecated: [GtkToolItemGroupClass:ToolItemGroupClass, GtkToolItemGroupClassObj:ToolItemGroupClassObj].}
{.deprecated: [GtkToolPalette:ToolPalette, GtkToolPaletteObj:ToolPaletteObj].}
{.deprecated: [GtkToolPaletteClass:ToolPaletteClass, GtkToolPaletteClassObj:ToolPaletteClassObj].}
{.deprecated: [GtkToolShell:ToolShell, GtkToolShellObj:ToolShellObj].}
{.deprecated: [GtkToolShellIface:ToolShellIface, GtkToolShellIfaceObj:ToolShellIfaceObj].}
{.deprecated: [GtkTreeDragSource:TreeDragSource, GtkTreeDragSourceObj:TreeDragSourceObj].}
{.deprecated: [GtkTreeDragSourceIface:TreeDragSourceIface, GtkTreeDragSourceIfaceObj:TreeDragSourceIfaceObj].}
{.deprecated: [GtkTreeDragDest:TreeDragDest, GtkTreeDragDestObj:TreeDragDestObj].}
{.deprecated: [GtkTreeDragDestIface:TreeDragDestIface, GtkTreeDragDestIfaceObj:TreeDragDestIfaceObj].}
{.deprecated: [GtkTreeModelSort:TreeModelSort, GtkTreeModelSortObj:TreeModelSortObj].}
{.deprecated: [GtkTreeModelSortClass:TreeModelSortClass, GtkTreeModelSortClassObj:TreeModelSortClassObj].}
{.deprecated: [GtkTreeSelection:TreeSelection, GtkTreeSelectionObj:TreeSelectionObj].}
{.deprecated: [GtkTreeSelectionClass:TreeSelectionClass, GtkTreeSelectionClassObj:TreeSelectionClassObj].}
{.deprecated: [GtkTreeStore:TreeStore, GtkTreeStoreObj:TreeStoreObj].}
{.deprecated: [GtkTreeStoreClass:TreeStoreClass, GtkTreeStoreClassObj:TreeStoreClassObj].}
{.deprecated: [GtkViewport:Viewport, GtkViewportObj:ViewportObj].}
{.deprecated: [GtkViewportClass:ViewportClass, GtkViewportClassObj:ViewportClassObj].}
{.deprecated: [GtkVolumeButton:VolumeButton, GtkVolumeButtonObj:VolumeButtonObj].}
{.deprecated: [GtkVolumeButtonClass:VolumeButtonClass, GtkVolumeButtonClassObj:VolumeButtonClassObj].}
{.deprecated: [GtkWindowGroup:WindowGroup, GtkWindowGroupObj:WindowGroupObj].}
{.deprecated: [GtkWindowGroupClass:WindowGroupClass, GtkWindowGroupClassObj:WindowGroupClassObj].}
{.deprecated: [GtkArrow:Arrow, GtkArrowObj:ArrowObj].}
{.deprecated: [GtkArrowClass:ArrowClass, GtkArrowClassObj:ArrowClassObj].}
{.deprecated: [GtkAction:Action, GtkActionObj:ActionObj].}
{.deprecated: [GtkActionClass:ActionClass, GtkActionClassObj:ActionClassObj].}
{.deprecated: [GtkActivatable:Activatable, GtkActivatableObj:ActivatableObj].}
{.deprecated: [GtkActivatableIface:ActivatableIface, GtkActivatableIfaceObj:ActivatableIfaceObj].}
{.deprecated: [GtkStockItem:StockItem, GtkStockItemObj:StockItemObj].}
{.deprecated: [GtkActionGroup:ActionGroup, GtkActionGroupObj:ActionGroupObj].}
{.deprecated: [GtkActionGroupClass:ActionGroupClass, GtkActionGroupClassObj:ActionGroupClassObj].}
{.deprecated: [GtkActionEntry:ActionEntry, GtkActionEntryObj:ActionEntryObj].}
{.deprecated: [GtkToggleActionEntry:ToggleActionEntry, GtkToggleActionEntryObj:ToggleActionEntryObj].}
{.deprecated: [GtkRadioActionEntry:RadioActionEntry, GtkRadioActionEntryObj:RadioActionEntryObj].}
{.deprecated: [GtkAlignment:Alignment, GtkAlignmentObj:AlignmentObj].}
{.deprecated: [GtkAlignmentClass:AlignmentClass, GtkAlignmentClassObj:AlignmentClassObj].}
{.deprecated: [GtkColorSelection:ColorSelection, GtkColorSelectionObj:ColorSelectionObj].}
{.deprecated: [GtkColorSelectionClass:ColorSelectionClass, GtkColorSelectionClassObj:ColorSelectionClassObj].}
{.deprecated: [GtkColorSelectionDialog:ColorSelectionDialog, GtkColorSelectionDialogObj:ColorSelectionDialogObj].}
{.deprecated: [GtkColorSelectionDialogClass:ColorSelectionDialogClass, GtkColorSelectionDialogClassObj:ColorSelectionDialogClassObj].}
{.deprecated: [GtkFontSelection:FontSelection, GtkFontSelectionObj:FontSelectionObj].}
{.deprecated: [GtkFontSelectionClass:FontSelectionClass, GtkFontSelectionClassObj:FontSelectionClassObj].}
{.deprecated: [GtkFontSelectionDialog:FontSelectionDialog, GtkFontSelectionDialogObj:FontSelectionDialogObj].}
{.deprecated: [GtkFontSelectionDialogClass:FontSelectionDialogClass, GtkFontSelectionDialogClassObj:FontSelectionDialogClassObj].}
{.deprecated: [GtkHandleBox:HandleBox, GtkHandleBoxObj:HandleBoxObj].}
{.deprecated: [GtkHandleBoxClass:HandleBoxClass, GtkHandleBoxClassObj:HandleBoxClassObj].}
{.deprecated: [GtkHButtonBox:HButtonBox, GtkHButtonBoxObj:HButtonBoxObj].}
{.deprecated: [GtkHButtonBoxClass:HButtonBoxClass, GtkHButtonBoxClassObj:HButtonBoxClassObj].}
{.deprecated: [GtkHBox:HBox, GtkHBoxObj:HBoxObj].}
{.deprecated: [GtkHBoxClass:HBoxClass, GtkHBoxClassObj:HBoxClassObj].}
{.deprecated: [GtkHPaned:HPaned, GtkHPanedObj:HPanedObj].}
{.deprecated: [GtkHPanedClass:HPanedClass, GtkHPanedClassObj:HPanedClassObj].}
{.deprecated: [GtkHSV:HSV, GtkHSVObj:HSVObj].}
{.deprecated: [GtkHSVClass:HSVClass, GtkHSVClassObj:HSVClassObj].}
{.deprecated: [GtkHScale:HScale, GtkHScaleObj:HScaleObj].}
{.deprecated: [GtkHScaleClass:HScaleClass, GtkHScaleClassObj:HScaleClassObj].}
{.deprecated: [GtkHScrollbar:HScrollbar, GtkHScrollbarObj:HScrollbarObj].}
{.deprecated: [GtkHScrollbarClass:HScrollbarClass, GtkHScrollbarClassObj:HScrollbarClassObj].}
{.deprecated: [GtkHSeparator:HSeparator, GtkHSeparatorObj:HSeparatorObj].}
{.deprecated: [GtkHSeparatorClass:HSeparatorClass, GtkHSeparatorClassObj:HSeparatorClassObj].}
{.deprecated: [GtkImageMenuItem:ImageMenuItem, GtkImageMenuItemObj:ImageMenuItemObj].}
{.deprecated: [GtkImageMenuItemClass:ImageMenuItemClass, GtkImageMenuItemClassObj:ImageMenuItemClassObj].}
{.deprecated: [GtkNumerableIcon:NumerableIcon, GtkNumerableIconObj:NumerableIconObj].}
{.deprecated: [GtkNumerableIconClass:NumerableIconClass, GtkNumerableIconClassObj:NumerableIconClassObj].}
{.deprecated: [GtkToggleAction:ToggleAction, GtkToggleActionObj:ToggleActionObj].}
{.deprecated: [GtkToggleActionClass:ToggleActionClass, GtkToggleActionClassObj:ToggleActionClassObj].}
{.deprecated: [GtkRadioAction:RadioAction, GtkRadioActionObj:RadioActionObj].}
{.deprecated: [GtkRadioActionClass:RadioActionClass, GtkRadioActionClassObj:RadioActionClassObj].}
{.deprecated: [GtkRcStyle:RcStyle, GtkRcStyleObj:RcStyleObj].}
{.deprecated: [GtkRcStyleClass:RcStyleClass, GtkRcStyleClassObj:RcStyleClassObj].}
{.deprecated: [GtkRcProperty:RcProperty, GtkRcPropertyObj:RcPropertyObj].}
{.deprecated: [GtkRecentAction:RecentAction, GtkRecentActionObj:RecentActionObj].}
{.deprecated: [GtkRecentActionClass:RecentActionClass, GtkRecentActionClassObj:RecentActionClassObj].}
{.deprecated: [GtkStatusIcon:StatusIcon, GtkStatusIconObj:StatusIconObj].}
{.deprecated: [GtkStatusIconClass:StatusIconClass, GtkStatusIconClassObj:StatusIconClassObj].}
{.deprecated: [GtkStyle:Style, GtkStyleObj:StyleObj].}
{.deprecated: [GtkStyleClass:StyleClass, GtkStyleClassObj:StyleClassObj].}
{.deprecated: [GtkTable:Table, GtkTableObj:TableObj].}
{.deprecated: [GtkTableClass:TableClass, GtkTableClassObj:TableClassObj].}
{.deprecated: [GtkTableChild:TableChild, GtkTableChildObj:TableChildObj].}
{.deprecated: [GtkTableRowCol:TableRowCol, GtkTableRowColObj:TableRowColObj].}
{.deprecated: [GtkTearoffMenuItem:TearoffMenuItem, GtkTearoffMenuItemObj:TearoffMenuItemObj].}
{.deprecated: [GtkTearoffMenuItemClass:TearoffMenuItemClass, GtkTearoffMenuItemClassObj:TearoffMenuItemClassObj].}
{.deprecated: [GtkThemingEngine:ThemingEngine, GtkThemingEngineObj:ThemingEngineObj].}
{.deprecated: [GtkThemingEngineClass:ThemingEngineClass, GtkThemingEngineClassObj:ThemingEngineClassObj].}
{.deprecated: [GtkUIManager:UIManager, GtkUIManagerObj:UIManagerObj].}
{.deprecated: [GtkUIManagerClass:UIManagerClass, GtkUIManagerClassObj:UIManagerClassObj].}
{.deprecated: [GtkVButtonBox:VButtonBox, GtkVButtonBoxObj:VButtonBoxObj].}
{.deprecated: [GtkVButtonBoxClass:VButtonBoxClass, GtkVButtonBoxClassObj:VButtonBoxClassObj].}
{.deprecated: [GtkVBox:VBox, GtkVBoxObj:VBoxObj].}
{.deprecated: [GtkVBoxClass:VBoxClass, GtkVBoxClassObj:VBoxClassObj].}
{.deprecated: [GtkVPaned:VPaned, GtkVPanedObj:VPanedObj].}
{.deprecated: [GtkVPanedClass:VPanedClass, GtkVPanedClassObj:VPanedClassObj].}
{.deprecated: [GtkVScale:VScale, GtkVScaleObj:VScaleObj].}
{.deprecated: [GtkVScaleClass:VScaleClass, GtkVScaleClassObj:VScaleClassObj].}
{.deprecated: [GtkVScrollbar:VScrollbar, GtkVScrollbarObj:VScrollbarObj].}
{.deprecated: [GtkVScrollbarClass:VScrollbarClass, GtkVScrollbarClassObj:VScrollbarClassObj].}
{.deprecated: [GtkVSeparator:VSeparator, GtkVSeparatorObj:VSeparatorObj].}
{.deprecated: [GtkVSeparatorClass:VSeparatorClass, GtkVSeparatorClassObj:VSeparatorClassObj].}
{.deprecated: [GtkPageSetupUnixDialog:PageSetupUnixDialog, GtkPageSetupUnixDialogObj:PageSetupUnixDialogObj].}
{.deprecated: [GtkPageSetupUnixDialogClass:PageSetupUnixDialogClass, GtkPageSetupUnixDialogClassObj:PageSetupUnixDialogClassObj].}
{.deprecated: [GtkPrintBackend:PrintBackend, GtkPrintBackendObj:PrintBackendObj].}
{.deprecated: [GtkPrinter:Printer, GtkPrinterObj:PrinterObj].}
{.deprecated: [GtkPrinterClass:PrinterClass, GtkPrinterClassObj:PrinterClassObj].}
{.deprecated: [GtkPrintJob:PrintJob, GtkPrintJobObj:PrintJobObj].}
{.deprecated: [GtkPrintJobClass:PrintJobClass, GtkPrintJobClassObj:PrintJobClassObj].}
{.deprecated: [GtkPrintUnixDialog:PrintUnixDialog, GtkPrintUnixDialogObj:PrintUnixDialogObj].}
{.deprecated: [GtkPrintUnixDialogClass:PrintUnixDialogClass, GtkPrintUnixDialogClassObj:PrintUnixDialogClassObj].}
{.deprecated: [GtkWidgetAccessible:WidgetAccessible, GtkWidgetAccessibleObj:WidgetAccessibleObj].}
{.deprecated: [GtkWidgetAccessibleClass:WidgetAccessibleClass, GtkWidgetAccessibleClassObj:WidgetAccessibleClassObj].}
{.deprecated: [GtkArrowAccessible:ArrowAccessible, GtkArrowAccessibleObj:ArrowAccessibleObj].}
{.deprecated: [GtkArrowAccessibleClass:ArrowAccessibleClass, GtkArrowAccessibleClassObj:ArrowAccessibleClassObj].}
{.deprecated: [GtkCellAccessible:CellAccessible, GtkCellAccessibleObj:CellAccessibleObj].}
{.deprecated: [GtkCellAccessibleClass:CellAccessibleClass, GtkCellAccessibleClassObj:CellAccessibleClassObj].}
{.deprecated: [GtkRendererCellAccessible:RendererCellAccessible, GtkRendererCellAccessibleObj:RendererCellAccessibleObj].}
{.deprecated: [GtkRendererCellAccessibleClass:RendererCellAccessibleClass, GtkRendererCellAccessibleClassObj:RendererCellAccessibleClassObj].}
{.deprecated: [GtkBooleanCellAccessible:BooleanCellAccessible, GtkBooleanCellAccessibleObj:BooleanCellAccessibleObj].}
{.deprecated: [GtkBooleanCellAccessibleClass:BooleanCellAccessibleClass, GtkBooleanCellAccessibleClassObj:BooleanCellAccessibleClassObj].}
{.deprecated: [GtkContainerAccessible:ContainerAccessible, GtkContainerAccessibleObj:ContainerAccessibleObj].}
{.deprecated: [GtkContainerAccessibleClass:ContainerAccessibleClass, GtkContainerAccessibleClassObj:ContainerAccessibleClassObj].}
{.deprecated: [GtkButtonAccessible:ButtonAccessible, GtkButtonAccessibleObj:ButtonAccessibleObj].}
{.deprecated: [GtkButtonAccessibleClass:ButtonAccessibleClass, GtkButtonAccessibleClassObj:ButtonAccessibleClassObj].}
{.deprecated: [GtkCellAccessibleParent:CellAccessibleParent, GtkCellAccessibleParentObj:CellAccessibleParentObj].}
{.deprecated: [GtkCellAccessibleParentIface:CellAccessibleParentIface, GtkCellAccessibleParentIfaceObj:CellAccessibleParentIfaceObj].}
{.deprecated: [GtkMenuItemAccessible:MenuItemAccessible, GtkMenuItemAccessibleObj:MenuItemAccessibleObj].}
{.deprecated: [GtkMenuItemAccessibleClass:MenuItemAccessibleClass, GtkMenuItemAccessibleClassObj:MenuItemAccessibleClassObj].}
{.deprecated: [GtkCheckMenuItemAccessible:CheckMenuItemAccessible, GtkCheckMenuItemAccessibleObj:CheckMenuItemAccessibleObj].}
{.deprecated: [GtkCheckMenuItemAccessibleClass:CheckMenuItemAccessibleClass, GtkCheckMenuItemAccessibleClassObj:CheckMenuItemAccessibleClassObj].}
{.deprecated: [GtkComboBoxAccessible:ComboBoxAccessible, GtkComboBoxAccessibleObj:ComboBoxAccessibleObj].}
{.deprecated: [GtkComboBoxAccessibleClass:ComboBoxAccessibleClass, GtkComboBoxAccessibleClassObj:ComboBoxAccessibleClassObj].}
{.deprecated: [GtkContainerCellAccessible:ContainerCellAccessible, GtkContainerCellAccessibleObj:ContainerCellAccessibleObj].}
{.deprecated: [GtkContainerCellAccessibleClass:ContainerCellAccessibleClass, GtkContainerCellAccessibleClassObj:ContainerCellAccessibleClassObj].}
{.deprecated: [GtkEntryAccessible:EntryAccessible, GtkEntryAccessibleObj:EntryAccessibleObj].}
{.deprecated: [GtkEntryAccessibleClass:EntryAccessibleClass, GtkEntryAccessibleClassObj:EntryAccessibleClassObj].}
{.deprecated: [GtkExpanderAccessible:ExpanderAccessible, GtkExpanderAccessibleObj:ExpanderAccessibleObj].}
{.deprecated: [GtkExpanderAccessibleClass:ExpanderAccessibleClass, GtkExpanderAccessibleClassObj:ExpanderAccessibleClassObj].}
{.deprecated: [GtkFlowBoxAccessible:FlowBoxAccessible, GtkFlowBoxAccessibleObj:FlowBoxAccessibleObj].}
{.deprecated: [GtkFlowBoxAccessibleClass:FlowBoxAccessibleClass, GtkFlowBoxAccessibleClassObj:FlowBoxAccessibleClassObj].}
{.deprecated: [GtkFlowBoxChildAccessible:FlowBoxChildAccessible, GtkFlowBoxChildAccessibleObj:FlowBoxChildAccessibleObj].}
{.deprecated: [GtkFlowBoxChildAccessibleClass:FlowBoxChildAccessibleClass, GtkFlowBoxChildAccessibleClassObj:FlowBoxChildAccessibleClassObj].}
{.deprecated: [GtkFrameAccessible:FrameAccessible, GtkFrameAccessibleObj:FrameAccessibleObj].}
{.deprecated: [GtkFrameAccessibleClass:FrameAccessibleClass, GtkFrameAccessibleClassObj:FrameAccessibleClassObj].}
{.deprecated: [GtkIconViewAccessible:IconViewAccessible, GtkIconViewAccessibleObj:IconViewAccessibleObj].}
{.deprecated: [GtkIconViewAccessibleClass:IconViewAccessibleClass, GtkIconViewAccessibleClassObj:IconViewAccessibleClassObj].}
{.deprecated: [GtkImageAccessible:ImageAccessible, GtkImageAccessibleObj:ImageAccessibleObj].}
{.deprecated: [GtkImageAccessibleClass:ImageAccessibleClass, GtkImageAccessibleClassObj:ImageAccessibleClassObj].}
{.deprecated: [GtkImageCellAccessible:ImageCellAccessible, GtkImageCellAccessibleObj:ImageCellAccessibleObj].}
{.deprecated: [GtkImageCellAccessibleClass:ImageCellAccessibleClass, GtkImageCellAccessibleClassObj:ImageCellAccessibleClassObj].}
{.deprecated: [GtkLabelAccessible:LabelAccessible, GtkLabelAccessibleObj:LabelAccessibleObj].}
{.deprecated: [GtkLabelAccessibleClass:LabelAccessibleClass, GtkLabelAccessibleClassObj:LabelAccessibleClassObj].}
{.deprecated: [GtkLevelBarAccessible:LevelBarAccessible, GtkLevelBarAccessibleObj:LevelBarAccessibleObj].}
{.deprecated: [GtkLevelBarAccessibleClass:LevelBarAccessibleClass, GtkLevelBarAccessibleClassObj:LevelBarAccessibleClassObj].}
{.deprecated: [GtkLinkButtonAccessible:LinkButtonAccessible, GtkLinkButtonAccessibleObj:LinkButtonAccessibleObj].}
{.deprecated: [GtkLinkButtonAccessibleClass:LinkButtonAccessibleClass, GtkLinkButtonAccessibleClassObj:LinkButtonAccessibleClassObj].}
{.deprecated: [GtkListBoxAccessible:ListBoxAccessible, GtkListBoxAccessibleObj:ListBoxAccessibleObj].}
{.deprecated: [GtkListBoxAccessibleClass:ListBoxAccessibleClass, GtkListBoxAccessibleClassObj:ListBoxAccessibleClassObj].}
{.deprecated: [GtkListBoxRowAccessible:ListBoxRowAccessible, GtkListBoxRowAccessibleObj:ListBoxRowAccessibleObj].}
{.deprecated: [GtkListBoxRowAccessibleClass:ListBoxRowAccessibleClass, GtkListBoxRowAccessibleClassObj:ListBoxRowAccessibleClassObj].}
{.deprecated: [GtkLockButtonAccessible:LockButtonAccessible, GtkLockButtonAccessibleObj:LockButtonAccessibleObj].}
{.deprecated: [GtkLockButtonAccessibleClass:LockButtonAccessibleClass, GtkLockButtonAccessibleClassObj:LockButtonAccessibleClassObj].}
{.deprecated: [GtkMenuShellAccessible:MenuShellAccessible, GtkMenuShellAccessibleObj:MenuShellAccessibleObj].}
{.deprecated: [GtkMenuShellAccessibleClass:MenuShellAccessibleClass, GtkMenuShellAccessibleClassObj:MenuShellAccessibleClassObj].}
{.deprecated: [GtkMenuAccessible:MenuAccessible, GtkMenuAccessibleObj:MenuAccessibleObj].}
{.deprecated: [GtkMenuAccessibleClass:MenuAccessibleClass, GtkMenuAccessibleClassObj:MenuAccessibleClassObj].}
{.deprecated: [GtkToggleButtonAccessible:ToggleButtonAccessible, GtkToggleButtonAccessibleObj:ToggleButtonAccessibleObj].}
{.deprecated: [GtkToggleButtonAccessibleClass:ToggleButtonAccessibleClass, GtkToggleButtonAccessibleClassObj:ToggleButtonAccessibleClassObj].}
{.deprecated: [GtkMenuButtonAccessible:MenuButtonAccessible, GtkMenuButtonAccessibleObj:MenuButtonAccessibleObj].}
{.deprecated: [GtkMenuButtonAccessibleClass:MenuButtonAccessibleClass, GtkMenuButtonAccessibleClassObj:MenuButtonAccessibleClassObj].}
{.deprecated: [GtkNotebookAccessible:NotebookAccessible, GtkNotebookAccessibleObj:NotebookAccessibleObj].}
{.deprecated: [GtkNotebookAccessibleClass:NotebookAccessibleClass, GtkNotebookAccessibleClassObj:NotebookAccessibleClassObj].}
{.deprecated: [GtkNotebookPageAccessible:NotebookPageAccessible, GtkNotebookPageAccessibleObj:NotebookPageAccessibleObj].}
{.deprecated: [GtkNotebookPageAccessibleClass:NotebookPageAccessibleClass, GtkNotebookPageAccessibleClassObj:NotebookPageAccessibleClassObj].}
{.deprecated: [GtkPopoverAccessible:PopoverAccessible, GtkPopoverAccessibleObj:PopoverAccessibleObj].}
{.deprecated: [GtkPopoverAccessibleClass:PopoverAccessibleClass, GtkPopoverAccessibleClassObj:PopoverAccessibleClassObj].}
{.deprecated: [GtkPanedAccessible:PanedAccessible, GtkPanedAccessibleObj:PanedAccessibleObj].}
{.deprecated: [GtkPanedAccessibleClass:PanedAccessibleClass, GtkPanedAccessibleClassObj:PanedAccessibleClassObj].}
{.deprecated: [GtkProgressBarAccessible:ProgressBarAccessible, GtkProgressBarAccessibleObj:ProgressBarAccessibleObj].}
{.deprecated: [GtkProgressBarAccessibleClass:ProgressBarAccessibleClass, GtkProgressBarAccessibleClassObj:ProgressBarAccessibleClassObj].}
{.deprecated: [GtkRadioButtonAccessible:RadioButtonAccessible, GtkRadioButtonAccessibleObj:RadioButtonAccessibleObj].}
{.deprecated: [GtkRadioButtonAccessibleClass:RadioButtonAccessibleClass, GtkRadioButtonAccessibleClassObj:RadioButtonAccessibleClassObj].}
{.deprecated: [GtkRadioMenuItemAccessible:RadioMenuItemAccessible, GtkRadioMenuItemAccessibleObj:RadioMenuItemAccessibleObj].}
{.deprecated: [GtkRadioMenuItemAccessibleClass:RadioMenuItemAccessibleClass, GtkRadioMenuItemAccessibleClassObj:RadioMenuItemAccessibleClassObj].}
{.deprecated: [GtkRangeAccessible:RangeAccessible, GtkRangeAccessibleObj:RangeAccessibleObj].}
{.deprecated: [GtkRangeAccessibleClass:RangeAccessibleClass, GtkRangeAccessibleClassObj:RangeAccessibleClassObj].}
{.deprecated: [GtkScaleAccessible:ScaleAccessible, GtkScaleAccessibleObj:ScaleAccessibleObj].}
{.deprecated: [GtkScaleAccessibleClass:ScaleAccessibleClass, GtkScaleAccessibleClassObj:ScaleAccessibleClassObj].}
{.deprecated: [GtkScaleButtonAccessible:ScaleButtonAccessible, GtkScaleButtonAccessibleObj:ScaleButtonAccessibleObj].}
{.deprecated: [GtkScaleButtonAccessibleClass:ScaleButtonAccessibleClass, GtkScaleButtonAccessibleClassObj:ScaleButtonAccessibleClassObj].}
{.deprecated: [GtkScrolledWindowAccessible:ScrolledWindowAccessible, GtkScrolledWindowAccessibleObj:ScrolledWindowAccessibleObj].}
{.deprecated: [GtkScrolledWindowAccessibleClass:ScrolledWindowAccessibleClass, GtkScrolledWindowAccessibleClassObj:ScrolledWindowAccessibleClassObj].}
{.deprecated: [GtkSpinButtonAccessible:SpinButtonAccessible, GtkSpinButtonAccessibleObj:SpinButtonAccessibleObj].}
{.deprecated: [GtkSpinButtonAccessibleClass:SpinButtonAccessibleClass, GtkSpinButtonAccessibleClassObj:SpinButtonAccessibleClassObj].}
{.deprecated: [GtkSpinnerAccessible:SpinnerAccessible, GtkSpinnerAccessibleObj:SpinnerAccessibleObj].}
{.deprecated: [GtkSpinnerAccessibleClass:SpinnerAccessibleClass, GtkSpinnerAccessibleClassObj:SpinnerAccessibleClassObj].}
{.deprecated: [GtkStatusbarAccessible:StatusbarAccessible, GtkStatusbarAccessibleObj:StatusbarAccessibleObj].}
{.deprecated: [GtkStatusbarAccessibleClass:StatusbarAccessibleClass, GtkStatusbarAccessibleClassObj:StatusbarAccessibleClassObj].}
{.deprecated: [GtkSwitchAccessible:SwitchAccessible, GtkSwitchAccessibleObj:SwitchAccessibleObj].}
{.deprecated: [GtkSwitchAccessibleClass:SwitchAccessibleClass, GtkSwitchAccessibleClassObj:SwitchAccessibleClassObj].}
{.deprecated: [GtkTextCellAccessible:TextCellAccessible, GtkTextCellAccessibleObj:TextCellAccessibleObj].}
{.deprecated: [GtkTextCellAccessibleClass:TextCellAccessibleClass, GtkTextCellAccessibleClassObj:TextCellAccessibleClassObj].}
{.deprecated: [GtkTextViewAccessible:TextViewAccessible, GtkTextViewAccessibleObj:TextViewAccessibleObj].}
{.deprecated: [GtkTextViewAccessibleClass:TextViewAccessibleClass, GtkTextViewAccessibleClassObj:TextViewAccessibleClassObj].}
{.deprecated: [GtkToplevelAccessible:ToplevelAccessible, GtkToplevelAccessibleObj:ToplevelAccessibleObj].}
{.deprecated: [GtkToplevelAccessibleClass:ToplevelAccessibleClass, GtkToplevelAccessibleClassObj:ToplevelAccessibleClassObj].}
{.deprecated: [GtkTreeViewAccessible:TreeViewAccessible, GtkTreeViewAccessibleObj:TreeViewAccessibleObj].}
{.deprecated: [GtkTreeViewAccessibleClass:TreeViewAccessibleClass, GtkTreeViewAccessibleClassObj:TreeViewAccessibleClassObj].}
{.deprecated: [GtkWindowAccessible:WindowAccessible, GtkWindowAccessibleObj:WindowAccessibleObj].}
{.deprecated: [GtkWindowAccessibleClass:WindowAccessibleClass, GtkWindowAccessibleClassObj:WindowAccessibleClassObj].}
{.deprecated: [PGtkAccelGroup:AccelGroup, TGtkAccelGroup:AccelGroupObj].}
{.deprecated: [PGtkAccelGroupClass:AccelGroupClass, TGtkAccelGroupClass:AccelGroupClassObj].}
{.deprecated: [PGtkAccelKey:AccelKey, TGtkAccelKey:AccelKeyObj].}
{.deprecated: [PGtkAccelGroupEntry:AccelGroupEntry, TGtkAccelGroupEntry:AccelGroupEntryObj].}
{.deprecated: [PGtkBorder:Border, TGtkBorder:BorderObj].}
{.deprecated: [PGtkClipboard:Clipboard, TGtkClipboard:ClipboardObj].}
{.deprecated: [PGtkIconSet:IconSet, TGtkIconSet:IconSetObj].}
{.deprecated: [PGtkIconSource:IconSource, TGtkIconSource:IconSourceObj].}
{.deprecated: [PGtkSelectionData:SelectionData, TGtkSelectionData:SelectionDataObj].}
{.deprecated: [PGtkTooltip:Tooltip, TGtkTooltip:TooltipObj].}
{.deprecated: [PGtkWidgetPath:WidgetPath, TGtkWidgetPath:WidgetPathObj].}
{.deprecated: [PGtkAllocation:Allocation, TGtkAllocation:AllocationObj].}
{.deprecated: [PGtkRequisition:Requisition, TGtkRequisition:RequisitionObj].}
{.deprecated: [PGtkWidget:Widget, TGtkWidget:WidgetObj].}
{.deprecated: [PGtkWidgetClass:WidgetClass, TGtkWidgetClass:WidgetClassObj].}
{.deprecated: [PGtkWidgetAuxInfo:WidgetAuxInfo, TGtkWidgetAuxInfo:WidgetAuxInfoObj].}
{.deprecated: [PGtkApplication:Application, TGtkApplication:ApplicationObj].}
{.deprecated: [PGtkApplicationClass:ApplicationClass, TGtkApplicationClass:ApplicationClassObj].}
{.deprecated: [PGtkContainer:Container, TGtkContainer:ContainerObj].}
{.deprecated: [PGtkContainerClass:ContainerClass, TGtkContainerClass:ContainerClassObj].}
{.deprecated: [PGtkBin:Bin, TGtkBin:BinObj].}
{.deprecated: [PGtkBinClass:BinClass, TGtkBinClass:BinClassObj].}
{.deprecated: [PGtkWindow:Window, TGtkWindow:WindowObj].}
{.deprecated: [PGtkWindowClass:WindowClass, TGtkWindowClass:WindowClassObj].}
{.deprecated: [PGtkDialog:Dialog, TGtkDialog:DialogObj].}
{.deprecated: [PGtkDialogClass:DialogClass, TGtkDialogClass:DialogClassObj].}
{.deprecated: [PGtkAboutDialog:AboutDialog, TGtkAboutDialog:AboutDialogObj].}
{.deprecated: [PGtkAboutDialogClass:AboutDialogClass, TGtkAboutDialogClass:AboutDialogClassObj].}
{.deprecated: [PGtkMisc:Misc, TGtkMisc:MiscObj].}
{.deprecated: [PGtkMiscClass:MiscClass, TGtkMiscClass:MiscClassObj].}
{.deprecated: [PGtkMenuShell:MenuShell, TGtkMenuShell:MenuShellObj].}
{.deprecated: [PGtkMenuShellClass:MenuShellClass, TGtkMenuShellClass:MenuShellClassObj].}
{.deprecated: [PGtkMenu:Menu, TGtkMenu:MenuObj].}
{.deprecated: [PGtkMenuClass:MenuClass, TGtkMenuClass:MenuClassObj].}
{.deprecated: [PGtkLabel:Label, TGtkLabel:LabelObj].}
{.deprecated: [PGtkLabelClass:LabelClass, TGtkLabelClass:LabelClassObj].}
{.deprecated: [PGtkAccelLabel:AccelLabel, TGtkAccelLabel:AccelLabelObj].}
{.deprecated: [PGtkAccelLabelClass:AccelLabelClass, TGtkAccelLabelClass:AccelLabelClassObj].}
{.deprecated: [PGtkAccelMap:AccelMap, TGtkAccelMap:AccelMapObj].}
{.deprecated: [PGtkAccessible:Accessible, TGtkAccessible:AccessibleObj].}
{.deprecated: [PGtkAccessibleClass:AccessibleClass, TGtkAccessibleClass:AccessibleClassObj].}
{.deprecated: [PGtkActionable:Actionable, TGtkActionable:ActionableObj].}
{.deprecated: [PGtkActionableInterface:ActionableInterface, TGtkActionableInterface:ActionableInterfaceObj].}
{.deprecated: [PGtkActionBar:ActionBar, TGtkActionBar:ActionBarObj].}
{.deprecated: [PGtkActionBarClass:ActionBarClass, TGtkActionBarClass:ActionBarClassObj].}
{.deprecated: [PGtkAdjustment:Adjustment, TGtkAdjustment:AdjustmentObj].}
{.deprecated: [PGtkAdjustmentClass:AdjustmentClass, TGtkAdjustmentClass:AdjustmentClassObj].}
{.deprecated: [PGtkAppChooser:AppChooser, TGtkAppChooser:AppChooserObj].}
{.deprecated: [PGtkAppChooserDialog:AppChooserDialog, TGtkAppChooserDialog:AppChooserDialogObj].}
{.deprecated: [PGtkAppChooserDialogClass:AppChooserDialogClass, TGtkAppChooserDialogClass:AppChooserDialogClassObj].}
{.deprecated: [PGtkBox:Box, TGtkBox:BoxObj].}
{.deprecated: [PGtkBoxClass:BoxClass, TGtkBoxClass:BoxClassObj].}
{.deprecated: [PGtkAppChooserWidget:AppChooserWidget, TGtkAppChooserWidget:AppChooserWidgetObj].}
{.deprecated: [PGtkAppChooserWidgetClass:AppChooserWidgetClass, TGtkAppChooserWidgetClass:AppChooserWidgetClassObj].}
{.deprecated: [PGtkTreePath:TreePath, TGtkTreePath:TreePathObj].}
{.deprecated: [PGtkTreeRowReference:TreeRowReference, TGtkTreeRowReference:TreeRowReferenceObj].}
{.deprecated: [PGtkTreeModel:TreeModel, TGtkTreeModel:TreeModelObj].}
{.deprecated: [PGtkTreeIter:TreeIter, TGtkTreeIter:TreeIterObj].}
{.deprecated: [PGtkTreeModelIface:TreeModelIface, TGtkTreeModelIface:TreeModelIfaceObj].}
{.deprecated: [PGtkCellEditable:CellEditable, TGtkCellEditable:CellEditableObj].}
{.deprecated: [PGtkCellEditableIface:CellEditableIface, TGtkCellEditableIface:CellEditableIfaceObj].}
{.deprecated: [PGtkCellRenderer:CellRenderer, TGtkCellRenderer:CellRendererObj].}
{.deprecated: [PGtkCellRendererClass:CellRendererClass, TGtkCellRendererClass:CellRendererClassObj].}
{.deprecated: [PGtkTreeSortable:TreeSortable, TGtkTreeSortable:TreeSortableObj].}
{.deprecated: [PGtkTreeSortableIface:TreeSortableIface, TGtkTreeSortableIface:TreeSortableIfaceObj].}
{.deprecated: [PGtkCellArea:CellArea, TGtkCellArea:CellAreaObj].}
{.deprecated: [PGtkCellAreaClass:CellAreaClass, TGtkCellAreaClass:CellAreaClassObj].}
{.deprecated: [PGtkTreeViewColumn:TreeViewColumn, TGtkTreeViewColumn:TreeViewColumnObj].}
{.deprecated: [PGtkTreeViewColumnClass:TreeViewColumnClass, TGtkTreeViewColumnClass:TreeViewColumnClassObj].}
{.deprecated: [PGtkTextAppearance:TextAppearance, TGtkTextAppearance:TextAppearanceObj].}
{.deprecated: [PGtkTextAttributes:TextAttributes, TGtkTextAttributes:TextAttributesObj].}
{.deprecated: [PGtkTextChildAnchor:TextChildAnchor, TGtkTextChildAnchor:TextChildAnchorObj].}
{.deprecated: [PGtkTextChildAnchorClass:TextChildAnchorClass, TGtkTextChildAnchorClass:TextChildAnchorClassObj].}
{.deprecated: [PGtkTextTag:TextTag, TGtkTextTag:TextTagObj].}
{.deprecated: [PGtkTextTagClass:TextTagClass, TGtkTextTagClass:TextTagClassObj].}
{.deprecated: [PGtkTextIter:TextIter, TGtkTextIter:TextIterObj].}
{.deprecated: [PGtkTargetPair:TargetPair, TGtkTargetPair:TargetPairObj].}
{.deprecated: [PGtkTargetList:TargetList, TGtkTargetList:TargetListObj].}
{.deprecated: [PGtkTargetEntry:TargetEntry, TGtkTargetEntry:TargetEntryObj].}
{.deprecated: [PGtkEditable:Editable, TGtkEditable:EditableObj].}
{.deprecated: [PGtkEditableInterface:EditableInterface, TGtkEditableInterface:EditableInterfaceObj].}
{.deprecated: [PGtkIMContext:IMContext, TGtkIMContext:IMContextObj].}
{.deprecated: [PGtkIMContextClass:IMContextClass, TGtkIMContextClass:IMContextClassObj].}
{.deprecated: [PGtkEntryBuffer:EntryBuffer, TGtkEntryBuffer:EntryBufferObj].}
{.deprecated: [PGtkEntryBufferClass:EntryBufferClass, TGtkEntryBufferClass:EntryBufferClassObj].}
{.deprecated: [PGtkListStore:ListStore, TGtkListStore:ListStoreObj].}
{.deprecated: [PGtkListStoreClass:ListStoreClass, TGtkListStoreClass:ListStoreClassObj].}
{.deprecated: [PGtkTreeModelFilter:TreeModelFilter, TGtkTreeModelFilter:TreeModelFilterObj].}
{.deprecated: [PGtkTreeModelFilterClass:TreeModelFilterClass, TGtkTreeModelFilterClass:TreeModelFilterClassObj].}
{.deprecated: [PGtkEntryCompletion:EntryCompletion, TGtkEntryCompletion:EntryCompletionObj].}
{.deprecated: [PGtkEntryCompletionClass:EntryCompletionClass, TGtkEntryCompletionClass:EntryCompletionClassObj].}
{.deprecated: [PGtkImage:Image, TGtkImage:ImageObj].}
{.deprecated: [PGtkImageClass:ImageClass, TGtkImageClass:ImageClassObj].}
{.deprecated: [PGtkEntry:Entry, TGtkEntry:EntryObj].}
{.deprecated: [PGtkEntryClass:EntryClass, TGtkEntryClass:EntryClassObj].}
{.deprecated: [PGtkTreeView:TreeView, TGtkTreeView:TreeViewObj].}
{.deprecated: [PGtkTreeViewClass:TreeViewClass, TGtkTreeViewClass:TreeViewClassObj].}
{.deprecated: [PGtkComboBox:ComboBox, TGtkComboBox:ComboBoxObj].}
{.deprecated: [PGtkComboBoxClass:ComboBoxClass, TGtkComboBoxClass:ComboBoxClassObj].}
{.deprecated: [PGtkAppChooserButton:AppChooserButton, TGtkAppChooserButton:AppChooserButtonObj].}
{.deprecated: [PGtkAppChooserButtonClass:AppChooserButtonClass, TGtkAppChooserButtonClass:AppChooserButtonClassObj].}
{.deprecated: [PGtkApplicationWindow:ApplicationWindow, TGtkApplicationWindow:ApplicationWindowObj].}
{.deprecated: [PGtkApplicationWindowClass:ApplicationWindowClass, TGtkApplicationWindowClass:ApplicationWindowClassObj].}
{.deprecated: [PGtkFrame:Frame, TGtkFrame:FrameObj].}
{.deprecated: [PGtkFrameClass:FrameClass, TGtkFrameClass:FrameClassObj].}
{.deprecated: [PGtkAspectFrame:AspectFrame, TGtkAspectFrame:AspectFrameObj].}
{.deprecated: [PGtkAspectFrameClass:AspectFrameClass, TGtkAspectFrameClass:AspectFrameClassObj].}
{.deprecated: [PGtkAssistant:Assistant, TGtkAssistant:AssistantObj].}
{.deprecated: [PGtkAssistantClass:AssistantClass, TGtkAssistantClass:AssistantClassObj].}
{.deprecated: [PGtkButtonBox:ButtonBox, TGtkButtonBox:ButtonBoxObj].}
{.deprecated: [PGtkButtonBoxClass:ButtonBoxClass, TGtkButtonBoxClass:ButtonBoxClassObj].}
{.deprecated: [PGtkBindingSet:BindingSet, TGtkBindingSet:BindingSetObj].}
{.deprecated: [PGtkBindingEntry:BindingEntry, TGtkBindingEntry:BindingEntryObj].}
{.deprecated: [PGtkBindingArg:BindingArg, TGtkBindingArg:BindingArgObj].}
{.deprecated: [PGtkBindingSignal:BindingSignal, TGtkBindingSignal:BindingSignalObj].}
{.deprecated: [PGtkBuilder:Builder, TGtkBuilder:BuilderObj].}
{.deprecated: [PGtkBuilderClass:BuilderClass, TGtkBuilderClass:BuilderClassObj].}
{.deprecated: [PGtkBuildable:Buildable, TGtkBuildable:BuildableObj].}
{.deprecated: [PGtkBuildableIface:BuildableIface, TGtkBuildableIface:BuildableIfaceObj].}
{.deprecated: [PGtkButton:Button, TGtkButton:ButtonObj].}
{.deprecated: [PGtkButtonClass:ButtonClass, TGtkButtonClass:ButtonClassObj].}
{.deprecated: [PGtkCalendar:Calendar, TGtkCalendar:CalendarObj].}
{.deprecated: [PGtkCalendarClass:CalendarClass, TGtkCalendarClass:CalendarClassObj].}
{.deprecated: [PGtkCellAreaBox:CellAreaBox, TGtkCellAreaBox:CellAreaBoxObj].}
{.deprecated: [PGtkCellAreaBoxClass:CellAreaBoxClass, TGtkCellAreaBoxClass:CellAreaBoxClassObj].}
{.deprecated: [PGtkCellAreaContext:CellAreaContext, TGtkCellAreaContext:CellAreaContextObj].}
{.deprecated: [PGtkCellAreaContextClass:CellAreaContextClass, TGtkCellAreaContextClass:CellAreaContextClassObj].}
{.deprecated: [PGtkCellLayout:CellLayout, TGtkCellLayout:CellLayoutObj].}
{.deprecated: [PGtkCellLayoutIface:CellLayoutIface, TGtkCellLayoutIface:CellLayoutIfaceObj].}
{.deprecated: [PGtkCellRendererText:CellRendererText, TGtkCellRendererText:CellRendererTextObj].}
{.deprecated: [PGtkCellRendererTextClass:CellRendererTextClass, TGtkCellRendererTextClass:CellRendererTextClassObj].}
{.deprecated: [PGtkCellRendererAccel:CellRendererAccel, TGtkCellRendererAccel:CellRendererAccelObj].}
{.deprecated: [PGtkCellRendererAccelClass:CellRendererAccelClass, TGtkCellRendererAccelClass:CellRendererAccelClassObj].}
{.deprecated: [PGtkCellRendererCombo:CellRendererCombo, TGtkCellRendererCombo:CellRendererComboObj].}
{.deprecated: [PGtkCellRendererComboClass:CellRendererComboClass, TGtkCellRendererComboClass:CellRendererComboClassObj].}
{.deprecated: [PGtkCellRendererPixbuf:CellRendererPixbuf, TGtkCellRendererPixbuf:CellRendererPixbufObj].}
{.deprecated: [PGtkCellRendererPixbufClass:CellRendererPixbufClass, TGtkCellRendererPixbufClass:CellRendererPixbufClassObj].}
{.deprecated: [PGtkCellRendererProgress:CellRendererProgress, TGtkCellRendererProgress:CellRendererProgressObj].}
{.deprecated: [PGtkCellRendererProgressClass:CellRendererProgressClass, TGtkCellRendererProgressClass:CellRendererProgressClassObj].}
{.deprecated: [PGtkCellRendererSpin:CellRendererSpin, TGtkCellRendererSpin:CellRendererSpinObj].}
{.deprecated: [PGtkCellRendererSpinClass:CellRendererSpinClass, TGtkCellRendererSpinClass:CellRendererSpinClassObj].}
{.deprecated: [PGtkCellRendererSpinner:CellRendererSpinner, TGtkCellRendererSpinner:CellRendererSpinnerObj].}
{.deprecated: [PGtkCellRendererSpinnerClass:CellRendererSpinnerClass, TGtkCellRendererSpinnerClass:CellRendererSpinnerClassObj].}
{.deprecated: [PGtkCellRendererToggle:CellRendererToggle, TGtkCellRendererToggle:CellRendererToggleObj].}
{.deprecated: [PGtkCellRendererToggleClass:CellRendererToggleClass, TGtkCellRendererToggleClass:CellRendererToggleClassObj].}
{.deprecated: [PGtkCellView:CellView, TGtkCellView:CellViewObj].}
{.deprecated: [PGtkCellViewClass:CellViewClass, TGtkCellViewClass:CellViewClassObj].}
{.deprecated: [PGtkToggleButton:ToggleButton, TGtkToggleButton:ToggleButtonObj].}
{.deprecated: [PGtkToggleButtonClass:ToggleButtonClass, TGtkToggleButtonClass:ToggleButtonClassObj].}
{.deprecated: [PGtkCheckButton:CheckButton, TGtkCheckButton:CheckButtonObj].}
{.deprecated: [PGtkCheckButtonClass:CheckButtonClass, TGtkCheckButtonClass:CheckButtonClassObj].}
{.deprecated: [PGtkMenuItem:MenuItem, TGtkMenuItem:MenuItemObj].}
{.deprecated: [PGtkMenuItemClass:MenuItemClass, TGtkMenuItemClass:MenuItemClassObj].}
{.deprecated: [PGtkCheckMenuItem:CheckMenuItem, TGtkCheckMenuItem:CheckMenuItemObj].}
{.deprecated: [PGtkCheckMenuItemClass:CheckMenuItemClass, TGtkCheckMenuItemClass:CheckMenuItemClassObj].}
{.deprecated: [PGtkColorButton:ColorButton, TGtkColorButton:ColorButtonObj].}
{.deprecated: [PGtkColorButtonClass:ColorButtonClass, TGtkColorButtonClass:ColorButtonClassObj].}
{.deprecated: [PGtkColorChooser:ColorChooser, TGtkColorChooser:ColorChooserObj].}
{.deprecated: [PGtkColorChooserInterface:ColorChooserInterface, TGtkColorChooserInterface:ColorChooserInterfaceObj].}
{.deprecated: [PGtkColorChooserDialog:ColorChooserDialog, TGtkColorChooserDialog:ColorChooserDialogObj].}
{.deprecated: [PGtkColorChooserDialogClass:ColorChooserDialogClass, TGtkColorChooserDialogClass:ColorChooserDialogClassObj].}
{.deprecated: [PGtkColorChooserWidget:ColorChooserWidget, TGtkColorChooserWidget:ColorChooserWidgetObj].}
{.deprecated: [PGtkColorChooserWidgetClass:ColorChooserWidgetClass, TGtkColorChooserWidgetClass:ColorChooserWidgetClassObj].}
{.deprecated: [PGtkComboBoxText:ComboBoxText, TGtkComboBoxText:ComboBoxTextObj].}
{.deprecated: [PGtkComboBoxTextClass:ComboBoxTextClass, TGtkComboBoxTextClass:ComboBoxTextClassObj].}
{.deprecated: [PGtkCssSection:CssSection, TGtkCssSection:CssSectionObj].}
{.deprecated: [PGtkCssProvider:CssProvider, TGtkCssProvider:CssProviderObj].}
{.deprecated: [PGtkCssProviderClass:CssProviderClass, TGtkCssProviderClass:CssProviderClassObj].}
{.deprecated: [PGtkDrawingArea:DrawingArea, TGtkDrawingArea:DrawingAreaObj].}
{.deprecated: [PGtkDrawingAreaClass:DrawingAreaClass, TGtkDrawingAreaClass:DrawingAreaClassObj].}
{.deprecated: [PGtkEventBox:EventBox, TGtkEventBox:EventBoxObj].}
{.deprecated: [PGtkEventBoxClass:EventBoxClass, TGtkEventBoxClass:EventBoxClassObj].}
{.deprecated: [PGtkEventController:EventController, TGtkEventController:EventControllerObj].}
{.deprecated: [PGtkExpander:Expander, TGtkExpander:ExpanderObj].}
{.deprecated: [PGtkExpanderClass:ExpanderClass, TGtkExpanderClass:ExpanderClassObj].}
{.deprecated: [PGtkFixed:Fixed, TGtkFixed:FixedObj].}
{.deprecated: [PGtkFixedClass:FixedClass, TGtkFixedClass:FixedClassObj].}
{.deprecated: [PGtkFixedChild:FixedChild, TGtkFixedChild:FixedChildObj].}
{.deprecated: [PGtkFileFilter:FileFilter, TGtkFileFilter:FileFilterObj].}
{.deprecated: [PGtkFileFilterInfo:FileFilterInfo, TGtkFileFilterInfo:FileFilterInfoObj].}
{.deprecated: [PGtkFileChooser:FileChooser, TGtkFileChooser:FileChooserObj].}
{.deprecated: [PGtkFileChooserButton:FileChooserButton, TGtkFileChooserButton:FileChooserButtonObj].}
{.deprecated: [PGtkFileChooserButtonClass:FileChooserButtonClass, TGtkFileChooserButtonClass:FileChooserButtonClassObj].}
{.deprecated: [PGtkFileChooserDialog:FileChooserDialog, TGtkFileChooserDialog:FileChooserDialogObj].}
{.deprecated: [PGtkFileChooserDialogClass:FileChooserDialogClass, TGtkFileChooserDialogClass:FileChooserDialogClassObj].}
{.deprecated: [PGtkFileChooserWidget:FileChooserWidget, TGtkFileChooserWidget:FileChooserWidgetObj].}
{.deprecated: [PGtkFileChooserWidgetClass:FileChooserWidgetClass, TGtkFileChooserWidgetClass:FileChooserWidgetClassObj].}
{.deprecated: [PGtkFlowBox:FlowBox, TGtkFlowBox:FlowBoxObj].}
{.deprecated: [PGtkFlowBoxClass:FlowBoxClass, TGtkFlowBoxClass:FlowBoxClassObj].}
{.deprecated: [PGtkFlowBoxChild:FlowBoxChild, TGtkFlowBoxChild:FlowBoxChildObj].}
{.deprecated: [PGtkFlowBoxChildClass:FlowBoxChildClass, TGtkFlowBoxChildClass:FlowBoxChildClassObj].}
{.deprecated: [PGtkFontButton:FontButton, TGtkFontButton:FontButtonObj].}
{.deprecated: [PGtkFontButtonClass:FontButtonClass, TGtkFontButtonClass:FontButtonClassObj].}
{.deprecated: [PGtkFontChooser:FontChooser, TGtkFontChooser:FontChooserObj].}
{.deprecated: [PGtkFontChooserIface:FontChooserIface, TGtkFontChooserIface:FontChooserIfaceObj].}
{.deprecated: [PGtkFontChooserDialog:FontChooserDialog, TGtkFontChooserDialog:FontChooserDialogObj].}
{.deprecated: [PGtkFontChooserDialogClass:FontChooserDialogClass, TGtkFontChooserDialogClass:FontChooserDialogClassObj].}
{.deprecated: [PGtkFontChooserWidget:FontChooserWidget, TGtkFontChooserWidget:FontChooserWidgetObj].}
{.deprecated: [PGtkFontChooserWidgetClass:FontChooserWidgetClass, TGtkFontChooserWidgetClass:FontChooserWidgetClassObj].}
{.deprecated: [PGtkGesture:Gesture, TGtkGesture:GestureObj].}
{.deprecated: [PGtkGestureSingle:GestureSingle, TGtkGestureSingle:GestureSingleObj].}
{.deprecated: [PGtkGestureDrag:GestureDrag, TGtkGestureDrag:GestureDragObj].}
{.deprecated: [PGtkGestureMultiPress:GestureMultiPress, TGtkGestureMultiPress:GestureMultiPressObj].}
{.deprecated: [PGtkGesturePan:GesturePan, TGtkGesturePan:GesturePanObj].}
{.deprecated: [PGtkGestureRotate:GestureRotate, TGtkGestureRotate:GestureRotateObj].}
{.deprecated: [PGtkGestureSwipe:GestureSwipe, TGtkGestureSwipe:GestureSwipeObj].}
{.deprecated: [PGtkGestureZoom:GestureZoom, TGtkGestureZoom:GestureZoomObj].}
{.deprecated: [PGtkGLArea:GLArea, TGtkGLArea:GLAreaObj].}
{.deprecated: [PGtkGLAreaClass:GLAreaClass, TGtkGLAreaClass:GLAreaClassObj].}
{.deprecated: [PGtkGrid:Grid, TGtkGrid:GridObj].}
{.deprecated: [PGtkGridClass:GridClass, TGtkGridClass:GridClassObj].}
{.deprecated: [PGtkHeaderBar:HeaderBar, TGtkHeaderBar:HeaderBarObj].}
{.deprecated: [PGtkHeaderBarClass:HeaderBarClass, TGtkHeaderBarClass:HeaderBarClassObj].}
{.deprecated: [PGtkIconFactory:IconFactory, TGtkIconFactory:IconFactoryObj].}
{.deprecated: [PGtkIconFactoryClass:IconFactoryClass, TGtkIconFactoryClass:IconFactoryClassObj].}
{.deprecated: [PGtkSymbolicColor:SymbolicColor, TGtkSymbolicColor:SymbolicColorObj].}
{.deprecated: [PGtkGradient:Gradient, TGtkGradient:GradientObj].}
{.deprecated: [PGtkStyleProperties:StyleProperties, TGtkStyleProperties:StylePropertiesObj].}
{.deprecated: [PGtkStylePropertiesClass:StylePropertiesClass, TGtkStylePropertiesClass:StylePropertiesClassObj].}
{.deprecated: [PGtkStyleProvider:StyleProvider, TGtkStyleProvider:StyleProviderObj].}
{.deprecated: [PGtkStyleProviderIface:StyleProviderIface, TGtkStyleProviderIface:StyleProviderIfaceObj].}
{.deprecated: [PGtkStyleContext:StyleContext, TGtkStyleContext:StyleContextObj].}
{.deprecated: [PGtkStyleContextClass:StyleContextClass, TGtkStyleContextClass:StyleContextClassObj].}
{.deprecated: [PGtkIconInfo:IconInfo, TGtkIconInfo:IconInfoObj].}
{.deprecated: [PGtkIconTheme:IconTheme, TGtkIconTheme:IconThemeObj].}
{.deprecated: [PGtkIconThemeClass:IconThemeClass, TGtkIconThemeClass:IconThemeClassObj].}
{.deprecated: [PGtkIconView:IconView, TGtkIconView:IconViewObj].}
{.deprecated: [PGtkIconViewClass:IconViewClass, TGtkIconViewClass:IconViewClassObj].}
{.deprecated: [PGtkIMContextInfo:IMContextInfo, TGtkIMContextInfo:IMContextInfoObj].}
{.deprecated: [PGtkIMContextSimple:IMContextSimple, TGtkIMContextSimple:IMContextSimpleObj].}
{.deprecated: [PGtkIMContextSimpleClass:IMContextSimpleClass, TGtkIMContextSimpleClass:IMContextSimpleClassObj].}
{.deprecated: [PGtkIMMulticontext:IMMulticontext, TGtkIMMulticontext:IMMulticontextObj].}
{.deprecated: [PGtkIMMulticontextClass:IMMulticontextClass, TGtkIMMulticontextClass:IMMulticontextClassObj].}
{.deprecated: [PGtkInfoBar:InfoBar, TGtkInfoBar:InfoBarObj].}
{.deprecated: [PGtkInfoBarClass:InfoBarClass, TGtkInfoBarClass:InfoBarClassObj].}
{.deprecated: [PGtkInvisible:Invisible, TGtkInvisible:InvisibleObj].}
{.deprecated: [PGtkInvisibleClass:InvisibleClass, TGtkInvisibleClass:InvisibleClassObj].}
{.deprecated: [PGtkLayout:Layout, TGtkLayout:LayoutObj].}
{.deprecated: [PGtkLayoutClass:LayoutClass, TGtkLayoutClass:LayoutClassObj].}
{.deprecated: [PGtkLevelBar:LevelBar, TGtkLevelBar:LevelBarObj].}
{.deprecated: [PGtkLevelBarClass:LevelBarClass, TGtkLevelBarClass:LevelBarClassObj].}
{.deprecated: [PGtkLinkButton:LinkButton, TGtkLinkButton:LinkButtonObj].}
{.deprecated: [PGtkLinkButtonClass:LinkButtonClass, TGtkLinkButtonClass:LinkButtonClassObj].}
{.deprecated: [PGtkListBox:ListBox, TGtkListBox:ListBoxObj].}
{.deprecated: [PGtkListBoxClass:ListBoxClass, TGtkListBoxClass:ListBoxClassObj].}
{.deprecated: [PGtkListBoxRow:ListBoxRow, TGtkListBoxRow:ListBoxRowObj].}
{.deprecated: [PGtkListBoxRowClass:ListBoxRowClass, TGtkListBoxRowClass:ListBoxRowClassObj].}
{.deprecated: [PGtkLockButton:LockButton, TGtkLockButton:LockButtonObj].}
{.deprecated: [PGtkLockButtonClass:LockButtonClass, TGtkLockButtonClass:LockButtonClassObj].}
{.deprecated: [PGtkMenuBar:MenuBar, TGtkMenuBar:MenuBarObj].}
{.deprecated: [PGtkMenuBarClass:MenuBarClass, TGtkMenuBarClass:MenuBarClassObj].}
{.deprecated: [PGtkPopover:Popover, TGtkPopover:PopoverObj].}
{.deprecated: [PGtkPopoverClass:PopoverClass, TGtkPopoverClass:PopoverClassObj].}
{.deprecated: [PGtkMenuButton:MenuButton, TGtkMenuButton:MenuButtonObj].}
{.deprecated: [PGtkMenuButtonClass:MenuButtonClass, TGtkMenuButtonClass:MenuButtonClassObj].}
{.deprecated: [PGtkSizeGroup:SizeGroup, TGtkSizeGroup:SizeGroupObj].}
{.deprecated: [PGtkSizeGroupClass:SizeGroupClass, TGtkSizeGroupClass:SizeGroupClassObj].}
{.deprecated: [PGtkToolItem:ToolItem, TGtkToolItem:ToolItemObj].}
{.deprecated: [PGtkToolItemClass:ToolItemClass, TGtkToolItemClass:ToolItemClassObj].}
{.deprecated: [PGtkToolButton:ToolButton, TGtkToolButton:ToolButtonObj].}
{.deprecated: [PGtkToolButtonClass:ToolButtonClass, TGtkToolButtonClass:ToolButtonClassObj].}
{.deprecated: [PGtkMenuToolButton:MenuToolButton, TGtkMenuToolButton:MenuToolButtonObj].}
{.deprecated: [PGtkMenuToolButtonClass:MenuToolButtonClass, TGtkMenuToolButtonClass:MenuToolButtonClassObj].}
{.deprecated: [PGtkMessageDialog:MessageDialog, TGtkMessageDialog:MessageDialogObj].}
{.deprecated: [PGtkMessageDialogClass:MessageDialogClass, TGtkMessageDialogClass:MessageDialogClassObj].}
{.deprecated: [PGtkModelButton:ModelButton, TGtkModelButton:ModelButtonObj].}
{.deprecated: [PGtkMountOperation:MountOperation, TGtkMountOperation:MountOperationObj].}
{.deprecated: [PGtkMountOperationClass:MountOperationClass, TGtkMountOperationClass:MountOperationClassObj].}
{.deprecated: [PGtkNotebook:Notebook, TGtkNotebook:NotebookObj].}
{.deprecated: [PGtkNotebookClass:NotebookClass, TGtkNotebookClass:NotebookClassObj].}
{.deprecated: [PGtkOffscreenWindow:OffscreenWindow, TGtkOffscreenWindow:OffscreenWindowObj].}
{.deprecated: [PGtkOffscreenWindowClass:OffscreenWindowClass, TGtkOffscreenWindowClass:OffscreenWindowClassObj].}
{.deprecated: [PGtkOrientable:Orientable, TGtkOrientable:OrientableObj].}
{.deprecated: [PGtkOrientableIface:OrientableIface, TGtkOrientableIface:OrientableIfaceObj].}
{.deprecated: [PGtkOverlay:Overlay, TGtkOverlay:OverlayObj].}
{.deprecated: [PGtkOverlayClass:OverlayClass, TGtkOverlayClass:OverlayClassObj].}
{.deprecated: [PGtkPaperSize:PaperSize, TGtkPaperSize:PaperSizeObj].}
{.deprecated: [PGtkPageSetup:PageSetup, TGtkPageSetup:PageSetupObj].}
{.deprecated: [PGtkPaned:Paned, TGtkPaned:PanedObj].}
{.deprecated: [PGtkPanedClass:PanedClass, TGtkPanedClass:PanedClassObj].}
{.deprecated: [PGtkPlacesSidebar:PlacesSidebar, TGtkPlacesSidebar:PlacesSidebarObj].}
{.deprecated: [PGtkPopoverMenu:PopoverMenu, TGtkPopoverMenu:PopoverMenuObj].}
{.deprecated: [PGtkPopoverMenuClass:PopoverMenuClass, TGtkPopoverMenuClass:PopoverMenuClassObj].}
{.deprecated: [PGtkPrintContext:PrintContext, TGtkPrintContext:PrintContextObj].}
{.deprecated: [PGtkPrintSettings:PrintSettings, TGtkPrintSettings:PrintSettingsObj].}
{.deprecated: [PGtkPageRange:PageRange, TGtkPageRange:PageRangeObj].}
{.deprecated: [PGtkPrintOperationPreview:PrintOperationPreview, TGtkPrintOperationPreview:PrintOperationPreviewObj].}
{.deprecated: [PGtkPrintOperationPreviewIface:PrintOperationPreviewIface, TGtkPrintOperationPreviewIface:PrintOperationPreviewIfaceObj].}
{.deprecated: [PGtkPrintOperation:PrintOperation, TGtkPrintOperation:PrintOperationObj].}
{.deprecated: [PGtkPrintOperationClass:PrintOperationClass, TGtkPrintOperationClass:PrintOperationClassObj].}
{.deprecated: [PGtkProgressBar:ProgressBar, TGtkProgressBar:ProgressBarObj].}
{.deprecated: [PGtkProgressBarClass:ProgressBarClass, TGtkProgressBarClass:ProgressBarClassObj].}
{.deprecated: [PGtkRadioButton:RadioButton, TGtkRadioButton:RadioButtonObj].}
{.deprecated: [PGtkRadioButtonClass:RadioButtonClass, TGtkRadioButtonClass:RadioButtonClassObj].}
{.deprecated: [PGtkRadioMenuItem:RadioMenuItem, TGtkRadioMenuItem:RadioMenuItemObj].}
{.deprecated: [PGtkRadioMenuItemClass:RadioMenuItemClass, TGtkRadioMenuItemClass:RadioMenuItemClassObj].}
{.deprecated: [PGtkToggleToolButton:ToggleToolButton, TGtkToggleToolButton:ToggleToolButtonObj].}
{.deprecated: [PGtkToggleToolButtonClass:ToggleToolButtonClass, TGtkToggleToolButtonClass:ToggleToolButtonClassObj].}
{.deprecated: [PGtkRadioToolButton:RadioToolButton, TGtkRadioToolButton:RadioToolButtonObj].}
{.deprecated: [PGtkRadioToolButtonClass:RadioToolButtonClass, TGtkRadioToolButtonClass:RadioToolButtonClassObj].}
{.deprecated: [PGtkRange:Range, TGtkRange:RangeObj].}
{.deprecated: [PGtkRangeClass:RangeClass, TGtkRangeClass:RangeClassObj].}
{.deprecated: [PGtkRecentInfo:RecentInfo, TGtkRecentInfo:RecentInfoObj].}
{.deprecated: [PGtkRecentData:RecentData, TGtkRecentData:RecentDataObj].}
{.deprecated: [PGtkRecentManager:RecentManager, TGtkRecentManager:RecentManagerObj].}
{.deprecated: [PGtkRecentManagerClass:RecentManagerClass, TGtkRecentManagerClass:RecentManagerClassObj].}
{.deprecated: [PGtkRecentFilter:RecentFilter, TGtkRecentFilter:RecentFilterObj].}
{.deprecated: [PGtkRecentFilterInfo:RecentFilterInfo, TGtkRecentFilterInfo:RecentFilterInfoObj].}
{.deprecated: [PGtkRecentChooser:RecentChooser, TGtkRecentChooser:RecentChooserObj].}
{.deprecated: [PGtkRecentChooserIface:RecentChooserIface, TGtkRecentChooserIface:RecentChooserIfaceObj].}
{.deprecated: [PGtkRecentChooserDialog:RecentChooserDialog, TGtkRecentChooserDialog:RecentChooserDialogObj].}
{.deprecated: [PGtkRecentChooserDialogClass:RecentChooserDialogClass, TGtkRecentChooserDialogClass:RecentChooserDialogClassObj].}
{.deprecated: [PGtkRecentChooserMenu:RecentChooserMenu, TGtkRecentChooserMenu:RecentChooserMenuObj].}
{.deprecated: [PGtkRecentChooserMenuClass:RecentChooserMenuClass, TGtkRecentChooserMenuClass:RecentChooserMenuClassObj].}
{.deprecated: [PGtkRecentChooserWidget:RecentChooserWidget, TGtkRecentChooserWidget:RecentChooserWidgetObj].}
{.deprecated: [PGtkRecentChooserWidgetClass:RecentChooserWidgetClass, TGtkRecentChooserWidgetClass:RecentChooserWidgetClassObj].}
{.deprecated: [PGtkRevealer:Revealer, TGtkRevealer:RevealerObj].}
{.deprecated: [PGtkRevealerClass:RevealerClass, TGtkRevealerClass:RevealerClassObj].}
{.deprecated: [PGtkScale:Scale, TGtkScale:ScaleObj].}
{.deprecated: [PGtkScaleClass:ScaleClass, TGtkScaleClass:ScaleClassObj].}
{.deprecated: [PGtkScaleButton:ScaleButton, TGtkScaleButton:ScaleButtonObj].}
{.deprecated: [PGtkScaleButtonClass:ScaleButtonClass, TGtkScaleButtonClass:ScaleButtonClassObj].}
{.deprecated: [PGtkScrollable:Scrollable, TGtkScrollable:ScrollableObj].}
{.deprecated: [PGtkScrollableInterface:ScrollableInterface, TGtkScrollableInterface:ScrollableInterfaceObj].}
{.deprecated: [PGtkScrollbar:Scrollbar, TGtkScrollbar:ScrollbarObj].}
{.deprecated: [PGtkScrollbarClass:ScrollbarClass, TGtkScrollbarClass:ScrollbarClassObj].}
{.deprecated: [PGtkScrolledWindow:ScrolledWindow, TGtkScrolledWindow:ScrolledWindowObj].}
{.deprecated: [PGtkScrolledWindowClass:ScrolledWindowClass, TGtkScrolledWindowClass:ScrolledWindowClassObj].}
{.deprecated: [PGtkSearchBar:SearchBar, TGtkSearchBar:SearchBarObj].}
{.deprecated: [PGtkSearchBarClass:SearchBarClass, TGtkSearchBarClass:SearchBarClassObj].}
{.deprecated: [PGtkSearchEntry:SearchEntry, TGtkSearchEntry:SearchEntryObj].}
{.deprecated: [PGtkSearchEntryClass:SearchEntryClass, TGtkSearchEntryClass:SearchEntryClassObj].}
{.deprecated: [PGtkSeparator:Separator, TGtkSeparator:SeparatorObj].}
{.deprecated: [PGtkSeparatorClass:SeparatorClass, TGtkSeparatorClass:SeparatorClassObj].}
{.deprecated: [PGtkSeparatorMenuItem:SeparatorMenuItem, TGtkSeparatorMenuItem:SeparatorMenuItemObj].}
{.deprecated: [PGtkSeparatorMenuItemClass:SeparatorMenuItemClass, TGtkSeparatorMenuItemClass:SeparatorMenuItemClassObj].}
{.deprecated: [PGtkSeparatorToolItem:SeparatorToolItem, TGtkSeparatorToolItem:SeparatorToolItemObj].}
{.deprecated: [PGtkSeparatorToolItemClass:SeparatorToolItemClass, TGtkSeparatorToolItemClass:SeparatorToolItemClassObj].}
{.deprecated: [PGtkSettings:Settings, TGtkSettings:SettingsObj].}
{.deprecated: [PGtkSettingsClass:SettingsClass, TGtkSettingsClass:SettingsClassObj].}
{.deprecated: [PGtkSettingsValue:SettingsValue, TGtkSettingsValue:SettingsValueObj].}
{.deprecated: [PGtkStack:Stack, TGtkStack:StackObj].}
{.deprecated: [PGtkStackClass:StackClass, TGtkStackClass:StackClassObj].}
{.deprecated: [PGtkSidebar:Sidebar, TGtkSidebar:SidebarObj].}
{.deprecated: [PGtkSidebarClass:SidebarClass, TGtkSidebarClass:SidebarClassObj].}
{.deprecated: [PGtkRequestedSize:RequestedSize, TGtkRequestedSize:RequestedSizeObj].}
{.deprecated: [PGtkSpinButton:SpinButton, TGtkSpinButton:SpinButtonObj].}
{.deprecated: [PGtkSpinButtonClass:SpinButtonClass, TGtkSpinButtonClass:SpinButtonClassObj].}
{.deprecated: [PGtkSpinner:Spinner, TGtkSpinner:SpinnerObj].}
{.deprecated: [PGtkSpinnerClass:SpinnerClass, TGtkSpinnerClass:SpinnerClassObj].}
{.deprecated: [PGtkStackSwitcher:StackSwitcher, TGtkStackSwitcher:StackSwitcherObj].}
{.deprecated: [PGtkStackSwitcherClass:StackSwitcherClass, TGtkStackSwitcherClass:StackSwitcherClassObj].}
{.deprecated: [PGtkStatusbar:Statusbar, TGtkStatusbar:StatusbarObj].}
{.deprecated: [PGtkStatusbarClass:StatusbarClass, TGtkStatusbarClass:StatusbarClassObj].}
{.deprecated: [PGtkSwitch:Switch, TGtkSwitch:SwitchObj].}
{.deprecated: [PGtkSwitchClass:SwitchClass, TGtkSwitchClass:SwitchClassObj].}
{.deprecated: [PGtkTextTagTable:TextTagTable, TGtkTextTagTable:TextTagTableObj].}
{.deprecated: [PGtkTextTagTableClass:TextTagTableClass, TGtkTextTagTableClass:TextTagTableClassObj].}
{.deprecated: [PGtkTextMark:TextMark, TGtkTextMark:TextMarkObj].}
{.deprecated: [PGtkTextMarkClass:TextMarkClass, TGtkTextMarkClass:TextMarkClassObj].}
{.deprecated: [PGtkTextBTree:TextBTree, TGtkTextBTree:TextBTreeObj].}
{.deprecated: [PGtkTextBuffer:TextBuffer, TGtkTextBuffer:TextBufferObj].}
{.deprecated: [PGtkTextBufferClass:TextBufferClass, TGtkTextBufferClass:TextBufferClassObj].}
{.deprecated: [PGtkTextView:TextView, TGtkTextView:TextViewObj].}
{.deprecated: [PGtkTextViewClass:TextViewClass, TGtkTextViewClass:TextViewClassObj].}
{.deprecated: [PGtkToolbar:Toolbar, TGtkToolbar:ToolbarObj].}
{.deprecated: [PGtkToolbarClass:ToolbarClass, TGtkToolbarClass:ToolbarClassObj].}
{.deprecated: [PGtkToolItemGroup:ToolItemGroup, TGtkToolItemGroup:ToolItemGroupObj].}
{.deprecated: [PGtkToolItemGroupClass:ToolItemGroupClass, TGtkToolItemGroupClass:ToolItemGroupClassObj].}
{.deprecated: [PGtkToolPalette:ToolPalette, TGtkToolPalette:ToolPaletteObj].}
{.deprecated: [PGtkToolPaletteClass:ToolPaletteClass, TGtkToolPaletteClass:ToolPaletteClassObj].}
{.deprecated: [PGtkToolShell:ToolShell, TGtkToolShell:ToolShellObj].}
{.deprecated: [PGtkToolShellIface:ToolShellIface, TGtkToolShellIface:ToolShellIfaceObj].}
{.deprecated: [PGtkTreeDragSource:TreeDragSource, TGtkTreeDragSource:TreeDragSourceObj].}
{.deprecated: [PGtkTreeDragSourceIface:TreeDragSourceIface, TGtkTreeDragSourceIface:TreeDragSourceIfaceObj].}
{.deprecated: [PGtkTreeDragDest:TreeDragDest, TGtkTreeDragDest:TreeDragDestObj].}
{.deprecated: [PGtkTreeDragDestIface:TreeDragDestIface, TGtkTreeDragDestIface:TreeDragDestIfaceObj].}
{.deprecated: [PGtkTreeModelSort:TreeModelSort, TGtkTreeModelSort:TreeModelSortObj].}
{.deprecated: [PGtkTreeModelSortClass:TreeModelSortClass, TGtkTreeModelSortClass:TreeModelSortClassObj].}
{.deprecated: [PGtkTreeSelection:TreeSelection, TGtkTreeSelection:TreeSelectionObj].}
{.deprecated: [PGtkTreeSelectionClass:TreeSelectionClass, TGtkTreeSelectionClass:TreeSelectionClassObj].}
{.deprecated: [PGtkTreeStore:TreeStore, TGtkTreeStore:TreeStoreObj].}
{.deprecated: [PGtkTreeStoreClass:TreeStoreClass, TGtkTreeStoreClass:TreeStoreClassObj].}
{.deprecated: [PGtkViewport:Viewport, TGtkViewport:ViewportObj].}
{.deprecated: [PGtkViewportClass:ViewportClass, TGtkViewportClass:ViewportClassObj].}
{.deprecated: [PGtkVolumeButton:VolumeButton, TGtkVolumeButton:VolumeButtonObj].}
{.deprecated: [PGtkVolumeButtonClass:VolumeButtonClass, TGtkVolumeButtonClass:VolumeButtonClassObj].}
{.deprecated: [PGtkWindowGroup:WindowGroup, TGtkWindowGroup:WindowGroupObj].}
{.deprecated: [PGtkWindowGroupClass:WindowGroupClass, TGtkWindowGroupClass:WindowGroupClassObj].}
{.deprecated: [PGtkArrow:Arrow, TGtkArrow:ArrowObj].}
{.deprecated: [PGtkArrowClass:ArrowClass, TGtkArrowClass:ArrowClassObj].}
{.deprecated: [PGtkAction:Action, TGtkAction:ActionObj].}
{.deprecated: [PGtkActionClass:ActionClass, TGtkActionClass:ActionClassObj].}
{.deprecated: [PGtkActivatable:Activatable, TGtkActivatable:ActivatableObj].}
{.deprecated: [PGtkActivatableIface:ActivatableIface, TGtkActivatableIface:ActivatableIfaceObj].}
{.deprecated: [PGtkStockItem:StockItem, TGtkStockItem:StockItemObj].}
{.deprecated: [PGtkActionGroup:ActionGroup, TGtkActionGroup:ActionGroupObj].}
{.deprecated: [PGtkActionGroupClass:ActionGroupClass, TGtkActionGroupClass:ActionGroupClassObj].}
{.deprecated: [PGtkActionEntry:ActionEntry, TGtkActionEntry:ActionEntryObj].}
{.deprecated: [PGtkToggleActionEntry:ToggleActionEntry, TGtkToggleActionEntry:ToggleActionEntryObj].}
{.deprecated: [PGtkRadioActionEntry:RadioActionEntry, TGtkRadioActionEntry:RadioActionEntryObj].}
{.deprecated: [PGtkAlignment:Alignment, TGtkAlignment:AlignmentObj].}
{.deprecated: [PGtkAlignmentClass:AlignmentClass, TGtkAlignmentClass:AlignmentClassObj].}
{.deprecated: [PGtkColorSelection:ColorSelection, TGtkColorSelection:ColorSelectionObj].}
{.deprecated: [PGtkColorSelectionClass:ColorSelectionClass, TGtkColorSelectionClass:ColorSelectionClassObj].}
{.deprecated: [PGtkColorSelectionDialog:ColorSelectionDialog, TGtkColorSelectionDialog:ColorSelectionDialogObj].}
{.deprecated: [PGtkColorSelectionDialogClass:ColorSelectionDialogClass, TGtkColorSelectionDialogClass:ColorSelectionDialogClassObj].}
{.deprecated: [PGtkFontSelection:FontSelection, TGtkFontSelection:FontSelectionObj].}
{.deprecated: [PGtkFontSelectionClass:FontSelectionClass, TGtkFontSelectionClass:FontSelectionClassObj].}
{.deprecated: [PGtkFontSelectionDialog:FontSelectionDialog, TGtkFontSelectionDialog:FontSelectionDialogObj].}
{.deprecated: [PGtkFontSelectionDialogClass:FontSelectionDialogClass, TGtkFontSelectionDialogClass:FontSelectionDialogClassObj].}
{.deprecated: [PGtkHandleBox:HandleBox, TGtkHandleBox:HandleBoxObj].}
{.deprecated: [PGtkHandleBoxClass:HandleBoxClass, TGtkHandleBoxClass:HandleBoxClassObj].}
{.deprecated: [PGtkHButtonBox:HButtonBox, TGtkHButtonBox:HButtonBoxObj].}
{.deprecated: [PGtkHButtonBoxClass:HButtonBoxClass, TGtkHButtonBoxClass:HButtonBoxClassObj].}
{.deprecated: [PGtkHBox:HBox, TGtkHBox:HBoxObj].}
{.deprecated: [PGtkHBoxClass:HBoxClass, TGtkHBoxClass:HBoxClassObj].}
{.deprecated: [PGtkHPaned:HPaned, TGtkHPaned:HPanedObj].}
{.deprecated: [PGtkHPanedClass:HPanedClass, TGtkHPanedClass:HPanedClassObj].}
{.deprecated: [PGtkHSV:HSV, TGtkHSV:HSVObj].}
{.deprecated: [PGtkHSVClass:HSVClass, TGtkHSVClass:HSVClassObj].}
{.deprecated: [PGtkHScale:HScale, TGtkHScale:HScaleObj].}
{.deprecated: [PGtkHScaleClass:HScaleClass, TGtkHScaleClass:HScaleClassObj].}
{.deprecated: [PGtkHScrollbar:HScrollbar, TGtkHScrollbar:HScrollbarObj].}
{.deprecated: [PGtkHScrollbarClass:HScrollbarClass, TGtkHScrollbarClass:HScrollbarClassObj].}
{.deprecated: [PGtkHSeparator:HSeparator, TGtkHSeparator:HSeparatorObj].}
{.deprecated: [PGtkHSeparatorClass:HSeparatorClass, TGtkHSeparatorClass:HSeparatorClassObj].}
{.deprecated: [PGtkImageMenuItem:ImageMenuItem, TGtkImageMenuItem:ImageMenuItemObj].}
{.deprecated: [PGtkImageMenuItemClass:ImageMenuItemClass, TGtkImageMenuItemClass:ImageMenuItemClassObj].}
{.deprecated: [PGtkNumerableIcon:NumerableIcon, TGtkNumerableIcon:NumerableIconObj].}
{.deprecated: [PGtkNumerableIconClass:NumerableIconClass, TGtkNumerableIconClass:NumerableIconClassObj].}
{.deprecated: [PGtkToggleAction:ToggleAction, TGtkToggleAction:ToggleActionObj].}
{.deprecated: [PGtkToggleActionClass:ToggleActionClass, TGtkToggleActionClass:ToggleActionClassObj].}
{.deprecated: [PGtkRadioAction:RadioAction, TGtkRadioAction:RadioActionObj].}
{.deprecated: [PGtkRadioActionClass:RadioActionClass, TGtkRadioActionClass:RadioActionClassObj].}
{.deprecated: [PGtkRcStyle:RcStyle, TGtkRcStyle:RcStyleObj].}
{.deprecated: [PGtkRcStyleClass:RcStyleClass, TGtkRcStyleClass:RcStyleClassObj].}
{.deprecated: [PGtkRcProperty:RcProperty, TGtkRcProperty:RcPropertyObj].}
{.deprecated: [PGtkRecentAction:RecentAction, TGtkRecentAction:RecentActionObj].}
{.deprecated: [PGtkRecentActionClass:RecentActionClass, TGtkRecentActionClass:RecentActionClassObj].}
{.deprecated: [PGtkStatusIcon:StatusIcon, TGtkStatusIcon:StatusIconObj].}
{.deprecated: [PGtkStatusIconClass:StatusIconClass, TGtkStatusIconClass:StatusIconClassObj].}
{.deprecated: [PGtkStyle:Style, TGtkStyle:StyleObj].}
{.deprecated: [PGtkStyleClass:StyleClass, TGtkStyleClass:StyleClassObj].}
{.deprecated: [PGtkTable:Table, TGtkTable:TableObj].}
{.deprecated: [PGtkTableClass:TableClass, TGtkTableClass:TableClassObj].}
{.deprecated: [PGtkTableChild:TableChild, TGtkTableChild:TableChildObj].}
{.deprecated: [PGtkTableRowCol:TableRowCol, TGtkTableRowCol:TableRowColObj].}
{.deprecated: [PGtkTearoffMenuItem:TearoffMenuItem, TGtkTearoffMenuItem:TearoffMenuItemObj].}
{.deprecated: [PGtkTearoffMenuItemClass:TearoffMenuItemClass, TGtkTearoffMenuItemClass:TearoffMenuItemClassObj].}
{.deprecated: [PGtkThemingEngine:ThemingEngine, TGtkThemingEngine:ThemingEngineObj].}
{.deprecated: [PGtkThemingEngineClass:ThemingEngineClass, TGtkThemingEngineClass:ThemingEngineClassObj].}
{.deprecated: [PGtkUIManager:UIManager, TGtkUIManager:UIManagerObj].}
{.deprecated: [PGtkUIManagerClass:UIManagerClass, TGtkUIManagerClass:UIManagerClassObj].}
{.deprecated: [PGtkVButtonBox:VButtonBox, TGtkVButtonBox:VButtonBoxObj].}
{.deprecated: [PGtkVButtonBoxClass:VButtonBoxClass, TGtkVButtonBoxClass:VButtonBoxClassObj].}
{.deprecated: [PGtkVBox:VBox, TGtkVBox:VBoxObj].}
{.deprecated: [PGtkVBoxClass:VBoxClass, TGtkVBoxClass:VBoxClassObj].}
{.deprecated: [PGtkVPaned:VPaned, TGtkVPaned:VPanedObj].}
{.deprecated: [PGtkVPanedClass:VPanedClass, TGtkVPanedClass:VPanedClassObj].}
{.deprecated: [PGtkVScale:VScale, TGtkVScale:VScaleObj].}
{.deprecated: [PGtkVScaleClass:VScaleClass, TGtkVScaleClass:VScaleClassObj].}
{.deprecated: [PGtkVScrollbar:VScrollbar, TGtkVScrollbar:VScrollbarObj].}
{.deprecated: [PGtkVScrollbarClass:VScrollbarClass, TGtkVScrollbarClass:VScrollbarClassObj].}
{.deprecated: [PGtkVSeparator:VSeparator, TGtkVSeparator:VSeparatorObj].}
{.deprecated: [PGtkVSeparatorClass:VSeparatorClass, TGtkVSeparatorClass:VSeparatorClassObj].}
{.deprecated: [PGtkPageSetupUnixDialog:PageSetupUnixDialog, TGtkPageSetupUnixDialog:PageSetupUnixDialogObj].}
{.deprecated: [PGtkPageSetupUnixDialogClass:PageSetupUnixDialogClass, TGtkPageSetupUnixDialogClass:PageSetupUnixDialogClassObj].}
{.deprecated: [PGtkPrintBackend:PrintBackend, TGtkPrintBackend:PrintBackendObj].}
{.deprecated: [PGtkPrinter:Printer, TGtkPrinter:PrinterObj].}
{.deprecated: [PGtkPrinterClass:PrinterClass, TGtkPrinterClass:PrinterClassObj].}
{.deprecated: [PGtkPrintJob:PrintJob, TGtkPrintJob:PrintJobObj].}
{.deprecated: [PGtkPrintJobClass:PrintJobClass, TGtkPrintJobClass:PrintJobClassObj].}
{.deprecated: [PGtkPrintUnixDialog:PrintUnixDialog, TGtkPrintUnixDialog:PrintUnixDialogObj].}
{.deprecated: [PGtkPrintUnixDialogClass:PrintUnixDialogClass, TGtkPrintUnixDialogClass:PrintUnixDialogClassObj].}
{.deprecated: [PGtkWidgetAccessible:WidgetAccessible, TGtkWidgetAccessible:WidgetAccessibleObj].}
{.deprecated: [PGtkWidgetAccessibleClass:WidgetAccessibleClass, TGtkWidgetAccessibleClass:WidgetAccessibleClassObj].}
{.deprecated: [PGtkArrowAccessible:ArrowAccessible, TGtkArrowAccessible:ArrowAccessibleObj].}
{.deprecated: [PGtkArrowAccessibleClass:ArrowAccessibleClass, TGtkArrowAccessibleClass:ArrowAccessibleClassObj].}
{.deprecated: [PGtkCellAccessible:CellAccessible, TGtkCellAccessible:CellAccessibleObj].}
{.deprecated: [PGtkCellAccessibleClass:CellAccessibleClass, TGtkCellAccessibleClass:CellAccessibleClassObj].}
{.deprecated: [PGtkRendererCellAccessible:RendererCellAccessible, TGtkRendererCellAccessible:RendererCellAccessibleObj].}
{.deprecated: [PGtkRendererCellAccessibleClass:RendererCellAccessibleClass, TGtkRendererCellAccessibleClass:RendererCellAccessibleClassObj].}
{.deprecated: [PGtkBooleanCellAccessible:BooleanCellAccessible, TGtkBooleanCellAccessible:BooleanCellAccessibleObj].}
{.deprecated: [PGtkBooleanCellAccessibleClass:BooleanCellAccessibleClass, TGtkBooleanCellAccessibleClass:BooleanCellAccessibleClassObj].}
{.deprecated: [PGtkContainerAccessible:ContainerAccessible, TGtkContainerAccessible:ContainerAccessibleObj].}
{.deprecated: [PGtkContainerAccessibleClass:ContainerAccessibleClass, TGtkContainerAccessibleClass:ContainerAccessibleClassObj].}
{.deprecated: [PGtkButtonAccessible:ButtonAccessible, TGtkButtonAccessible:ButtonAccessibleObj].}
{.deprecated: [PGtkButtonAccessibleClass:ButtonAccessibleClass, TGtkButtonAccessibleClass:ButtonAccessibleClassObj].}
{.deprecated: [PGtkCellAccessibleParent:CellAccessibleParent, TGtkCellAccessibleParent:CellAccessibleParentObj].}
{.deprecated: [PGtkCellAccessibleParentIface:CellAccessibleParentIface, TGtkCellAccessibleParentIface:CellAccessibleParentIfaceObj].}
{.deprecated: [PGtkMenuItemAccessible:MenuItemAccessible, TGtkMenuItemAccessible:MenuItemAccessibleObj].}
{.deprecated: [PGtkMenuItemAccessibleClass:MenuItemAccessibleClass, TGtkMenuItemAccessibleClass:MenuItemAccessibleClassObj].}
{.deprecated: [PGtkCheckMenuItemAccessible:CheckMenuItemAccessible, TGtkCheckMenuItemAccessible:CheckMenuItemAccessibleObj].}
{.deprecated: [PGtkCheckMenuItemAccessibleClass:CheckMenuItemAccessibleClass, TGtkCheckMenuItemAccessibleClass:CheckMenuItemAccessibleClassObj].}
{.deprecated: [PGtkComboBoxAccessible:ComboBoxAccessible, TGtkComboBoxAccessible:ComboBoxAccessibleObj].}
{.deprecated: [PGtkComboBoxAccessibleClass:ComboBoxAccessibleClass, TGtkComboBoxAccessibleClass:ComboBoxAccessibleClassObj].}
{.deprecated: [PGtkContainerCellAccessible:ContainerCellAccessible, TGtkContainerCellAccessible:ContainerCellAccessibleObj].}
{.deprecated: [PGtkContainerCellAccessibleClass:ContainerCellAccessibleClass, TGtkContainerCellAccessibleClass:ContainerCellAccessibleClassObj].}
{.deprecated: [PGtkEntryAccessible:EntryAccessible, TGtkEntryAccessible:EntryAccessibleObj].}
{.deprecated: [PGtkEntryAccessibleClass:EntryAccessibleClass, TGtkEntryAccessibleClass:EntryAccessibleClassObj].}
{.deprecated: [PGtkExpanderAccessible:ExpanderAccessible, TGtkExpanderAccessible:ExpanderAccessibleObj].}
{.deprecated: [PGtkExpanderAccessibleClass:ExpanderAccessibleClass, TGtkExpanderAccessibleClass:ExpanderAccessibleClassObj].}
{.deprecated: [PGtkFlowBoxAccessible:FlowBoxAccessible, TGtkFlowBoxAccessible:FlowBoxAccessibleObj].}
{.deprecated: [PGtkFlowBoxAccessibleClass:FlowBoxAccessibleClass, TGtkFlowBoxAccessibleClass:FlowBoxAccessibleClassObj].}
{.deprecated: [PGtkFlowBoxChildAccessible:FlowBoxChildAccessible, TGtkFlowBoxChildAccessible:FlowBoxChildAccessibleObj].}
{.deprecated: [PGtkFlowBoxChildAccessibleClass:FlowBoxChildAccessibleClass, TGtkFlowBoxChildAccessibleClass:FlowBoxChildAccessibleClassObj].}
{.deprecated: [PGtkFrameAccessible:FrameAccessible, TGtkFrameAccessible:FrameAccessibleObj].}
{.deprecated: [PGtkFrameAccessibleClass:FrameAccessibleClass, TGtkFrameAccessibleClass:FrameAccessibleClassObj].}
{.deprecated: [PGtkIconViewAccessible:IconViewAccessible, TGtkIconViewAccessible:IconViewAccessibleObj].}
{.deprecated: [PGtkIconViewAccessibleClass:IconViewAccessibleClass, TGtkIconViewAccessibleClass:IconViewAccessibleClassObj].}
{.deprecated: [PGtkImageAccessible:ImageAccessible, TGtkImageAccessible:ImageAccessibleObj].}
{.deprecated: [PGtkImageAccessibleClass:ImageAccessibleClass, TGtkImageAccessibleClass:ImageAccessibleClassObj].}
{.deprecated: [PGtkImageCellAccessible:ImageCellAccessible, TGtkImageCellAccessible:ImageCellAccessibleObj].}
{.deprecated: [PGtkImageCellAccessibleClass:ImageCellAccessibleClass, TGtkImageCellAccessibleClass:ImageCellAccessibleClassObj].}
{.deprecated: [PGtkLabelAccessible:LabelAccessible, TGtkLabelAccessible:LabelAccessibleObj].}
{.deprecated: [PGtkLabelAccessibleClass:LabelAccessibleClass, TGtkLabelAccessibleClass:LabelAccessibleClassObj].}
{.deprecated: [PGtkLevelBarAccessible:LevelBarAccessible, TGtkLevelBarAccessible:LevelBarAccessibleObj].}
{.deprecated: [PGtkLevelBarAccessibleClass:LevelBarAccessibleClass, TGtkLevelBarAccessibleClass:LevelBarAccessibleClassObj].}
{.deprecated: [PGtkLinkButtonAccessible:LinkButtonAccessible, TGtkLinkButtonAccessible:LinkButtonAccessibleObj].}
{.deprecated: [PGtkLinkButtonAccessibleClass:LinkButtonAccessibleClass, TGtkLinkButtonAccessibleClass:LinkButtonAccessibleClassObj].}
{.deprecated: [PGtkListBoxAccessible:ListBoxAccessible, TGtkListBoxAccessible:ListBoxAccessibleObj].}
{.deprecated: [PGtkListBoxAccessibleClass:ListBoxAccessibleClass, TGtkListBoxAccessibleClass:ListBoxAccessibleClassObj].}
{.deprecated: [PGtkListBoxRowAccessible:ListBoxRowAccessible, TGtkListBoxRowAccessible:ListBoxRowAccessibleObj].}
{.deprecated: [PGtkListBoxRowAccessibleClass:ListBoxRowAccessibleClass, TGtkListBoxRowAccessibleClass:ListBoxRowAccessibleClassObj].}
{.deprecated: [PGtkLockButtonAccessible:LockButtonAccessible, TGtkLockButtonAccessible:LockButtonAccessibleObj].}
{.deprecated: [PGtkLockButtonAccessibleClass:LockButtonAccessibleClass, TGtkLockButtonAccessibleClass:LockButtonAccessibleClassObj].}
{.deprecated: [PGtkMenuShellAccessible:MenuShellAccessible, TGtkMenuShellAccessible:MenuShellAccessibleObj].}
{.deprecated: [PGtkMenuShellAccessibleClass:MenuShellAccessibleClass, TGtkMenuShellAccessibleClass:MenuShellAccessibleClassObj].}
{.deprecated: [PGtkMenuAccessible:MenuAccessible, TGtkMenuAccessible:MenuAccessibleObj].}
{.deprecated: [PGtkMenuAccessibleClass:MenuAccessibleClass, TGtkMenuAccessibleClass:MenuAccessibleClassObj].}
{.deprecated: [PGtkToggleButtonAccessible:ToggleButtonAccessible, TGtkToggleButtonAccessible:ToggleButtonAccessibleObj].}
{.deprecated: [PGtkToggleButtonAccessibleClass:ToggleButtonAccessibleClass, TGtkToggleButtonAccessibleClass:ToggleButtonAccessibleClassObj].}
{.deprecated: [PGtkMenuButtonAccessible:MenuButtonAccessible, TGtkMenuButtonAccessible:MenuButtonAccessibleObj].}
{.deprecated: [PGtkMenuButtonAccessibleClass:MenuButtonAccessibleClass, TGtkMenuButtonAccessibleClass:MenuButtonAccessibleClassObj].}
{.deprecated: [PGtkNotebookAccessible:NotebookAccessible, TGtkNotebookAccessible:NotebookAccessibleObj].}
{.deprecated: [PGtkNotebookAccessibleClass:NotebookAccessibleClass, TGtkNotebookAccessibleClass:NotebookAccessibleClassObj].}
{.deprecated: [PGtkNotebookPageAccessible:NotebookPageAccessible, TGtkNotebookPageAccessible:NotebookPageAccessibleObj].}
{.deprecated: [PGtkNotebookPageAccessibleClass:NotebookPageAccessibleClass, TGtkNotebookPageAccessibleClass:NotebookPageAccessibleClassObj].}
{.deprecated: [PGtkPopoverAccessible:PopoverAccessible, TGtkPopoverAccessible:PopoverAccessibleObj].}
{.deprecated: [PGtkPopoverAccessibleClass:PopoverAccessibleClass, TGtkPopoverAccessibleClass:PopoverAccessibleClassObj].}
{.deprecated: [PGtkPanedAccessible:PanedAccessible, TGtkPanedAccessible:PanedAccessibleObj].}
{.deprecated: [PGtkPanedAccessibleClass:PanedAccessibleClass, TGtkPanedAccessibleClass:PanedAccessibleClassObj].}
{.deprecated: [PGtkProgressBarAccessible:ProgressBarAccessible, TGtkProgressBarAccessible:ProgressBarAccessibleObj].}
{.deprecated: [PGtkProgressBarAccessibleClass:ProgressBarAccessibleClass, TGtkProgressBarAccessibleClass:ProgressBarAccessibleClassObj].}
{.deprecated: [PGtkRadioButtonAccessible:RadioButtonAccessible, TGtkRadioButtonAccessible:RadioButtonAccessibleObj].}
{.deprecated: [PGtkRadioButtonAccessibleClass:RadioButtonAccessibleClass, TGtkRadioButtonAccessibleClass:RadioButtonAccessibleClassObj].}
{.deprecated: [PGtkRadioMenuItemAccessible:RadioMenuItemAccessible, TGtkRadioMenuItemAccessible:RadioMenuItemAccessibleObj].}
{.deprecated: [PGtkRadioMenuItemAccessibleClass:RadioMenuItemAccessibleClass, TGtkRadioMenuItemAccessibleClass:RadioMenuItemAccessibleClassObj].}
{.deprecated: [PGtkRangeAccessible:RangeAccessible, TGtkRangeAccessible:RangeAccessibleObj].}
{.deprecated: [PGtkRangeAccessibleClass:RangeAccessibleClass, TGtkRangeAccessibleClass:RangeAccessibleClassObj].}
{.deprecated: [PGtkScaleAccessible:ScaleAccessible, TGtkScaleAccessible:ScaleAccessibleObj].}
{.deprecated: [PGtkScaleAccessibleClass:ScaleAccessibleClass, TGtkScaleAccessibleClass:ScaleAccessibleClassObj].}
{.deprecated: [PGtkScaleButtonAccessible:ScaleButtonAccessible, TGtkScaleButtonAccessible:ScaleButtonAccessibleObj].}
{.deprecated: [PGtkScaleButtonAccessibleClass:ScaleButtonAccessibleClass, TGtkScaleButtonAccessibleClass:ScaleButtonAccessibleClassObj].}
{.deprecated: [PGtkScrolledWindowAccessible:ScrolledWindowAccessible, TGtkScrolledWindowAccessible:ScrolledWindowAccessibleObj].}
{.deprecated: [PGtkScrolledWindowAccessibleClass:ScrolledWindowAccessibleClass, TGtkScrolledWindowAccessibleClass:ScrolledWindowAccessibleClassObj].}
{.deprecated: [PGtkSpinButtonAccessible:SpinButtonAccessible, TGtkSpinButtonAccessible:SpinButtonAccessibleObj].}
{.deprecated: [PGtkSpinButtonAccessibleClass:SpinButtonAccessibleClass, TGtkSpinButtonAccessibleClass:SpinButtonAccessibleClassObj].}
{.deprecated: [PGtkSpinnerAccessible:SpinnerAccessible, TGtkSpinnerAccessible:SpinnerAccessibleObj].}
{.deprecated: [PGtkSpinnerAccessibleClass:SpinnerAccessibleClass, TGtkSpinnerAccessibleClass:SpinnerAccessibleClassObj].}
{.deprecated: [PGtkStatusbarAccessible:StatusbarAccessible, TGtkStatusbarAccessible:StatusbarAccessibleObj].}
{.deprecated: [PGtkStatusbarAccessibleClass:StatusbarAccessibleClass, TGtkStatusbarAccessibleClass:StatusbarAccessibleClassObj].}
{.deprecated: [PGtkSwitchAccessible:SwitchAccessible, TGtkSwitchAccessible:SwitchAccessibleObj].}
{.deprecated: [PGtkSwitchAccessibleClass:SwitchAccessibleClass, TGtkSwitchAccessibleClass:SwitchAccessibleClassObj].}
{.deprecated: [PGtkTextCellAccessible:TextCellAccessible, TGtkTextCellAccessible:TextCellAccessibleObj].}
{.deprecated: [PGtkTextCellAccessibleClass:TextCellAccessibleClass, TGtkTextCellAccessibleClass:TextCellAccessibleClassObj].}
{.deprecated: [PGtkTextViewAccessible:TextViewAccessible, TGtkTextViewAccessible:TextViewAccessibleObj].}
{.deprecated: [PGtkTextViewAccessibleClass:TextViewAccessibleClass, TGtkTextViewAccessibleClass:TextViewAccessibleClassObj].}
{.deprecated: [PGtkToplevelAccessible:ToplevelAccessible, TGtkToplevelAccessible:ToplevelAccessibleObj].}
{.deprecated: [PGtkToplevelAccessibleClass:ToplevelAccessibleClass, TGtkToplevelAccessibleClass:ToplevelAccessibleClassObj].}
{.deprecated: [PGtkTreeViewAccessible:TreeViewAccessible, TGtkTreeViewAccessible:TreeViewAccessibleObj].}
{.deprecated: [PGtkTreeViewAccessibleClass:TreeViewAccessibleClass, TGtkTreeViewAccessibleClass:TreeViewAccessibleClassObj].}
{.deprecated: [PGtkWindowAccessible:WindowAccessible, TGtkWindowAccessible:WindowAccessibleObj].}
{.deprecated: [PGtkWindowAccessibleClass:WindowAccessibleClass, TGtkWindowAccessibleClass:WindowAccessibleClassObj].}
{.deprecated: [gtk_accel_group_get_type: accel_group_get_type].}
{.deprecated: [gtk_accel_group_new: accel_group_new].}
{.deprecated: [gtk_accel_group_get_is_locked: get_is_locked].}
{.deprecated: [gtk_accel_group_get_modifier_mask: get_modifier_mask].}
{.deprecated: [gtk_accel_group_lock: lock].}
{.deprecated: [gtk_accel_group_unlock: unlock].}
{.deprecated: [gtk_accel_group_connect: connect].}
{.deprecated: [gtk_accel_group_connect_by_path: connect_by_path].}
{.deprecated: [gtk_accel_group_disconnect: disconnect].}
{.deprecated: [gtk_accel_group_disconnect_key: disconnect_key].}
{.deprecated: [gtk_accel_group_activate: activate].}
{.deprecated: [gtk_accel_groups_activate: accel_groups_activate].}
{.deprecated: [gtk_accel_groups_from_object: accel_groups_from_object].}
{.deprecated: [gtk_accel_group_find: find].}
{.deprecated: [gtk_accel_group_from_accel_closure: accel_group_from_accel_closure].}
{.deprecated: [gtk_accelerator_valid: accelerator_valid].}
{.deprecated: [gtk_accelerator_parse: accelerator_parse].}
{.deprecated: [gtk_accelerator_parse_with_keycode: accelerator_parse_with_keycode].}
{.deprecated: [gtk_accelerator_name: accelerator_name].}
{.deprecated: [gtk_accelerator_name_with_keycode: accelerator_name_with_keycode].}
{.deprecated: [gtk_accelerator_get_label: accelerator_get_label].}
{.deprecated: [gtk_accelerator_get_label_with_keycode: accelerator_get_label_with_keycode].}
{.deprecated: [gtk_accelerator_set_default_mod_mask: accelerator_set_default_mod_mask].}
{.deprecated: [gtk_accelerator_get_default_mod_mask: accelerator_get_default_mod_mask].}
{.deprecated: [gtk_accel_group_query: query].}
{.deprecated: [gtk_border_get_type: border_get_type].}
{.deprecated: [gtk_border_new: border_new].}
{.deprecated: [gtk_border_copy: copy].}
{.deprecated: [gtk_border_free: free].}
{.deprecated: [gtk_widget_get_type: widget_get_type].}
{.deprecated: [gtk_widget_new: widget_new].}
{.deprecated: [gtk_widget_destroy: destroy].}
{.deprecated: [gtk_widget_destroyed: destroyed].}
{.deprecated: [gtk_widget_unparent: unparent].}
{.deprecated: [gtk_widget_show: show].}
{.deprecated: [gtk_widget_hide: hide].}
{.deprecated: [gtk_widget_show_now: show_now].}
{.deprecated: [gtk_widget_show_all: show_all].}
{.deprecated: [gtk_widget_set_no_show_all: set_no_show_all].}
{.deprecated: [gtk_widget_get_no_show_all: get_no_show_all].}
{.deprecated: [gtk_widget_map: map].}
{.deprecated: [gtk_widget_unmap: unmap].}
{.deprecated: [gtk_widget_realize: realize].}
{.deprecated: [gtk_widget_unrealize: unrealize].}
{.deprecated: [gtk_widget_draw: draw].}
{.deprecated: [gtk_widget_queue_draw: queue_draw].}
{.deprecated: [gtk_widget_queue_draw_area: queue_draw_area].}
{.deprecated: [gtk_widget_queue_draw_region: queue_draw_region].}
{.deprecated: [gtk_widget_queue_resize: queue_resize].}
{.deprecated: [gtk_widget_queue_resize_no_redraw: queue_resize_no_redraw].}
{.deprecated: [gtk_widget_get_frame_clock: get_frame_clock].}
{.deprecated: [gtk_widget_size_request: size_request].}
{.deprecated: [gtk_widget_size_allocate: size_allocate].}
{.deprecated: [gtk_widget_size_allocate_with_baseline: size_allocate_with_baseline].}
{.deprecated: [gtk_widget_get_request_mode: get_request_mode].}
{.deprecated: [gtk_widget_get_preferred_width: get_preferred_width].}
{.deprecated: [gtk_widget_get_preferred_height_for_width: get_preferred_height_for_width].}
{.deprecated: [gtk_widget_get_preferred_height: get_preferred_height].}
{.deprecated: [gtk_widget_get_preferred_width_for_height: get_preferred_width_for_height].}
{.deprecated: [gtk_widget_get_preferred_height_and_baseline_for_width: get_preferred_height_and_baseline_for_width].}
{.deprecated: [gtk_widget_get_preferred_size: get_preferred_size].}
{.deprecated: [gtk_widget_get_child_requisition: get_child_requisition].}
{.deprecated: [gtk_widget_add_accelerator: add_accelerator].}
{.deprecated: [gtk_widget_remove_accelerator: remove_accelerator].}
{.deprecated: [gtk_widget_set_accel_path: set_accel_path].}
{.deprecated: [gtk_widget_list_accel_closures: list_accel_closures].}
{.deprecated: [gtk_widget_can_activate_accel: can_activate_accel].}
{.deprecated: [gtk_widget_mnemonic_activate: mnemonic_activate].}
{.deprecated: [gtk_widget_event: event].}
{.deprecated: [gtk_widget_send_expose: send_expose].}
{.deprecated: [gtk_widget_send_focus_change: send_focus_change].}
{.deprecated: [gtk_widget_activate: activate].}
{.deprecated: [gtk_widget_reparent: reparent].}
{.deprecated: [gtk_widget_intersect: intersect].}
{.deprecated: [gtk_widget_region_intersect: region_intersect].}
{.deprecated: [gtk_widget_freeze_child_notify: freeze_child_notify].}
{.deprecated: [gtk_widget_child_notify: child_notify].}
{.deprecated: [gtk_widget_thaw_child_notify: thaw_child_notify].}
{.deprecated: [gtk_widget_set_can_focus: set_can_focus].}
{.deprecated: [gtk_widget_get_can_focus: get_can_focus].}
{.deprecated: [gtk_widget_has_focus: has_focus].}
{.deprecated: [gtk_widget_is_focus: is_focus].}
{.deprecated: [gtk_widget_has_visible_focus: has_visible_focus].}
{.deprecated: [gtk_widget_grab_focus: grab_focus].}
{.deprecated: [gtk_widget_set_can_default: set_can_default].}
{.deprecated: [gtk_widget_get_can_default: get_can_default].}
{.deprecated: [gtk_widget_has_default: has_default].}
{.deprecated: [gtk_widget_grab_default: grab_default].}
{.deprecated: [gtk_widget_set_receives_default: set_receives_default].}
{.deprecated: [gtk_widget_get_receives_default: get_receives_default].}
{.deprecated: [gtk_widget_has_grab: has_grab].}
{.deprecated: [gtk_widget_device_is_shadowed: device_is_shadowed].}
{.deprecated: [gtk_widget_set_name: set_name].}
{.deprecated: [gtk_widget_get_name: get_name].}
{.deprecated: [gtk_widget_set_state: set_state].}
{.deprecated: [gtk_widget_get_state: get_state].}
{.deprecated: [gtk_widget_set_state_flags: set_state_flags].}
{.deprecated: [gtk_widget_unset_state_flags: unset_state_flags].}
{.deprecated: [gtk_widget_get_state_flags: get_state_flags].}
{.deprecated: [gtk_widget_set_sensitive: set_sensitive].}
{.deprecated: [gtk_widget_get_sensitive: get_sensitive].}
{.deprecated: [gtk_widget_is_sensitive: is_sensitive].}
{.deprecated: [gtk_widget_set_visible: set_visible].}
{.deprecated: [gtk_widget_get_visible: get_visible].}
{.deprecated: [gtk_widget_is_visible: is_visible].}
{.deprecated: [gtk_widget_set_has_window: set_has_window].}
{.deprecated: [gtk_widget_get_has_window: get_has_window].}
{.deprecated: [gtk_widget_is_toplevel: is_toplevel].}
{.deprecated: [gtk_widget_is_drawable: is_drawable].}
{.deprecated: [gtk_widget_set_realized: set_realized].}
{.deprecated: [gtk_widget_get_realized: get_realized].}
{.deprecated: [gtk_widget_set_mapped: set_mapped].}
{.deprecated: [gtk_widget_get_mapped: get_mapped].}
{.deprecated: [gtk_widget_set_app_paintable: set_app_paintable].}
{.deprecated: [gtk_widget_get_app_paintable: get_app_paintable].}
{.deprecated: [gtk_widget_set_double_buffered: set_double_buffered].}
{.deprecated: [gtk_widget_get_double_buffered: get_double_buffered].}
{.deprecated: [gtk_widget_set_redraw_on_allocate: set_redraw_on_allocate].}
{.deprecated: [gtk_widget_set_parent: set_parent].}
{.deprecated: [gtk_widget_get_parent: get_parent].}
{.deprecated: [gtk_widget_set_parent_window: set_parent_window].}
{.deprecated: [gtk_widget_get_parent_window: get_parent_window].}
{.deprecated: [gtk_widget_set_child_visible: set_child_visible].}
{.deprecated: [gtk_widget_get_child_visible: get_child_visible].}
{.deprecated: [gtk_widget_set_window: set_window].}
{.deprecated: [gtk_widget_get_window: get_window].}
{.deprecated: [gtk_widget_register_window: register_window].}
{.deprecated: [gtk_widget_unregister_window: unregister_window].}
{.deprecated: [gtk_widget_get_allocated_width: get_allocated_width].}
{.deprecated: [gtk_widget_get_allocated_height: get_allocated_height].}
{.deprecated: [gtk_widget_get_allocated_baseline: get_allocated_baseline].}
{.deprecated: [gtk_widget_get_allocation: get_allocation].}
{.deprecated: [gtk_widget_set_allocation: set_allocation].}
{.deprecated: [gtk_widget_set_clip: set_clip].}
{.deprecated: [gtk_widget_get_clip: get_clip].}
{.deprecated: [gtk_widget_get_requisition: get_requisition].}
{.deprecated: [gtk_widget_child_focus: child_focus].}
{.deprecated: [gtk_widget_keynav_failed: keynav_failed].}
{.deprecated: [gtk_widget_error_bell: error_bell].}
{.deprecated: [gtk_widget_set_size_request: set_size_request].}
{.deprecated: [gtk_widget_get_size_request: get_size_request].}
{.deprecated: [gtk_widget_set_events: set_events].}
{.deprecated: [gtk_widget_add_events: add_events].}
{.deprecated: [gtk_widget_set_device_events: set_device_events].}
{.deprecated: [gtk_widget_add_device_events: add_device_events].}
{.deprecated: [gtk_widget_set_opacity: set_opacity].}
{.deprecated: [gtk_widget_get_opacity: get_opacity].}
{.deprecated: [gtk_widget_set_device_enabled: set_device_enabled].}
{.deprecated: [gtk_widget_get_device_enabled: get_device_enabled].}
{.deprecated: [gtk_widget_get_toplevel: get_toplevel].}
{.deprecated: [gtk_widget_get_ancestor: get_ancestor].}
{.deprecated: [gtk_widget_get_visual: get_visual].}
{.deprecated: [gtk_widget_set_visual: set_visual].}
{.deprecated: [gtk_widget_get_screen: get_screen].}
{.deprecated: [gtk_widget_has_screen: has_screen].}
{.deprecated: [gtk_widget_get_scale_factor: get_scale_factor].}
{.deprecated: [gtk_widget_get_display: get_display].}
{.deprecated: [gtk_widget_get_root_window: get_root_window].}
{.deprecated: [gtk_widget_get_settings: get_settings].}
{.deprecated: [gtk_widget_get_clipboard: get_clipboard].}
{.deprecated: [gtk_widget_get_hexpand: get_hexpand].}
{.deprecated: [gtk_widget_set_hexpand: set_hexpand].}
{.deprecated: [gtk_widget_get_hexpand_set: get_hexpand_set].}
{.deprecated: [gtk_widget_set_hexpand_set: set_hexpand_set].}
{.deprecated: [gtk_widget_get_vexpand: get_vexpand].}
{.deprecated: [gtk_widget_set_vexpand: set_vexpand].}
{.deprecated: [gtk_widget_get_vexpand_set: get_vexpand_set].}
{.deprecated: [gtk_widget_set_vexpand_set: set_vexpand_set].}
{.deprecated: [gtk_widget_queue_compute_expand: queue_compute_expand].}
{.deprecated: [gtk_widget_compute_expand: compute_expand].}
{.deprecated: [gtk_widget_get_support_multidevice: get_support_multidevice].}
{.deprecated: [gtk_widget_set_support_multidevice: set_support_multidevice].}
{.deprecated: [gtk_widget_class_set_accessible_type: set_accessible_type].}
{.deprecated: [gtk_widget_class_set_accessible_role: set_accessible_role].}
{.deprecated: [gtk_widget_get_accessible: get_accessible].}
{.deprecated: [gtk_widget_get_halign: get_halign].}
{.deprecated: [gtk_widget_set_halign: set_halign].}
{.deprecated: [gtk_widget_get_valign: get_valign].}
{.deprecated: [gtk_widget_get_valign_with_baseline: get_valign_with_baseline].}
{.deprecated: [gtk_widget_set_valign: set_valign].}
{.deprecated: [gtk_widget_get_margin_left: get_margin_left].}
{.deprecated: [gtk_widget_set_margin_left: set_margin_left].}
{.deprecated: [gtk_widget_get_margin_right: get_margin_right].}
{.deprecated: [gtk_widget_set_margin_right: set_margin_right].}
{.deprecated: [gtk_widget_get_margin_start: get_margin_start].}
{.deprecated: [gtk_widget_set_margin_start: set_margin_start].}
{.deprecated: [gtk_widget_get_margin_end: get_margin_end].}
{.deprecated: [gtk_widget_set_margin_end: set_margin_end].}
{.deprecated: [gtk_widget_get_margin_top: get_margin_top].}
{.deprecated: [gtk_widget_set_margin_top: set_margin_top].}
{.deprecated: [gtk_widget_get_margin_bottom: get_margin_bottom].}
{.deprecated: [gtk_widget_set_margin_bottom: set_margin_bottom].}
{.deprecated: [gtk_widget_get_events: get_events].}
{.deprecated: [gtk_widget_get_device_events: get_device_events].}
{.deprecated: [gtk_widget_get_pointer: get_pointer].}
{.deprecated: [gtk_widget_is_ancestor: is_ancestor].}
{.deprecated: [gtk_widget_translate_coordinates: translate_coordinates].}
{.deprecated: [gtk_widget_hide_on_delete: hide_on_delete].}
{.deprecated: [gtk_widget_override_color: override_color].}
{.deprecated: [gtk_widget_override_background_color: override_background_color].}
{.deprecated: [gtk_widget_override_font: override_font].}
{.deprecated: [gtk_widget_override_symbolic_color: override_symbolic_color].}
{.deprecated: [gtk_widget_override_cursor: override_cursor].}
{.deprecated: [gtk_widget_reset_style: reset_style].}
{.deprecated: [gtk_widget_create_pango_context: create_pango_context].}
{.deprecated: [gtk_widget_get_pango_context: get_pango_context].}
{.deprecated: [gtk_widget_create_pango_layout: create_pango_layout].}
{.deprecated: [gtk_widget_render_icon_pixbuf: render_icon_pixbuf].}
{.deprecated: [gtk_widget_set_composite_name: set_composite_name].}
{.deprecated: [gtk_widget_get_composite_name: get_composite_name].}
{.deprecated: [gtk_widget_push_composite_child: widget_push_composite_child].}
{.deprecated: [gtk_widget_pop_composite_child: widget_pop_composite_child].}
{.deprecated: [gtk_widget_class_install_style_property: install_style_property].}
{.deprecated: [gtk_widget_class_install_style_property_parser: install_style_property_parser].}
{.deprecated: [gtk_widget_class_find_style_property: find_style_property].}
{.deprecated: [gtk_widget_class_list_style_properties: list_style_properties].}
{.deprecated: [gtk_widget_style_get_property: style_get_property].}
{.deprecated: [gtk_widget_style_get: style_get].}
{.deprecated: [gtk_widget_set_direction: set_direction].}
{.deprecated: [gtk_widget_get_direction: get_direction].}
{.deprecated: [gtk_widget_set_default_direction: widget_set_default_direction].}
{.deprecated: [gtk_widget_get_default_direction: widget_get_default_direction].}
{.deprecated: [gtk_widget_is_composited: is_composited].}
{.deprecated: [gtk_widget_shape_combine_region: shape_combine_region].}
{.deprecated: [gtk_widget_input_shape_combine_region: input_shape_combine_region].}
{.deprecated: [gtk_widget_list_mnemonic_labels: list_mnemonic_labels].}
{.deprecated: [gtk_widget_add_mnemonic_label: add_mnemonic_label].}
{.deprecated: [gtk_widget_remove_mnemonic_label: remove_mnemonic_label].}
{.deprecated: [gtk_widget_set_tooltip_window: set_tooltip_window].}
{.deprecated: [gtk_widget_get_tooltip_window: get_tooltip_window].}
{.deprecated: [gtk_widget_trigger_tooltip_query: trigger_tooltip_query].}
{.deprecated: [gtk_widget_set_tooltip_text: set_tooltip_text].}
{.deprecated: [gtk_widget_get_tooltip_text: get_tooltip_text].}
{.deprecated: [gtk_widget_set_tooltip_markup: set_tooltip_markup].}
{.deprecated: [gtk_widget_get_tooltip_markup: get_tooltip_markup].}
{.deprecated: [gtk_widget_set_has_tooltip: set_has_tooltip].}
{.deprecated: [gtk_widget_get_has_tooltip: get_has_tooltip].}
{.deprecated: [gtk_cairo_should_draw_window: cairo_should_draw_window].}
{.deprecated: [gtk_cairo_transform_to_window: cairo_transform_to_window].}
{.deprecated: [gtk_requisition_get_type: requisition_get_type].}
{.deprecated: [gtk_requisition_new: requisition_new].}
{.deprecated: [gtk_requisition_copy: copy].}
{.deprecated: [gtk_requisition_free: free].}
{.deprecated: [gtk_widget_in_destruction: in_destruction].}
{.deprecated: [gtk_widget_get_style_context: get_style_context].}
{.deprecated: [gtk_widget_get_path: get_path].}
{.deprecated: [gtk_widget_get_modifier_mask: get_modifier_mask].}
{.deprecated: [gtk_widget_insert_action_group: insert_action_group].}
{.deprecated: [gtk_widget_add_tick_callback: add_tick_callback].}
{.deprecated: [gtk_widget_remove_tick_callback: remove_tick_callback].}
{.deprecated: [gtk_widget_init_template: init_template].}
{.deprecated: [gtk_widget_get_template_child: get_template_child].}
{.deprecated: [gtk_widget_class_set_template: set_template].}
{.deprecated: [gtk_widget_class_set_template_from_resource: set_template_from_resource].}
{.deprecated: [gtk_widget_class_bind_template_callback_full: bind_template_callback_full].}
{.deprecated: [gtk_widget_class_set_connect_func: set_connect_func].}
{.deprecated: [gtk_widget_class_bind_template_child_full: bind_template_child_full].}
{.deprecated: [gtk_widget_get_action_group: get_action_group].}
{.deprecated: [gtk_widget_list_action_prefixes: list_action_prefixes].}
{.deprecated: [gtk_application_get_type: application_get_type].}
{.deprecated: [gtk_application_new: application_new].}
{.deprecated: [gtk_application_add_window: add_window].}
{.deprecated: [gtk_application_remove_window: remove_window].}
{.deprecated: [gtk_application_get_windows: get_windows].}
{.deprecated: [gtk_application_get_app_menu: get_app_menu].}
{.deprecated: [gtk_application_set_app_menu: set_app_menu].}
{.deprecated: [gtk_application_get_menubar: get_menubar].}
{.deprecated: [gtk_application_set_menubar: set_menubar].}
{.deprecated: [gtk_application_add_accelerator: add_accelerator].}
{.deprecated: [gtk_application_remove_accelerator: remove_accelerator].}
{.deprecated: [gtk_application_inhibit: inhibit].}
{.deprecated: [gtk_application_uninhibit: uninhibit].}
{.deprecated: [gtk_application_is_inhibited: is_inhibited].}
{.deprecated: [gtk_application_get_window_by_id: get_window_by_id].}
{.deprecated: [gtk_application_get_active_window: get_active_window].}
{.deprecated: [gtk_application_list_action_descriptions: list_action_descriptions].}
{.deprecated: [gtk_application_get_accels_for_action: get_accels_for_action].}
{.deprecated: [gtk_application_get_actions_for_accel: get_actions_for_accel].}
{.deprecated: [gtk_application_set_accels_for_action: set_accels_for_action].}
{.deprecated: [gtk_application_prefers_app_menu: prefers_app_menu].}
{.deprecated: [gtk_application_get_menu_by_id: get_menu_by_id].}
{.deprecated: [gtk_container_get_type: container_get_type].}
{.deprecated: [gtk_container_set_border_width: set_border_width].}
{.deprecated: [gtk_container_get_border_width: get_border_width].}
{.deprecated: [gtk_container_add: add].}
{.deprecated: [gtk_container_remove: remove].}
{.deprecated: [gtk_container_set_resize_mode: set_resize_mode].}
{.deprecated: [gtk_container_get_resize_mode: get_resize_mode].}
{.deprecated: [gtk_container_check_resize: check_resize].}
{.deprecated: [gtk_container_foreach: foreach].}
{.deprecated: [gtk_container_get_children: get_children].}
{.deprecated: [gtk_container_propagate_draw: propagate_draw].}
{.deprecated: [gtk_container_set_focus_chain: set_focus_chain].}
{.deprecated: [gtk_container_get_focus_chain: get_focus_chain].}
{.deprecated: [gtk_container_unset_focus_chain: unset_focus_chain].}
{.deprecated: [gtk_container_set_reallocate_redraws: set_reallocate_redraws].}
{.deprecated: [gtk_container_set_focus_child: set_focus_child].}
{.deprecated: [gtk_container_get_focus_child: get_focus_child].}
{.deprecated: [gtk_container_set_focus_vadjustment: set_focus_vadjustment].}
{.deprecated: [gtk_container_get_focus_vadjustment: get_focus_vadjustment].}
{.deprecated: [gtk_container_set_focus_hadjustment: set_focus_hadjustment].}
{.deprecated: [gtk_container_get_focus_hadjustment: get_focus_hadjustment].}
{.deprecated: [gtk_container_resize_children: resize_children].}
{.deprecated: [gtk_container_child_type: child_type].}
{.deprecated: [gtk_container_class_install_child_property: install_child_property].}
{.deprecated: [gtk_container_class_find_child_property: container_class_find_child_property].}
{.deprecated: [gtk_container_class_list_child_properties: container_class_list_child_properties].}
{.deprecated: [gtk_container_add_with_properties: add_with_properties].}
{.deprecated: [gtk_container_child_set: child_set].}
{.deprecated: [gtk_container_child_get: child_get].}
{.deprecated: [gtk_container_child_set_property: child_set_property].}
{.deprecated: [gtk_container_child_get_property: child_get_property].}
{.deprecated: [gtk_container_child_notify: child_notify].}
{.deprecated: [gtk_container_forall: forall].}
{.deprecated: [gtk_container_class_handle_border_width: handle_border_width].}
{.deprecated: [gtk_container_get_path_for_child: get_path_for_child].}
{.deprecated: [gtk_bin_get_type: bin_get_type].}
{.deprecated: [gtk_bin_get_child: get_child].}
{.deprecated: [gtk_window_get_type: window_get_type].}
{.deprecated: [gtk_window_new: window_new].}
{.deprecated: [gtk_window_set_title: set_title].}
{.deprecated: [gtk_window_get_title: get_title].}
{.deprecated: [gtk_window_set_wmclass: set_wmclass].}
{.deprecated: [gtk_window_set_role: set_role].}
{.deprecated: [gtk_window_set_startup_id: set_startup_id].}
{.deprecated: [gtk_window_get_role: get_role].}
{.deprecated: [gtk_window_add_accel_group: add_accel_group].}
{.deprecated: [gtk_window_remove_accel_group: remove_accel_group].}
{.deprecated: [gtk_window_set_position: set_position].}
{.deprecated: [gtk_window_activate_focus: activate_focus].}
{.deprecated: [gtk_window_set_focus: set_focus].}
{.deprecated: [gtk_window_get_focus: get_focus].}
{.deprecated: [gtk_window_set_default: set_default].}
{.deprecated: [gtk_window_get_default_widget: get_default_widget].}
{.deprecated: [gtk_window_activate_default: activate_default].}
{.deprecated: [gtk_window_set_transient_for: set_transient_for].}
{.deprecated: [gtk_window_get_transient_for: get_transient_for].}
{.deprecated: [gtk_window_set_attached_to: set_attached_to].}
{.deprecated: [gtk_window_get_attached_to: get_attached_to].}
{.deprecated: [gtk_window_set_opacity: set_opacity].}
{.deprecated: [gtk_window_get_opacity: get_opacity].}
{.deprecated: [gtk_window_set_type_hint: set_type_hint].}
{.deprecated: [gtk_window_get_type_hint: get_type_hint].}
{.deprecated: [gtk_window_set_skip_taskbar_hint: set_skip_taskbar_hint].}
{.deprecated: [gtk_window_get_skip_taskbar_hint: get_skip_taskbar_hint].}
{.deprecated: [gtk_window_set_skip_pager_hint: set_skip_pager_hint].}
{.deprecated: [gtk_window_get_skip_pager_hint: get_skip_pager_hint].}
{.deprecated: [gtk_window_set_urgency_hint: set_urgency_hint].}
{.deprecated: [gtk_window_get_urgency_hint: get_urgency_hint].}
{.deprecated: [gtk_window_set_accept_focus: set_accept_focus].}
{.deprecated: [gtk_window_get_accept_focus: get_accept_focus].}
{.deprecated: [gtk_window_set_focus_on_map: set_focus_on_map].}
{.deprecated: [gtk_window_get_focus_on_map: get_focus_on_map].}
{.deprecated: [gtk_window_set_destroy_with_parent: set_destroy_with_parent].}
{.deprecated: [gtk_window_get_destroy_with_parent: get_destroy_with_parent].}
{.deprecated: [gtk_window_set_hide_titlebar_when_maximized: set_hide_titlebar_when_maximized].}
{.deprecated: [gtk_window_get_hide_titlebar_when_maximized: get_hide_titlebar_when_maximized].}
{.deprecated: [gtk_window_set_mnemonics_visible: set_mnemonics_visible].}
{.deprecated: [gtk_window_get_mnemonics_visible: get_mnemonics_visible].}
{.deprecated: [gtk_window_set_focus_visible: set_focus_visible].}
{.deprecated: [gtk_window_get_focus_visible: get_focus_visible].}
{.deprecated: [gtk_window_set_resizable: set_resizable].}
{.deprecated: [gtk_window_get_resizable: get_resizable].}
{.deprecated: [gtk_window_set_gravity: set_gravity].}
{.deprecated: [gtk_window_get_gravity: get_gravity].}
{.deprecated: [gtk_window_set_geometry_hints: set_geometry_hints].}
{.deprecated: [gtk_window_set_screen: set_screen].}
{.deprecated: [gtk_window_get_screen: get_screen].}
{.deprecated: [gtk_window_is_active: is_active].}
{.deprecated: [gtk_window_has_toplevel_focus: has_toplevel_focus].}
{.deprecated: [gtk_window_set_decorated: set_decorated].}
{.deprecated: [gtk_window_get_decorated: get_decorated].}
{.deprecated: [gtk_window_set_deletable: set_deletable].}
{.deprecated: [gtk_window_get_deletable: get_deletable].}
{.deprecated: [gtk_window_set_icon_list: set_icon_list].}
{.deprecated: [gtk_window_get_icon_list: get_icon_list].}
{.deprecated: [gtk_window_set_icon: set_icon].}
{.deprecated: [gtk_window_set_icon_name: set_icon_name].}
{.deprecated: [gtk_window_set_icon_from_file: set_icon_from_file].}
{.deprecated: [gtk_window_get_icon: get_icon].}
{.deprecated: [gtk_window_get_icon_name: get_icon_name].}
{.deprecated: [gtk_window_set_default_icon_list: window_set_default_icon_list].}
{.deprecated: [gtk_window_get_default_icon_list: window_get_default_icon_list].}
{.deprecated: [gtk_window_set_default_icon: window_set_default_icon].}
{.deprecated: [gtk_window_set_default_icon_name: window_set_default_icon_name].}
{.deprecated: [gtk_window_get_default_icon_name: window_get_default_icon_name].}
{.deprecated: [gtk_window_set_default_icon_from_file: window_set_default_icon_from_file].}
{.deprecated: [gtk_window_set_auto_startup_notification: window_set_auto_startup_notification].}
{.deprecated: [gtk_window_set_modal: set_modal].}
{.deprecated: [gtk_window_get_modal: get_modal].}
{.deprecated: [gtk_window_list_toplevels: window_list_toplevels].}
{.deprecated: [gtk_window_set_has_user_ref_count: set_has_user_ref_count].}
{.deprecated: [gtk_window_add_mnemonic: add_mnemonic].}
{.deprecated: [gtk_window_remove_mnemonic: remove_mnemonic].}
{.deprecated: [gtk_window_mnemonic_activate: mnemonic_activate].}
{.deprecated: [gtk_window_set_mnemonic_modifier: set_mnemonic_modifier].}
{.deprecated: [gtk_window_get_mnemonic_modifier: get_mnemonic_modifier].}
{.deprecated: [gtk_window_activate_key: activate_key].}
{.deprecated: [gtk_window_propagate_key_event: propagate_key_event].}
{.deprecated: [gtk_window_present: present].}
{.deprecated: [gtk_window_present_with_time: present_with_time].}
{.deprecated: [gtk_window_iconify: iconify].}
{.deprecated: [gtk_window_deiconify: deiconify].}
{.deprecated: [gtk_window_stick: stick].}
{.deprecated: [gtk_window_unstick: unstick].}
{.deprecated: [gtk_window_maximize: maximize].}
{.deprecated: [gtk_window_unmaximize: unmaximize].}
{.deprecated: [gtk_window_fullscreen: fullscreen].}
{.deprecated: [gtk_window_unfullscreen: unfullscreen].}
{.deprecated: [gtk_window_close: close].}
{.deprecated: [gtk_window_set_keep_above: set_keep_above].}
{.deprecated: [gtk_window_set_keep_below: set_keep_below].}
{.deprecated: [gtk_window_begin_resize_drag: begin_resize_drag].}
{.deprecated: [gtk_window_begin_move_drag: begin_move_drag].}
{.deprecated: [gtk_window_set_default_size: set_default_size].}
{.deprecated: [gtk_window_get_default_size: get_default_size].}
{.deprecated: [gtk_window_resize: resize].}
{.deprecated: [gtk_window_get_size: get_size].}
{.deprecated: [gtk_window_move: move].}
{.deprecated: [gtk_window_get_position: get_position].}
{.deprecated: [gtk_window_parse_geometry: parse_geometry].}
{.deprecated: [gtk_window_set_default_geometry: set_default_geometry].}
{.deprecated: [gtk_window_resize_to_geometry: resize_to_geometry].}
{.deprecated: [gtk_window_get_group: get_group].}
{.deprecated: [gtk_window_has_group: has_group].}
{.deprecated: [gtk_window_reshow_with_initial_size: reshow_with_initial_size].}
{.deprecated: [gtk_window_get_window_type: get_window_type].}
{.deprecated: [gtk_window_get_application: get_application].}
{.deprecated: [gtk_window_set_application: set_application].}
{.deprecated: [gtk_window_set_has_resize_grip: set_has_resize_grip].}
{.deprecated: [gtk_window_get_has_resize_grip: get_has_resize_grip].}
{.deprecated: [gtk_window_resize_grip_is_visible: resize_grip_is_visible].}
{.deprecated: [gtk_window_get_resize_grip_area: get_resize_grip_area].}
{.deprecated: [gtk_window_set_titlebar: set_titlebar].}
{.deprecated: [gtk_window_get_titlebar: get_titlebar].}
{.deprecated: [gtk_window_is_maximized: is_maximized].}
{.deprecated: [gtk_window_set_interactive_debugging: window_set_interactive_debugging].}
{.deprecated: [gtk_dialog_get_type: dialog_get_type].}
{.deprecated: [gtk_dialog_new: dialog_new].}
{.deprecated: [gtk_dialog_new_with_buttons: dialog_new_with_buttons].}
{.deprecated: [gtk_dialog_add_action_widget: add_action_widget].}
{.deprecated: [gtk_dialog_add_button: add_button].}
{.deprecated: [gtk_dialog_add_buttons: add_buttons].}
{.deprecated: [gtk_dialog_set_response_sensitive: set_response_sensitive].}
{.deprecated: [gtk_dialog_set_default_response: set_default_response].}
{.deprecated: [gtk_dialog_get_widget_for_response: get_widget_for_response].}
{.deprecated: [gtk_dialog_get_response_for_widget: get_response_for_widget].}
{.deprecated: [gtk_alternative_dialog_button_order: alternative_dialog_button_order].}
{.deprecated: [gtk_dialog_set_alternative_button_order: set_alternative_button_order].}
{.deprecated: [gtk_dialog_set_alternative_button_order_from_array: set_alternative_button_order_from_array].}
{.deprecated: [gtk_dialog_response: response].}
{.deprecated: [gtk_dialog_run: run].}
{.deprecated: [gtk_dialog_get_action_area: get_action_area].}
{.deprecated: [gtk_dialog_get_content_area: get_content_area].}
{.deprecated: [gtk_dialog_get_header_bar: get_header_bar].}
{.deprecated: [gtk_about_dialog_get_type: about_dialog_get_type].}
{.deprecated: [gtk_about_dialog_new: about_dialog_new].}
{.deprecated: [gtk_show_about_dialog: show_about_dialog].}
{.deprecated: [gtk_about_dialog_get_program_name: get_program_name].}
{.deprecated: [gtk_about_dialog_set_program_name: set_program_name].}
{.deprecated: [gtk_about_dialog_get_version: get_version].}
{.deprecated: [gtk_about_dialog_set_version: set_version].}
{.deprecated: [gtk_about_dialog_get_copyright: get_copyright].}
{.deprecated: [gtk_about_dialog_set_copyright: set_copyright].}
{.deprecated: [gtk_about_dialog_get_comments: get_comments].}
{.deprecated: [gtk_about_dialog_set_comments: set_comments].}
{.deprecated: [gtk_about_dialog_get_license: get_license].}
{.deprecated: [gtk_about_dialog_set_license: set_license].}
{.deprecated: [gtk_about_dialog_set_license_type: set_license_type].}
{.deprecated: [gtk_about_dialog_get_license_type: get_license_type].}
{.deprecated: [gtk_about_dialog_get_wrap_license: get_wrap_license].}
{.deprecated: [gtk_about_dialog_set_wrap_license: set_wrap_license].}
{.deprecated: [gtk_about_dialog_get_website: get_website].}
{.deprecated: [gtk_about_dialog_set_website: set_website].}
{.deprecated: [gtk_about_dialog_get_website_label: get_website_label].}
{.deprecated: [gtk_about_dialog_set_website_label: set_website_label].}
{.deprecated: [gtk_about_dialog_get_authors: get_authors].}
{.deprecated: [gtk_about_dialog_set_authors: set_authors].}
{.deprecated: [gtk_about_dialog_get_documenters: get_documenters].}
{.deprecated: [gtk_about_dialog_set_documenters: set_documenters].}
{.deprecated: [gtk_about_dialog_get_artists: get_artists].}
{.deprecated: [gtk_about_dialog_set_artists: set_artists].}
{.deprecated: [gtk_about_dialog_get_translator_credits: get_translator_credits].}
{.deprecated: [gtk_about_dialog_set_translator_credits: set_translator_credits].}
{.deprecated: [gtk_about_dialog_get_logo: get_logo].}
{.deprecated: [gtk_about_dialog_set_logo: set_logo].}
{.deprecated: [gtk_about_dialog_get_logo_icon_name: get_logo_icon_name].}
{.deprecated: [gtk_about_dialog_set_logo_icon_name: set_logo_icon_name].}
{.deprecated: [gtk_about_dialog_add_credit_section: add_credit_section].}
{.deprecated: [gtk_misc_get_type: misc_get_type].}
{.deprecated: [gtk_misc_set_alignment: set_alignment].}
{.deprecated: [gtk_misc_get_alignment: get_alignment].}
{.deprecated: [gtk_misc_set_padding: set_padding].}
{.deprecated: [gtk_misc_get_padding: get_padding].}
{.deprecated: [gtk_menu_shell_get_type: menu_shell_get_type].}
{.deprecated: [gtk_menu_shell_append: append].}
{.deprecated: [gtk_menu_shell_prepend: prepend].}
{.deprecated: [gtk_menu_shell_insert: insert].}
{.deprecated: [gtk_menu_shell_deactivate: deactivate].}
{.deprecated: [gtk_menu_shell_select_item: select_item].}
{.deprecated: [gtk_menu_shell_deselect: deselect].}
{.deprecated: [gtk_menu_shell_activate_item: activate_item].}
{.deprecated: [gtk_menu_shell_select_first: select_first].}
{.deprecated: [gtk_menu_shell_cancel: cancel].}
{.deprecated: [gtk_menu_shell_get_take_focus: get_take_focus].}
{.deprecated: [gtk_menu_shell_set_take_focus: set_take_focus].}
{.deprecated: [gtk_menu_shell_get_selected_item: get_selected_item].}
{.deprecated: [gtk_menu_shell_get_parent_shell: get_parent_shell].}
{.deprecated: [gtk_menu_shell_bind_model: bind_model].}
{.deprecated: [gtk_menu_get_type: menu_get_type].}
{.deprecated: [gtk_menu_new: menu_new].}
{.deprecated: [gtk_menu_new_from_model: menu_new_from_model].}
{.deprecated: [gtk_menu_popup: popup].}
{.deprecated: [gtk_menu_popup_for_device: popup_for_device].}
{.deprecated: [gtk_menu_reposition: reposition].}
{.deprecated: [gtk_menu_popdown: popdown].}
{.deprecated: [gtk_menu_get_active: get_active].}
{.deprecated: [gtk_menu_set_active: set_active].}
{.deprecated: [gtk_menu_set_accel_group: set_accel_group].}
{.deprecated: [gtk_menu_get_accel_group: get_accel_group].}
{.deprecated: [gtk_menu_set_accel_path: set_accel_path].}
{.deprecated: [gtk_menu_get_accel_path: get_accel_path].}
{.deprecated: [gtk_menu_attach_to_widget: attach_to_widget].}
{.deprecated: [gtk_menu_detach: detach].}
{.deprecated: [gtk_menu_get_attach_widget: get_attach_widget].}
{.deprecated: [gtk_menu_set_tearoff_state: set_tearoff_state].}
{.deprecated: [gtk_menu_get_tearoff_state: get_tearoff_state].}
{.deprecated: [gtk_menu_set_title: set_title].}
{.deprecated: [gtk_menu_get_title: get_title].}
{.deprecated: [gtk_menu_reorder_child: reorder_child].}
{.deprecated: [gtk_menu_set_screen: set_screen].}
{.deprecated: [gtk_menu_attach: attach].}
{.deprecated: [gtk_menu_set_monitor: set_monitor].}
{.deprecated: [gtk_menu_get_monitor: get_monitor].}
{.deprecated: [gtk_menu_get_for_attach_widget: menu_get_for_attach_widget].}
{.deprecated: [gtk_menu_set_reserve_toggle_size: set_reserve_toggle_size].}
{.deprecated: [gtk_menu_get_reserve_toggle_size: get_reserve_toggle_size].}
{.deprecated: [gtk_label_get_type: label_get_type].}
{.deprecated: [gtk_label_new: label_new].}
{.deprecated: [gtk_label_new_with_mnemonic: label_new_with_mnemonic].}
{.deprecated: [gtk_label_set_text: set_text].}
{.deprecated: [gtk_label_get_text: get_text].}
{.deprecated: [gtk_label_set_attributes: set_attributes].}
{.deprecated: [gtk_label_get_attributes: get_attributes].}
{.deprecated: [gtk_label_set_label: set_label].}
{.deprecated: [gtk_label_get_label: get_label].}
{.deprecated: [gtk_label_set_markup: set_markup].}
{.deprecated: [gtk_label_set_use_markup: set_use_markup].}
{.deprecated: [gtk_label_get_use_markup: get_use_markup].}
{.deprecated: [gtk_label_set_use_underline: set_use_underline].}
{.deprecated: [gtk_label_get_use_underline: get_use_underline].}
{.deprecated: [gtk_label_set_markup_with_mnemonic: set_markup_with_mnemonic].}
{.deprecated: [gtk_label_get_mnemonic_keyval: get_mnemonic_keyval].}
{.deprecated: [gtk_label_set_mnemonic_widget: set_mnemonic_widget].}
{.deprecated: [gtk_label_get_mnemonic_widget: get_mnemonic_widget].}
{.deprecated: [gtk_label_set_text_with_mnemonic: set_text_with_mnemonic].}
{.deprecated: [gtk_label_set_justify: set_justify].}
{.deprecated: [gtk_label_get_justify: get_justify].}
{.deprecated: [gtk_label_set_ellipsize: set_ellipsize].}
{.deprecated: [gtk_label_get_ellipsize: get_ellipsize].}
{.deprecated: [gtk_label_set_width_chars: set_width_chars].}
{.deprecated: [gtk_label_get_width_chars: get_width_chars].}
{.deprecated: [gtk_label_set_max_width_chars: set_max_width_chars].}
{.deprecated: [gtk_label_get_max_width_chars: get_max_width_chars].}
{.deprecated: [gtk_label_set_lines: set_lines].}
{.deprecated: [gtk_label_get_lines: get_lines].}
{.deprecated: [gtk_label_set_pattern: set_pattern].}
{.deprecated: [gtk_label_set_line_wrap: set_line_wrap].}
{.deprecated: [gtk_label_get_line_wrap: get_line_wrap].}
{.deprecated: [gtk_label_set_line_wrap_mode: set_line_wrap_mode].}
{.deprecated: [gtk_label_get_line_wrap_mode: get_line_wrap_mode].}
{.deprecated: [gtk_label_set_selectable: set_selectable].}
{.deprecated: [gtk_label_get_selectable: get_selectable].}
{.deprecated: [gtk_label_set_angle: set_angle].}
{.deprecated: [gtk_label_get_angle: get_angle].}
{.deprecated: [gtk_label_select_region: select_region].}
{.deprecated: [gtk_label_get_selection_bounds: get_selection_bounds].}
{.deprecated: [gtk_label_get_layout: get_layout].}
{.deprecated: [gtk_label_get_layout_offsets: get_layout_offsets].}
{.deprecated: [gtk_label_set_single_line_mode: set_single_line_mode].}
{.deprecated: [gtk_label_get_single_line_mode: get_single_line_mode].}
{.deprecated: [gtk_label_get_current_uri: get_current_uri].}
{.deprecated: [gtk_label_set_track_visited_links: set_track_visited_links].}
{.deprecated: [gtk_label_get_track_visited_links: get_track_visited_links].}
{.deprecated: [gtk_label_set_xalign: set_xalign].}
{.deprecated: [gtk_label_get_xalign: get_xalign].}
{.deprecated: [gtk_label_set_yalign: set_yalign].}
{.deprecated: [gtk_label_get_yalign: get_yalign].}
{.deprecated: [gtk_accel_label_get_type: accel_label_get_type].}
{.deprecated: [gtk_accel_label_new: accel_label_new].}
{.deprecated: [gtk_accel_label_get_accel_widget: get_accel_widget].}
{.deprecated: [gtk_accel_label_get_accel_width: get_accel_width].}
{.deprecated: [gtk_accel_label_set_accel_widget: set_accel_widget].}
{.deprecated: [gtk_accel_label_set_accel_closure: set_accel_closure].}
{.deprecated: [gtk_accel_label_refetch: refetch].}
{.deprecated: [gtk_accel_label_set_accel: set_accel].}
{.deprecated: [gtk_accel_label_get_accel: get_accel].}
{.deprecated: [gtk_accel_map_add_entry: accel_map_add_entry].}
{.deprecated: [gtk_accel_map_lookup_entry: accel_map_lookup_entry].}
{.deprecated: [gtk_accel_map_change_entry: accel_map_change_entry].}
{.deprecated: [gtk_accel_map_load: accel_map_load].}
{.deprecated: [gtk_accel_map_save: accel_map_save].}
{.deprecated: [gtk_accel_map_foreach: accel_map_foreach].}
{.deprecated: [gtk_accel_map_load_fd: accel_map_load_fd].}
{.deprecated: [gtk_accel_map_load_scanner: accel_map_load_scanner].}
{.deprecated: [gtk_accel_map_save_fd: accel_map_save_fd].}
{.deprecated: [gtk_accel_map_lock_path: accel_map_lock_path].}
{.deprecated: [gtk_accel_map_unlock_path: accel_map_unlock_path].}
{.deprecated: [gtk_accel_map_add_filter: accel_map_add_filter].}
{.deprecated: [gtk_accel_map_foreach_unfiltered: accel_map_foreach_unfiltered].}
{.deprecated: [gtk_accel_map_get_type: accel_map_get_type].}
{.deprecated: [gtk_accel_map_get: accel_map_get].}
{.deprecated: [gtk_accessible_get_type: accessible_get_type].}
{.deprecated: [gtk_accessible_set_widget: set_widget].}
{.deprecated: [gtk_accessible_get_widget: get_widget].}
{.deprecated: [gtk_accessible_connect_widget_destroyed: connect_widget_destroyed].}
{.deprecated: [gtk_actionable_get_type: actionable_get_type].}
{.deprecated: [gtk_actionable_get_action_name: get_action_name].}
{.deprecated: [gtk_actionable_set_action_name: set_action_name].}
{.deprecated: [gtk_actionable_get_action_target_value: get_action_target_value].}
{.deprecated: [gtk_actionable_set_action_target_value: set_action_target_value].}
{.deprecated: [gtk_actionable_set_action_target: set_action_target].}
{.deprecated: [gtk_actionable_set_detailed_action_name: set_detailed_action_name].}
{.deprecated: [gtk_action_bar_get_type: action_bar_get_type].}
{.deprecated: [gtk_action_bar_new: action_bar_new].}
{.deprecated: [gtk_action_bar_get_center_widget: get_center_widget].}
{.deprecated: [gtk_action_bar_set_center_widget: set_center_widget].}
{.deprecated: [gtk_action_bar_pack_start: pack_start].}
{.deprecated: [gtk_action_bar_pack_end: pack_end].}
{.deprecated: [gtk_adjustment_get_type: adjustment_get_type].}
{.deprecated: [gtk_adjustment_new: adjustment_new].}
{.deprecated: [gtk_adjustment_changed: changed].}
{.deprecated: [gtk_adjustment_value_changed: value_changed].}
{.deprecated: [gtk_adjustment_clamp_page: clamp_page].}
{.deprecated: [gtk_adjustment_get_value: get_value].}
{.deprecated: [gtk_adjustment_set_value: set_value].}
{.deprecated: [gtk_adjustment_get_lower: get_lower].}
{.deprecated: [gtk_adjustment_set_lower: set_lower].}
{.deprecated: [gtk_adjustment_get_upper: get_upper].}
{.deprecated: [gtk_adjustment_set_upper: set_upper].}
{.deprecated: [gtk_adjustment_get_step_increment: get_step_increment].}
{.deprecated: [gtk_adjustment_set_step_increment: set_step_increment].}
{.deprecated: [gtk_adjustment_get_page_increment: get_page_increment].}
{.deprecated: [gtk_adjustment_set_page_increment: set_page_increment].}
{.deprecated: [gtk_adjustment_get_page_size: get_page_size].}
{.deprecated: [gtk_adjustment_set_page_size: set_page_size].}
{.deprecated: [gtk_adjustment_configure: configure].}
{.deprecated: [gtk_adjustment_get_minimum_increment: get_minimum_increment].}
{.deprecated: [gtk_app_chooser_get_type: app_chooser_get_type].}
{.deprecated: [gtk_app_chooser_get_app_info: get_app_info].}
{.deprecated: [gtk_app_chooser_get_content_type: get_content_type].}
{.deprecated: [gtk_app_chooser_refresh: refresh].}
{.deprecated: [gtk_app_chooser_dialog_get_type: app_chooser_dialog_get_type].}
{.deprecated: [gtk_app_chooser_dialog_new: app_chooser_dialog_new].}
{.deprecated: [gtk_app_chooser_dialog_new_for_content_type: app_chooser_dialog_new_for_content_type].}
{.deprecated: [gtk_app_chooser_dialog_get_widget: get_widget].}
{.deprecated: [gtk_app_chooser_dialog_set_heading: set_heading].}
{.deprecated: [gtk_app_chooser_dialog_get_heading: get_heading].}
{.deprecated: [gtk_box_get_type: box_get_type].}
{.deprecated: [gtk_box_new: box_new].}
{.deprecated: [gtk_box_pack_start: pack_start].}
{.deprecated: [gtk_box_pack_end: pack_end].}
{.deprecated: [gtk_box_set_homogeneous: set_homogeneous].}
{.deprecated: [gtk_box_get_homogeneous: get_homogeneous].}
{.deprecated: [gtk_box_set_spacing: set_spacing].}
{.deprecated: [gtk_box_get_spacing: get_spacing].}
{.deprecated: [gtk_box_set_baseline_position: set_baseline_position].}
{.deprecated: [gtk_box_get_baseline_position: get_baseline_position].}
{.deprecated: [gtk_box_reorder_child: reorder_child].}
{.deprecated: [gtk_box_query_child_packing: query_child_packing].}
{.deprecated: [gtk_box_set_child_packing: set_child_packing].}
{.deprecated: [gtk_box_set_center_widget: set_center_widget].}
{.deprecated: [gtk_box_get_center_widget: get_center_widget].}
{.deprecated: [gtk_app_chooser_widget_get_type: app_chooser_widget_get_type].}
{.deprecated: [gtk_app_chooser_widget_new: app_chooser_widget_new].}
{.deprecated: [gtk_app_chooser_widget_set_show_default: set_show_default].}
{.deprecated: [gtk_app_chooser_widget_get_show_default: get_show_default].}
{.deprecated: [gtk_app_chooser_widget_set_show_recommended: set_show_recommended].}
{.deprecated: [gtk_app_chooser_widget_get_show_recommended: get_show_recommended].}
{.deprecated: [gtk_app_chooser_widget_set_show_fallback: set_show_fallback].}
{.deprecated: [gtk_app_chooser_widget_get_show_fallback: get_show_fallback].}
{.deprecated: [gtk_app_chooser_widget_set_show_other: set_show_other].}
{.deprecated: [gtk_app_chooser_widget_get_show_other: get_show_other].}
{.deprecated: [gtk_app_chooser_widget_set_show_all: set_show_all].}
{.deprecated: [gtk_app_chooser_widget_get_show_all: get_show_all].}
{.deprecated: [gtk_app_chooser_widget_set_default_text: set_default_text].}
{.deprecated: [gtk_app_chooser_widget_get_default_text: get_default_text].}
{.deprecated: [gtk_tree_path_new: tree_path_new].}
{.deprecated: [gtk_tree_path_new_from_string: tree_path_new_from_string].}
{.deprecated: [gtk_tree_path_new_from_indices: tree_path_new_from_indices].}
{.deprecated: [gtk_tree_path_new_from_indicesv: tree_path_new_from_indicesv].}
{.deprecated: [gtk_tree_path_to_string: to_string].}
{.deprecated: [gtk_tree_path_new_first: tree_path_new_first].}
{.deprecated: [gtk_tree_path_append_index: append_index].}
{.deprecated: [gtk_tree_path_prepend_index: prepend_index].}
{.deprecated: [gtk_tree_path_get_depth: get_depth].}
{.deprecated: [gtk_tree_path_get_indices: get_indices].}
{.deprecated: [gtk_tree_path_get_indices_with_depth: get_indices_with_depth].}
{.deprecated: [gtk_tree_path_free: free].}
{.deprecated: [gtk_tree_path_copy: copy].}
{.deprecated: [gtk_tree_path_get_type: tree_path_get_type].}
{.deprecated: [gtk_tree_path_compare: compare].}
{.deprecated: [gtk_tree_path_next: next].}
{.deprecated: [gtk_tree_path_prev: prev].}
{.deprecated: [gtk_tree_path_up: up].}
{.deprecated: [gtk_tree_path_down: down].}
{.deprecated: [gtk_tree_path_is_ancestor: is_ancestor].}
{.deprecated: [gtk_tree_path_is_descendant: is_descendant].}
{.deprecated: [gtk_tree_row_reference_get_type: tree_row_reference_get_type].}
{.deprecated: [gtk_tree_row_reference_new: tree_row_reference_new].}
{.deprecated: [gtk_tree_row_reference_new_proxy: tree_row_reference_new_proxy].}
{.deprecated: [gtk_tree_row_reference_get_path: get_path].}
{.deprecated: [gtk_tree_row_reference_get_model: get_model].}
{.deprecated: [gtk_tree_row_reference_valid: valid].}
{.deprecated: [gtk_tree_row_reference_copy: copy].}
{.deprecated: [gtk_tree_row_reference_free: free].}
{.deprecated: [gtk_tree_row_reference_inserted: tree_row_reference_inserted].}
{.deprecated: [gtk_tree_row_reference_deleted: tree_row_reference_deleted].}
{.deprecated: [gtk_tree_row_reference_reordered: tree_row_reference_reordered].}
{.deprecated: [gtk_tree_iter_copy: copy].}
{.deprecated: [gtk_tree_iter_free: free].}
{.deprecated: [gtk_tree_iter_get_type: tree_iter_get_type].}
{.deprecated: [gtk_tree_model_get_type: tree_model_get_type].}
{.deprecated: [gtk_tree_model_get_flags: get_flags].}
{.deprecated: [gtk_tree_model_get_n_columns: get_n_columns].}
{.deprecated: [gtk_tree_model_get_column_type: get_column_type].}
{.deprecated: [gtk_tree_model_get_iter: get_iter].}
{.deprecated: [gtk_tree_model_get_iter_from_string: get_iter_from_string].}
{.deprecated: [gtk_tree_model_get_string_from_iter: get_string_from_iter].}
{.deprecated: [gtk_tree_model_get_iter_first: get_iter_first].}
{.deprecated: [gtk_tree_model_get_path: get_path].}
{.deprecated: [gtk_tree_model_get_value: get_value].}
{.deprecated: [gtk_tree_model_iter_previous: iter_previous].}
{.deprecated: [gtk_tree_model_iter_next: iter_next].}
{.deprecated: [gtk_tree_model_iter_children: iter_children].}
{.deprecated: [gtk_tree_model_iter_has_child: iter_has_child].}
{.deprecated: [gtk_tree_model_iter_n_children: iter_n_children].}
{.deprecated: [gtk_tree_model_iter_nth_child: iter_nth_child].}
{.deprecated: [gtk_tree_model_iter_parent: iter_parent].}
{.deprecated: [gtk_tree_model_ref_node: ref_node].}
{.deprecated: [gtk_tree_model_unref_node: unref_node].}
{.deprecated: [gtk_tree_model_get: get].}
{.deprecated: [gtk_tree_model_foreach: foreach].}
{.deprecated: [gtk_tree_model_row_changed: row_changed].}
{.deprecated: [gtk_tree_model_row_inserted: row_inserted].}
{.deprecated: [gtk_tree_model_row_has_child_toggled: row_has_child_toggled].}
{.deprecated: [gtk_tree_model_row_deleted: row_deleted].}
{.deprecated: [gtk_tree_model_rows_reordered: rows_reordered].}
{.deprecated: [gtk_tree_model_rows_reordered_with_length: rows_reordered_with_length].}
{.deprecated: [gtk_cell_editable_get_type: cell_editable_get_type].}
{.deprecated: [gtk_cell_editable_start_editing: start_editing].}
{.deprecated: [gtk_cell_editable_editing_done: editing_done].}
{.deprecated: [gtk_cell_editable_remove_widget: remove_widget].}
{.deprecated: [gtk_cell_renderer_get_type: cell_renderer_get_type].}
{.deprecated: [gtk_cell_renderer_get_request_mode: get_request_mode].}
{.deprecated: [gtk_cell_renderer_get_preferred_width: get_preferred_width].}
{.deprecated: [gtk_cell_renderer_get_preferred_height_for_width: get_preferred_height_for_width].}
{.deprecated: [gtk_cell_renderer_get_preferred_height: get_preferred_height].}
{.deprecated: [gtk_cell_renderer_get_preferred_width_for_height: get_preferred_width_for_height].}
{.deprecated: [gtk_cell_renderer_get_preferred_size: get_preferred_size].}
{.deprecated: [gtk_cell_renderer_get_aligned_area: get_aligned_area].}
{.deprecated: [gtk_cell_renderer_get_size: get_size].}
{.deprecated: [gtk_cell_renderer_render: render].}
{.deprecated: [gtk_cell_renderer_activate: activate].}
{.deprecated: [gtk_cell_renderer_start_editing: start_editing].}
{.deprecated: [gtk_cell_renderer_set_fixed_size: set_fixed_size].}
{.deprecated: [gtk_cell_renderer_get_fixed_size: get_fixed_size].}
{.deprecated: [gtk_cell_renderer_set_alignment: set_alignment].}
{.deprecated: [gtk_cell_renderer_get_alignment: get_alignment].}
{.deprecated: [gtk_cell_renderer_set_padding: set_padding].}
{.deprecated: [gtk_cell_renderer_get_padding: get_padding].}
{.deprecated: [gtk_cell_renderer_set_visible: set_visible].}
{.deprecated: [gtk_cell_renderer_get_visible: get_visible].}
{.deprecated: [gtk_cell_renderer_set_sensitive: set_sensitive].}
{.deprecated: [gtk_cell_renderer_get_sensitive: get_sensitive].}
{.deprecated: [gtk_cell_renderer_is_activatable: is_activatable].}
{.deprecated: [gtk_cell_renderer_stop_editing: stop_editing].}
{.deprecated: [gtk_cell_renderer_get_state: get_state].}
{.deprecated: [gtk_cell_renderer_class_set_accessible_type: set_accessible_type].}
{.deprecated: [gtk_tree_sortable_get_type: tree_sortable_get_type].}
{.deprecated: [gtk_tree_sortable_sort_column_changed: sort_column_changed].}
{.deprecated: [gtk_tree_sortable_get_sort_column_id: get_sort_column_id].}
{.deprecated: [gtk_tree_sortable_set_sort_column_id: set_sort_column_id].}
{.deprecated: [gtk_tree_sortable_set_sort_func: set_sort_func].}
{.deprecated: [gtk_tree_sortable_set_default_sort_func: set_default_sort_func].}
{.deprecated: [gtk_tree_sortable_has_default_sort_func: has_default_sort_func].}
{.deprecated: [gtk_cell_area_get_type: cell_area_get_type].}
{.deprecated: [gtk_cell_area_add: add].}
{.deprecated: [gtk_cell_area_remove: remove].}
{.deprecated: [gtk_cell_area_has_renderer: has_renderer].}
{.deprecated: [gtk_cell_area_foreach: foreach].}
{.deprecated: [gtk_cell_area_foreach_alloc: foreach_alloc].}
{.deprecated: [gtk_cell_area_event: event].}
{.deprecated: [gtk_cell_area_render: render].}
{.deprecated: [gtk_cell_area_get_cell_allocation: get_cell_allocation].}
{.deprecated: [gtk_cell_area_get_cell_at_position: get_cell_at_position].}
{.deprecated: [gtk_cell_area_create_context: create_context].}
{.deprecated: [gtk_cell_area_copy_context: copy_context].}
{.deprecated: [gtk_cell_area_get_request_mode: get_request_mode].}
{.deprecated: [gtk_cell_area_get_preferred_width: get_preferred_width].}
{.deprecated: [gtk_cell_area_get_preferred_height_for_width: get_preferred_height_for_width].}
{.deprecated: [gtk_cell_area_get_preferred_height: get_preferred_height].}
{.deprecated: [gtk_cell_area_get_preferred_width_for_height: get_preferred_width_for_height].}
{.deprecated: [gtk_cell_area_get_current_path_string: get_current_path_string].}
{.deprecated: [gtk_cell_area_apply_attributes: apply_attributes].}
{.deprecated: [gtk_cell_area_attribute_connect: attribute_connect].}
{.deprecated: [gtk_cell_area_attribute_disconnect: attribute_disconnect].}
{.deprecated: [gtk_cell_area_attribute_get_column: attribute_get_column].}
{.deprecated: [gtk_cell_area_class_install_cell_property: install_cell_property].}
{.deprecated: [gtk_cell_area_class_find_cell_property: find_cell_property].}
{.deprecated: [gtk_cell_area_class_list_cell_properties: list_cell_properties].}
{.deprecated: [gtk_cell_area_add_with_properties: add_with_properties].}
{.deprecated: [gtk_cell_area_cell_set: cell_set].}
{.deprecated: [gtk_cell_area_cell_get: cell_get].}
{.deprecated: [gtk_cell_area_cell_set_property: cell_set_property].}
{.deprecated: [gtk_cell_area_cell_get_property: cell_get_property].}
{.deprecated: [gtk_cell_area_is_activatable: is_activatable].}
{.deprecated: [gtk_cell_area_activate: activate].}
{.deprecated: [gtk_cell_area_focus: focus].}
{.deprecated: [gtk_cell_area_set_focus_cell: set_focus_cell].}
{.deprecated: [gtk_cell_area_get_focus_cell: get_focus_cell].}
{.deprecated: [gtk_cell_area_add_focus_sibling: add_focus_sibling].}
{.deprecated: [gtk_cell_area_remove_focus_sibling: remove_focus_sibling].}
{.deprecated: [gtk_cell_area_is_focus_sibling: is_focus_sibling].}
{.deprecated: [gtk_cell_area_get_focus_siblings: get_focus_siblings].}
{.deprecated: [gtk_cell_area_get_focus_from_sibling: get_focus_from_sibling].}
{.deprecated: [gtk_cell_area_get_edited_cell: get_edited_cell].}
{.deprecated: [gtk_cell_area_get_edit_widget: get_edit_widget].}
{.deprecated: [gtk_cell_area_activate_cell: activate_cell].}
{.deprecated: [gtk_cell_area_stop_editing: stop_editing].}
{.deprecated: [gtk_cell_area_inner_cell_area: inner_cell_area].}
{.deprecated: [gtk_cell_area_request_renderer: request_renderer].}
{.deprecated: [gtk_tree_view_column_get_type: tree_view_column_get_type].}
{.deprecated: [gtk_tree_view_column_new: tree_view_column_new].}
{.deprecated: [gtk_tree_view_column_new_with_area: tree_view_column_new_with_area].}
{.deprecated: [gtk_tree_view_column_new_with_attributes: tree_view_column_new_with_attributes].}
{.deprecated: [gtk_tree_view_column_pack_start: pack_start].}
{.deprecated: [gtk_tree_view_column_pack_end: pack_end].}
{.deprecated: [gtk_tree_view_column_clear: clear].}
{.deprecated: [gtk_tree_view_column_add_attribute: add_attribute].}
{.deprecated: [gtk_tree_view_column_set_attributes: set_attributes].}
{.deprecated: [gtk_tree_view_column_set_cell_data_func: set_cell_data_func].}
{.deprecated: [gtk_tree_view_column_clear_attributes: clear_attributes].}
{.deprecated: [gtk_tree_view_column_set_spacing: set_spacing].}
{.deprecated: [gtk_tree_view_column_get_spacing: get_spacing].}
{.deprecated: [gtk_tree_view_column_set_visible: set_visible].}
{.deprecated: [gtk_tree_view_column_get_visible: get_visible].}
{.deprecated: [gtk_tree_view_column_set_resizable: set_resizable].}
{.deprecated: [gtk_tree_view_column_get_resizable: get_resizable].}
{.deprecated: [gtk_tree_view_column_set_sizing: set_sizing].}
{.deprecated: [gtk_tree_view_column_get_sizing: get_sizing].}
{.deprecated: [gtk_tree_view_column_get_x_offset: get_x_offset].}
{.deprecated: [gtk_tree_view_column_get_width: get_width].}
{.deprecated: [gtk_tree_view_column_get_fixed_width: get_fixed_width].}
{.deprecated: [gtk_tree_view_column_set_fixed_width: set_fixed_width].}
{.deprecated: [gtk_tree_view_column_set_min_width: set_min_width].}
{.deprecated: [gtk_tree_view_column_get_min_width: get_min_width].}
{.deprecated: [gtk_tree_view_column_set_max_width: set_max_width].}
{.deprecated: [gtk_tree_view_column_get_max_width: get_max_width].}
{.deprecated: [gtk_tree_view_column_clicked: clicked].}
{.deprecated: [gtk_tree_view_column_set_title: set_title].}
{.deprecated: [gtk_tree_view_column_get_title: get_title].}
{.deprecated: [gtk_tree_view_column_set_expand: set_expand].}
{.deprecated: [gtk_tree_view_column_get_expand: get_expand].}
{.deprecated: [gtk_tree_view_column_set_clickable: set_clickable].}
{.deprecated: [gtk_tree_view_column_get_clickable: get_clickable].}
{.deprecated: [gtk_tree_view_column_set_widget: set_widget].}
{.deprecated: [gtk_tree_view_column_get_widget: get_widget].}
{.deprecated: [gtk_tree_view_column_set_alignment: set_alignment].}
{.deprecated: [gtk_tree_view_column_get_alignment: get_alignment].}
{.deprecated: [gtk_tree_view_column_set_reorderable: set_reorderable].}
{.deprecated: [gtk_tree_view_column_get_reorderable: get_reorderable].}
{.deprecated: [gtk_tree_view_column_set_sort_column_id: set_sort_column_id].}
{.deprecated: [gtk_tree_view_column_get_sort_column_id: get_sort_column_id].}
{.deprecated: [gtk_tree_view_column_set_sort_indicator: set_sort_indicator].}
{.deprecated: [gtk_tree_view_column_get_sort_indicator: get_sort_indicator].}
{.deprecated: [gtk_tree_view_column_set_sort_order: set_sort_order].}
{.deprecated: [gtk_tree_view_column_get_sort_order: get_sort_order].}
{.deprecated: [gtk_tree_view_column_cell_set_cell_data: cell_set_cell_data].}
{.deprecated: [gtk_tree_view_column_cell_get_size: cell_get_size].}
{.deprecated: [gtk_tree_view_column_cell_is_visible: cell_is_visible].}
{.deprecated: [gtk_tree_view_column_focus_cell: focus_cell].}
{.deprecated: [gtk_tree_view_column_cell_get_position: cell_get_position].}
{.deprecated: [gtk_tree_view_column_queue_resize: queue_resize].}
{.deprecated: [gtk_tree_view_column_get_tree_view: get_tree_view].}
{.deprecated: [gtk_tree_view_column_get_button: get_button].}
{.deprecated: [gtk_text_attributes_new: text_attributes_new].}
{.deprecated: [gtk_text_attributes_copy: copy].}
{.deprecated: [gtk_text_attributes_copy_values: copy_values].}
{.deprecated: [gtk_text_attributes_unref: unref].}
{.deprecated: [gtk_text_attributes_ref: `ref`].}
{.deprecated: [gtk_text_attributes_get_type: text_attributes_get_type].}
{.deprecated: [gtk_text_child_anchor_get_type: text_child_anchor_get_type].}
{.deprecated: [gtk_text_child_anchor_new: text_child_anchor_new].}
{.deprecated: [gtk_text_child_anchor_get_widgets: get_widgets].}
{.deprecated: [gtk_text_child_anchor_get_deleted: get_deleted].}
{.deprecated: [gtk_text_tag_get_type: text_tag_get_type].}
{.deprecated: [gtk_text_tag_new: text_tag_new].}
{.deprecated: [gtk_text_tag_get_priority: get_priority].}
{.deprecated: [gtk_text_tag_set_priority: set_priority].}
{.deprecated: [gtk_text_tag_event: event].}
{.deprecated: [gtk_text_iter_get_buffer: get_buffer].}
{.deprecated: [gtk_text_iter_copy: copy].}
{.deprecated: [gtk_text_iter_free: free].}
{.deprecated: [gtk_text_iter_assign: assign].}
{.deprecated: [gtk_text_iter_get_type: text_iter_get_type].}
{.deprecated: [gtk_text_iter_get_offset: get_offset].}
{.deprecated: [gtk_text_iter_get_line: get_line].}
{.deprecated: [gtk_text_iter_get_line_offset: get_line_offset].}
{.deprecated: [gtk_text_iter_get_line_index: get_line_index].}
{.deprecated: [gtk_text_iter_get_visible_line_offset: get_visible_line_offset].}
{.deprecated: [gtk_text_iter_get_visible_line_index: get_visible_line_index].}
{.deprecated: [gtk_text_iter_get_char: get_char].}
{.deprecated: [gtk_text_iter_get_slice: get_slice].}
{.deprecated: [gtk_text_iter_get_text: get_text].}
{.deprecated: [gtk_text_iter_get_visible_slice: get_visible_slice].}
{.deprecated: [gtk_text_iter_get_visible_text: get_visible_text].}
{.deprecated: [gtk_text_iter_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_text_iter_get_marks: get_marks].}
{.deprecated: [gtk_text_iter_get_child_anchor: get_child_anchor].}
{.deprecated: [gtk_text_iter_get_toggled_tags: get_toggled_tags].}
{.deprecated: [gtk_text_iter_begins_tag: begins_tag].}
{.deprecated: [gtk_text_iter_ends_tag: ends_tag].}
{.deprecated: [gtk_text_iter_toggles_tag: toggles_tag].}
{.deprecated: [gtk_text_iter_has_tag: has_tag].}
{.deprecated: [gtk_text_iter_get_tags: get_tags].}
{.deprecated: [gtk_text_iter_editable: editable].}
{.deprecated: [gtk_text_iter_can_insert: can_insert].}
{.deprecated: [gtk_text_iter_starts_word: starts_word].}
{.deprecated: [gtk_text_iter_ends_word: ends_word].}
{.deprecated: [gtk_text_iter_inside_word: inside_word].}
{.deprecated: [gtk_text_iter_starts_sentence: starts_sentence].}
{.deprecated: [gtk_text_iter_ends_sentence: ends_sentence].}
{.deprecated: [gtk_text_iter_inside_sentence: inside_sentence].}
{.deprecated: [gtk_text_iter_starts_line: starts_line].}
{.deprecated: [gtk_text_iter_ends_line: ends_line].}
{.deprecated: [gtk_text_iter_is_cursor_position: is_cursor_position].}
{.deprecated: [gtk_text_iter_get_chars_in_line: get_chars_in_line].}
{.deprecated: [gtk_text_iter_get_bytes_in_line: get_bytes_in_line].}
{.deprecated: [gtk_text_iter_get_attributes: get_attributes].}
{.deprecated: [gtk_text_iter_get_language: get_language].}
{.deprecated: [gtk_text_iter_is_end: is_end].}
{.deprecated: [gtk_text_iter_is_start: is_start].}
{.deprecated: [gtk_text_iter_forward_char: forward_char].}
{.deprecated: [gtk_text_iter_backward_char: backward_char].}
{.deprecated: [gtk_text_iter_forward_chars: forward_chars].}
{.deprecated: [gtk_text_iter_backward_chars: backward_chars].}
{.deprecated: [gtk_text_iter_forward_line: forward_line].}
{.deprecated: [gtk_text_iter_backward_line: backward_line].}
{.deprecated: [gtk_text_iter_forward_lines: forward_lines].}
{.deprecated: [gtk_text_iter_backward_lines: backward_lines].}
{.deprecated: [gtk_text_iter_forward_word_end: forward_word_end].}
{.deprecated: [gtk_text_iter_backward_word_start: backward_word_start].}
{.deprecated: [gtk_text_iter_forward_word_ends: forward_word_ends].}
{.deprecated: [gtk_text_iter_backward_word_starts: backward_word_starts].}
{.deprecated: [gtk_text_iter_forward_visible_line: forward_visible_line].}
{.deprecated: [gtk_text_iter_backward_visible_line: backward_visible_line].}
{.deprecated: [gtk_text_iter_forward_visible_lines: forward_visible_lines].}
{.deprecated: [gtk_text_iter_backward_visible_lines: backward_visible_lines].}
{.deprecated: [gtk_text_iter_forward_visible_word_end: forward_visible_word_end].}
{.deprecated: [gtk_text_iter_backward_visible_word_start: backward_visible_word_start].}
{.deprecated: [gtk_text_iter_forward_visible_word_ends: forward_visible_word_ends].}
{.deprecated: [gtk_text_iter_backward_visible_word_starts: backward_visible_word_starts].}
{.deprecated: [gtk_text_iter_forward_sentence_end: forward_sentence_end].}
{.deprecated: [gtk_text_iter_backward_sentence_start: backward_sentence_start].}
{.deprecated: [gtk_text_iter_forward_sentence_ends: forward_sentence_ends].}
{.deprecated: [gtk_text_iter_backward_sentence_starts: backward_sentence_starts].}
{.deprecated: [gtk_text_iter_forward_cursor_position: forward_cursor_position].}
{.deprecated: [gtk_text_iter_backward_cursor_position: backward_cursor_position].}
{.deprecated: [gtk_text_iter_forward_cursor_positions: forward_cursor_positions].}
{.deprecated: [gtk_text_iter_backward_cursor_positions: backward_cursor_positions].}
{.deprecated: [gtk_text_iter_forward_visible_cursor_position: forward_visible_cursor_position].}
{.deprecated: [gtk_text_iter_backward_visible_cursor_position: backward_visible_cursor_position].}
{.deprecated: [gtk_text_iter_forward_visible_cursor_positions: forward_visible_cursor_positions].}
{.deprecated: [gtk_text_iter_backward_visible_cursor_positions: backward_visible_cursor_positions].}
{.deprecated: [gtk_text_iter_set_offset: set_offset].}
{.deprecated: [gtk_text_iter_set_line: set_line].}
{.deprecated: [gtk_text_iter_set_line_offset: set_line_offset].}
{.deprecated: [gtk_text_iter_set_line_index: set_line_index].}
{.deprecated: [gtk_text_iter_forward_to_end: forward_to_end].}
{.deprecated: [gtk_text_iter_forward_to_line_end: forward_to_line_end].}
{.deprecated: [gtk_text_iter_set_visible_line_offset: set_visible_line_offset].}
{.deprecated: [gtk_text_iter_set_visible_line_index: set_visible_line_index].}
{.deprecated: [gtk_text_iter_forward_to_tag_toggle: forward_to_tag_toggle].}
{.deprecated: [gtk_text_iter_backward_to_tag_toggle: backward_to_tag_toggle].}
{.deprecated: [gtk_text_iter_forward_find_char: forward_find_char].}
{.deprecated: [gtk_text_iter_backward_find_char: backward_find_char].}
{.deprecated: [gtk_text_iter_forward_search: forward_search].}
{.deprecated: [gtk_text_iter_backward_search: backward_search].}
{.deprecated: [gtk_text_iter_equal: equal].}
{.deprecated: [gtk_text_iter_compare: compare].}
{.deprecated: [gtk_text_iter_in_range: in_range].}
{.deprecated: [gtk_text_iter_order: order].}
{.deprecated: [gtk_target_list_get_type: target_list_get_type].}
{.deprecated: [gtk_target_list_new: target_list_new].}
{.deprecated: [gtk_target_list_ref: `ref`].}
{.deprecated: [gtk_target_list_unref: unref].}
{.deprecated: [gtk_target_list_add: add].}
{.deprecated: [gtk_target_list_add_text_targets: add_text_targets].}
{.deprecated: [gtk_target_list_add_rich_text_targets: add_rich_text_targets].}
{.deprecated: [gtk_target_list_add_image_targets: add_image_targets].}
{.deprecated: [gtk_target_list_add_uri_targets: add_uri_targets].}
{.deprecated: [gtk_target_list_add_table: add_table].}
{.deprecated: [gtk_target_list_remove: remove].}
{.deprecated: [gtk_target_list_find: find].}
{.deprecated: [gtk_target_table_new_from_list: target_table_new_from_list].}
{.deprecated: [gtk_target_table_free: target_table_free].}
{.deprecated: [gtk_selection_owner_set: selection_owner_set].}
{.deprecated: [gtk_selection_owner_set_for_display: selection_owner_set_for_display].}
{.deprecated: [gtk_selection_add_target: selection_add_target].}
{.deprecated: [gtk_selection_add_targets: selection_add_targets].}
{.deprecated: [gtk_selection_clear_targets: selection_clear_targets].}
{.deprecated: [gtk_selection_convert: selection_convert].}
{.deprecated: [gtk_selection_remove_all: selection_remove_all].}
{.deprecated: [gtk_selection_data_get_selection: get_selection].}
{.deprecated: [gtk_selection_data_get_target: get_target].}
{.deprecated: [gtk_selection_data_get_data_type: get_data_type].}
{.deprecated: [gtk_selection_data_get_format: get_format].}
{.deprecated: [gtk_selection_data_get_data: get_data].}
{.deprecated: [gtk_selection_data_get_length: get_length].}
{.deprecated: [gtk_selection_data_get_data_with_length: get_data_with_length].}
{.deprecated: [gtk_selection_data_get_display: get_display].}
{.deprecated: [gtk_selection_data_set: set].}
{.deprecated: [gtk_selection_data_set_text: set_text].}
{.deprecated: [gtk_selection_data_get_text: get_text].}
{.deprecated: [gtk_selection_data_set_pixbuf: set_pixbuf].}
{.deprecated: [gtk_selection_data_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_selection_data_set_uris: set_uris].}
{.deprecated: [gtk_selection_data_get_uris: get_uris].}
{.deprecated: [gtk_selection_data_get_targets: get_targets].}
{.deprecated: [gtk_selection_data_targets_include_text: targets_include_text].}
{.deprecated: [gtk_selection_data_targets_include_rich_text: targets_include_rich_text].}
{.deprecated: [gtk_selection_data_targets_include_image: targets_include_image].}
{.deprecated: [gtk_selection_data_targets_include_uri: targets_include_uri].}
{.deprecated: [gtk_targets_include_text: targets_include_text].}
{.deprecated: [gtk_targets_include_rich_text: targets_include_rich_text].}
{.deprecated: [gtk_targets_include_image: targets_include_image].}
{.deprecated: [gtk_targets_include_uri: targets_include_uri].}
{.deprecated: [gtk_selection_data_get_type: selection_data_get_type].}
{.deprecated: [gtk_selection_data_copy: copy].}
{.deprecated: [gtk_selection_data_free: free].}
{.deprecated: [gtk_target_entry_get_type: target_entry_get_type].}
{.deprecated: [gtk_target_entry_new: target_entry_new].}
{.deprecated: [gtk_target_entry_copy: copy].}
{.deprecated: [gtk_target_entry_free: free].}
{.deprecated: [gtk_drag_get_data: drag_get_data].}
{.deprecated: [gtk_drag_finish: drag_finish].}
{.deprecated: [gtk_drag_get_source_widget: drag_get_source_widget].}
{.deprecated: [gtk_drag_highlight: drag_highlight].}
{.deprecated: [gtk_drag_unhighlight: drag_unhighlight].}
{.deprecated: [gtk_drag_dest_set: drag_dest_set].}
{.deprecated: [gtk_drag_dest_set_proxy: drag_dest_set_proxy].}
{.deprecated: [gtk_drag_dest_unset: drag_dest_unset].}
{.deprecated: [gtk_drag_dest_find_target: drag_dest_find_target].}
{.deprecated: [gtk_drag_dest_get_target_list: drag_dest_get_target_list].}
{.deprecated: [gtk_drag_dest_set_target_list: drag_dest_set_target_list].}
{.deprecated: [gtk_drag_dest_add_text_targets: drag_dest_add_text_targets].}
{.deprecated: [gtk_drag_dest_add_image_targets: drag_dest_add_image_targets].}
{.deprecated: [gtk_drag_dest_add_uri_targets: drag_dest_add_uri_targets].}
{.deprecated: [gtk_drag_dest_set_track_motion: drag_dest_set_track_motion].}
{.deprecated: [gtk_drag_dest_get_track_motion: drag_dest_get_track_motion].}
{.deprecated: [gtk_drag_source_set: drag_source_set].}
{.deprecated: [gtk_drag_source_unset: drag_source_unset].}
{.deprecated: [gtk_drag_source_get_target_list: drag_source_get_target_list].}
{.deprecated: [gtk_drag_source_set_target_list: drag_source_set_target_list].}
{.deprecated: [gtk_drag_source_add_text_targets: drag_source_add_text_targets].}
{.deprecated: [gtk_drag_source_add_image_targets: drag_source_add_image_targets].}
{.deprecated: [gtk_drag_source_add_uri_targets: drag_source_add_uri_targets].}
{.deprecated: [gtk_drag_source_set_icon_pixbuf: drag_source_set_icon_pixbuf].}
{.deprecated: [gtk_drag_source_set_icon_stock: drag_source_set_icon_stock].}
{.deprecated: [gtk_drag_source_set_icon_name: drag_source_set_icon_name].}
{.deprecated: [gtk_drag_source_set_icon_gicon: drag_source_set_icon_gicon].}
{.deprecated: [gtk_drag_begin_with_coordinates: drag_begin_with_coordinates].}
{.deprecated: [gtk_drag_begin: drag_begin].}
{.deprecated: [gtk_drag_cancel: drag_cancel].}
{.deprecated: [gtk_drag_set_icon_widget: drag_set_icon_widget].}
{.deprecated: [gtk_drag_set_icon_pixbuf: drag_set_icon_pixbuf].}
{.deprecated: [gtk_drag_set_icon_stock: drag_set_icon_stock].}
{.deprecated: [gtk_drag_set_icon_surface: drag_set_icon_surface].}
{.deprecated: [gtk_drag_set_icon_name: drag_set_icon_name].}
{.deprecated: [gtk_drag_set_icon_gicon: drag_set_icon_gicon].}
{.deprecated: [gtk_drag_set_icon_default: drag_set_icon_default].}
{.deprecated: [gtk_drag_check_threshold: drag_check_threshold].}
{.deprecated: [gtk_editable_get_type: editable_get_type].}
{.deprecated: [gtk_editable_select_region: select_region].}
{.deprecated: [gtk_editable_get_selection_bounds: get_selection_bounds].}
{.deprecated: [gtk_editable_insert_text: insert_text].}
{.deprecated: [gtk_editable_delete_text: delete_text].}
{.deprecated: [gtk_editable_get_chars: get_chars].}
{.deprecated: [gtk_editable_cut_clipboard: cut_clipboard].}
{.deprecated: [gtk_editable_copy_clipboard: copy_clipboard].}
{.deprecated: [gtk_editable_paste_clipboard: paste_clipboard].}
{.deprecated: [gtk_editable_delete_selection: delete_selection].}
{.deprecated: [gtk_editable_set_position: set_position].}
{.deprecated: [gtk_editable_get_position: get_position].}
{.deprecated: [gtk_editable_set_editable: set_editable].}
{.deprecated: [gtk_editable_get_editable: get_editable].}
{.deprecated: [gtk_im_context_get_type: im_context_get_type].}
{.deprecated: [gtk_im_context_set_client_window: set_client_window].}
{.deprecated: [gtk_im_context_get_preedit_string: get_preedit_string].}
{.deprecated: [gtk_im_context_filter_keypress: filter_keypress].}
{.deprecated: [gtk_im_context_focus_in: focus_in].}
{.deprecated: [gtk_im_context_focus_out: focus_out].}
{.deprecated: [gtk_im_context_reset: reset].}
{.deprecated: [gtk_im_context_set_cursor_location: set_cursor_location].}
{.deprecated: [gtk_im_context_set_use_preedit: set_use_preedit].}
{.deprecated: [gtk_im_context_set_surrounding: set_surrounding].}
{.deprecated: [gtk_im_context_get_surrounding: get_surrounding].}
{.deprecated: [gtk_im_context_delete_surrounding: delete_surrounding].}
{.deprecated: [gtk_entry_buffer_get_type: entry_buffer_get_type].}
{.deprecated: [gtk_entry_buffer_new: entry_buffer_new].}
{.deprecated: [gtk_entry_buffer_get_bytes: get_bytes].}
{.deprecated: [gtk_entry_buffer_get_length: get_length].}
{.deprecated: [gtk_entry_buffer_get_text: get_text].}
{.deprecated: [gtk_entry_buffer_set_text: set_text].}
{.deprecated: [gtk_entry_buffer_set_max_length: set_max_length].}
{.deprecated: [gtk_entry_buffer_get_max_length: get_max_length].}
{.deprecated: [gtk_entry_buffer_insert_text: insert_text].}
{.deprecated: [gtk_entry_buffer_delete_text: delete_text].}
{.deprecated: [gtk_entry_buffer_emit_inserted_text: emit_inserted_text].}
{.deprecated: [gtk_entry_buffer_emit_deleted_text: emit_deleted_text].}
{.deprecated: [gtk_list_store_get_type: list_store_get_type].}
{.deprecated: [gtk_list_store_new: list_store_new].}
{.deprecated: [gtk_list_store_newv: list_store_newv].}
{.deprecated: [gtk_list_store_set_column_types: set_column_types].}
{.deprecated: [gtk_list_store_set_value: set_value].}
{.deprecated: [gtk_list_store_set: set].}
{.deprecated: [gtk_list_store_set_valuesv: set_valuesv].}
{.deprecated: [gtk_list_store_remove: remove].}
{.deprecated: [gtk_list_store_insert: insert].}
{.deprecated: [gtk_list_store_insert_before: insert_before].}
{.deprecated: [gtk_list_store_insert_after: insert_after].}
{.deprecated: [gtk_list_store_insert_with_values: insert_with_values].}
{.deprecated: [gtk_list_store_insert_with_valuesv: insert_with_valuesv].}
{.deprecated: [gtk_list_store_prepend: prepend].}
{.deprecated: [gtk_list_store_append: append].}
{.deprecated: [gtk_list_store_clear: clear].}
{.deprecated: [gtk_list_store_iter_is_valid: iter_is_valid].}
{.deprecated: [gtk_list_store_reorder: reorder].}
{.deprecated: [gtk_list_store_swap: swap].}
{.deprecated: [gtk_list_store_move_after: move_after].}
{.deprecated: [gtk_list_store_move_before: move_before].}
{.deprecated: [gtk_tree_model_filter_get_type: tree_model_filter_get_type].}
{.deprecated: [gtk_tree_model_filter_new: filter_new].}
{.deprecated: [gtk_tree_model_filter_set_visible_func: set_visible_func].}
{.deprecated: [gtk_tree_model_filter_set_modify_func: set_modify_func].}
{.deprecated: [gtk_tree_model_filter_set_visible_column: set_visible_column].}
{.deprecated: [gtk_tree_model_filter_get_model: get_model].}
{.deprecated: [gtk_tree_model_filter_convert_child_iter_to_iter: convert_child_iter_to_iter].}
{.deprecated: [gtk_tree_model_filter_convert_iter_to_child_iter: convert_iter_to_child_iter].}
{.deprecated: [gtk_tree_model_filter_convert_child_path_to_path: convert_child_path_to_path].}
{.deprecated: [gtk_tree_model_filter_convert_path_to_child_path: convert_path_to_child_path].}
{.deprecated: [gtk_tree_model_filter_refilter: refilter].}
{.deprecated: [gtk_tree_model_filter_clear_cache: clear_cache].}
{.deprecated: [gtk_entry_completion_get_type: entry_completion_get_type].}
{.deprecated: [gtk_entry_completion_new: entry_completion_new].}
{.deprecated: [gtk_entry_completion_new_with_area: entry_completion_new_with_area].}
{.deprecated: [gtk_entry_completion_get_entry: get_entry].}
{.deprecated: [gtk_entry_completion_set_model: set_model].}
{.deprecated: [gtk_entry_completion_get_model: get_model].}
{.deprecated: [gtk_entry_completion_set_match_func: set_match_func].}
{.deprecated: [gtk_entry_completion_set_minimum_key_length: set_minimum_key_length].}
{.deprecated: [gtk_entry_completion_get_minimum_key_length: get_minimum_key_length].}
{.deprecated: [gtk_entry_completion_compute_prefix: compute_prefix].}
{.deprecated: [gtk_entry_completion_complete: complete].}
{.deprecated: [gtk_entry_completion_insert_prefix: insert_prefix].}
{.deprecated: [gtk_entry_completion_insert_action_text: insert_action_text].}
{.deprecated: [gtk_entry_completion_insert_action_markup: insert_action_markup].}
{.deprecated: [gtk_entry_completion_delete_action: delete_action].}
{.deprecated: [gtk_entry_completion_set_inline_completion: set_inline_completion].}
{.deprecated: [gtk_entry_completion_get_inline_completion: get_inline_completion].}
{.deprecated: [gtk_entry_completion_set_inline_selection: set_inline_selection].}
{.deprecated: [gtk_entry_completion_get_inline_selection: get_inline_selection].}
{.deprecated: [gtk_entry_completion_set_popup_completion: set_popup_completion].}
{.deprecated: [gtk_entry_completion_get_popup_completion: get_popup_completion].}
{.deprecated: [gtk_entry_completion_set_popup_set_width: set_popup_set_width].}
{.deprecated: [gtk_entry_completion_get_popup_set_width: get_popup_set_width].}
{.deprecated: [gtk_entry_completion_set_popup_single_match: set_popup_single_match].}
{.deprecated: [gtk_entry_completion_get_popup_single_match: get_popup_single_match].}
{.deprecated: [gtk_entry_completion_get_completion_prefix: get_completion_prefix].}
{.deprecated: [gtk_entry_completion_set_text_column: set_text_column].}
{.deprecated: [gtk_entry_completion_get_text_column: get_text_column].}
{.deprecated: [gtk_image_get_type: image_get_type].}
{.deprecated: [gtk_image_new: image_new].}
{.deprecated: [gtk_image_new_from_file: image_new_from_file].}
{.deprecated: [gtk_image_new_from_resource: image_new_from_resource].}
{.deprecated: [gtk_image_new_from_pixbuf: image_new_from_pixbuf].}
{.deprecated: [gtk_image_new_from_stock: image_new_from_stock].}
{.deprecated: [gtk_image_new_from_icon_set: image_new_from_icon_set].}
{.deprecated: [gtk_image_new_from_animation: image_new_from_animation].}
{.deprecated: [gtk_image_new_from_icon_name: image_new_from_icon_name].}
{.deprecated: [gtk_image_new_from_gicon: image_new_from_gicon].}
{.deprecated: [gtk_image_new_from_surface: image_new_from_surface].}
{.deprecated: [gtk_image_clear: clear].}
{.deprecated: [gtk_image_set_from_file: set_from_file].}
{.deprecated: [gtk_image_set_from_resource: set_from_resource].}
{.deprecated: [gtk_image_set_from_pixbuf: set_from_pixbuf].}
{.deprecated: [gtk_image_set_from_stock: set_from_stock].}
{.deprecated: [gtk_image_set_from_icon_set: set_from_icon_set].}
{.deprecated: [gtk_image_set_from_animation: set_from_animation].}
{.deprecated: [gtk_image_set_from_icon_name: set_from_icon_name].}
{.deprecated: [gtk_image_set_from_gicon: set_from_gicon].}
{.deprecated: [gtk_image_set_from_surface: set_from_surface].}
{.deprecated: [gtk_image_set_pixel_size: set_pixel_size].}
{.deprecated: [gtk_image_get_storage_type: get_storage_type].}
{.deprecated: [gtk_image_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_image_get_stock: get_stock].}
{.deprecated: [gtk_image_get_icon_set: get_icon_set].}
{.deprecated: [gtk_image_get_animation: get_animation].}
{.deprecated: [gtk_image_get_icon_name: get_icon_name].}
{.deprecated: [gtk_image_get_gicon: get_gicon].}
{.deprecated: [gtk_image_get_pixel_size: get_pixel_size].}
{.deprecated: [gtk_entry_get_type: entry_get_type].}
{.deprecated: [gtk_entry_new: entry_new].}
{.deprecated: [gtk_entry_new_with_buffer: entry_new_with_buffer].}
{.deprecated: [gtk_entry_get_buffer: get_buffer].}
{.deprecated: [gtk_entry_set_buffer: set_buffer].}
{.deprecated: [gtk_entry_get_text_area: get_text_area].}
{.deprecated: [gtk_entry_set_visibility: set_visibility].}
{.deprecated: [gtk_entry_get_visibility: get_visibility].}
{.deprecated: [gtk_entry_set_invisible_char: set_invisible_char].}
{.deprecated: [gtk_entry_get_invisible_char: get_invisible_char].}
{.deprecated: [gtk_entry_unset_invisible_char: unset_invisible_char].}
{.deprecated: [gtk_entry_set_has_frame: set_has_frame].}
{.deprecated: [gtk_entry_get_has_frame: get_has_frame].}
{.deprecated: [gtk_entry_set_inner_border: set_inner_border].}
{.deprecated: [gtk_entry_get_inner_border: get_inner_border].}
{.deprecated: [gtk_entry_set_overwrite_mode: set_overwrite_mode].}
{.deprecated: [gtk_entry_get_overwrite_mode: get_overwrite_mode].}
{.deprecated: [gtk_entry_set_max_length: set_max_length].}
{.deprecated: [gtk_entry_get_max_length: get_max_length].}
{.deprecated: [gtk_entry_get_text_length: get_text_length].}
{.deprecated: [gtk_entry_set_activates_default: set_activates_default].}
{.deprecated: [gtk_entry_get_activates_default: get_activates_default].}
{.deprecated: [gtk_entry_set_width_chars: set_width_chars].}
{.deprecated: [gtk_entry_get_width_chars: get_width_chars].}
{.deprecated: [gtk_entry_set_max_width_chars: set_max_width_chars].}
{.deprecated: [gtk_entry_get_max_width_chars: get_max_width_chars].}
{.deprecated: [gtk_entry_set_text: set_text].}
{.deprecated: [gtk_entry_get_text: get_text].}
{.deprecated: [gtk_entry_get_layout: get_layout].}
{.deprecated: [gtk_entry_get_layout_offsets: get_layout_offsets].}
{.deprecated: [gtk_entry_set_alignment: set_alignment].}
{.deprecated: [gtk_entry_get_alignment: get_alignment].}
{.deprecated: [gtk_entry_set_completion: set_completion].}
{.deprecated: [gtk_entry_get_completion: get_completion].}
{.deprecated: [gtk_entry_layout_index_to_text_index: layout_index_to_text_index].}
{.deprecated: [gtk_entry_text_index_to_layout_index: text_index_to_layout_index].}
{.deprecated: [gtk_entry_set_cursor_hadjustment: set_cursor_hadjustment].}
{.deprecated: [gtk_entry_get_cursor_hadjustment: get_cursor_hadjustment].}
{.deprecated: [gtk_entry_set_progress_fraction: set_progress_fraction].}
{.deprecated: [gtk_entry_get_progress_fraction: get_progress_fraction].}
{.deprecated: [gtk_entry_set_progress_pulse_step: set_progress_pulse_step].}
{.deprecated: [gtk_entry_get_progress_pulse_step: get_progress_pulse_step].}
{.deprecated: [gtk_entry_progress_pulse: progress_pulse].}
{.deprecated: [gtk_entry_get_placeholder_text: get_placeholder_text].}
{.deprecated: [gtk_entry_set_placeholder_text: set_placeholder_text].}
{.deprecated: [gtk_entry_set_icon_from_pixbuf: set_icon_from_pixbuf].}
{.deprecated: [gtk_entry_set_icon_from_stock: set_icon_from_stock].}
{.deprecated: [gtk_entry_set_icon_from_icon_name: set_icon_from_icon_name].}
{.deprecated: [gtk_entry_set_icon_from_gicon: set_icon_from_gicon].}
{.deprecated: [gtk_entry_get_icon_storage_type: get_icon_storage_type].}
{.deprecated: [gtk_entry_get_icon_pixbuf: get_icon_pixbuf].}
{.deprecated: [gtk_entry_get_icon_stock: get_icon_stock].}
{.deprecated: [gtk_entry_get_icon_name: get_icon_name].}
{.deprecated: [gtk_entry_get_icon_gicon: get_icon_gicon].}
{.deprecated: [gtk_entry_set_icon_activatable: set_icon_activatable].}
{.deprecated: [gtk_entry_get_icon_activatable: get_icon_activatable].}
{.deprecated: [gtk_entry_set_icon_sensitive: set_icon_sensitive].}
{.deprecated: [gtk_entry_get_icon_sensitive: get_icon_sensitive].}
{.deprecated: [gtk_entry_get_icon_at_pos: get_icon_at_pos].}
{.deprecated: [gtk_entry_set_icon_tooltip_text: set_icon_tooltip_text].}
{.deprecated: [gtk_entry_get_icon_tooltip_text: get_icon_tooltip_text].}
{.deprecated: [gtk_entry_set_icon_tooltip_markup: set_icon_tooltip_markup].}
{.deprecated: [gtk_entry_get_icon_tooltip_markup: get_icon_tooltip_markup].}
{.deprecated: [gtk_entry_set_icon_drag_source: set_icon_drag_source].}
{.deprecated: [gtk_entry_get_current_icon_drag_source: get_current_icon_drag_source].}
{.deprecated: [gtk_entry_get_icon_area: get_icon_area].}
{.deprecated: [gtk_entry_im_context_filter_keypress: im_context_filter_keypress].}
{.deprecated: [gtk_entry_reset_im_context: reset_im_context].}
{.deprecated: [gtk_entry_set_input_purpose: set_input_purpose].}
{.deprecated: [gtk_entry_get_input_purpose: get_input_purpose].}
{.deprecated: [gtk_entry_set_input_hints: set_input_hints].}
{.deprecated: [gtk_entry_get_input_hints: get_input_hints].}
{.deprecated: [gtk_entry_set_attributes: set_attributes].}
{.deprecated: [gtk_entry_get_attributes: get_attributes].}
{.deprecated: [gtk_entry_set_tabs: set_tabs].}
{.deprecated: [gtk_entry_get_tabs: get_tabs].}
{.deprecated: [gtk_entry_grab_focus_without_selecting: grab_focus_without_selecting].}
{.deprecated: [gtk_tree_view_get_type: tree_view_get_type].}
{.deprecated: [gtk_tree_view_new: tree_view_new].}
{.deprecated: [gtk_tree_view_new_with_model: tree_view_new_with_model].}
{.deprecated: [gtk_tree_view_get_model: get_model].}
{.deprecated: [gtk_tree_view_set_model: set_model].}
{.deprecated: [gtk_tree_view_get_selection: get_selection].}
{.deprecated: [gtk_tree_view_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_tree_view_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_tree_view_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_tree_view_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_tree_view_get_headers_visible: get_headers_visible].}
{.deprecated: [gtk_tree_view_set_headers_visible: set_headers_visible].}
{.deprecated: [gtk_tree_view_columns_autosize: columns_autosize].}
{.deprecated: [gtk_tree_view_get_headers_clickable: get_headers_clickable].}
{.deprecated: [gtk_tree_view_set_headers_clickable: set_headers_clickable].}
{.deprecated: [gtk_tree_view_set_rules_hint: set_rules_hint].}
{.deprecated: [gtk_tree_view_get_rules_hint: get_rules_hint].}
{.deprecated: [gtk_tree_view_get_activate_on_single_click: get_activate_on_single_click].}
{.deprecated: [gtk_tree_view_set_activate_on_single_click: set_activate_on_single_click].}
{.deprecated: [gtk_tree_view_append_column: append_column].}
{.deprecated: [gtk_tree_view_remove_column: remove_column].}
{.deprecated: [gtk_tree_view_insert_column: insert_column].}
{.deprecated: [gtk_tree_view_insert_column_with_attributes: insert_column_with_attributes].}
{.deprecated: [gtk_tree_view_insert_column_with_data_func: insert_column_with_data_func].}
{.deprecated: [gtk_tree_view_get_n_columns: get_n_columns].}
{.deprecated: [gtk_tree_view_get_column: get_column].}
{.deprecated: [gtk_tree_view_get_columns: get_columns].}
{.deprecated: [gtk_tree_view_move_column_after: move_column_after].}
{.deprecated: [gtk_tree_view_set_expander_column: set_expander_column].}
{.deprecated: [gtk_tree_view_get_expander_column: get_expander_column].}
{.deprecated: [gtk_tree_view_set_column_drag_function: set_column_drag_function].}
{.deprecated: [gtk_tree_view_scroll_to_point: scroll_to_point].}
{.deprecated: [gtk_tree_view_scroll_to_cell: scroll_to_cell].}
{.deprecated: [gtk_tree_view_row_activated: row_activated].}
{.deprecated: [gtk_tree_view_expand_all: expand_all].}
{.deprecated: [gtk_tree_view_collapse_all: collapse_all].}
{.deprecated: [gtk_tree_view_expand_to_path: expand_to_path].}
{.deprecated: [gtk_tree_view_expand_row: expand_row].}
{.deprecated: [gtk_tree_view_collapse_row: collapse_row].}
{.deprecated: [gtk_tree_view_map_expanded_rows: map_expanded_rows].}
{.deprecated: [gtk_tree_view_row_expanded: row_expanded].}
{.deprecated: [gtk_tree_view_set_reorderable: set_reorderable].}
{.deprecated: [gtk_tree_view_get_reorderable: get_reorderable].}
{.deprecated: [gtk_tree_view_set_cursor: set_cursor].}
{.deprecated: [gtk_tree_view_set_cursor_on_cell: set_cursor_on_cell].}
{.deprecated: [gtk_tree_view_get_cursor: get_cursor].}
{.deprecated: [gtk_tree_view_get_bin_window: get_bin_window].}
{.deprecated: [gtk_tree_view_get_path_at_pos: get_path_at_pos].}
{.deprecated: [gtk_tree_view_get_cell_area: get_cell_area].}
{.deprecated: [gtk_tree_view_get_background_area: get_background_area].}
{.deprecated: [gtk_tree_view_get_visible_rect: get_visible_rect].}
{.deprecated: [gtk_tree_view_get_visible_range: get_visible_range].}
{.deprecated: [gtk_tree_view_is_blank_at_pos: is_blank_at_pos].}
{.deprecated: [gtk_tree_view_enable_model_drag_source: enable_model_drag_source].}
{.deprecated: [gtk_tree_view_enable_model_drag_dest: enable_model_drag_dest].}
{.deprecated: [gtk_tree_view_unset_rows_drag_source: unset_rows_drag_source].}
{.deprecated: [gtk_tree_view_unset_rows_drag_dest: unset_rows_drag_dest].}
{.deprecated: [gtk_tree_view_set_drag_dest_row: set_drag_dest_row].}
{.deprecated: [gtk_tree_view_get_drag_dest_row: get_drag_dest_row].}
{.deprecated: [gtk_tree_view_get_dest_row_at_pos: get_dest_row_at_pos].}
{.deprecated: [gtk_tree_view_create_row_drag_icon: create_row_drag_icon].}
{.deprecated: [gtk_tree_view_set_enable_search: set_enable_search].}
{.deprecated: [gtk_tree_view_get_enable_search: get_enable_search].}
{.deprecated: [gtk_tree_view_get_search_column: get_search_column].}
{.deprecated: [gtk_tree_view_set_search_column: set_search_column].}
{.deprecated: [gtk_tree_view_get_search_equal_func: get_search_equal_func].}
{.deprecated: [gtk_tree_view_set_search_equal_func: set_search_equal_func].}
{.deprecated: [gtk_tree_view_get_search_entry: get_search_entry].}
{.deprecated: [gtk_tree_view_set_search_entry: set_search_entry].}
{.deprecated: [gtk_tree_view_get_search_position_func: get_search_position_func].}
{.deprecated: [gtk_tree_view_set_search_position_func: set_search_position_func].}
{.deprecated: [gtk_tree_view_convert_widget_to_tree_coords: convert_widget_to_tree_coords].}
{.deprecated: [gtk_tree_view_convert_tree_to_widget_coords: convert_tree_to_widget_coords].}
{.deprecated: [gtk_tree_view_convert_widget_to_bin_window_coords: convert_widget_to_bin_window_coords].}
{.deprecated: [gtk_tree_view_convert_bin_window_to_widget_coords: convert_bin_window_to_widget_coords].}
{.deprecated: [gtk_tree_view_convert_tree_to_bin_window_coords: convert_tree_to_bin_window_coords].}
{.deprecated: [gtk_tree_view_convert_bin_window_to_tree_coords: convert_bin_window_to_tree_coords].}
{.deprecated: [gtk_tree_view_set_destroy_count_func: set_destroy_count_func].}
{.deprecated: [gtk_tree_view_set_fixed_height_mode: set_fixed_height_mode].}
{.deprecated: [gtk_tree_view_get_fixed_height_mode: get_fixed_height_mode].}
{.deprecated: [gtk_tree_view_set_hover_selection: set_hover_selection].}
{.deprecated: [gtk_tree_view_get_hover_selection: get_hover_selection].}
{.deprecated: [gtk_tree_view_set_hover_expand: set_hover_expand].}
{.deprecated: [gtk_tree_view_get_hover_expand: get_hover_expand].}
{.deprecated: [gtk_tree_view_set_rubber_banding: set_rubber_banding].}
{.deprecated: [gtk_tree_view_get_rubber_banding: get_rubber_banding].}
{.deprecated: [gtk_tree_view_is_rubber_banding_active: is_rubber_banding_active].}
{.deprecated: [gtk_tree_view_get_row_separator_func: get_row_separator_func].}
{.deprecated: [gtk_tree_view_set_row_separator_func: set_row_separator_func].}
{.deprecated: [gtk_tree_view_get_grid_lines: get_grid_lines].}
{.deprecated: [gtk_tree_view_set_grid_lines: set_grid_lines].}
{.deprecated: [gtk_tree_view_get_enable_tree_lines: get_enable_tree_lines].}
{.deprecated: [gtk_tree_view_set_enable_tree_lines: set_enable_tree_lines].}
{.deprecated: [gtk_tree_view_set_show_expanders: set_show_expanders].}
{.deprecated: [gtk_tree_view_get_show_expanders: get_show_expanders].}
{.deprecated: [gtk_tree_view_set_level_indentation: set_level_indentation].}
{.deprecated: [gtk_tree_view_get_level_indentation: get_level_indentation].}
{.deprecated: [gtk_tree_view_set_tooltip_row: set_tooltip_row].}
{.deprecated: [gtk_tree_view_set_tooltip_cell: set_tooltip_cell].}
{.deprecated: [gtk_tree_view_get_tooltip_context: get_tooltip_context].}
{.deprecated: [gtk_tree_view_set_tooltip_column: set_tooltip_column].}
{.deprecated: [gtk_tree_view_get_tooltip_column: get_tooltip_column].}
{.deprecated: [gtk_combo_box_get_type: combo_box_get_type].}
{.deprecated: [gtk_combo_box_new: combo_box_new].}
{.deprecated: [gtk_combo_box_new_with_area: combo_box_new_with_area].}
{.deprecated: [gtk_combo_box_new_with_area_and_entry: combo_box_new_with_area_and_entry].}
{.deprecated: [gtk_combo_box_new_with_entry: combo_box_new_with_entry].}
{.deprecated: [gtk_combo_box_new_with_model: combo_box_new_with_model].}
{.deprecated: [gtk_combo_box_new_with_model_and_entry: combo_box_new_with_model_and_entry].}
{.deprecated: [gtk_combo_box_get_wrap_width: get_wrap_width].}
{.deprecated: [gtk_combo_box_set_wrap_width: set_wrap_width].}
{.deprecated: [gtk_combo_box_get_row_span_column: get_row_span_column].}
{.deprecated: [gtk_combo_box_set_row_span_column: set_row_span_column].}
{.deprecated: [gtk_combo_box_get_column_span_column: get_column_span_column].}
{.deprecated: [gtk_combo_box_set_column_span_column: set_column_span_column].}
{.deprecated: [gtk_combo_box_get_add_tearoffs: get_add_tearoffs].}
{.deprecated: [gtk_combo_box_set_add_tearoffs: set_add_tearoffs].}
{.deprecated: [gtk_combo_box_get_title: get_title].}
{.deprecated: [gtk_combo_box_set_title: set_title].}
{.deprecated: [gtk_combo_box_get_focus_on_click: get_focus_on_click].}
{.deprecated: [gtk_combo_box_set_focus_on_click: set_focus_on_click].}
{.deprecated: [gtk_combo_box_get_active: get_active].}
{.deprecated: [gtk_combo_box_set_active: set_active].}
{.deprecated: [gtk_combo_box_get_active_iter: get_active_iter].}
{.deprecated: [gtk_combo_box_set_active_iter: set_active_iter].}
{.deprecated: [gtk_combo_box_set_model: set_model].}
{.deprecated: [gtk_combo_box_get_model: get_model].}
{.deprecated: [gtk_combo_box_get_row_separator_func: get_row_separator_func].}
{.deprecated: [gtk_combo_box_set_row_separator_func: set_row_separator_func].}
{.deprecated: [gtk_combo_box_set_button_sensitivity: set_button_sensitivity].}
{.deprecated: [gtk_combo_box_get_button_sensitivity: get_button_sensitivity].}
{.deprecated: [gtk_combo_box_get_has_entry: get_has_entry].}
{.deprecated: [gtk_combo_box_set_entry_text_column: set_entry_text_column].}
{.deprecated: [gtk_combo_box_get_entry_text_column: get_entry_text_column].}
{.deprecated: [gtk_combo_box_set_popup_fixed_width: set_popup_fixed_width].}
{.deprecated: [gtk_combo_box_get_popup_fixed_width: get_popup_fixed_width].}
{.deprecated: [gtk_combo_box_popup: popup].}
{.deprecated: [gtk_combo_box_popup_for_device: popup_for_device].}
{.deprecated: [gtk_combo_box_popdown: popdown].}
{.deprecated: [gtk_combo_box_get_popup_accessible: get_popup_accessible].}
{.deprecated: [gtk_combo_box_get_id_column: get_id_column].}
{.deprecated: [gtk_combo_box_set_id_column: set_id_column].}
{.deprecated: [gtk_combo_box_get_active_id: get_active_id].}
{.deprecated: [gtk_combo_box_set_active_id: set_active_id].}
{.deprecated: [gtk_app_chooser_button_get_type: app_chooser_button_get_type].}
{.deprecated: [gtk_app_chooser_button_new: app_chooser_button_new].}
{.deprecated: [gtk_app_chooser_button_append_separator: append_separator].}
{.deprecated: [gtk_app_chooser_button_append_custom_item: append_custom_item].}
{.deprecated: [gtk_app_chooser_button_set_active_custom_item: set_active_custom_item].}
{.deprecated: [gtk_app_chooser_button_set_show_dialog_item: set_show_dialog_item].}
{.deprecated: [gtk_app_chooser_button_get_show_dialog_item: get_show_dialog_item].}
{.deprecated: [gtk_app_chooser_button_set_heading: set_heading].}
{.deprecated: [gtk_app_chooser_button_get_heading: get_heading].}
{.deprecated: [gtk_app_chooser_button_set_show_default_item: set_show_default_item].}
{.deprecated: [gtk_app_chooser_button_get_show_default_item: get_show_default_item].}
{.deprecated: [gtk_application_window_get_type: application_window_get_type].}
{.deprecated: [gtk_application_window_new: window_new].}
{.deprecated: [gtk_application_window_set_show_menubar: set_show_menubar].}
{.deprecated: [gtk_application_window_get_show_menubar: get_show_menubar].}
{.deprecated: [gtk_application_window_get_id: get_id].}
{.deprecated: [gtk_frame_get_type: frame_get_type].}
{.deprecated: [gtk_frame_new: frame_new].}
{.deprecated: [gtk_frame_set_label: set_label].}
{.deprecated: [gtk_frame_get_label: get_label].}
{.deprecated: [gtk_frame_set_label_widget: set_label_widget].}
{.deprecated: [gtk_frame_get_label_widget: get_label_widget].}
{.deprecated: [gtk_frame_set_label_align: set_label_align].}
{.deprecated: [gtk_frame_get_label_align: get_label_align].}
{.deprecated: [gtk_frame_set_shadow_type: set_shadow_type].}
{.deprecated: [gtk_frame_get_shadow_type: get_shadow_type].}
{.deprecated: [gtk_aspect_frame_get_type: aspect_frame_get_type].}
{.deprecated: [gtk_aspect_frame_new: aspect_frame_new].}
{.deprecated: [gtk_aspect_frame_set: set].}
{.deprecated: [gtk_assistant_get_type: assistant_get_type].}
{.deprecated: [gtk_assistant_new: assistant_new].}
{.deprecated: [gtk_assistant_next_page: next_page].}
{.deprecated: [gtk_assistant_previous_page: previous_page].}
{.deprecated: [gtk_assistant_get_current_page: get_current_page].}
{.deprecated: [gtk_assistant_set_current_page: set_current_page].}
{.deprecated: [gtk_assistant_get_n_pages: get_n_pages].}
{.deprecated: [gtk_assistant_get_nth_page: get_nth_page].}
{.deprecated: [gtk_assistant_prepend_page: prepend_page].}
{.deprecated: [gtk_assistant_append_page: append_page].}
{.deprecated: [gtk_assistant_insert_page: insert_page].}
{.deprecated: [gtk_assistant_remove_page: remove_page].}
{.deprecated: [gtk_assistant_set_forward_page_func: set_forward_page_func].}
{.deprecated: [gtk_assistant_set_page_type: set_page_type].}
{.deprecated: [gtk_assistant_get_page_type: get_page_type].}
{.deprecated: [gtk_assistant_set_page_title: set_page_title].}
{.deprecated: [gtk_assistant_get_page_title: get_page_title].}
{.deprecated: [gtk_assistant_set_page_header_image: set_page_header_image].}
{.deprecated: [gtk_assistant_get_page_header_image: get_page_header_image].}
{.deprecated: [gtk_assistant_set_page_side_image: set_page_side_image].}
{.deprecated: [gtk_assistant_get_page_side_image: get_page_side_image].}
{.deprecated: [gtk_assistant_set_page_complete: set_page_complete].}
{.deprecated: [gtk_assistant_get_page_complete: get_page_complete].}
{.deprecated: [gtk_assistant_add_action_widget: add_action_widget].}
{.deprecated: [gtk_assistant_remove_action_widget: remove_action_widget].}
{.deprecated: [gtk_assistant_update_buttons_state: update_buttons_state].}
{.deprecated: [gtk_assistant_commit: commit].}
{.deprecated: [gtk_button_box_get_type: button_box_get_type].}
{.deprecated: [gtk_button_box_new: button_box_new].}
{.deprecated: [gtk_button_box_get_layout: get_layout].}
{.deprecated: [gtk_button_box_set_layout: set_layout].}
{.deprecated: [gtk_button_box_get_child_secondary: get_child_secondary].}
{.deprecated: [gtk_button_box_set_child_secondary: set_child_secondary].}
{.deprecated: [gtk_button_box_get_child_non_homogeneous: get_child_non_homogeneous].}
{.deprecated: [gtk_button_box_set_child_non_homogeneous: set_child_non_homogeneous].}
{.deprecated: [gtk_binding_set_new: binding_set_new].}
{.deprecated: [gtk_binding_set_by_class: binding_set_by_class].}
{.deprecated: [gtk_binding_set_find: binding_set_find].}
{.deprecated: [gtk_bindings_activate: bindings_activate].}
{.deprecated: [gtk_bindings_activate_event: bindings_activate_event].}
{.deprecated: [gtk_binding_set_activate: activate].}
{.deprecated: [gtk_binding_entry_skip: binding_entry_skip].}
{.deprecated: [gtk_binding_entry_add_signal: binding_entry_add_signal].}
{.deprecated: [gtk_binding_entry_add_signall: binding_entry_add_signall].}
{.deprecated: [gtk_binding_entry_add_signal_from_string: binding_entry_add_signal_from_string].}
{.deprecated: [gtk_binding_entry_remove: binding_entry_remove].}
{.deprecated: [gtk_builder_error_quark: builder_error_quark].}
{.deprecated: [gtk_builder_get_type: builder_get_type].}
{.deprecated: [gtk_builder_new: builder_new].}
{.deprecated: [gtk_builder_add_from_file: add_from_file].}
{.deprecated: [gtk_builder_add_from_resource: add_from_resource].}
{.deprecated: [gtk_builder_add_from_string: add_from_string].}
{.deprecated: [gtk_builder_add_objects_from_file: add_objects_from_file].}
{.deprecated: [gtk_builder_add_objects_from_resource: add_objects_from_resource].}
{.deprecated: [gtk_builder_add_objects_from_string: add_objects_from_string].}
{.deprecated: [gtk_builder_get_object: get_object].}
{.deprecated: [gtk_builder_get_objects: get_objects].}
{.deprecated: [gtk_builder_expose_object: expose_object].}
{.deprecated: [gtk_builder_connect_signals: connect_signals].}
{.deprecated: [gtk_builder_connect_signals_full: connect_signals_full].}
{.deprecated: [gtk_builder_set_translation_domain: set_translation_domain].}
{.deprecated: [gtk_builder_get_translation_domain: get_translation_domain].}
{.deprecated: [gtk_builder_get_type_from_name: get_type_from_name].}
{.deprecated: [gtk_builder_value_from_string: value_from_string].}
{.deprecated: [gtk_builder_value_from_string_type: value_from_string_type].}
{.deprecated: [gtk_builder_new_from_file: builder_new_from_file].}
{.deprecated: [gtk_builder_new_from_resource: builder_new_from_resource].}
{.deprecated: [gtk_builder_new_from_string: builder_new_from_string].}
{.deprecated: [gtk_builder_add_callback_symbol: add_callback_symbol].}
{.deprecated: [gtk_builder_add_callback_symbols: add_callback_symbols].}
{.deprecated: [gtk_builder_lookup_callback_symbol: lookup_callback_symbol].}
{.deprecated: [gtk_builder_set_application: set_application].}
{.deprecated: [gtk_builder_get_application: get_application].}
{.deprecated: [gtk_buildable_get_type: buildable_get_type].}
{.deprecated: [gtk_buildable_set_name: set_name].}
{.deprecated: [gtk_buildable_get_name: get_name].}
{.deprecated: [gtk_buildable_add_child: add_child].}
{.deprecated: [gtk_buildable_set_buildable_property: set_buildable_property].}
{.deprecated: [gtk_buildable_construct_child: construct_child].}
{.deprecated: [gtk_buildable_custom_tag_start: custom_tag_start].}
{.deprecated: [gtk_buildable_custom_tag_end: custom_tag_end].}
{.deprecated: [gtk_buildable_custom_finished: custom_finished].}
{.deprecated: [gtk_buildable_parser_finished: parser_finished].}
{.deprecated: [gtk_buildable_get_internal_child: get_internal_child].}
{.deprecated: [gtk_button_get_type: button_get_type].}
{.deprecated: [gtk_button_new: button_new].}
{.deprecated: [gtk_button_new_with_label: button_new_with_label].}
{.deprecated: [gtk_button_new_from_icon_name: button_new_from_icon_name].}
{.deprecated: [gtk_button_new_from_stock: button_new_from_stock].}
{.deprecated: [gtk_button_new_with_mnemonic: button_new_with_mnemonic].}
{.deprecated: [gtk_button_clicked: clicked].}
{.deprecated: [gtk_button_pressed: pressed].}
{.deprecated: [gtk_button_released: released].}
{.deprecated: [gtk_button_enter: enter].}
{.deprecated: [gtk_button_leave: leave].}
{.deprecated: [gtk_button_set_relief: set_relief].}
{.deprecated: [gtk_button_get_relief: get_relief].}
{.deprecated: [gtk_button_set_label: set_label].}
{.deprecated: [gtk_button_get_label: get_label].}
{.deprecated: [gtk_button_set_use_underline: set_use_underline].}
{.deprecated: [gtk_button_get_use_underline: get_use_underline].}
{.deprecated: [gtk_button_set_use_stock: set_use_stock].}
{.deprecated: [gtk_button_get_use_stock: get_use_stock].}
{.deprecated: [gtk_button_set_focus_on_click: set_focus_on_click].}
{.deprecated: [gtk_button_get_focus_on_click: get_focus_on_click].}
{.deprecated: [gtk_button_set_alignment: set_alignment].}
{.deprecated: [gtk_button_get_alignment: get_alignment].}
{.deprecated: [gtk_button_set_image: set_image].}
{.deprecated: [gtk_button_get_image: get_image].}
{.deprecated: [gtk_button_set_image_position: set_image_position].}
{.deprecated: [gtk_button_get_image_position: get_image_position].}
{.deprecated: [gtk_button_set_always_show_image: set_always_show_image].}
{.deprecated: [gtk_button_get_always_show_image: get_always_show_image].}
{.deprecated: [gtk_button_get_event_window: get_event_window].}
{.deprecated: [gtk_calendar_get_type: calendar_get_type].}
{.deprecated: [gtk_calendar_new: calendar_new].}
{.deprecated: [gtk_calendar_select_month: select_month].}
{.deprecated: [gtk_calendar_select_day: select_day].}
{.deprecated: [gtk_calendar_mark_day: mark_day].}
{.deprecated: [gtk_calendar_unmark_day: unmark_day].}
{.deprecated: [gtk_calendar_clear_marks: clear_marks].}
{.deprecated: [gtk_calendar_set_display_options: set_display_options].}
{.deprecated: [gtk_calendar_get_display_options: get_display_options].}
{.deprecated: [gtk_calendar_get_date: get_date].}
{.deprecated: [gtk_calendar_set_detail_func: set_detail_func].}
{.deprecated: [gtk_calendar_set_detail_width_chars: set_detail_width_chars].}
{.deprecated: [gtk_calendar_set_detail_height_rows: set_detail_height_rows].}
{.deprecated: [gtk_calendar_get_detail_width_chars: get_detail_width_chars].}
{.deprecated: [gtk_calendar_get_detail_height_rows: get_detail_height_rows].}
{.deprecated: [gtk_calendar_get_day_is_marked: get_day_is_marked].}
{.deprecated: [gtk_cell_area_box_get_type: cell_area_box_get_type].}
{.deprecated: [gtk_cell_area_box_new: cell_area_box_new].}
{.deprecated: [gtk_cell_area_box_pack_start: pack_start].}
{.deprecated: [gtk_cell_area_box_pack_end: pack_end].}
{.deprecated: [gtk_cell_area_box_get_spacing: get_spacing].}
{.deprecated: [gtk_cell_area_box_set_spacing: set_spacing].}
{.deprecated: [gtk_cell_area_context_get_type: cell_area_context_get_type].}
{.deprecated: [gtk_cell_area_context_get_area: get_area].}
{.deprecated: [gtk_cell_area_context_allocate: allocate].}
{.deprecated: [gtk_cell_area_context_reset: reset].}
{.deprecated: [gtk_cell_area_context_get_preferred_width: get_preferred_width].}
{.deprecated: [gtk_cell_area_context_get_preferred_height: get_preferred_height].}
{.deprecated: [gtk_cell_area_context_get_preferred_height_for_width: get_preferred_height_for_width].}
{.deprecated: [gtk_cell_area_context_get_preferred_width_for_height: get_preferred_width_for_height].}
{.deprecated: [gtk_cell_area_context_get_allocation: get_allocation].}
{.deprecated: [gtk_cell_area_context_push_preferred_width: push_preferred_width].}
{.deprecated: [gtk_cell_area_context_push_preferred_height: push_preferred_height].}
{.deprecated: [gtk_cell_layout_get_type: cell_layout_get_type].}
{.deprecated: [gtk_cell_layout_pack_start: pack_start].}
{.deprecated: [gtk_cell_layout_pack_end: pack_end].}
{.deprecated: [gtk_cell_layout_get_cells: get_cells].}
{.deprecated: [gtk_cell_layout_clear: clear].}
{.deprecated: [gtk_cell_layout_set_attributes: set_attributes].}
{.deprecated: [gtk_cell_layout_add_attribute: add_attribute].}
{.deprecated: [gtk_cell_layout_set_cell_data_func: set_cell_data_func].}
{.deprecated: [gtk_cell_layout_clear_attributes: clear_attributes].}
{.deprecated: [gtk_cell_layout_reorder: reorder].}
{.deprecated: [gtk_cell_layout_get_area: get_area].}
{.deprecated: [gtk_cell_renderer_text_get_type: cell_renderer_text_get_type].}
{.deprecated: [gtk_cell_renderer_text_new: cell_renderer_text_new].}
{.deprecated: [gtk_cell_renderer_text_set_fixed_height_from_font: set_fixed_height_from_font].}
{.deprecated: [gtk_cell_renderer_accel_get_type: cell_renderer_accel_get_type].}
{.deprecated: [gtk_cell_renderer_accel_new: cell_renderer_accel_new].}
{.deprecated: [gtk_cell_renderer_combo_get_type: cell_renderer_combo_get_type].}
{.deprecated: [gtk_cell_renderer_combo_new: cell_renderer_combo_new].}
{.deprecated: [gtk_cell_renderer_pixbuf_get_type: cell_renderer_pixbuf_get_type].}
{.deprecated: [gtk_cell_renderer_pixbuf_new: cell_renderer_pixbuf_new].}
{.deprecated: [gtk_cell_renderer_progress_get_type: cell_renderer_progress_get_type].}
{.deprecated: [gtk_cell_renderer_progress_new: cell_renderer_progress_new].}
{.deprecated: [gtk_cell_renderer_spin_get_type: cell_renderer_spin_get_type].}
{.deprecated: [gtk_cell_renderer_spin_new: cell_renderer_spin_new].}
{.deprecated: [gtk_cell_renderer_spinner_get_type: cell_renderer_spinner_get_type].}
{.deprecated: [gtk_cell_renderer_spinner_new: cell_renderer_spinner_new].}
{.deprecated: [gtk_cell_renderer_toggle_get_type: cell_renderer_toggle_get_type].}
{.deprecated: [gtk_cell_renderer_toggle_new: cell_renderer_toggle_new].}
{.deprecated: [gtk_cell_renderer_toggle_get_radio: get_radio].}
{.deprecated: [gtk_cell_renderer_toggle_set_radio: set_radio].}
{.deprecated: [gtk_cell_renderer_toggle_get_active: get_active].}
{.deprecated: [gtk_cell_renderer_toggle_set_active: set_active].}
{.deprecated: [gtk_cell_renderer_toggle_get_activatable: get_activatable].}
{.deprecated: [gtk_cell_renderer_toggle_set_activatable: set_activatable].}
{.deprecated: [gtk_cell_view_get_type: cell_view_get_type].}
{.deprecated: [gtk_cell_view_new: cell_view_new].}
{.deprecated: [gtk_cell_view_new_with_context: cell_view_new_with_context].}
{.deprecated: [gtk_cell_view_new_with_text: cell_view_new_with_text].}
{.deprecated: [gtk_cell_view_new_with_markup: cell_view_new_with_markup].}
{.deprecated: [gtk_cell_view_new_with_pixbuf: cell_view_new_with_pixbuf].}
{.deprecated: [gtk_cell_view_set_model: set_model].}
{.deprecated: [gtk_cell_view_get_model: get_model].}
{.deprecated: [gtk_cell_view_set_displayed_row: set_displayed_row].}
{.deprecated: [gtk_cell_view_get_displayed_row: get_displayed_row].}
{.deprecated: [gtk_cell_view_set_background_rgba: set_background_rgba].}
{.deprecated: [gtk_cell_view_get_draw_sensitive: get_draw_sensitive].}
{.deprecated: [gtk_cell_view_set_draw_sensitive: set_draw_sensitive].}
{.deprecated: [gtk_cell_view_get_fit_model: get_fit_model].}
{.deprecated: [gtk_cell_view_set_fit_model: set_fit_model].}
{.deprecated: [gtk_cell_view_get_size_of_row: get_size_of_row].}
{.deprecated: [gtk_cell_view_set_background_color: set_background_color].}
{.deprecated: [gtk_toggle_button_get_type: toggle_button_get_type].}
{.deprecated: [gtk_toggle_button_new: toggle_button_new].}
{.deprecated: [gtk_toggle_button_new_with_label: toggle_button_new_with_label].}
{.deprecated: [gtk_toggle_button_new_with_mnemonic: toggle_button_new_with_mnemonic].}
{.deprecated: [gtk_toggle_button_set_mode: set_mode].}
{.deprecated: [gtk_toggle_button_get_mode: get_mode].}
{.deprecated: [gtk_toggle_button_set_active: set_active].}
{.deprecated: [gtk_toggle_button_get_active: get_active].}
{.deprecated: [gtk_toggle_button_toggled: toggled].}
{.deprecated: [gtk_toggle_button_set_inconsistent: set_inconsistent].}
{.deprecated: [gtk_toggle_button_get_inconsistent: get_inconsistent].}
{.deprecated: [gtk_check_button_get_type: check_button_get_type].}
{.deprecated: [gtk_check_button_new: check_button_new].}
{.deprecated: [gtk_check_button_new_with_label: check_button_new_with_label].}
{.deprecated: [gtk_check_button_new_with_mnemonic: check_button_new_with_mnemonic].}
{.deprecated: [gtk_menu_item_get_type: menu_item_get_type].}
{.deprecated: [gtk_menu_item_new: menu_item_new].}
{.deprecated: [gtk_menu_item_new_with_label: menu_item_new_with_label].}
{.deprecated: [gtk_menu_item_new_with_mnemonic: menu_item_new_with_mnemonic].}
{.deprecated: [gtk_menu_item_set_submenu: set_submenu].}
{.deprecated: [gtk_menu_item_get_submenu: get_submenu].}
{.deprecated: [gtk_menu_item_select: select].}
{.deprecated: [gtk_menu_item_deselect: deselect].}
{.deprecated: [gtk_menu_item_activate: activate].}
{.deprecated: [gtk_menu_item_toggle_size_request: toggle_size_request].}
{.deprecated: [gtk_menu_item_toggle_size_allocate: toggle_size_allocate].}
{.deprecated: [gtk_menu_item_set_right_justified: set_right_justified].}
{.deprecated: [gtk_menu_item_get_right_justified: get_right_justified].}
{.deprecated: [gtk_menu_item_set_accel_path: set_accel_path].}
{.deprecated: [gtk_menu_item_get_accel_path: get_accel_path].}
{.deprecated: [gtk_menu_item_set_label: set_label].}
{.deprecated: [gtk_menu_item_get_label: get_label].}
{.deprecated: [gtk_menu_item_set_use_underline: set_use_underline].}
{.deprecated: [gtk_menu_item_get_use_underline: get_use_underline].}
{.deprecated: [gtk_menu_item_set_reserve_indicator: set_reserve_indicator].}
{.deprecated: [gtk_menu_item_get_reserve_indicator: get_reserve_indicator].}
{.deprecated: [gtk_check_menu_item_get_type: check_menu_item_get_type].}
{.deprecated: [gtk_check_menu_item_new: check_menu_item_new].}
{.deprecated: [gtk_check_menu_item_new_with_label: check_menu_item_new_with_label].}
{.deprecated: [gtk_check_menu_item_new_with_mnemonic: check_menu_item_new_with_mnemonic].}
{.deprecated: [gtk_check_menu_item_set_active: set_active].}
{.deprecated: [gtk_check_menu_item_get_active: get_active].}
{.deprecated: [gtk_check_menu_item_toggled: toggled].}
{.deprecated: [gtk_check_menu_item_set_inconsistent: set_inconsistent].}
{.deprecated: [gtk_check_menu_item_get_inconsistent: get_inconsistent].}
{.deprecated: [gtk_check_menu_item_set_draw_as_radio: set_draw_as_radio].}
{.deprecated: [gtk_check_menu_item_get_draw_as_radio: get_draw_as_radio].}
{.deprecated: [gtk_clipboard_get_type: clipboard_get_type].}
{.deprecated: [gtk_clipboard_get_for_display: clipboard_get_for_display].}
{.deprecated: [gtk_clipboard_get: clipboard_get].}
{.deprecated: [gtk_clipboard_get_default: clipboard_get_default].}
{.deprecated: [gtk_clipboard_get_display: get_display].}
{.deprecated: [gtk_clipboard_set_with_data: set_with_data].}
{.deprecated: [gtk_clipboard_set_with_owner: set_with_owner].}
{.deprecated: [gtk_clipboard_get_owner: get_owner].}
{.deprecated: [gtk_clipboard_clear: clear].}
{.deprecated: [gtk_clipboard_set_text: set_text].}
{.deprecated: [gtk_clipboard_set_image: set_image].}
{.deprecated: [gtk_clipboard_request_contents: request_contents].}
{.deprecated: [gtk_clipboard_request_text: request_text].}
{.deprecated: [gtk_clipboard_request_rich_text: request_rich_text].}
{.deprecated: [gtk_clipboard_request_image: request_image].}
{.deprecated: [gtk_clipboard_request_uris: request_uris].}
{.deprecated: [gtk_clipboard_request_targets: request_targets].}
{.deprecated: [gtk_clipboard_wait_for_contents: wait_for_contents].}
{.deprecated: [gtk_clipboard_wait_for_text: wait_for_text].}
{.deprecated: [gtk_clipboard_wait_for_rich_text: wait_for_rich_text].}
{.deprecated: [gtk_clipboard_wait_for_image: wait_for_image].}
{.deprecated: [gtk_clipboard_wait_for_uris: wait_for_uris].}
{.deprecated: [gtk_clipboard_wait_for_targets: wait_for_targets].}
{.deprecated: [gtk_clipboard_wait_is_text_available: wait_is_text_available].}
{.deprecated: [gtk_clipboard_wait_is_rich_text_available: wait_is_rich_text_available].}
{.deprecated: [gtk_clipboard_wait_is_image_available: wait_is_image_available].}
{.deprecated: [gtk_clipboard_wait_is_uris_available: wait_is_uris_available].}
{.deprecated: [gtk_clipboard_wait_is_target_available: wait_is_target_available].}
{.deprecated: [gtk_clipboard_set_can_store: set_can_store].}
{.deprecated: [gtk_clipboard_store: store].}
{.deprecated: [gtk_color_button_get_type: color_button_get_type].}
{.deprecated: [gtk_color_button_new: color_button_new].}
{.deprecated: [gtk_color_button_new_with_rgba: color_button_new_with_rgba].}
{.deprecated: [gtk_color_button_set_title: set_title].}
{.deprecated: [gtk_color_button_get_title: get_title].}
{.deprecated: [gtk_color_button_new_with_color: color_button_new_with_color].}
{.deprecated: [gtk_color_button_set_color: set_color].}
{.deprecated: [gtk_color_button_get_color: get_color].}
{.deprecated: [gtk_color_button_set_alpha: set_alpha].}
{.deprecated: [gtk_color_button_get_alpha: get_alpha].}
{.deprecated: [gtk_color_button_set_use_alpha: set_use_alpha].}
{.deprecated: [gtk_color_button_get_use_alpha: get_use_alpha].}
{.deprecated: [gtk_color_button_set_rgba: set_rgba].}
{.deprecated: [gtk_color_button_get_rgba: get_rgba].}
{.deprecated: [gtk_color_chooser_get_type: color_chooser_get_type].}
{.deprecated: [gtk_color_chooser_get_rgba: get_rgba].}
{.deprecated: [gtk_color_chooser_set_rgba: set_rgba].}
{.deprecated: [gtk_color_chooser_get_use_alpha: get_use_alpha].}
{.deprecated: [gtk_color_chooser_set_use_alpha: set_use_alpha].}
{.deprecated: [gtk_color_chooser_add_palette: add_palette].}
{.deprecated: [gtk_color_chooser_dialog_get_type: color_chooser_dialog_get_type].}
{.deprecated: [gtk_color_chooser_dialog_new: color_chooser_dialog_new].}
{.deprecated: [gtk_color_chooser_widget_get_type: color_chooser_widget_get_type].}
{.deprecated: [gtk_color_chooser_widget_new: color_chooser_widget_new].}
{.deprecated: [gtk_hsv_to_rgb: hsv_to_rgb].}
{.deprecated: [gtk_rgb_to_hsv: rgb_to_hsv].}
{.deprecated: [gtk_combo_box_text_get_type: combo_box_text_get_type].}
{.deprecated: [gtk_combo_box_text_new: combo_box_text_new].}
{.deprecated: [gtk_combo_box_text_new_with_entry: combo_box_text_new_with_entry].}
{.deprecated: [gtk_combo_box_text_append_text: append_text].}
{.deprecated: [gtk_combo_box_text_insert_text: insert_text].}
{.deprecated: [gtk_combo_box_text_prepend_text: prepend_text].}
{.deprecated: [gtk_combo_box_text_remove: remove].}
{.deprecated: [gtk_combo_box_text_remove_all: remove_all].}
{.deprecated: [gtk_combo_box_text_get_active_text: get_active_text].}
{.deprecated: [gtk_combo_box_text_insert: insert].}
{.deprecated: [gtk_combo_box_text_append: append].}
{.deprecated: [gtk_combo_box_text_prepend: prepend].}
{.deprecated: [gtk_css_section_get_type: css_section_get_type].}
{.deprecated: [gtk_css_section_ref: `ref`].}
{.deprecated: [gtk_css_section_unref: unref].}
{.deprecated: [gtk_css_section_get_section_type: get_section_type].}
{.deprecated: [gtk_css_section_get_parent: get_parent].}
{.deprecated: [gtk_css_section_get_file: get_file].}
{.deprecated: [gtk_css_section_get_start_line: get_start_line].}
{.deprecated: [gtk_css_section_get_start_position: get_start_position].}
{.deprecated: [gtk_css_section_get_end_line: get_end_line].}
{.deprecated: [gtk_css_section_get_end_position: get_end_position].}
{.deprecated: [gtk_css_provider_error_quark: css_provider_error_quark].}
{.deprecated: [gtk_css_provider_get_type: css_provider_get_type].}
{.deprecated: [gtk_css_provider_new: css_provider_new].}
{.deprecated: [gtk_css_provider_to_string: to_string].}
{.deprecated: [gtk_css_provider_load_from_data: load_from_data].}
{.deprecated: [gtk_css_provider_load_from_file: load_from_file].}
{.deprecated: [gtk_css_provider_load_from_path: load_from_path].}
{.deprecated: [gtk_css_provider_load_from_resource: load_from_resource].}
{.deprecated: [gtk_css_provider_get_default: css_provider_get_default].}
{.deprecated: [gtk_css_provider_get_named: css_provider_get_named].}
{.deprecated: [gtk_get_debug_flags: get_debug_flags].}
{.deprecated: [gtk_set_debug_flags: set_debug_flags].}
{.deprecated: [gtk_drawing_area_get_type: drawing_area_get_type].}
{.deprecated: [gtk_drawing_area_new: drawing_area_new].}
{.deprecated: [gtk_event_box_get_type: event_box_get_type].}
{.deprecated: [gtk_event_box_new: event_box_new].}
{.deprecated: [gtk_event_box_get_visible_window: get_visible_window].}
{.deprecated: [gtk_event_box_set_visible_window: set_visible_window].}
{.deprecated: [gtk_event_box_get_above_child: get_above_child].}
{.deprecated: [gtk_event_box_set_above_child: set_above_child].}
{.deprecated: [gtk_event_controller_get_type: event_controller_get_type].}
{.deprecated: [gtk_event_controller_get_widget: get_widget].}
{.deprecated: [gtk_event_controller_handle_event: handle_event].}
{.deprecated: [gtk_event_controller_reset: reset].}
{.deprecated: [gtk_event_controller_get_propagation_phase: get_propagation_phase].}
{.deprecated: [gtk_event_controller_set_propagation_phase: set_propagation_phase].}
{.deprecated: [gtk_expander_get_type: expander_get_type].}
{.deprecated: [gtk_expander_new: expander_new].}
{.deprecated: [gtk_expander_new_with_mnemonic: expander_new_with_mnemonic].}
{.deprecated: [gtk_expander_set_expanded: set_expanded].}
{.deprecated: [gtk_expander_get_expanded: get_expanded].}
{.deprecated: [gtk_expander_set_spacing: set_spacing].}
{.deprecated: [gtk_expander_get_spacing: get_spacing].}
{.deprecated: [gtk_expander_set_label: set_label].}
{.deprecated: [gtk_expander_get_label: get_label].}
{.deprecated: [gtk_expander_set_use_underline: set_use_underline].}
{.deprecated: [gtk_expander_get_use_underline: get_use_underline].}
{.deprecated: [gtk_expander_set_use_markup: set_use_markup].}
{.deprecated: [gtk_expander_get_use_markup: get_use_markup].}
{.deprecated: [gtk_expander_set_label_widget: set_label_widget].}
{.deprecated: [gtk_expander_get_label_widget: get_label_widget].}
{.deprecated: [gtk_expander_set_label_fill: set_label_fill].}
{.deprecated: [gtk_expander_get_label_fill: get_label_fill].}
{.deprecated: [gtk_expander_set_resize_toplevel: set_resize_toplevel].}
{.deprecated: [gtk_expander_get_resize_toplevel: get_resize_toplevel].}
{.deprecated: [gtk_fixed_get_type: fixed_get_type].}
{.deprecated: [gtk_fixed_new: fixed_new].}
{.deprecated: [gtk_fixed_put: put].}
{.deprecated: [gtk_fixed_move: move].}
{.deprecated: [gtk_file_filter_get_type: file_filter_get_type].}
{.deprecated: [gtk_file_filter_new: file_filter_new].}
{.deprecated: [gtk_file_filter_set_name: set_name].}
{.deprecated: [gtk_file_filter_get_name: get_name].}
{.deprecated: [gtk_file_filter_add_mime_type: add_mime_type].}
{.deprecated: [gtk_file_filter_add_pattern: add_pattern].}
{.deprecated: [gtk_file_filter_add_pixbuf_formats: add_pixbuf_formats].}
{.deprecated: [gtk_file_filter_add_custom: add_custom].}
{.deprecated: [gtk_file_filter_get_needed: get_needed].}
{.deprecated: [gtk_file_filter_filter: filter].}
{.deprecated: [gtk_file_chooser_get_type: file_chooser_get_type].}
{.deprecated: [gtk_file_chooser_error_quark: file_chooser_error_quark].}
{.deprecated: [gtk_file_chooser_set_action: set_action].}
{.deprecated: [gtk_file_chooser_get_action: get_action].}
{.deprecated: [gtk_file_chooser_set_local_only: set_local_only].}
{.deprecated: [gtk_file_chooser_get_local_only: get_local_only].}
{.deprecated: [gtk_file_chooser_set_select_multiple: set_select_multiple].}
{.deprecated: [gtk_file_chooser_get_select_multiple: get_select_multiple].}
{.deprecated: [gtk_file_chooser_set_show_hidden: set_show_hidden].}
{.deprecated: [gtk_file_chooser_get_show_hidden: get_show_hidden].}
{.deprecated: [gtk_file_chooser_set_do_overwrite_confirmation: set_do_overwrite_confirmation].}
{.deprecated: [gtk_file_chooser_get_do_overwrite_confirmation: get_do_overwrite_confirmation].}
{.deprecated: [gtk_file_chooser_set_create_folders: set_create_folders].}
{.deprecated: [gtk_file_chooser_get_create_folders: get_create_folders].}
{.deprecated: [gtk_file_chooser_set_current_name: set_current_name].}
{.deprecated: [gtk_file_chooser_get_current_name: get_current_name].}
{.deprecated: [gtk_file_chooser_get_filename: get_filename].}
{.deprecated: [gtk_file_chooser_set_filename: set_filename].}
{.deprecated: [gtk_file_chooser_select_filename: select_filename].}
{.deprecated: [gtk_file_chooser_unselect_filename: unselect_filename].}
{.deprecated: [gtk_file_chooser_select_all: select_all].}
{.deprecated: [gtk_file_chooser_unselect_all: unselect_all].}
{.deprecated: [gtk_file_chooser_get_filenames: get_filenames].}
{.deprecated: [gtk_file_chooser_set_current_folder: set_current_folder].}
{.deprecated: [gtk_file_chooser_get_current_folder: get_current_folder].}
{.deprecated: [gtk_file_chooser_get_uri: get_uri].}
{.deprecated: [gtk_file_chooser_set_uri: set_uri].}
{.deprecated: [gtk_file_chooser_select_uri: select_uri].}
{.deprecated: [gtk_file_chooser_unselect_uri: unselect_uri].}
{.deprecated: [gtk_file_chooser_get_uris: get_uris].}
{.deprecated: [gtk_file_chooser_set_current_folder_uri: set_current_folder_uri].}
{.deprecated: [gtk_file_chooser_get_current_folder_uri: get_current_folder_uri].}
{.deprecated: [gtk_file_chooser_get_file: get_file].}
{.deprecated: [gtk_file_chooser_set_file: set_file].}
{.deprecated: [gtk_file_chooser_select_file: select_file].}
{.deprecated: [gtk_file_chooser_unselect_file: unselect_file].}
{.deprecated: [gtk_file_chooser_get_files: get_files].}
{.deprecated: [gtk_file_chooser_set_current_folder_file: set_current_folder_file].}
{.deprecated: [gtk_file_chooser_get_current_folder_file: get_current_folder_file].}
{.deprecated: [gtk_file_chooser_set_preview_widget: set_preview_widget].}
{.deprecated: [gtk_file_chooser_get_preview_widget: get_preview_widget].}
{.deprecated: [gtk_file_chooser_set_preview_widget_active: set_preview_widget_active].}
{.deprecated: [gtk_file_chooser_get_preview_widget_active: get_preview_widget_active].}
{.deprecated: [gtk_file_chooser_set_use_preview_label: set_use_preview_label].}
{.deprecated: [gtk_file_chooser_get_use_preview_label: get_use_preview_label].}
{.deprecated: [gtk_file_chooser_get_preview_filename: get_preview_filename].}
{.deprecated: [gtk_file_chooser_get_preview_uri: get_preview_uri].}
{.deprecated: [gtk_file_chooser_get_preview_file: get_preview_file].}
{.deprecated: [gtk_file_chooser_set_extra_widget: set_extra_widget].}
{.deprecated: [gtk_file_chooser_get_extra_widget: get_extra_widget].}
{.deprecated: [gtk_file_chooser_add_filter: add_filter].}
{.deprecated: [gtk_file_chooser_remove_filter: remove_filter].}
{.deprecated: [gtk_file_chooser_list_filters: list_filters].}
{.deprecated: [gtk_file_chooser_set_filter: set_filter].}
{.deprecated: [gtk_file_chooser_get_filter: get_filter].}
{.deprecated: [gtk_file_chooser_add_shortcut_folder: add_shortcut_folder].}
{.deprecated: [gtk_file_chooser_remove_shortcut_folder: remove_shortcut_folder].}
{.deprecated: [gtk_file_chooser_list_shortcut_folders: list_shortcut_folders].}
{.deprecated: [gtk_file_chooser_add_shortcut_folder_uri: add_shortcut_folder_uri].}
{.deprecated: [gtk_file_chooser_remove_shortcut_folder_uri: remove_shortcut_folder_uri].}
{.deprecated: [gtk_file_chooser_list_shortcut_folder_uris: list_shortcut_folder_uris].}
{.deprecated: [gtk_file_chooser_button_get_type: file_chooser_button_get_type].}
{.deprecated: [gtk_file_chooser_button_new: file_chooser_button_new].}
{.deprecated: [gtk_file_chooser_button_new_with_dialog: file_chooser_button_new_with_dialog].}
{.deprecated: [gtk_file_chooser_button_get_title: get_title].}
{.deprecated: [gtk_file_chooser_button_set_title: set_title].}
{.deprecated: [gtk_file_chooser_button_get_width_chars: get_width_chars].}
{.deprecated: [gtk_file_chooser_button_set_width_chars: set_width_chars].}
{.deprecated: [gtk_file_chooser_button_get_focus_on_click: get_focus_on_click].}
{.deprecated: [gtk_file_chooser_button_set_focus_on_click: set_focus_on_click].}
{.deprecated: [gtk_file_chooser_dialog_get_type: file_chooser_dialog_get_type].}
{.deprecated: [gtk_file_chooser_dialog_new: file_chooser_dialog_new].}
{.deprecated: [gtk_file_chooser_widget_get_type: file_chooser_widget_get_type].}
{.deprecated: [gtk_file_chooser_widget_new: file_chooser_widget_new].}
{.deprecated: [gtk_flow_box_child_get_type: flow_box_child_get_type].}
{.deprecated: [gtk_flow_box_child_new: flow_box_child_new].}
{.deprecated: [gtk_flow_box_child_get_index: get_index].}
{.deprecated: [gtk_flow_box_child_is_selected: is_selected].}
{.deprecated: [gtk_flow_box_child_changed: changed].}
{.deprecated: [gtk_flow_box_get_type: flow_box_get_type].}
{.deprecated: [gtk_flow_box_new: flow_box_new].}
{.deprecated: [gtk_flow_box_set_homogeneous: set_homogeneous].}
{.deprecated: [gtk_flow_box_get_homogeneous: get_homogeneous].}
{.deprecated: [gtk_flow_box_set_row_spacing: set_row_spacing].}
{.deprecated: [gtk_flow_box_get_row_spacing: get_row_spacing].}
{.deprecated: [gtk_flow_box_set_column_spacing: set_column_spacing].}
{.deprecated: [gtk_flow_box_get_column_spacing: get_column_spacing].}
{.deprecated: [gtk_flow_box_set_min_children_per_line: set_min_children_per_line].}
{.deprecated: [gtk_flow_box_get_min_children_per_line: get_min_children_per_line].}
{.deprecated: [gtk_flow_box_set_max_children_per_line: set_max_children_per_line].}
{.deprecated: [gtk_flow_box_get_max_children_per_line: get_max_children_per_line].}
{.deprecated: [gtk_flow_box_set_activate_on_single_click: set_activate_on_single_click].}
{.deprecated: [gtk_flow_box_get_activate_on_single_click: get_activate_on_single_click].}
{.deprecated: [gtk_flow_box_insert: insert].}
{.deprecated: [gtk_flow_box_get_child_at_index: get_child_at_index].}
{.deprecated: [gtk_flow_box_selected_foreach: selected_foreach].}
{.deprecated: [gtk_flow_box_get_selected_children: get_selected_children].}
{.deprecated: [gtk_flow_box_select_child: select_child].}
{.deprecated: [gtk_flow_box_unselect_child: unselect_child].}
{.deprecated: [gtk_flow_box_select_all: select_all].}
{.deprecated: [gtk_flow_box_unselect_all: unselect_all].}
{.deprecated: [gtk_flow_box_set_selection_mode: set_selection_mode].}
{.deprecated: [gtk_flow_box_get_selection_mode: get_selection_mode].}
{.deprecated: [gtk_flow_box_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_flow_box_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_flow_box_set_filter_func: set_filter_func].}
{.deprecated: [gtk_flow_box_invalidate_filter: invalidate_filter].}
{.deprecated: [gtk_flow_box_set_sort_func: set_sort_func].}
{.deprecated: [gtk_flow_box_invalidate_sort: invalidate_sort].}
{.deprecated: [gtk_font_button_get_type: font_button_get_type].}
{.deprecated: [gtk_font_button_new: font_button_new].}
{.deprecated: [gtk_font_button_new_with_font: font_button_new_with_font].}
{.deprecated: [gtk_font_button_get_title: get_title].}
{.deprecated: [gtk_font_button_set_title: set_title].}
{.deprecated: [gtk_font_button_get_use_font: get_use_font].}
{.deprecated: [gtk_font_button_set_use_font: set_use_font].}
{.deprecated: [gtk_font_button_get_use_size: get_use_size].}
{.deprecated: [gtk_font_button_set_use_size: set_use_size].}
{.deprecated: [gtk_font_button_get_font_name: get_font_name].}
{.deprecated: [gtk_font_button_set_font_name: set_font_name].}
{.deprecated: [gtk_font_button_get_show_style: get_show_style].}
{.deprecated: [gtk_font_button_set_show_style: set_show_style].}
{.deprecated: [gtk_font_button_get_show_size: get_show_size].}
{.deprecated: [gtk_font_button_set_show_size: set_show_size].}
{.deprecated: [gtk_font_chooser_get_type: font_chooser_get_type].}
{.deprecated: [gtk_font_chooser_get_font_family: get_font_family].}
{.deprecated: [gtk_font_chooser_get_font_face: get_font_face].}
{.deprecated: [gtk_font_chooser_get_font_size: get_font_size].}
{.deprecated: [gtk_font_chooser_get_font_desc: get_font_desc].}
{.deprecated: [gtk_font_chooser_set_font_desc: set_font_desc].}
{.deprecated: [gtk_font_chooser_get_font: get_font].}
{.deprecated: [gtk_font_chooser_set_font: set_font].}
{.deprecated: [gtk_font_chooser_get_preview_text: get_preview_text].}
{.deprecated: [gtk_font_chooser_set_preview_text: set_preview_text].}
{.deprecated: [gtk_font_chooser_get_show_preview_entry: get_show_preview_entry].}
{.deprecated: [gtk_font_chooser_set_show_preview_entry: set_show_preview_entry].}
{.deprecated: [gtk_font_chooser_set_filter_func: set_filter_func].}
{.deprecated: [gtk_font_chooser_dialog_get_type: font_chooser_dialog_get_type].}
{.deprecated: [gtk_font_chooser_dialog_new: font_chooser_dialog_new].}
{.deprecated: [gtk_font_chooser_widget_get_type: font_chooser_widget_get_type].}
{.deprecated: [gtk_font_chooser_widget_new: font_chooser_widget_new].}
{.deprecated: [gtk_gesture_get_type: gesture_get_type].}
{.deprecated: [gtk_gesture_get_device: get_device].}
{.deprecated: [gtk_gesture_set_state: set_state].}
{.deprecated: [gtk_gesture_get_sequence_state: get_sequence_state].}
{.deprecated: [gtk_gesture_set_sequence_state: set_sequence_state].}
{.deprecated: [gtk_gesture_get_sequences: get_sequences].}
{.deprecated: [gtk_gesture_get_last_updated_sequence: get_last_updated_sequence].}
{.deprecated: [gtk_gesture_handles_sequence: handles_sequence].}
{.deprecated: [gtk_gesture_get_last_event: get_last_event].}
{.deprecated: [gtk_gesture_get_point: get_point].}
{.deprecated: [gtk_gesture_get_bounding_box: get_bounding_box].}
{.deprecated: [gtk_gesture_get_bounding_box_center: get_bounding_box_center].}
{.deprecated: [gtk_gesture_is_active: is_active].}
{.deprecated: [gtk_gesture_is_recognized: is_recognized].}
{.deprecated: [gtk_gesture_get_window: get_window].}
{.deprecated: [gtk_gesture_set_window: set_window].}
{.deprecated: [gtk_gesture_group: group].}
{.deprecated: [gtk_gesture_ungroup: ungroup].}
{.deprecated: [gtk_gesture_get_group: get_group].}
{.deprecated: [gtk_gesture_is_grouped_with: is_grouped_with].}
{.deprecated: [gtk_gesture_single_get_type: gesture_single_get_type].}
{.deprecated: [gtk_gesture_single_get_touch_only: get_touch_only].}
{.deprecated: [gtk_gesture_single_set_touch_only: set_touch_only].}
{.deprecated: [gtk_gesture_single_get_exclusive: get_exclusive].}
{.deprecated: [gtk_gesture_single_set_exclusive: set_exclusive].}
{.deprecated: [gtk_gesture_single_get_button: get_button].}
{.deprecated: [gtk_gesture_single_set_button: set_button].}
{.deprecated: [gtk_gesture_single_get_current_button: get_current_button].}
{.deprecated: [gtk_gesture_single_get_current_sequence: get_current_sequence].}
{.deprecated: [gtk_gesture_drag_get_type: gesture_drag_get_type].}
{.deprecated: [gtk_gesture_drag_new: gesture_drag_new].}
{.deprecated: [gtk_gesture_drag_get_start_point: get_start_point].}
{.deprecated: [gtk_gesture_drag_get_offset: get_offset].}
{.deprecated: [gtk_gesture_long_press_get_type: gesture_long_press_get_type].}
{.deprecated: [gtk_gesture_long_press_new: gesture_long_press_new].}
{.deprecated: [gtk_gesture_multi_press_get_type: gesture_multi_press_get_type].}
{.deprecated: [gtk_gesture_multi_press_new: gesture_multi_press_new].}
{.deprecated: [gtk_gesture_multi_press_set_area: set_area].}
{.deprecated: [gtk_gesture_multi_press_get_area: get_area].}
{.deprecated: [gtk_gesture_pan_get_type: gesture_pan_get_type].}
{.deprecated: [gtk_gesture_pan_new: gesture_pan_new].}
{.deprecated: [gtk_gesture_pan_get_orientation: get_orientation].}
{.deprecated: [gtk_gesture_pan_set_orientation: set_orientation].}
{.deprecated: [gtk_gesture_rotate_get_type: gesture_rotate_get_type].}
{.deprecated: [gtk_gesture_rotate_new: gesture_rotate_new].}
{.deprecated: [gtk_gesture_rotate_get_angle_delta: get_angle_delta].}
{.deprecated: [gtk_gesture_swipe_get_type: gesture_swipe_get_type].}
{.deprecated: [gtk_gesture_swipe_new: gesture_swipe_new].}
{.deprecated: [gtk_gesture_swipe_get_velocity: get_velocity].}
{.deprecated: [gtk_gesture_zoom_get_type: gesture_zoom_get_type].}
{.deprecated: [gtk_gesture_zoom_new: gesture_zoom_new].}
{.deprecated: [gtk_gesture_zoom_get_scale_delta: get_scale_delta].}
{.deprecated: [gtk_gl_area_get_type: gl_area_get_type].}
{.deprecated: [gtk_gl_area_new: gl_area_new].}
{.deprecated: [gtk_gl_area_get_profile: get_profile].}
{.deprecated: [gtk_gl_area_set_profile: set_profile].}
{.deprecated: [gtk_gl_area_get_has_alpha: get_has_alpha].}
{.deprecated: [gtk_gl_area_set_has_alpha: set_has_alpha].}
{.deprecated: [gtk_gl_area_get_has_depth_buffer: get_has_depth_buffer].}
{.deprecated: [gtk_gl_area_set_has_depth_buffer: set_has_depth_buffer].}
{.deprecated: [gtk_gl_area_get_has_stencil_buffer: get_has_stencil_buffer].}
{.deprecated: [gtk_gl_area_set_has_stencil_buffer: set_has_stencil_buffer].}
{.deprecated: [gtk_gl_area_get_auto_render: get_auto_render].}
{.deprecated: [gtk_gl_area_set_auto_render: set_auto_render].}
{.deprecated: [gtk_gl_area_queue_render: queue_render].}
{.deprecated: [gtk_gl_area_get_context: get_context].}
{.deprecated: [gtk_gl_area_make_current: make_current].}
{.deprecated: [gtk_gl_area_attach_buffers: attach_buffers].}
{.deprecated: [gtk_gl_area_set_error: set_error].}
{.deprecated: [gtk_gl_area_get_error: get_error].}
{.deprecated: [gtk_grid_get_type: grid_get_type].}
{.deprecated: [gtk_grid_new: grid_new].}
{.deprecated: [gtk_grid_attach: attach].}
{.deprecated: [gtk_grid_attach_next_to: attach_next_to].}
{.deprecated: [gtk_grid_get_child_at: get_child_at].}
{.deprecated: [gtk_grid_insert_row: insert_row].}
{.deprecated: [gtk_grid_insert_column: insert_column].}
{.deprecated: [gtk_grid_remove_row: remove_row].}
{.deprecated: [gtk_grid_remove_column: remove_column].}
{.deprecated: [gtk_grid_insert_next_to: insert_next_to].}
{.deprecated: [gtk_grid_set_row_homogeneous: set_row_homogeneous].}
{.deprecated: [gtk_grid_get_row_homogeneous: get_row_homogeneous].}
{.deprecated: [gtk_grid_set_row_spacing: set_row_spacing].}
{.deprecated: [gtk_grid_get_row_spacing: get_row_spacing].}
{.deprecated: [gtk_grid_set_column_homogeneous: set_column_homogeneous].}
{.deprecated: [gtk_grid_get_column_homogeneous: get_column_homogeneous].}
{.deprecated: [gtk_grid_set_column_spacing: set_column_spacing].}
{.deprecated: [gtk_grid_get_column_spacing: get_column_spacing].}
{.deprecated: [gtk_grid_set_row_baseline_position: set_row_baseline_position].}
{.deprecated: [gtk_grid_get_row_baseline_position: get_row_baseline_position].}
{.deprecated: [gtk_grid_set_baseline_row: set_baseline_row].}
{.deprecated: [gtk_grid_get_baseline_row: get_baseline_row].}
{.deprecated: [gtk_header_bar_get_type: header_bar_get_type].}
{.deprecated: [gtk_header_bar_new: header_bar_new].}
{.deprecated: [gtk_header_bar_set_title: set_title].}
{.deprecated: [gtk_header_bar_get_title: get_title].}
{.deprecated: [gtk_header_bar_set_subtitle: set_subtitle].}
{.deprecated: [gtk_header_bar_get_subtitle: get_subtitle].}
{.deprecated: [gtk_header_bar_set_custom_title: set_custom_title].}
{.deprecated: [gtk_header_bar_get_custom_title: get_custom_title].}
{.deprecated: [gtk_header_bar_pack_start: pack_start].}
{.deprecated: [gtk_header_bar_pack_end: pack_end].}
{.deprecated: [gtk_header_bar_get_show_close_button: get_show_close_button].}
{.deprecated: [gtk_header_bar_set_show_close_button: set_show_close_button].}
{.deprecated: [gtk_header_bar_set_has_subtitle: set_has_subtitle].}
{.deprecated: [gtk_header_bar_get_has_subtitle: get_has_subtitle].}
{.deprecated: [gtk_header_bar_set_decoration_layout: set_decoration_layout].}
{.deprecated: [gtk_header_bar_get_decoration_layout: get_decoration_layout].}
{.deprecated: [gtk_icon_factory_get_type: icon_factory_get_type].}
{.deprecated: [gtk_icon_factory_new: icon_factory_new].}
{.deprecated: [gtk_icon_factory_add: add].}
{.deprecated: [gtk_icon_factory_lookup: lookup].}
{.deprecated: [gtk_icon_factory_add_default: add_default].}
{.deprecated: [gtk_icon_factory_remove_default: remove_default].}
{.deprecated: [gtk_icon_factory_lookup_default: icon_factory_lookup_default].}
{.deprecated: [gtk_icon_size_lookup_for_settings: icon_size_lookup_for_settings].}
{.deprecated: [gtk_icon_size_register: icon_size_register].}
{.deprecated: [gtk_icon_size_register_alias: icon_size_register_alias].}
{.deprecated: [gtk_icon_size_from_name: icon_size_from_name].}
{.deprecated: [gtk_icon_size_get_name: get_name].}
{.deprecated: [gtk_icon_set_get_type: icon_set_get_type].}
{.deprecated: [gtk_icon_set_new: icon_set_new].}
{.deprecated: [gtk_icon_set_new_from_pixbuf: icon_set_new_from_pixbuf].}
{.deprecated: [gtk_icon_set_ref: `ref`].}
{.deprecated: [gtk_icon_set_unref: unref].}
{.deprecated: [gtk_icon_set_copy: copy].}
{.deprecated: [gtk_icon_set_render_icon: render_icon].}
{.deprecated: [gtk_icon_set_add_source: add_source].}
{.deprecated: [gtk_icon_set_get_sizes: get_sizes].}
{.deprecated: [gtk_icon_source_get_type: icon_source_get_type].}
{.deprecated: [gtk_icon_source_new: icon_source_new].}
{.deprecated: [gtk_icon_source_copy: copy].}
{.deprecated: [gtk_icon_source_free: free].}
{.deprecated: [gtk_icon_source_set_filename: set_filename].}
{.deprecated: [gtk_icon_source_set_icon_name: set_icon_name].}
{.deprecated: [gtk_icon_source_set_pixbuf: set_pixbuf].}
{.deprecated: [gtk_icon_source_get_filename: get_filename].}
{.deprecated: [gtk_icon_source_get_icon_name: get_icon_name].}
{.deprecated: [gtk_icon_source_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_icon_source_set_direction_wildcarded: set_direction_wildcarded].}
{.deprecated: [gtk_icon_source_set_state_wildcarded: set_state_wildcarded].}
{.deprecated: [gtk_icon_source_set_size_wildcarded: set_size_wildcarded].}
{.deprecated: [gtk_icon_source_get_size_wildcarded: get_size_wildcarded].}
{.deprecated: [gtk_icon_source_get_state_wildcarded: get_state_wildcarded].}
{.deprecated: [gtk_icon_source_get_direction_wildcarded: get_direction_wildcarded].}
{.deprecated: [gtk_icon_source_set_direction: set_direction].}
{.deprecated: [gtk_icon_source_set_state: set_state].}
{.deprecated: [gtk_icon_source_set_size: set_size].}
{.deprecated: [gtk_icon_source_get_direction: get_direction].}
{.deprecated: [gtk_icon_source_get_state: get_state].}
{.deprecated: [gtk_icon_source_get_size: get_size].}
{.deprecated: [gtk_style_properties_get_type: style_properties_get_type].}
{.deprecated: [gtk_style_properties_register_property: style_properties_register_property].}
{.deprecated: [gtk_style_properties_lookup_property: style_properties_lookup_property].}
{.deprecated: [gtk_style_properties_new: style_properties_new].}
{.deprecated: [gtk_style_properties_map_color: map_color].}
{.deprecated: [gtk_style_properties_lookup_color: lookup_color].}
{.deprecated: [gtk_style_properties_set_property: set_property].}
{.deprecated: [gtk_style_properties_set: set].}
{.deprecated: [gtk_style_properties_get_property: get_property].}
{.deprecated: [gtk_style_properties_get: get].}
{.deprecated: [gtk_style_properties_unset_property: unset_property].}
{.deprecated: [gtk_style_properties_clear: clear].}
{.deprecated: [gtk_style_properties_merge: merge].}
{.deprecated: [gtk_style_provider_get_type: style_provider_get_type].}
{.deprecated: [gtk_style_provider_get_style: get_style].}
{.deprecated: [gtk_style_provider_get_style_property: get_style_property].}
{.deprecated: [gtk_style_provider_get_icon_factory: get_icon_factory].}
{.deprecated: [gtk_style_context_get_type: style_context_get_type].}
{.deprecated: [gtk_style_context_new: style_context_new].}
{.deprecated: [gtk_style_context_add_provider_for_screen: style_context_add_provider_for_screen].}
{.deprecated: [gtk_style_context_remove_provider_for_screen: style_context_remove_provider_for_screen].}
{.deprecated: [gtk_style_context_add_provider: add_provider].}
{.deprecated: [gtk_style_context_remove_provider: remove_provider].}
{.deprecated: [gtk_style_context_save: save].}
{.deprecated: [gtk_style_context_restore: restore].}
{.deprecated: [gtk_style_context_get_section: get_section].}
{.deprecated: [gtk_style_context_get_property: get_property].}
{.deprecated: [gtk_style_context_get: get].}
{.deprecated: [gtk_style_context_set_state: set_state].}
{.deprecated: [gtk_style_context_get_state: get_state].}
{.deprecated: [gtk_style_context_set_scale: set_scale].}
{.deprecated: [gtk_style_context_get_scale: get_scale].}
{.deprecated: [gtk_style_context_state_is_running: state_is_running].}
{.deprecated: [gtk_style_context_set_path: set_path].}
{.deprecated: [gtk_style_context_get_path: get_path].}
{.deprecated: [gtk_style_context_set_parent: set_parent].}
{.deprecated: [gtk_style_context_get_parent: get_parent].}
{.deprecated: [gtk_style_context_list_classes: list_classes].}
{.deprecated: [gtk_style_context_add_class: add_class].}
{.deprecated: [gtk_style_context_remove_class: remove_class].}
{.deprecated: [gtk_style_context_has_class: has_class].}
{.deprecated: [gtk_style_context_list_regions: list_regions].}
{.deprecated: [gtk_style_context_add_region: add_region].}
{.deprecated: [gtk_style_context_remove_region: remove_region].}
{.deprecated: [gtk_style_context_has_region: has_region].}
{.deprecated: [gtk_style_context_get_style_property: get_style_property].}
{.deprecated: [gtk_style_context_get_style: get_style].}
{.deprecated: [gtk_style_context_lookup_icon_set: lookup_icon_set].}
{.deprecated: [gtk_icon_set_render_icon_pixbuf: render_icon_pixbuf].}
{.deprecated: [gtk_icon_set_render_icon_surface: render_icon_surface].}
{.deprecated: [gtk_style_context_set_screen: set_screen].}
{.deprecated: [gtk_style_context_get_screen: get_screen].}
{.deprecated: [gtk_style_context_set_frame_clock: set_frame_clock].}
{.deprecated: [gtk_style_context_get_frame_clock: get_frame_clock].}
{.deprecated: [gtk_style_context_set_direction: set_direction].}
{.deprecated: [gtk_style_context_get_direction: get_direction].}
{.deprecated: [gtk_style_context_set_junction_sides: set_junction_sides].}
{.deprecated: [gtk_style_context_get_junction_sides: get_junction_sides].}
{.deprecated: [gtk_style_context_lookup_color: lookup_color].}
{.deprecated: [gtk_style_context_notify_state_change: notify_state_change].}
{.deprecated: [gtk_style_context_cancel_animations: cancel_animations].}
{.deprecated: [gtk_style_context_scroll_animations: scroll_animations].}
{.deprecated: [gtk_style_context_push_animatable_region: push_animatable_region].}
{.deprecated: [gtk_style_context_pop_animatable_region: pop_animatable_region].}
{.deprecated: [gtk_style_context_get_color: get_color].}
{.deprecated: [gtk_style_context_get_background_color: get_background_color].}
{.deprecated: [gtk_style_context_get_border_color: get_border_color].}
{.deprecated: [gtk_style_context_get_font: get_font].}
{.deprecated: [gtk_style_context_get_border: get_border].}
{.deprecated: [gtk_style_context_get_padding: get_padding].}
{.deprecated: [gtk_style_context_get_margin: get_margin].}
{.deprecated: [gtk_style_context_invalidate: invalidate].}
{.deprecated: [gtk_style_context_reset_widgets: style_context_reset_widgets].}
{.deprecated: [gtk_style_context_set_background: set_background].}
{.deprecated: [gtk_render_insertion_cursor: render_insertion_cursor].}
{.deprecated: [gtk_draw_insertion_cursor: draw_insertion_cursor].}
{.deprecated: [gtk_icon_theme_error_quark: icon_theme_error_quark].}
{.deprecated: [gtk_icon_theme_get_type: icon_theme_get_type].}
{.deprecated: [gtk_icon_theme_new: icon_theme_new].}
{.deprecated: [gtk_icon_theme_get_default: icon_theme_get_default].}
{.deprecated: [gtk_icon_theme_get_for_screen: icon_theme_get_for_screen].}
{.deprecated: [gtk_icon_theme_set_screen: set_screen].}
{.deprecated: [gtk_icon_theme_set_search_path: set_search_path].}
{.deprecated: [gtk_icon_theme_get_search_path: get_search_path].}
{.deprecated: [gtk_icon_theme_append_search_path: append_search_path].}
{.deprecated: [gtk_icon_theme_prepend_search_path: prepend_search_path].}
{.deprecated: [gtk_icon_theme_add_resource_path: add_resource_path].}
{.deprecated: [gtk_icon_theme_set_custom_theme: set_custom_theme].}
{.deprecated: [gtk_icon_theme_has_icon: has_icon].}
{.deprecated: [gtk_icon_theme_get_icon_sizes: get_icon_sizes].}
{.deprecated: [gtk_icon_theme_lookup_icon: lookup_icon].}
{.deprecated: [gtk_icon_theme_lookup_icon_for_scale: lookup_icon_for_scale].}
{.deprecated: [gtk_icon_theme_choose_icon: choose_icon].}
{.deprecated: [gtk_icon_theme_choose_icon_for_scale: choose_icon_for_scale].}
{.deprecated: [gtk_icon_theme_load_icon: load_icon].}
{.deprecated: [gtk_icon_theme_load_icon_for_scale: load_icon_for_scale].}
{.deprecated: [gtk_icon_theme_load_surface: load_surface].}
{.deprecated: [gtk_icon_theme_lookup_by_gicon: lookup_by_gicon].}
{.deprecated: [gtk_icon_theme_lookup_by_gicon_for_scale: lookup_by_gicon_for_scale].}
{.deprecated: [gtk_icon_theme_list_icons: list_icons].}
{.deprecated: [gtk_icon_theme_list_contexts: list_contexts].}
{.deprecated: [gtk_icon_theme_get_example_icon_name: get_example_icon_name].}
{.deprecated: [gtk_icon_theme_rescan_if_needed: rescan_if_needed].}
{.deprecated: [gtk_icon_theme_add_builtin_icon: icon_theme_add_builtin_icon].}
{.deprecated: [gtk_icon_info_get_type: icon_info_get_type].}
{.deprecated: [gtk_icon_info_copy: copy].}
{.deprecated: [gtk_icon_info_free: free].}
{.deprecated: [gtk_icon_info_new_for_pixbuf: icon_info_new_for_pixbuf].}
{.deprecated: [gtk_icon_info_get_base_size: get_base_size].}
{.deprecated: [gtk_icon_info_get_base_scale: get_base_scale].}
{.deprecated: [gtk_icon_info_get_filename: get_filename].}
{.deprecated: [gtk_icon_info_get_builtin_pixbuf: get_builtin_pixbuf].}
{.deprecated: [gtk_icon_info_is_symbolic: is_symbolic].}
{.deprecated: [gtk_icon_info_load_icon: load_icon].}
{.deprecated: [gtk_icon_info_load_surface: load_surface].}
{.deprecated: [gtk_icon_info_load_icon_async: load_icon_async].}
{.deprecated: [gtk_icon_info_load_icon_finish: load_icon_finish].}
{.deprecated: [gtk_icon_info_load_symbolic: load_symbolic].}
{.deprecated: [gtk_icon_info_load_symbolic_async: load_symbolic_async].}
{.deprecated: [gtk_icon_info_load_symbolic_finish: load_symbolic_finish].}
{.deprecated: [gtk_icon_info_load_symbolic_for_context: load_symbolic_for_context].}
{.deprecated: [gtk_icon_info_load_symbolic_for_context_async: load_symbolic_for_context_async].}
{.deprecated: [gtk_icon_info_load_symbolic_for_context_finish: load_symbolic_for_context_finish].}
{.deprecated: [gtk_icon_info_load_symbolic_for_style: load_symbolic_for_style].}
{.deprecated: [gtk_icon_info_set_raw_coordinates: set_raw_coordinates].}
{.deprecated: [gtk_icon_info_get_embedded_rect: get_embedded_rect].}
{.deprecated: [gtk_icon_info_get_attach_points: get_attach_points].}
{.deprecated: [gtk_icon_info_get_display_name: get_display_name].}
{.deprecated: [gtk_tooltip_get_type: tooltip_get_type].}
{.deprecated: [gtk_tooltip_set_markup: set_markup].}
{.deprecated: [gtk_tooltip_set_text: set_text].}
{.deprecated: [gtk_tooltip_set_icon: set_icon].}
{.deprecated: [gtk_tooltip_set_icon_from_stock: set_icon_from_stock].}
{.deprecated: [gtk_tooltip_set_icon_from_icon_name: set_icon_from_icon_name].}
{.deprecated: [gtk_tooltip_set_icon_from_gicon: set_icon_from_gicon].}
{.deprecated: [gtk_tooltip_set_custom: set_custom].}
{.deprecated: [gtk_tooltip_set_tip_area: set_tip_area].}
{.deprecated: [gtk_tooltip_trigger_tooltip_query: tooltip_trigger_tooltip_query].}
{.deprecated: [gtk_icon_view_get_type: icon_view_get_type].}
{.deprecated: [gtk_icon_view_new: icon_view_new].}
{.deprecated: [gtk_icon_view_new_with_area: icon_view_new_with_area].}
{.deprecated: [gtk_icon_view_new_with_model: icon_view_new_with_model].}
{.deprecated: [gtk_icon_view_set_model: set_model].}
{.deprecated: [gtk_icon_view_get_model: get_model].}
{.deprecated: [gtk_icon_view_set_text_column: set_text_column].}
{.deprecated: [gtk_icon_view_get_text_column: get_text_column].}
{.deprecated: [gtk_icon_view_set_markup_column: set_markup_column].}
{.deprecated: [gtk_icon_view_get_markup_column: get_markup_column].}
{.deprecated: [gtk_icon_view_set_pixbuf_column: set_pixbuf_column].}
{.deprecated: [gtk_icon_view_get_pixbuf_column: get_pixbuf_column].}
{.deprecated: [gtk_icon_view_set_item_orientation: set_item_orientation].}
{.deprecated: [gtk_icon_view_get_item_orientation: get_item_orientation].}
{.deprecated: [gtk_icon_view_set_columns: set_columns].}
{.deprecated: [gtk_icon_view_get_columns: get_columns].}
{.deprecated: [gtk_icon_view_set_item_width: set_item_width].}
{.deprecated: [gtk_icon_view_get_item_width: get_item_width].}
{.deprecated: [gtk_icon_view_set_spacing: set_spacing].}
{.deprecated: [gtk_icon_view_get_spacing: get_spacing].}
{.deprecated: [gtk_icon_view_set_row_spacing: set_row_spacing].}
{.deprecated: [gtk_icon_view_get_row_spacing: get_row_spacing].}
{.deprecated: [gtk_icon_view_set_column_spacing: set_column_spacing].}
{.deprecated: [gtk_icon_view_get_column_spacing: get_column_spacing].}
{.deprecated: [gtk_icon_view_set_margin: set_margin].}
{.deprecated: [gtk_icon_view_get_margin: get_margin].}
{.deprecated: [gtk_icon_view_set_item_padding: set_item_padding].}
{.deprecated: [gtk_icon_view_get_item_padding: get_item_padding].}
{.deprecated: [gtk_icon_view_get_path_at_pos: get_path_at_pos].}
{.deprecated: [gtk_icon_view_get_item_at_pos: get_item_at_pos].}
{.deprecated: [gtk_icon_view_get_visible_range: get_visible_range].}
{.deprecated: [gtk_icon_view_set_activate_on_single_click: set_activate_on_single_click].}
{.deprecated: [gtk_icon_view_get_activate_on_single_click: get_activate_on_single_click].}
{.deprecated: [gtk_icon_view_selected_foreach: selected_foreach].}
{.deprecated: [gtk_icon_view_set_selection_mode: set_selection_mode].}
{.deprecated: [gtk_icon_view_get_selection_mode: get_selection_mode].}
{.deprecated: [gtk_icon_view_select_path: select_path].}
{.deprecated: [gtk_icon_view_unselect_path: unselect_path].}
{.deprecated: [gtk_icon_view_path_is_selected: path_is_selected].}
{.deprecated: [gtk_icon_view_get_item_row: get_item_row].}
{.deprecated: [gtk_icon_view_get_item_column: get_item_column].}
{.deprecated: [gtk_icon_view_get_selected_items: get_selected_items].}
{.deprecated: [gtk_icon_view_select_all: select_all].}
{.deprecated: [gtk_icon_view_unselect_all: unselect_all].}
{.deprecated: [gtk_icon_view_item_activated: item_activated].}
{.deprecated: [gtk_icon_view_set_cursor: set_cursor].}
{.deprecated: [gtk_icon_view_get_cursor: get_cursor].}
{.deprecated: [gtk_icon_view_scroll_to_path: scroll_to_path].}
{.deprecated: [gtk_icon_view_enable_model_drag_source: enable_model_drag_source].}
{.deprecated: [gtk_icon_view_enable_model_drag_dest: enable_model_drag_dest].}
{.deprecated: [gtk_icon_view_unset_model_drag_source: unset_model_drag_source].}
{.deprecated: [gtk_icon_view_unset_model_drag_dest: unset_model_drag_dest].}
{.deprecated: [gtk_icon_view_set_reorderable: set_reorderable].}
{.deprecated: [gtk_icon_view_get_reorderable: get_reorderable].}
{.deprecated: [gtk_icon_view_set_drag_dest_item: set_drag_dest_item].}
{.deprecated: [gtk_icon_view_get_drag_dest_item: get_drag_dest_item].}
{.deprecated: [gtk_icon_view_get_dest_item_at_pos: get_dest_item_at_pos].}
{.deprecated: [gtk_icon_view_create_drag_icon: create_drag_icon].}
{.deprecated: [gtk_icon_view_convert_widget_to_bin_window_coords: convert_widget_to_bin_window_coords].}
{.deprecated: [gtk_icon_view_get_cell_rect: get_cell_rect].}
{.deprecated: [gtk_icon_view_set_tooltip_item: set_tooltip_item].}
{.deprecated: [gtk_icon_view_set_tooltip_cell: set_tooltip_cell].}
{.deprecated: [gtk_icon_view_get_tooltip_context: get_tooltip_context].}
{.deprecated: [gtk_icon_view_set_tooltip_column: set_tooltip_column].}
{.deprecated: [gtk_icon_view_get_tooltip_column: get_tooltip_column].}
{.deprecated: [gtk_im_context_simple_get_type: im_context_simple_get_type].}
{.deprecated: [gtk_im_context_simple_new: im_context_simple_new].}
{.deprecated: [gtk_im_context_simple_add_table: add_table].}
{.deprecated: [gtk_im_multicontext_get_type: im_multicontext_get_type].}
{.deprecated: [gtk_im_multicontext_new: im_multicontext_new].}
{.deprecated: [gtk_im_multicontext_append_menuitems: append_menuitems].}
{.deprecated: [gtk_im_multicontext_get_context_id: get_context_id].}
{.deprecated: [gtk_im_multicontext_set_context_id: set_context_id].}
{.deprecated: [gtk_info_bar_get_type: info_bar_get_type].}
{.deprecated: [gtk_info_bar_new: info_bar_new].}
{.deprecated: [gtk_info_bar_new_with_buttons: info_bar_new_with_buttons].}
{.deprecated: [gtk_info_bar_get_action_area: get_action_area].}
{.deprecated: [gtk_info_bar_get_content_area: get_content_area].}
{.deprecated: [gtk_info_bar_add_action_widget: add_action_widget].}
{.deprecated: [gtk_info_bar_add_button: add_button].}
{.deprecated: [gtk_info_bar_add_buttons: add_buttons].}
{.deprecated: [gtk_info_bar_set_response_sensitive: set_response_sensitive].}
{.deprecated: [gtk_info_bar_set_default_response: set_default_response].}
{.deprecated: [gtk_info_bar_response: response].}
{.deprecated: [gtk_info_bar_set_message_type: set_message_type].}
{.deprecated: [gtk_info_bar_get_message_type: get_message_type].}
{.deprecated: [gtk_info_bar_set_show_close_button: set_show_close_button].}
{.deprecated: [gtk_info_bar_get_show_close_button: get_show_close_button].}
{.deprecated: [gtk_invisible_get_type: invisible_get_type].}
{.deprecated: [gtk_invisible_new: invisible_new].}
{.deprecated: [gtk_invisible_new_for_screen: invisible_new_for_screen].}
{.deprecated: [gtk_invisible_set_screen: set_screen].}
{.deprecated: [gtk_invisible_get_screen: get_screen].}
{.deprecated: [gtk_layout_get_type: layout_get_type].}
{.deprecated: [gtk_layout_new: layout_new].}
{.deprecated: [gtk_layout_get_bin_window: get_bin_window].}
{.deprecated: [gtk_layout_put: put].}
{.deprecated: [gtk_layout_move: move].}
{.deprecated: [gtk_layout_set_size: set_size].}
{.deprecated: [gtk_layout_get_size: get_size].}
{.deprecated: [gtk_layout_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_layout_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_layout_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_layout_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_level_bar_get_type: level_bar_get_type].}
{.deprecated: [gtk_level_bar_new: level_bar_new].}
{.deprecated: [gtk_level_bar_new_for_interval: level_bar_new_for_interval].}
{.deprecated: [gtk_level_bar_set_mode: set_mode].}
{.deprecated: [gtk_level_bar_get_mode: get_mode].}
{.deprecated: [gtk_level_bar_set_value: set_value].}
{.deprecated: [gtk_level_bar_get_value: get_value].}
{.deprecated: [gtk_level_bar_set_min_value: set_min_value].}
{.deprecated: [gtk_level_bar_get_min_value: get_min_value].}
{.deprecated: [gtk_level_bar_set_max_value: set_max_value].}
{.deprecated: [gtk_level_bar_get_max_value: get_max_value].}
{.deprecated: [gtk_level_bar_set_inverted: set_inverted].}
{.deprecated: [gtk_level_bar_get_inverted: get_inverted].}
{.deprecated: [gtk_level_bar_add_offset_value: add_offset_value].}
{.deprecated: [gtk_level_bar_remove_offset_value: remove_offset_value].}
{.deprecated: [gtk_level_bar_get_offset_value: get_offset_value].}
{.deprecated: [gtk_link_button_get_type: link_button_get_type].}
{.deprecated: [gtk_link_button_new: link_button_new].}
{.deprecated: [gtk_link_button_new_with_label: link_button_new_with_label].}
{.deprecated: [gtk_link_button_get_uri: get_uri].}
{.deprecated: [gtk_link_button_set_uri: set_uri].}
{.deprecated: [gtk_link_button_get_visited: get_visited].}
{.deprecated: [gtk_link_button_set_visited: set_visited].}
{.deprecated: [gtk_list_box_row_get_type: list_box_row_get_type].}
{.deprecated: [gtk_list_box_row_new: list_box_row_new].}
{.deprecated: [gtk_list_box_row_get_header: get_header].}
{.deprecated: [gtk_list_box_row_set_header: set_header].}
{.deprecated: [gtk_list_box_row_get_index: get_index].}
{.deprecated: [gtk_list_box_row_changed: changed].}
{.deprecated: [gtk_list_box_row_is_selected: is_selected].}
{.deprecated: [gtk_list_box_row_set_selectable: set_selectable].}
{.deprecated: [gtk_list_box_row_get_selectable: get_selectable].}
{.deprecated: [gtk_list_box_row_set_activatable: set_activatable].}
{.deprecated: [gtk_list_box_row_get_activatable: get_activatable].}
{.deprecated: [gtk_list_box_get_type: list_box_get_type].}
{.deprecated: [gtk_list_box_prepend: prepend].}
{.deprecated: [gtk_list_box_insert: insert].}
{.deprecated: [gtk_list_box_get_selected_row: get_selected_row].}
{.deprecated: [gtk_list_box_get_row_at_index: get_row_at_index].}
{.deprecated: [gtk_list_box_get_row_at_y: get_row_at_y].}
{.deprecated: [gtk_list_box_select_row: select_row].}
{.deprecated: [gtk_list_box_set_placeholder: set_placeholder].}
{.deprecated: [gtk_list_box_set_adjustment: set_adjustment].}
{.deprecated: [gtk_list_box_get_adjustment: get_adjustment].}
{.deprecated: [gtk_list_box_selected_foreach: selected_foreach].}
{.deprecated: [gtk_list_box_get_selected_rows: get_selected_rows].}
{.deprecated: [gtk_list_box_unselect_row: unselect_row].}
{.deprecated: [gtk_list_box_select_all: select_all].}
{.deprecated: [gtk_list_box_unselect_all: unselect_all].}
{.deprecated: [gtk_list_box_set_selection_mode: set_selection_mode].}
{.deprecated: [gtk_list_box_get_selection_mode: get_selection_mode].}
{.deprecated: [gtk_list_box_set_filter_func: set_filter_func].}
{.deprecated: [gtk_list_box_set_header_func: set_header_func].}
{.deprecated: [gtk_list_box_invalidate_filter: invalidate_filter].}
{.deprecated: [gtk_list_box_invalidate_sort: invalidate_sort].}
{.deprecated: [gtk_list_box_invalidate_headers: invalidate_headers].}
{.deprecated: [gtk_list_box_set_sort_func: set_sort_func].}
{.deprecated: [gtk_list_box_set_activate_on_single_click: set_activate_on_single_click].}
{.deprecated: [gtk_list_box_get_activate_on_single_click: get_activate_on_single_click].}
{.deprecated: [gtk_list_box_drag_unhighlight_row: drag_unhighlight_row].}
{.deprecated: [gtk_list_box_drag_highlight_row: drag_highlight_row].}
{.deprecated: [gtk_list_box_new: list_box_new].}
{.deprecated: [gtk_lock_button_get_type: lock_button_get_type].}
{.deprecated: [gtk_lock_button_new: lock_button_new].}
{.deprecated: [gtk_lock_button_get_permission: get_permission].}
{.deprecated: [gtk_lock_button_set_permission: set_permission].}
{.deprecated: [gtk_get_major_version: get_major_version].}
{.deprecated: [gtk_get_minor_version: get_minor_version].}
{.deprecated: [gtk_get_micro_version: get_micro_version].}
{.deprecated: [gtk_get_binary_age: get_binary_age].}
{.deprecated: [gtk_get_interface_age: get_interface_age].}
{.deprecated: [gtk_check_version: check_version].}
{.deprecated: [gtk_parse_args: parse_args].}
{.deprecated: [gtk_get_option_group: get_option_group].}
{.deprecated: [gtk_disable_setlocale: disable_setlocale].}
{.deprecated: [gtk_get_default_language: get_default_language].}
{.deprecated: [gtk_get_locale_direction: get_locale_direction].}
{.deprecated: [gtk_events_pending: events_pending].}
{.deprecated: [gtk_main_do_event: main_do_event].}
{.deprecated: [gtk_main: main].}
{.deprecated: [gtk_main_level: main_level].}
{.deprecated: [gtk_main_quit: main_quit].}
{.deprecated: [gtk_main_iteration: main_iteration].}
{.deprecated: [gtk_main_iteration_do: main_iteration_do].}
{.deprecated: [gtk_grab_add: grab_add].}
{.deprecated: [gtk_grab_get_current: grab_get_current].}
{.deprecated: [gtk_grab_remove: grab_remove].}
{.deprecated: [gtk_device_grab_add: device_grab_add].}
{.deprecated: [gtk_device_grab_remove: device_grab_remove].}
{.deprecated: [gtk_key_snooper_install: key_snooper_install].}
{.deprecated: [gtk_key_snooper_remove: key_snooper_remove].}
{.deprecated: [gtk_get_current_event: get_current_event].}
{.deprecated: [gtk_get_current_event_time: get_current_event_time].}
{.deprecated: [gtk_get_current_event_state: get_current_event_state].}
{.deprecated: [gtk_get_current_event_device: get_current_event_device].}
{.deprecated: [gtk_get_event_widget: get_event_widget].}
{.deprecated: [gtk_propagate_event: propagate_event].}
{.deprecated: [gtk_menu_bar_get_type: menu_bar_get_type].}
{.deprecated: [gtk_menu_bar_new: menu_bar_new].}
{.deprecated: [gtk_menu_bar_new_from_model: menu_bar_new_from_model].}
{.deprecated: [gtk_menu_bar_get_pack_direction: get_pack_direction].}
{.deprecated: [gtk_menu_bar_set_pack_direction: set_pack_direction].}
{.deprecated: [gtk_menu_bar_get_child_pack_direction: get_child_pack_direction].}
{.deprecated: [gtk_menu_bar_set_child_pack_direction: set_child_pack_direction].}
{.deprecated: [gtk_popover_get_type: popover_get_type].}
{.deprecated: [gtk_popover_new: popover_new].}
{.deprecated: [gtk_popover_new_from_model: popover_new_from_model].}
{.deprecated: [gtk_popover_set_relative_to: set_relative_to].}
{.deprecated: [gtk_popover_get_relative_to: get_relative_to].}
{.deprecated: [gtk_popover_set_pointing_to: set_pointing_to].}
{.deprecated: [gtk_popover_get_pointing_to: get_pointing_to].}
{.deprecated: [gtk_popover_set_position: set_position].}
{.deprecated: [gtk_popover_get_position: get_position].}
{.deprecated: [gtk_popover_set_modal: set_modal].}
{.deprecated: [gtk_popover_get_modal: get_modal].}
{.deprecated: [gtk_popover_bind_model: bind_model].}
{.deprecated: [gtk_menu_button_get_type: menu_button_get_type].}
{.deprecated: [gtk_menu_button_new: menu_button_new].}
{.deprecated: [gtk_menu_button_set_popup: set_popup].}
{.deprecated: [gtk_menu_button_get_popup: get_popup].}
{.deprecated: [gtk_menu_button_set_popover: set_popover].}
{.deprecated: [gtk_menu_button_get_popover: get_popover].}
{.deprecated: [gtk_menu_button_set_direction: set_direction].}
{.deprecated: [gtk_menu_button_get_direction: get_direction].}
{.deprecated: [gtk_menu_button_set_menu_model: set_menu_model].}
{.deprecated: [gtk_menu_button_get_menu_model: get_menu_model].}
{.deprecated: [gtk_menu_button_set_align_widget: set_align_widget].}
{.deprecated: [gtk_menu_button_get_align_widget: get_align_widget].}
{.deprecated: [gtk_menu_button_set_use_popover: set_use_popover].}
{.deprecated: [gtk_menu_button_get_use_popover: get_use_popover].}
{.deprecated: [gtk_size_group_get_type: size_group_get_type].}
{.deprecated: [gtk_size_group_new: size_group_new].}
{.deprecated: [gtk_size_group_set_mode: set_mode].}
{.deprecated: [gtk_size_group_get_mode: get_mode].}
{.deprecated: [gtk_size_group_set_ignore_hidden: set_ignore_hidden].}
{.deprecated: [gtk_size_group_get_ignore_hidden: get_ignore_hidden].}
{.deprecated: [gtk_size_group_add_widget: add_widget].}
{.deprecated: [gtk_size_group_remove_widget: remove_widget].}
{.deprecated: [gtk_size_group_get_widgets: get_widgets].}
{.deprecated: [gtk_tool_item_get_type: tool_item_get_type].}
{.deprecated: [gtk_tool_item_new: tool_item_new].}
{.deprecated: [gtk_tool_item_set_homogeneous: set_homogeneous].}
{.deprecated: [gtk_tool_item_get_homogeneous: get_homogeneous].}
{.deprecated: [gtk_tool_item_set_expand: set_expand].}
{.deprecated: [gtk_tool_item_get_expand: get_expand].}
{.deprecated: [gtk_tool_item_set_tooltip_text: set_tooltip_text].}
{.deprecated: [gtk_tool_item_set_tooltip_markup: set_tooltip_markup].}
{.deprecated: [gtk_tool_item_set_use_drag_window: set_use_drag_window].}
{.deprecated: [gtk_tool_item_get_use_drag_window: get_use_drag_window].}
{.deprecated: [gtk_tool_item_set_visible_horizontal: set_visible_horizontal].}
{.deprecated: [gtk_tool_item_get_visible_horizontal: get_visible_horizontal].}
{.deprecated: [gtk_tool_item_set_visible_vertical: set_visible_vertical].}
{.deprecated: [gtk_tool_item_get_visible_vertical: get_visible_vertical].}
{.deprecated: [gtk_tool_item_get_is_important: get_is_important].}
{.deprecated: [gtk_tool_item_set_is_important: set_is_important].}
{.deprecated: [gtk_tool_item_get_ellipsize_mode: get_ellipsize_mode].}
{.deprecated: [gtk_tool_item_get_icon_size: get_icon_size].}
{.deprecated: [gtk_tool_item_get_orientation: get_orientation].}
{.deprecated: [gtk_tool_item_get_toolbar_style: get_toolbar_style].}
{.deprecated: [gtk_tool_item_get_relief_style: get_relief_style].}
{.deprecated: [gtk_tool_item_get_text_alignment: get_text_alignment].}
{.deprecated: [gtk_tool_item_get_text_orientation: get_text_orientation].}
{.deprecated: [gtk_tool_item_get_text_size_group: get_text_size_group].}
{.deprecated: [gtk_tool_item_retrieve_proxy_menu_item: retrieve_proxy_menu_item].}
{.deprecated: [gtk_tool_item_get_proxy_menu_item: get_proxy_menu_item].}
{.deprecated: [gtk_tool_item_set_proxy_menu_item: set_proxy_menu_item].}
{.deprecated: [gtk_tool_item_rebuild_menu: rebuild_menu].}
{.deprecated: [gtk_tool_item_toolbar_reconfigured: toolbar_reconfigured].}
{.deprecated: [gtk_tool_button_get_type: tool_button_get_type].}
{.deprecated: [gtk_tool_button_new: tool_button_new].}
{.deprecated: [gtk_tool_button_new_from_stock: tool_button_new_from_stock].}
{.deprecated: [gtk_tool_button_set_label: set_label].}
{.deprecated: [gtk_tool_button_get_label: get_label].}
{.deprecated: [gtk_tool_button_set_use_underline: set_use_underline].}
{.deprecated: [gtk_tool_button_get_use_underline: get_use_underline].}
{.deprecated: [gtk_tool_button_set_stock_id: set_stock_id].}
{.deprecated: [gtk_tool_button_get_stock_id: get_stock_id].}
{.deprecated: [gtk_tool_button_set_icon_name: set_icon_name].}
{.deprecated: [gtk_tool_button_get_icon_name: get_icon_name].}
{.deprecated: [gtk_tool_button_set_icon_widget: set_icon_widget].}
{.deprecated: [gtk_tool_button_get_icon_widget: get_icon_widget].}
{.deprecated: [gtk_tool_button_set_label_widget: set_label_widget].}
{.deprecated: [gtk_tool_button_get_label_widget: get_label_widget].}
{.deprecated: [gtk_menu_tool_button_get_type: menu_tool_button_get_type].}
{.deprecated: [gtk_menu_tool_button_new: menu_tool_button_new].}
{.deprecated: [gtk_menu_tool_button_new_from_stock: menu_tool_button_new_from_stock].}
{.deprecated: [gtk_menu_tool_button_set_menu: set_menu].}
{.deprecated: [gtk_menu_tool_button_get_menu: get_menu].}
{.deprecated: [gtk_menu_tool_button_set_arrow_tooltip_text: set_arrow_tooltip_text].}
{.deprecated: [gtk_menu_tool_button_set_arrow_tooltip_markup: set_arrow_tooltip_markup].}
{.deprecated: [gtk_message_dialog_get_type: message_dialog_get_type].}
{.deprecated: [gtk_message_dialog_new: message_dialog_new].}
{.deprecated: [gtk_message_dialog_new_with_markup: message_dialog_new_with_markup].}
{.deprecated: [gtk_message_dialog_set_image: set_image].}
{.deprecated: [gtk_message_dialog_get_image: get_image].}
{.deprecated: [gtk_message_dialog_set_markup: set_markup].}
{.deprecated: [gtk_message_dialog_format_secondary_text: format_secondary_text].}
{.deprecated: [gtk_message_dialog_format_secondary_markup: format_secondary_markup].}
{.deprecated: [gtk_message_dialog_get_message_area: get_message_area].}
{.deprecated: [gtk_model_button_get_type: model_button_get_type].}
{.deprecated: [gtk_model_button_new: model_button_new].}
{.deprecated: [gtk_mount_operation_get_type: mount_operation_get_type].}
{.deprecated: [gtk_mount_operation_new: mount_operation_new].}
{.deprecated: [gtk_mount_operation_is_showing: is_showing].}
{.deprecated: [gtk_mount_operation_set_parent: set_parent].}
{.deprecated: [gtk_mount_operation_get_parent: get_parent].}
{.deprecated: [gtk_mount_operation_set_screen: set_screen].}
{.deprecated: [gtk_mount_operation_get_screen: get_screen].}
{.deprecated: [gtk_notebook_get_type: notebook_get_type].}
{.deprecated: [gtk_notebook_new: notebook_new].}
{.deprecated: [gtk_notebook_append_page: append_page].}
{.deprecated: [gtk_notebook_append_page_menu: append_page_menu].}
{.deprecated: [gtk_notebook_prepend_page: prepend_page].}
{.deprecated: [gtk_notebook_prepend_page_menu: prepend_page_menu].}
{.deprecated: [gtk_notebook_insert_page: insert_page].}
{.deprecated: [gtk_notebook_insert_page_menu: insert_page_menu].}
{.deprecated: [gtk_notebook_remove_page: remove_page].}
{.deprecated: [gtk_notebook_set_group_name: set_group_name].}
{.deprecated: [gtk_notebook_get_group_name: get_group_name].}
{.deprecated: [gtk_notebook_get_current_page: get_current_page].}
{.deprecated: [gtk_notebook_get_nth_page: get_nth_page].}
{.deprecated: [gtk_notebook_get_n_pages: get_n_pages].}
{.deprecated: [gtk_notebook_page_num: page_num].}
{.deprecated: [gtk_notebook_set_current_page: set_current_page].}
{.deprecated: [gtk_notebook_next_page: next_page].}
{.deprecated: [gtk_notebook_prev_page: prev_page].}
{.deprecated: [gtk_notebook_set_show_border: set_show_border].}
{.deprecated: [gtk_notebook_get_show_border: get_show_border].}
{.deprecated: [gtk_notebook_set_show_tabs: set_show_tabs].}
{.deprecated: [gtk_notebook_get_show_tabs: get_show_tabs].}
{.deprecated: [gtk_notebook_set_tab_pos: set_tab_pos].}
{.deprecated: [gtk_notebook_get_tab_pos: get_tab_pos].}
{.deprecated: [gtk_notebook_set_scrollable: set_scrollable].}
{.deprecated: [gtk_notebook_get_scrollable: get_scrollable].}
{.deprecated: [gtk_notebook_get_tab_hborder: get_tab_hborder].}
{.deprecated: [gtk_notebook_get_tab_vborder: get_tab_vborder].}
{.deprecated: [gtk_notebook_popup_enable: popup_enable].}
{.deprecated: [gtk_notebook_popup_disable: popup_disable].}
{.deprecated: [gtk_notebook_get_tab_label: get_tab_label].}
{.deprecated: [gtk_notebook_set_tab_label: set_tab_label].}
{.deprecated: [gtk_notebook_set_tab_label_text: set_tab_label_text].}
{.deprecated: [gtk_notebook_get_tab_label_text: get_tab_label_text].}
{.deprecated: [gtk_notebook_get_menu_label: get_menu_label].}
{.deprecated: [gtk_notebook_set_menu_label: set_menu_label].}
{.deprecated: [gtk_notebook_set_menu_label_text: set_menu_label_text].}
{.deprecated: [gtk_notebook_get_menu_label_text: get_menu_label_text].}
{.deprecated: [gtk_notebook_reorder_child: reorder_child].}
{.deprecated: [gtk_notebook_get_tab_reorderable: get_tab_reorderable].}
{.deprecated: [gtk_notebook_set_tab_reorderable: set_tab_reorderable].}
{.deprecated: [gtk_notebook_get_tab_detachable: get_tab_detachable].}
{.deprecated: [gtk_notebook_set_tab_detachable: set_tab_detachable].}
{.deprecated: [gtk_notebook_get_action_widget: get_action_widget].}
{.deprecated: [gtk_notebook_set_action_widget: set_action_widget].}
{.deprecated: [gtk_offscreen_window_get_type: offscreen_window_get_type].}
{.deprecated: [gtk_offscreen_window_new: offscreen_window_new].}
{.deprecated: [gtk_offscreen_window_get_surface: get_surface].}
{.deprecated: [gtk_offscreen_window_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_orientable_get_type: orientable_get_type].}
{.deprecated: [gtk_orientable_set_orientation: set_orientation].}
{.deprecated: [gtk_orientable_get_orientation: get_orientation].}
{.deprecated: [gtk_overlay_get_type: overlay_get_type].}
{.deprecated: [gtk_overlay_new: overlay_new].}
{.deprecated: [gtk_overlay_add_overlay: add_overlay].}
{.deprecated: [gtk_paper_size_get_type: paper_size_get_type].}
{.deprecated: [gtk_paper_size_new: paper_size_new].}
{.deprecated: [gtk_paper_size_new_from_ppd: paper_size_new_from_ppd].}
{.deprecated: [gtk_paper_size_new_from_ipp: paper_size_new_from_ipp].}
{.deprecated: [gtk_paper_size_new_custom: paper_size_new_custom].}
{.deprecated: [gtk_paper_size_copy: copy].}
{.deprecated: [gtk_paper_size_free: free].}
{.deprecated: [gtk_paper_size_is_equal: is_equal].}
{.deprecated: [gtk_paper_size_get_paper_sizes: paper_size_get_paper_sizes].}
{.deprecated: [gtk_paper_size_get_name: get_name].}
{.deprecated: [gtk_paper_size_get_display_name: get_display_name].}
{.deprecated: [gtk_paper_size_get_ppd_name: get_ppd_name].}
{.deprecated: [gtk_paper_size_get_width: get_width].}
{.deprecated: [gtk_paper_size_get_height: get_height].}
{.deprecated: [gtk_paper_size_is_custom: is_custom].}
{.deprecated: [gtk_paper_size_is_ipp: is_ipp].}
{.deprecated: [gtk_paper_size_set_size: set_size].}
{.deprecated: [gtk_paper_size_get_default_top_margin: get_default_top_margin].}
{.deprecated: [gtk_paper_size_get_default_bottom_margin: get_default_bottom_margin].}
{.deprecated: [gtk_paper_size_get_default_left_margin: get_default_left_margin].}
{.deprecated: [gtk_paper_size_get_default_right_margin: get_default_right_margin].}
{.deprecated: [gtk_paper_size_get_default: paper_size_get_default].}
{.deprecated: [gtk_paper_size_new_from_key_file: paper_size_new_from_key_file].}
{.deprecated: [gtk_paper_size_to_key_file: to_key_file].}
{.deprecated: [gtk_page_setup_get_type: page_setup_get_type].}
{.deprecated: [gtk_page_setup_new: page_setup_new].}
{.deprecated: [gtk_page_setup_copy: copy].}
{.deprecated: [gtk_page_setup_get_orientation: get_orientation].}
{.deprecated: [gtk_page_setup_set_orientation: set_orientation].}
{.deprecated: [gtk_page_setup_get_paper_size: get_paper_size].}
{.deprecated: [gtk_page_setup_set_paper_size: set_paper_size].}
{.deprecated: [gtk_page_setup_get_top_margin: get_top_margin].}
{.deprecated: [gtk_page_setup_set_top_margin: set_top_margin].}
{.deprecated: [gtk_page_setup_get_bottom_margin: get_bottom_margin].}
{.deprecated: [gtk_page_setup_set_bottom_margin: set_bottom_margin].}
{.deprecated: [gtk_page_setup_get_left_margin: get_left_margin].}
{.deprecated: [gtk_page_setup_set_left_margin: set_left_margin].}
{.deprecated: [gtk_page_setup_get_right_margin: get_right_margin].}
{.deprecated: [gtk_page_setup_set_right_margin: set_right_margin].}
{.deprecated: [gtk_page_setup_set_paper_size_and_default_margins: set_paper_size_and_default_margins].}
{.deprecated: [gtk_page_setup_get_paper_width: get_paper_width].}
{.deprecated: [gtk_page_setup_get_paper_height: get_paper_height].}
{.deprecated: [gtk_page_setup_get_page_width: get_page_width].}
{.deprecated: [gtk_page_setup_get_page_height: get_page_height].}
{.deprecated: [gtk_page_setup_new_from_file: page_setup_new_from_file].}
{.deprecated: [gtk_page_setup_load_file: load_file].}
{.deprecated: [gtk_page_setup_to_file: to_file].}
{.deprecated: [gtk_page_setup_new_from_key_file: page_setup_new_from_key_file].}
{.deprecated: [gtk_page_setup_load_key_file: load_key_file].}
{.deprecated: [gtk_page_setup_to_key_file: to_key_file].}
{.deprecated: [gtk_paned_get_type: paned_get_type].}
{.deprecated: [gtk_paned_new: paned_new].}
{.deprecated: [gtk_paned_add1: add1].}
{.deprecated: [gtk_paned_add2: add2].}
{.deprecated: [gtk_paned_pack1: pack1].}
{.deprecated: [gtk_paned_pack2: pack2].}
{.deprecated: [gtk_paned_get_position: get_position].}
{.deprecated: [gtk_paned_set_position: set_position].}
{.deprecated: [gtk_paned_get_child1: get_child1].}
{.deprecated: [gtk_paned_get_child2: get_child2].}
{.deprecated: [gtk_paned_get_handle_window: get_handle_window].}
{.deprecated: [gtk_paned_set_wide_handle: set_wide_handle].}
{.deprecated: [gtk_paned_get_wide_handle: get_wide_handle].}
{.deprecated: [gtk_places_sidebar_get_type: places_sidebar_get_type].}
{.deprecated: [gtk_places_sidebar_new: places_sidebar_new].}
{.deprecated: [gtk_places_sidebar_get_open_flags: get_open_flags].}
{.deprecated: [gtk_places_sidebar_set_open_flags: set_open_flags].}
{.deprecated: [gtk_places_sidebar_get_location: get_location].}
{.deprecated: [gtk_places_sidebar_set_location: set_location].}
{.deprecated: [gtk_places_sidebar_get_show_desktop: get_show_desktop].}
{.deprecated: [gtk_places_sidebar_set_show_desktop: set_show_desktop].}
{.deprecated: [gtk_places_sidebar_get_show_connect_to_server: get_show_connect_to_server].}
{.deprecated: [gtk_places_sidebar_set_show_connect_to_server: set_show_connect_to_server].}
{.deprecated: [gtk_places_sidebar_get_show_enter_location: get_show_enter_location].}
{.deprecated: [gtk_places_sidebar_set_show_enter_location: set_show_enter_location].}
{.deprecated: [gtk_places_sidebar_set_local_only: set_local_only].}
{.deprecated: [gtk_places_sidebar_get_local_only: get_local_only].}
{.deprecated: [gtk_places_sidebar_add_shortcut: add_shortcut].}
{.deprecated: [gtk_places_sidebar_remove_shortcut: remove_shortcut].}
{.deprecated: [gtk_places_sidebar_list_shortcuts: list_shortcuts].}
{.deprecated: [gtk_places_sidebar_get_nth_bookmark: get_nth_bookmark].}
{.deprecated: [gtk_popover_menu_get_type: popover_menu_get_type].}
{.deprecated: [gtk_popover_menu_new: popover_menu_new].}
{.deprecated: [gtk_popover_menu_open_submenu: open_submenu].}
{.deprecated: [gtk_print_context_get_type: print_context_get_type].}
{.deprecated: [gtk_print_context_get_cairo_context: get_cairo_context].}
{.deprecated: [gtk_print_context_get_page_setup: get_page_setup].}
{.deprecated: [gtk_print_context_get_width: get_width].}
{.deprecated: [gtk_print_context_get_height: get_height].}
{.deprecated: [gtk_print_context_get_dpi_x: get_dpi_x].}
{.deprecated: [gtk_print_context_get_dpi_y: get_dpi_y].}
{.deprecated: [gtk_print_context_get_hard_margins: get_hard_margins].}
{.deprecated: [gtk_print_context_get_pango_fontmap: get_pango_fontmap].}
{.deprecated: [gtk_print_context_create_pango_context: create_pango_context].}
{.deprecated: [gtk_print_context_create_pango_layout: create_pango_layout].}
{.deprecated: [gtk_print_context_set_cairo_context: set_cairo_context].}
{.deprecated: [gtk_print_settings_get_type: print_settings_get_type].}
{.deprecated: [gtk_print_settings_new: print_settings_new].}
{.deprecated: [gtk_print_settings_copy: copy].}
{.deprecated: [gtk_print_settings_new_from_file: print_settings_new_from_file].}
{.deprecated: [gtk_print_settings_load_file: load_file].}
{.deprecated: [gtk_print_settings_to_file: to_file].}
{.deprecated: [gtk_print_settings_new_from_key_file: print_settings_new_from_key_file].}
{.deprecated: [gtk_print_settings_load_key_file: load_key_file].}
{.deprecated: [gtk_print_settings_to_key_file: to_key_file].}
{.deprecated: [gtk_print_settings_has_key: has_key].}
{.deprecated: [gtk_print_settings_get: get].}
{.deprecated: [gtk_print_settings_set: set].}
{.deprecated: [gtk_print_settings_unset: unset].}
{.deprecated: [gtk_print_settings_foreach: foreach].}
{.deprecated: [gtk_print_settings_get_bool: get_bool].}
{.deprecated: [gtk_print_settings_set_bool: set_bool].}
{.deprecated: [gtk_print_settings_get_double: get_double].}
{.deprecated: [gtk_print_settings_get_double_with_default: get_double_with_default].}
{.deprecated: [gtk_print_settings_set_double: set_double].}
{.deprecated: [gtk_print_settings_get_length: get_length].}
{.deprecated: [gtk_print_settings_set_length: set_length].}
{.deprecated: [gtk_print_settings_get_int: get_int].}
{.deprecated: [gtk_print_settings_get_int_with_default: get_int_with_default].}
{.deprecated: [gtk_print_settings_set_int: set_int].}
{.deprecated: [gtk_print_settings_get_printer: get_printer].}
{.deprecated: [gtk_print_settings_set_printer: set_printer].}
{.deprecated: [gtk_print_settings_get_orientation: get_orientation].}
{.deprecated: [gtk_print_settings_set_orientation: set_orientation].}
{.deprecated: [gtk_print_settings_get_paper_size: get_paper_size].}
{.deprecated: [gtk_print_settings_set_paper_size: set_paper_size].}
{.deprecated: [gtk_print_settings_get_paper_width: get_paper_width].}
{.deprecated: [gtk_print_settings_set_paper_width: set_paper_width].}
{.deprecated: [gtk_print_settings_get_paper_height: get_paper_height].}
{.deprecated: [gtk_print_settings_set_paper_height: set_paper_height].}
{.deprecated: [gtk_print_settings_get_use_color: get_use_color].}
{.deprecated: [gtk_print_settings_set_use_color: set_use_color].}
{.deprecated: [gtk_print_settings_get_collate: get_collate].}
{.deprecated: [gtk_print_settings_set_collate: set_collate].}
{.deprecated: [gtk_print_settings_get_reverse: get_reverse].}
{.deprecated: [gtk_print_settings_set_reverse: set_reverse].}
{.deprecated: [gtk_print_settings_get_duplex: get_duplex].}
{.deprecated: [gtk_print_settings_set_duplex: set_duplex].}
{.deprecated: [gtk_print_settings_get_quality: get_quality].}
{.deprecated: [gtk_print_settings_set_quality: set_quality].}
{.deprecated: [gtk_print_settings_get_n_copies: get_n_copies].}
{.deprecated: [gtk_print_settings_set_n_copies: set_n_copies].}
{.deprecated: [gtk_print_settings_get_number_up: get_number_up].}
{.deprecated: [gtk_print_settings_set_number_up: set_number_up].}
{.deprecated: [gtk_print_settings_get_number_up_layout: get_number_up_layout].}
{.deprecated: [gtk_print_settings_set_number_up_layout: set_number_up_layout].}
{.deprecated: [gtk_print_settings_get_resolution: get_resolution].}
{.deprecated: [gtk_print_settings_set_resolution: set_resolution].}
{.deprecated: [gtk_print_settings_get_resolution_x: get_resolution_x].}
{.deprecated: [gtk_print_settings_get_resolution_y: get_resolution_y].}
{.deprecated: [gtk_print_settings_set_resolution_xy: set_resolution_xy].}
{.deprecated: [gtk_print_settings_get_printer_lpi: get_printer_lpi].}
{.deprecated: [gtk_print_settings_set_printer_lpi: set_printer_lpi].}
{.deprecated: [gtk_print_settings_get_scale: get_scale].}
{.deprecated: [gtk_print_settings_set_scale: set_scale].}
{.deprecated: [gtk_print_settings_get_print_pages: get_print_pages].}
{.deprecated: [gtk_print_settings_set_print_pages: set_print_pages].}
{.deprecated: [gtk_print_settings_get_page_ranges: get_page_ranges].}
{.deprecated: [gtk_print_settings_set_page_ranges: set_page_ranges].}
{.deprecated: [gtk_print_settings_get_page_set: get_page_set].}
{.deprecated: [gtk_print_settings_set_page_set: set_page_set].}
{.deprecated: [gtk_print_settings_get_default_source: get_default_source].}
{.deprecated: [gtk_print_settings_set_default_source: set_default_source].}
{.deprecated: [gtk_print_settings_get_media_type: get_media_type].}
{.deprecated: [gtk_print_settings_set_media_type: set_media_type].}
{.deprecated: [gtk_print_settings_get_dither: get_dither].}
{.deprecated: [gtk_print_settings_set_dither: set_dither].}
{.deprecated: [gtk_print_settings_get_finishings: get_finishings].}
{.deprecated: [gtk_print_settings_set_finishings: set_finishings].}
{.deprecated: [gtk_print_settings_get_output_bin: get_output_bin].}
{.deprecated: [gtk_print_settings_set_output_bin: set_output_bin].}
{.deprecated: [gtk_print_operation_preview_get_type: print_operation_preview_get_type].}
{.deprecated: [gtk_print_operation_preview_render_page: render_page].}
{.deprecated: [gtk_print_operation_preview_end_preview: end_preview].}
{.deprecated: [gtk_print_operation_preview_is_selected: is_selected].}
{.deprecated: [gtk_print_error_quark: print_error_quark].}
{.deprecated: [gtk_print_operation_get_type: print_operation_get_type].}
{.deprecated: [gtk_print_operation_new: print_operation_new].}
{.deprecated: [gtk_print_operation_set_default_page_setup: set_default_page_setup].}
{.deprecated: [gtk_print_operation_get_default_page_setup: get_default_page_setup].}
{.deprecated: [gtk_print_operation_set_print_settings: set_print_settings].}
{.deprecated: [gtk_print_operation_get_print_settings: get_print_settings].}
{.deprecated: [gtk_print_operation_set_job_name: set_job_name].}
{.deprecated: [gtk_print_operation_set_n_pages: set_n_pages].}
{.deprecated: [gtk_print_operation_set_current_page: set_current_page].}
{.deprecated: [gtk_print_operation_set_use_full_page: set_use_full_page].}
{.deprecated: [gtk_print_operation_set_unit: set_unit].}
{.deprecated: [gtk_print_operation_set_export_filename: set_export_filename].}
{.deprecated: [gtk_print_operation_set_track_print_status: set_track_print_status].}
{.deprecated: [gtk_print_operation_set_show_progress: set_show_progress].}
{.deprecated: [gtk_print_operation_set_allow_async: set_allow_async].}
{.deprecated: [gtk_print_operation_set_custom_tab_label: set_custom_tab_label].}
{.deprecated: [gtk_print_operation_run: run].}
{.deprecated: [gtk_print_operation_get_error: get_error].}
{.deprecated: [gtk_print_operation_get_status: get_status].}
{.deprecated: [gtk_print_operation_get_status_string: get_status_string].}
{.deprecated: [gtk_print_operation_is_finished: is_finished].}
{.deprecated: [gtk_print_operation_cancel: cancel].}
{.deprecated: [gtk_print_operation_draw_page_finish: draw_page_finish].}
{.deprecated: [gtk_print_operation_set_defer_drawing: set_defer_drawing].}
{.deprecated: [gtk_print_operation_set_support_selection: set_support_selection].}
{.deprecated: [gtk_print_operation_get_support_selection: get_support_selection].}
{.deprecated: [gtk_print_operation_set_has_selection: set_has_selection].}
{.deprecated: [gtk_print_operation_get_has_selection: get_has_selection].}
{.deprecated: [gtk_print_operation_set_embed_page_setup: set_embed_page_setup].}
{.deprecated: [gtk_print_operation_get_embed_page_setup: get_embed_page_setup].}
{.deprecated: [gtk_print_operation_get_n_pages_to_print: get_n_pages_to_print].}
{.deprecated: [gtk_print_run_page_setup_dialog: print_run_page_setup_dialog].}
{.deprecated: [gtk_print_run_page_setup_dialog_async: print_run_page_setup_dialog_async].}
{.deprecated: [gtk_progress_bar_get_type: progress_bar_get_type].}
{.deprecated: [gtk_progress_bar_new: progress_bar_new].}
{.deprecated: [gtk_progress_bar_pulse: pulse].}
{.deprecated: [gtk_progress_bar_set_text: set_text].}
{.deprecated: [gtk_progress_bar_set_fraction: set_fraction].}
{.deprecated: [gtk_progress_bar_set_pulse_step: set_pulse_step].}
{.deprecated: [gtk_progress_bar_set_inverted: set_inverted].}
{.deprecated: [gtk_progress_bar_get_text: get_text].}
{.deprecated: [gtk_progress_bar_get_fraction: get_fraction].}
{.deprecated: [gtk_progress_bar_get_pulse_step: get_pulse_step].}
{.deprecated: [gtk_progress_bar_get_inverted: get_inverted].}
{.deprecated: [gtk_progress_bar_set_ellipsize: set_ellipsize].}
{.deprecated: [gtk_progress_bar_get_ellipsize: get_ellipsize].}
{.deprecated: [gtk_progress_bar_set_show_text: set_show_text].}
{.deprecated: [gtk_progress_bar_get_show_text: get_show_text].}
{.deprecated: [gtk_radio_button_get_type: radio_button_get_type].}
{.deprecated: [gtk_radio_button_new: radio_button_new].}
{.deprecated: [gtk_radio_button_new_from_widget: new_from_widget].}
{.deprecated: [gtk_radio_button_new_with_label: radio_button_new_with_label].}
{.deprecated: [gtk_radio_button_new_with_label_from_widget: new_with_label_from_widget].}
{.deprecated: [gtk_radio_button_new_with_mnemonic: radio_button_new_with_mnemonic].}
{.deprecated: [gtk_radio_button_new_with_mnemonic_from_widget: new_with_mnemonic_from_widget].}
{.deprecated: [gtk_radio_button_get_group: get_group].}
{.deprecated: [gtk_radio_button_set_group: set_group].}
{.deprecated: [gtk_radio_button_join_group: join_group].}
{.deprecated: [gtk_radio_menu_item_get_type: radio_menu_item_get_type].}
{.deprecated: [gtk_radio_menu_item_new: radio_menu_item_new].}
{.deprecated: [gtk_radio_menu_item_new_with_label: radio_menu_item_new_with_label].}
{.deprecated: [gtk_radio_menu_item_new_with_mnemonic: radio_menu_item_new_with_mnemonic].}
{.deprecated: [gtk_radio_menu_item_new_from_widget: new_from_widget].}
{.deprecated: [gtk_radio_menu_item_new_with_mnemonic_from_widget: new_with_mnemonic_from_widget].}
{.deprecated: [gtk_radio_menu_item_new_with_label_from_widget: new_with_label_from_widget].}
{.deprecated: [gtk_radio_menu_item_get_group: get_group].}
{.deprecated: [gtk_radio_menu_item_set_group: set_group].}
{.deprecated: [gtk_toggle_tool_button_get_type: toggle_tool_button_get_type].}
{.deprecated: [gtk_toggle_tool_button_new: toggle_tool_button_new].}
{.deprecated: [gtk_toggle_tool_button_new_from_stock: toggle_tool_button_new_from_stock].}
{.deprecated: [gtk_toggle_tool_button_set_active: set_active].}
{.deprecated: [gtk_toggle_tool_button_get_active: get_active].}
{.deprecated: [gtk_radio_tool_button_get_type: radio_tool_button_get_type].}
{.deprecated: [gtk_radio_tool_button_new: radio_tool_button_new].}
{.deprecated: [gtk_radio_tool_button_new_from_stock: radio_tool_button_new_from_stock].}
{.deprecated: [gtk_radio_tool_button_new_from_widget: new_from_widget].}
{.deprecated: [gtk_radio_tool_button_new_with_stock_from_widget: new_with_stock_from_widget].}
{.deprecated: [gtk_radio_tool_button_get_group: get_group].}
{.deprecated: [gtk_radio_tool_button_set_group: set_group].}
{.deprecated: [gtk_range_get_type: range_get_type].}
{.deprecated: [gtk_range_set_adjustment: set_adjustment].}
{.deprecated: [gtk_range_get_adjustment: get_adjustment].}
{.deprecated: [gtk_range_set_inverted: set_inverted].}
{.deprecated: [gtk_range_get_inverted: get_inverted].}
{.deprecated: [gtk_range_set_flippable: set_flippable].}
{.deprecated: [gtk_range_get_flippable: get_flippable].}
{.deprecated: [gtk_range_set_slider_size_fixed: set_slider_size_fixed].}
{.deprecated: [gtk_range_get_slider_size_fixed: get_slider_size_fixed].}
{.deprecated: [gtk_range_set_min_slider_size: set_min_slider_size].}
{.deprecated: [gtk_range_get_min_slider_size: get_min_slider_size].}
{.deprecated: [gtk_range_get_range_rect: get_range_rect].}
{.deprecated: [gtk_range_get_slider_range: get_slider_range].}
{.deprecated: [gtk_range_set_lower_stepper_sensitivity: set_lower_stepper_sensitivity].}
{.deprecated: [gtk_range_get_lower_stepper_sensitivity: get_lower_stepper_sensitivity].}
{.deprecated: [gtk_range_set_upper_stepper_sensitivity: set_upper_stepper_sensitivity].}
{.deprecated: [gtk_range_get_upper_stepper_sensitivity: get_upper_stepper_sensitivity].}
{.deprecated: [gtk_range_set_increments: set_increments].}
{.deprecated: [gtk_range_set_range: set_range].}
{.deprecated: [gtk_range_set_value: set_value].}
{.deprecated: [gtk_range_get_value: get_value].}
{.deprecated: [gtk_range_set_show_fill_level: set_show_fill_level].}
{.deprecated: [gtk_range_get_show_fill_level: get_show_fill_level].}
{.deprecated: [gtk_range_set_restrict_to_fill_level: set_restrict_to_fill_level].}
{.deprecated: [gtk_range_get_restrict_to_fill_level: get_restrict_to_fill_level].}
{.deprecated: [gtk_range_set_fill_level: set_fill_level].}
{.deprecated: [gtk_range_get_fill_level: get_fill_level].}
{.deprecated: [gtk_range_set_round_digits: set_round_digits].}
{.deprecated: [gtk_range_get_round_digits: get_round_digits].}
{.deprecated: [gtk_recent_manager_error_quark: recent_manager_error_quark].}
{.deprecated: [gtk_recent_manager_get_type: recent_manager_get_type].}
{.deprecated: [gtk_recent_manager_new: recent_manager_new].}
{.deprecated: [gtk_recent_manager_get_default: recent_manager_get_default].}
{.deprecated: [gtk_recent_manager_add_item: add_item].}
{.deprecated: [gtk_recent_manager_add_full: add_full].}
{.deprecated: [gtk_recent_manager_remove_item: remove_item].}
{.deprecated: [gtk_recent_manager_lookup_item: lookup_item].}
{.deprecated: [gtk_recent_manager_has_item: has_item].}
{.deprecated: [gtk_recent_manager_move_item: move_item].}
{.deprecated: [gtk_recent_manager_get_items: get_items].}
{.deprecated: [gtk_recent_manager_purge_items: purge_items].}
{.deprecated: [gtk_recent_info_get_type: recent_info_get_type].}
{.deprecated: [gtk_recent_info_ref: `ref`].}
{.deprecated: [gtk_recent_info_unref: unref].}
{.deprecated: [gtk_recent_info_get_uri: get_uri].}
{.deprecated: [gtk_recent_info_get_display_name: get_display_name].}
{.deprecated: [gtk_recent_info_get_description: get_description].}
{.deprecated: [gtk_recent_info_get_mime_type: get_mime_type].}
{.deprecated: [gtk_recent_info_get_added: get_added].}
{.deprecated: [gtk_recent_info_get_modified: get_modified].}
{.deprecated: [gtk_recent_info_get_visited: get_visited].}
{.deprecated: [gtk_recent_info_get_private_hint: get_private_hint].}
{.deprecated: [gtk_recent_info_get_application_info: get_application_info].}
{.deprecated: [gtk_recent_info_create_app_info: create_app_info].}
{.deprecated: [gtk_recent_info_get_applications: get_applications].}
{.deprecated: [gtk_recent_info_last_application: last_application].}
{.deprecated: [gtk_recent_info_has_application: has_application].}
{.deprecated: [gtk_recent_info_get_groups: get_groups].}
{.deprecated: [gtk_recent_info_has_group: has_group].}
{.deprecated: [gtk_recent_info_get_icon: get_icon].}
{.deprecated: [gtk_recent_info_get_gicon: get_gicon].}
{.deprecated: [gtk_recent_info_get_short_name: get_short_name].}
{.deprecated: [gtk_recent_info_get_uri_display: get_uri_display].}
{.deprecated: [gtk_recent_info_get_age: get_age].}
{.deprecated: [gtk_recent_info_is_local: is_local].}
{.deprecated: [gtk_recent_info_exists: exists].}
{.deprecated: [gtk_recent_info_match: match].}
{.deprecated: [gtk_recent_filter_get_type: recent_filter_get_type].}
{.deprecated: [gtk_recent_filter_new: recent_filter_new].}
{.deprecated: [gtk_recent_filter_set_name: set_name].}
{.deprecated: [gtk_recent_filter_get_name: get_name].}
{.deprecated: [gtk_recent_filter_add_mime_type: add_mime_type].}
{.deprecated: [gtk_recent_filter_add_pattern: add_pattern].}
{.deprecated: [gtk_recent_filter_add_pixbuf_formats: add_pixbuf_formats].}
{.deprecated: [gtk_recent_filter_add_application: add_application].}
{.deprecated: [gtk_recent_filter_add_group: add_group].}
{.deprecated: [gtk_recent_filter_add_age: add_age].}
{.deprecated: [gtk_recent_filter_add_custom: add_custom].}
{.deprecated: [gtk_recent_filter_get_needed: get_needed].}
{.deprecated: [gtk_recent_filter_filter: filter].}
{.deprecated: [gtk_recent_chooser_error_quark: recent_chooser_error_quark].}
{.deprecated: [gtk_recent_chooser_get_type: recent_chooser_get_type].}
{.deprecated: [gtk_recent_chooser_set_show_private: set_show_private].}
{.deprecated: [gtk_recent_chooser_get_show_private: get_show_private].}
{.deprecated: [gtk_recent_chooser_set_show_not_found: set_show_not_found].}
{.deprecated: [gtk_recent_chooser_get_show_not_found: get_show_not_found].}
{.deprecated: [gtk_recent_chooser_set_select_multiple: set_select_multiple].}
{.deprecated: [gtk_recent_chooser_get_select_multiple: get_select_multiple].}
{.deprecated: [gtk_recent_chooser_set_limit: set_limit].}
{.deprecated: [gtk_recent_chooser_get_limit: get_limit].}
{.deprecated: [gtk_recent_chooser_set_local_only: set_local_only].}
{.deprecated: [gtk_recent_chooser_get_local_only: get_local_only].}
{.deprecated: [gtk_recent_chooser_set_show_tips: set_show_tips].}
{.deprecated: [gtk_recent_chooser_get_show_tips: get_show_tips].}
{.deprecated: [gtk_recent_chooser_set_show_icons: set_show_icons].}
{.deprecated: [gtk_recent_chooser_get_show_icons: get_show_icons].}
{.deprecated: [gtk_recent_chooser_set_sort_type: set_sort_type].}
{.deprecated: [gtk_recent_chooser_get_sort_type: get_sort_type].}
{.deprecated: [gtk_recent_chooser_set_sort_func: set_sort_func].}
{.deprecated: [gtk_recent_chooser_set_current_uri: set_current_uri].}
{.deprecated: [gtk_recent_chooser_get_current_uri: get_current_uri].}
{.deprecated: [gtk_recent_chooser_get_current_item: get_current_item].}
{.deprecated: [gtk_recent_chooser_select_uri: select_uri].}
{.deprecated: [gtk_recent_chooser_unselect_uri: unselect_uri].}
{.deprecated: [gtk_recent_chooser_select_all: select_all].}
{.deprecated: [gtk_recent_chooser_unselect_all: unselect_all].}
{.deprecated: [gtk_recent_chooser_get_items: get_items].}
{.deprecated: [gtk_recent_chooser_get_uris: get_uris].}
{.deprecated: [gtk_recent_chooser_add_filter: add_filter].}
{.deprecated: [gtk_recent_chooser_remove_filter: remove_filter].}
{.deprecated: [gtk_recent_chooser_list_filters: list_filters].}
{.deprecated: [gtk_recent_chooser_set_filter: set_filter].}
{.deprecated: [gtk_recent_chooser_get_filter: get_filter].}
{.deprecated: [gtk_recent_chooser_dialog_get_type: recent_chooser_dialog_get_type].}
{.deprecated: [gtk_recent_chooser_dialog_new: recent_chooser_dialog_new].}
{.deprecated: [gtk_recent_chooser_dialog_new_for_manager: recent_chooser_dialog_new_for_manager].}
{.deprecated: [gtk_recent_chooser_menu_get_type: recent_chooser_menu_get_type].}
{.deprecated: [gtk_recent_chooser_menu_new: recent_chooser_menu_new].}
{.deprecated: [gtk_recent_chooser_menu_new_for_manager: recent_chooser_menu_new_for_manager].}
{.deprecated: [gtk_recent_chooser_menu_get_show_numbers: get_show_numbers].}
{.deprecated: [gtk_recent_chooser_menu_set_show_numbers: set_show_numbers].}
{.deprecated: [gtk_recent_chooser_widget_get_type: recent_chooser_widget_get_type].}
{.deprecated: [gtk_recent_chooser_widget_new: recent_chooser_widget_new].}
{.deprecated: [gtk_recent_chooser_widget_new_for_manager: recent_chooser_widget_new_for_manager].}
{.deprecated: [gtk_render_check: render_check].}
{.deprecated: [gtk_render_option: render_option].}
{.deprecated: [gtk_render_arrow: render_arrow].}
{.deprecated: [gtk_render_background: render_background].}
{.deprecated: [gtk_render_frame: render_frame].}
{.deprecated: [gtk_render_expander: render_expander].}
{.deprecated: [gtk_render_focus: render_focus].}
{.deprecated: [gtk_render_layout: render_layout].}
{.deprecated: [gtk_render_line: render_line].}
{.deprecated: [gtk_render_slider: render_slider].}
{.deprecated: [gtk_render_frame_gap: render_frame_gap].}
{.deprecated: [gtk_render_extension: render_extension].}
{.deprecated: [gtk_render_handle: render_handle].}
{.deprecated: [gtk_render_activity: render_activity].}
{.deprecated: [gtk_render_icon_pixbuf: render_icon_pixbuf].}
{.deprecated: [gtk_render_icon: render_icon].}
{.deprecated: [gtk_render_icon_surface: render_icon_surface].}
{.deprecated: [gtk_revealer_get_type: revealer_get_type].}
{.deprecated: [gtk_revealer_new: revealer_new].}
{.deprecated: [gtk_revealer_get_reveal_child: get_reveal_child].}
{.deprecated: [gtk_revealer_set_reveal_child: set_reveal_child].}
{.deprecated: [gtk_revealer_get_child_revealed: get_child_revealed].}
{.deprecated: [gtk_revealer_get_transition_duration: get_transition_duration].}
{.deprecated: [gtk_revealer_set_transition_duration: set_transition_duration].}
{.deprecated: [gtk_revealer_set_transition_type: set_transition_type].}
{.deprecated: [gtk_revealer_get_transition_type: get_transition_type].}
{.deprecated: [gtk_scale_get_type: scale_get_type].}
{.deprecated: [gtk_scale_new: scale_new].}
{.deprecated: [gtk_scale_new_with_range: scale_new_with_range].}
{.deprecated: [gtk_scale_set_digits: set_digits].}
{.deprecated: [gtk_scale_get_digits: get_digits].}
{.deprecated: [gtk_scale_set_draw_value: set_draw_value].}
{.deprecated: [gtk_scale_get_draw_value: get_draw_value].}
{.deprecated: [gtk_scale_set_has_origin: set_has_origin].}
{.deprecated: [gtk_scale_get_has_origin: get_has_origin].}
{.deprecated: [gtk_scale_set_value_pos: set_value_pos].}
{.deprecated: [gtk_scale_get_value_pos: get_value_pos].}
{.deprecated: [gtk_scale_get_layout: get_layout].}
{.deprecated: [gtk_scale_get_layout_offsets: get_layout_offsets].}
{.deprecated: [gtk_scale_add_mark: add_mark].}
{.deprecated: [gtk_scale_clear_marks: clear_marks].}
{.deprecated: [gtk_scale_button_get_type: scale_button_get_type].}
{.deprecated: [gtk_scale_button_new: scale_button_new].}
{.deprecated: [gtk_scale_button_set_icons: set_icons].}
{.deprecated: [gtk_scale_button_get_value: get_value].}
{.deprecated: [gtk_scale_button_set_value: set_value].}
{.deprecated: [gtk_scale_button_get_adjustment: get_adjustment].}
{.deprecated: [gtk_scale_button_set_adjustment: set_adjustment].}
{.deprecated: [gtk_scale_button_get_plus_button: get_plus_button].}
{.deprecated: [gtk_scale_button_get_minus_button: get_minus_button].}
{.deprecated: [gtk_scale_button_get_popup: get_popup].}
{.deprecated: [gtk_scrollable_get_type: scrollable_get_type].}
{.deprecated: [gtk_scrollable_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_scrollable_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_scrollable_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_scrollable_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_scrollable_get_hscroll_policy: get_hscroll_policy].}
{.deprecated: [gtk_scrollable_set_hscroll_policy: set_hscroll_policy].}
{.deprecated: [gtk_scrollable_get_vscroll_policy: get_vscroll_policy].}
{.deprecated: [gtk_scrollable_set_vscroll_policy: set_vscroll_policy].}
{.deprecated: [gtk_scrollable_get_border: get_border].}
{.deprecated: [gtk_scrollbar_get_type: scrollbar_get_type].}
{.deprecated: [gtk_scrollbar_new: scrollbar_new].}
{.deprecated: [gtk_scrolled_window_get_type: scrolled_window_get_type].}
{.deprecated: [gtk_scrolled_window_new: scrolled_window_new].}
{.deprecated: [gtk_scrolled_window_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_scrolled_window_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_scrolled_window_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_scrolled_window_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_scrolled_window_get_hscrollbar: get_hscrollbar].}
{.deprecated: [gtk_scrolled_window_get_vscrollbar: get_vscrollbar].}
{.deprecated: [gtk_scrolled_window_set_policy: set_policy].}
{.deprecated: [gtk_scrolled_window_get_policy: get_policy].}
{.deprecated: [gtk_scrolled_window_set_placement: set_placement].}
{.deprecated: [gtk_scrolled_window_unset_placement: unset_placement].}
{.deprecated: [gtk_scrolled_window_get_placement: get_placement].}
{.deprecated: [gtk_scrolled_window_set_shadow_type: set_shadow_type].}
{.deprecated: [gtk_scrolled_window_get_shadow_type: get_shadow_type].}
{.deprecated: [gtk_scrolled_window_add_with_viewport: add_with_viewport].}
{.deprecated: [gtk_scrolled_window_get_min_content_width: get_min_content_width].}
{.deprecated: [gtk_scrolled_window_set_min_content_width: set_min_content_width].}
{.deprecated: [gtk_scrolled_window_get_min_content_height: get_min_content_height].}
{.deprecated: [gtk_scrolled_window_set_min_content_height: set_min_content_height].}
{.deprecated: [gtk_scrolled_window_set_kinetic_scrolling: set_kinetic_scrolling].}
{.deprecated: [gtk_scrolled_window_get_kinetic_scrolling: get_kinetic_scrolling].}
{.deprecated: [gtk_scrolled_window_set_capture_button_press: set_capture_button_press].}
{.deprecated: [gtk_scrolled_window_get_capture_button_press: get_capture_button_press].}
{.deprecated: [gtk_scrolled_window_set_overlay_scrolling: set_overlay_scrolling].}
{.deprecated: [gtk_scrolled_window_get_overlay_scrolling: get_overlay_scrolling].}
{.deprecated: [gtk_search_bar_get_type: search_bar_get_type].}
{.deprecated: [gtk_search_bar_new: search_bar_new].}
{.deprecated: [gtk_search_bar_connect_entry: connect_entry].}
{.deprecated: [gtk_search_bar_get_search_mode: get_search_mode].}
{.deprecated: [gtk_search_bar_set_search_mode: set_search_mode].}
{.deprecated: [gtk_search_bar_get_show_close_button: get_show_close_button].}
{.deprecated: [gtk_search_bar_set_show_close_button: set_show_close_button].}
{.deprecated: [gtk_search_bar_handle_event: handle_event].}
{.deprecated: [gtk_search_entry_get_type: search_entry_get_type].}
{.deprecated: [gtk_search_entry_new: search_entry_new].}
{.deprecated: [gtk_search_entry_handle_event: handle_event].}
{.deprecated: [gtk_separator_get_type: separator_get_type].}
{.deprecated: [gtk_separator_new: separator_new].}
{.deprecated: [gtk_separator_menu_item_get_type: separator_menu_item_get_type].}
{.deprecated: [gtk_separator_menu_item_new: separator_menu_item_new].}
{.deprecated: [gtk_separator_tool_item_get_type: separator_tool_item_get_type].}
{.deprecated: [gtk_separator_tool_item_new: separator_tool_item_new].}
{.deprecated: [gtk_separator_tool_item_get_draw: get_draw].}
{.deprecated: [gtk_separator_tool_item_set_draw: set_draw].}
{.deprecated: [gtk_settings_get_type: settings_get_type].}
{.deprecated: [gtk_settings_get_default: settings_get_default].}
{.deprecated: [gtk_settings_get_for_screen: settings_get_for_screen].}
{.deprecated: [gtk_settings_install_property: settings_install_property].}
{.deprecated: [gtk_settings_install_property_parser: settings_install_property_parser].}
{.deprecated: [gtk_rc_property_parse_color: rc_property_parse_color].}
{.deprecated: [gtk_rc_property_parse_enum: rc_property_parse_enum].}
{.deprecated: [gtk_rc_property_parse_flags: rc_property_parse_flags].}
{.deprecated: [gtk_rc_property_parse_requisition: rc_property_parse_requisition].}
{.deprecated: [gtk_rc_property_parse_border: rc_property_parse_border].}
{.deprecated: [gtk_settings_set_property_value: set_property_value].}
{.deprecated: [gtk_settings_set_string_property: set_string_property].}
{.deprecated: [gtk_settings_set_long_property: set_long_property].}
{.deprecated: [gtk_settings_set_double_property: set_double_property].}
{.deprecated: [gtk_show_uri: show_uri].}
{.deprecated: [gtk_stack_get_type: stack_get_type].}
{.deprecated: [gtk_stack_new: stack_new].}
{.deprecated: [gtk_stack_add_named: add_named].}
{.deprecated: [gtk_stack_add_titled: add_titled].}
{.deprecated: [gtk_stack_get_child_by_name: get_child_by_name].}
{.deprecated: [gtk_stack_set_visible_child: set_visible_child].}
{.deprecated: [gtk_stack_get_visible_child: get_visible_child].}
{.deprecated: [gtk_stack_set_visible_child_name: set_visible_child_name].}
{.deprecated: [gtk_stack_get_visible_child_name: get_visible_child_name].}
{.deprecated: [gtk_stack_set_visible_child_full: set_visible_child_full].}
{.deprecated: [gtk_stack_set_homogeneous: set_homogeneous].}
{.deprecated: [gtk_stack_get_homogeneous: get_homogeneous].}
{.deprecated: [gtk_stack_set_hhomogeneous: set_hhomogeneous].}
{.deprecated: [gtk_stack_get_hhomogeneous: get_hhomogeneous].}
{.deprecated: [gtk_stack_set_vhomogeneous: set_vhomogeneous].}
{.deprecated: [gtk_stack_get_vhomogeneous: get_vhomogeneous].}
{.deprecated: [gtk_stack_set_transition_duration: set_transition_duration].}
{.deprecated: [gtk_stack_get_transition_duration: get_transition_duration].}
{.deprecated: [gtk_stack_set_transition_type: set_transition_type].}
{.deprecated: [gtk_stack_get_transition_type: get_transition_type].}
{.deprecated: [gtk_stack_get_transition_running: get_transition_running].}
{.deprecated: [gtk_sidebar_get_type: sidebar_get_type].}
{.deprecated: [gtk_sidebar_new: sidebar_new].}
{.deprecated: [gtk_sidebar_set_stack: set_stack].}
{.deprecated: [gtk_sidebar_get_stack: get_stack].}
{.deprecated: [gtk_distribute_natural_allocation: distribute_natural_allocation].}
{.deprecated: [gtk_spin_button_get_type: spin_button_get_type].}
{.deprecated: [gtk_spin_button_configure: configure].}
{.deprecated: [gtk_spin_button_new: spin_button_new].}
{.deprecated: [gtk_spin_button_new_with_range: spin_button_new_with_range].}
{.deprecated: [gtk_spin_button_set_adjustment: set_adjustment].}
{.deprecated: [gtk_spin_button_get_adjustment: get_adjustment].}
{.deprecated: [gtk_spin_button_set_digits: set_digits].}
{.deprecated: [gtk_spin_button_get_digits: get_digits].}
{.deprecated: [gtk_spin_button_set_increments: set_increments].}
{.deprecated: [gtk_spin_button_get_increments: get_increments].}
{.deprecated: [gtk_spin_button_set_range: set_range].}
{.deprecated: [gtk_spin_button_get_range: get_range].}
{.deprecated: [gtk_spin_button_get_value: get_value].}
{.deprecated: [gtk_spin_button_get_value_as_int: get_value_as_int].}
{.deprecated: [gtk_spin_button_set_value: set_value].}
{.deprecated: [gtk_spin_button_set_update_policy: set_update_policy].}
{.deprecated: [gtk_spin_button_get_update_policy: get_update_policy].}
{.deprecated: [gtk_spin_button_set_numeric: set_numeric].}
{.deprecated: [gtk_spin_button_get_numeric: get_numeric].}
{.deprecated: [gtk_spin_button_spin: spin].}
{.deprecated: [gtk_spin_button_set_wrap: set_wrap].}
{.deprecated: [gtk_spin_button_get_wrap: get_wrap].}
{.deprecated: [gtk_spin_button_set_snap_to_ticks: set_snap_to_ticks].}
{.deprecated: [gtk_spin_button_get_snap_to_ticks: get_snap_to_ticks].}
{.deprecated: [gtk_spin_button_update: update].}
{.deprecated: [gtk_spinner_get_type: spinner_get_type].}
{.deprecated: [gtk_spinner_new: spinner_new].}
{.deprecated: [gtk_spinner_start: start].}
{.deprecated: [gtk_spinner_stop: stop].}
{.deprecated: [gtk_stack_switcher_get_type: stack_switcher_get_type].}
{.deprecated: [gtk_stack_switcher_new: stack_switcher_new].}
{.deprecated: [gtk_stack_switcher_set_stack: set_stack].}
{.deprecated: [gtk_stack_switcher_get_stack: get_stack].}
{.deprecated: [gtk_statusbar_get_type: statusbar_get_type].}
{.deprecated: [gtk_statusbar_new: statusbar_new].}
{.deprecated: [gtk_statusbar_get_context_id: get_context_id].}
{.deprecated: [gtk_statusbar_push: push].}
{.deprecated: [gtk_statusbar_pop: pop].}
{.deprecated: [gtk_statusbar_remove: remove].}
{.deprecated: [gtk_statusbar_remove_all: remove_all].}
{.deprecated: [gtk_statusbar_get_message_area: get_message_area].}
{.deprecated: [gtk_switch_get_type: switch_get_type].}
{.deprecated: [gtk_switch_new: switch_new].}
{.deprecated: [gtk_switch_set_active: set_active].}
{.deprecated: [gtk_switch_get_active: get_active].}
{.deprecated: [gtk_switch_set_state: set_state].}
{.deprecated: [gtk_switch_get_state: get_state].}
{.deprecated: [gtk_text_tag_table_get_type: text_tag_table_get_type].}
{.deprecated: [gtk_text_tag_table_new: text_tag_table_new].}
{.deprecated: [gtk_text_tag_table_add: add].}
{.deprecated: [gtk_text_tag_table_remove: remove].}
{.deprecated: [gtk_text_tag_table_lookup: lookup].}
{.deprecated: [gtk_text_tag_table_foreach: foreach].}
{.deprecated: [gtk_text_tag_table_get_size: get_size].}
{.deprecated: [gtk_text_mark_get_type: text_mark_get_type].}
{.deprecated: [gtk_text_mark_new: text_mark_new].}
{.deprecated: [gtk_text_mark_set_visible: set_visible].}
{.deprecated: [gtk_text_mark_get_visible: get_visible].}
{.deprecated: [gtk_text_mark_get_name: get_name].}
{.deprecated: [gtk_text_mark_get_deleted: get_deleted].}
{.deprecated: [gtk_text_mark_get_buffer: get_buffer].}
{.deprecated: [gtk_text_mark_get_left_gravity: get_left_gravity].}
{.deprecated: [gtk_text_buffer_get_type: text_buffer_get_type].}
{.deprecated: [gtk_text_buffer_new: text_buffer_new].}
{.deprecated: [gtk_text_buffer_get_line_count: get_line_count].}
{.deprecated: [gtk_text_buffer_get_char_count: get_char_count].}
{.deprecated: [gtk_text_buffer_get_tag_table: get_tag_table].}
{.deprecated: [gtk_text_buffer_set_text: set_text].}
{.deprecated: [gtk_text_buffer_insert: insert].}
{.deprecated: [gtk_text_buffer_insert_at_cursor: insert_at_cursor].}
{.deprecated: [gtk_text_buffer_insert_interactive: insert_interactive].}
{.deprecated: [gtk_text_buffer_insert_interactive_at_cursor: insert_interactive_at_cursor].}
{.deprecated: [gtk_text_buffer_insert_range: insert_range].}
{.deprecated: [gtk_text_buffer_insert_range_interactive: insert_range_interactive].}
{.deprecated: [gtk_text_buffer_insert_with_tags: insert_with_tags].}
{.deprecated: [gtk_text_buffer_insert_with_tags_by_name: insert_with_tags_by_name].}
{.deprecated: [gtk_text_buffer_insert_markup: insert_markup].}
{.deprecated: [gtk_text_buffer_delete: delete].}
{.deprecated: [gtk_text_buffer_delete_interactive: delete_interactive].}
{.deprecated: [gtk_text_buffer_backspace: backspace].}
{.deprecated: [gtk_text_buffer_get_text: get_text].}
{.deprecated: [gtk_text_buffer_get_slice: get_slice].}
{.deprecated: [gtk_text_buffer_insert_pixbuf: insert_pixbuf].}
{.deprecated: [gtk_text_buffer_insert_child_anchor: insert_child_anchor].}
{.deprecated: [gtk_text_buffer_create_child_anchor: create_child_anchor].}
{.deprecated: [gtk_text_buffer_add_mark: add_mark].}
{.deprecated: [gtk_text_buffer_create_mark: create_mark].}
{.deprecated: [gtk_text_buffer_move_mark: move_mark].}
{.deprecated: [gtk_text_buffer_delete_mark: delete_mark].}
{.deprecated: [gtk_text_buffer_get_mark: get_mark].}
{.deprecated: [gtk_text_buffer_move_mark_by_name: move_mark_by_name].}
{.deprecated: [gtk_text_buffer_delete_mark_by_name: delete_mark_by_name].}
{.deprecated: [gtk_text_buffer_get_insert: get_insert].}
{.deprecated: [gtk_text_buffer_get_selection_bound: get_selection_bound].}
{.deprecated: [gtk_text_buffer_place_cursor: place_cursor].}
{.deprecated: [gtk_text_buffer_select_range: select_range].}
{.deprecated: [gtk_text_buffer_apply_tag: apply_tag].}
{.deprecated: [gtk_text_buffer_remove_tag: remove_tag].}
{.deprecated: [gtk_text_buffer_apply_tag_by_name: apply_tag_by_name].}
{.deprecated: [gtk_text_buffer_remove_tag_by_name: remove_tag_by_name].}
{.deprecated: [gtk_text_buffer_remove_all_tags: remove_all_tags].}
{.deprecated: [gtk_text_buffer_create_tag: create_tag].}
{.deprecated: [gtk_text_buffer_get_iter_at_line_offset: get_iter_at_line_offset].}
{.deprecated: [gtk_text_buffer_get_iter_at_line_index: get_iter_at_line_index].}
{.deprecated: [gtk_text_buffer_get_iter_at_offset: get_iter_at_offset].}
{.deprecated: [gtk_text_buffer_get_iter_at_line: get_iter_at_line].}
{.deprecated: [gtk_text_buffer_get_start_iter: get_start_iter].}
{.deprecated: [gtk_text_buffer_get_end_iter: get_end_iter].}
{.deprecated: [gtk_text_buffer_get_bounds: get_bounds].}
{.deprecated: [gtk_text_buffer_get_iter_at_mark: get_iter_at_mark].}
{.deprecated: [gtk_text_buffer_get_iter_at_child_anchor: get_iter_at_child_anchor].}
{.deprecated: [gtk_text_buffer_get_modified: get_modified].}
{.deprecated: [gtk_text_buffer_set_modified: set_modified].}
{.deprecated: [gtk_text_buffer_get_has_selection: get_has_selection].}
{.deprecated: [gtk_text_buffer_add_selection_clipboard: add_selection_clipboard].}
{.deprecated: [gtk_text_buffer_remove_selection_clipboard: remove_selection_clipboard].}
{.deprecated: [gtk_text_buffer_cut_clipboard: cut_clipboard].}
{.deprecated: [gtk_text_buffer_copy_clipboard: copy_clipboard].}
{.deprecated: [gtk_text_buffer_paste_clipboard: paste_clipboard].}
{.deprecated: [gtk_text_buffer_get_selection_bounds: get_selection_bounds].}
{.deprecated: [gtk_text_buffer_delete_selection: delete_selection].}
{.deprecated: [gtk_text_buffer_begin_user_action: begin_user_action].}
{.deprecated: [gtk_text_buffer_end_user_action: end_user_action].}
{.deprecated: [gtk_text_buffer_get_copy_target_list: get_copy_target_list].}
{.deprecated: [gtk_text_buffer_get_paste_target_list: get_paste_target_list].}
{.deprecated: [gtk_text_buffer_register_serialize_format: register_serialize_format].}
{.deprecated: [gtk_text_buffer_register_serialize_tagset: register_serialize_tagset].}
{.deprecated: [gtk_text_buffer_register_deserialize_format: register_deserialize_format].}
{.deprecated: [gtk_text_buffer_register_deserialize_tagset: register_deserialize_tagset].}
{.deprecated: [gtk_text_buffer_unregister_serialize_format: unregister_serialize_format].}
{.deprecated: [gtk_text_buffer_unregister_deserialize_format: unregister_deserialize_format].}
{.deprecated: [gtk_text_buffer_deserialize_set_can_create_tags: deserialize_set_can_create_tags].}
{.deprecated: [gtk_text_buffer_deserialize_get_can_create_tags: deserialize_get_can_create_tags].}
{.deprecated: [gtk_text_buffer_get_serialize_formats: get_serialize_formats].}
{.deprecated: [gtk_text_buffer_get_deserialize_formats: get_deserialize_formats].}
{.deprecated: [gtk_text_buffer_serialize: serialize].}
{.deprecated: [gtk_text_buffer_deserialize: deserialize].}
{.deprecated: [gtk_text_view_get_type: text_view_get_type].}
{.deprecated: [gtk_text_view_new: text_view_new].}
{.deprecated: [gtk_text_view_new_with_buffer: text_view_new_with_buffer].}
{.deprecated: [gtk_text_view_set_buffer: set_buffer].}
{.deprecated: [gtk_text_view_get_buffer: get_buffer].}
{.deprecated: [gtk_text_view_scroll_to_iter: scroll_to_iter].}
{.deprecated: [gtk_text_view_scroll_to_mark: scroll_to_mark].}
{.deprecated: [gtk_text_view_scroll_mark_onscreen: scroll_mark_onscreen].}
{.deprecated: [gtk_text_view_move_mark_onscreen: move_mark_onscreen].}
{.deprecated: [gtk_text_view_place_cursor_onscreen: place_cursor_onscreen].}
{.deprecated: [gtk_text_view_get_visible_rect: get_visible_rect].}
{.deprecated: [gtk_text_view_set_cursor_visible: set_cursor_visible].}
{.deprecated: [gtk_text_view_get_cursor_visible: get_cursor_visible].}
{.deprecated: [gtk_text_view_get_cursor_locations: get_cursor_locations].}
{.deprecated: [gtk_text_view_get_iter_location: get_iter_location].}
{.deprecated: [gtk_text_view_get_iter_at_location: get_iter_at_location].}
{.deprecated: [gtk_text_view_get_iter_at_position: get_iter_at_position].}
{.deprecated: [gtk_text_view_get_line_yrange: get_line_yrange].}
{.deprecated: [gtk_text_view_get_line_at_y: get_line_at_y].}
{.deprecated: [gtk_text_view_buffer_to_window_coords: buffer_to_window_coords].}
{.deprecated: [gtk_text_view_window_to_buffer_coords: window_to_buffer_coords].}
{.deprecated: [gtk_text_view_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_text_view_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_text_view_get_window: get_window].}
{.deprecated: [gtk_text_view_get_window_type: get_window_type].}
{.deprecated: [gtk_text_view_set_border_window_size: set_border_window_size].}
{.deprecated: [gtk_text_view_get_border_window_size: get_border_window_size].}
{.deprecated: [gtk_text_view_forward_display_line: forward_display_line].}
{.deprecated: [gtk_text_view_backward_display_line: backward_display_line].}
{.deprecated: [gtk_text_view_forward_display_line_end: forward_display_line_end].}
{.deprecated: [gtk_text_view_backward_display_line_start: backward_display_line_start].}
{.deprecated: [gtk_text_view_starts_display_line: starts_display_line].}
{.deprecated: [gtk_text_view_move_visually: move_visually].}
{.deprecated: [gtk_text_view_im_context_filter_keypress: im_context_filter_keypress].}
{.deprecated: [gtk_text_view_reset_im_context: reset_im_context].}
{.deprecated: [gtk_text_view_add_child_at_anchor: add_child_at_anchor].}
{.deprecated: [gtk_text_view_add_child_in_window: add_child_in_window].}
{.deprecated: [gtk_text_view_move_child: move_child].}
{.deprecated: [gtk_text_view_set_wrap_mode: set_wrap_mode].}
{.deprecated: [gtk_text_view_get_wrap_mode: get_wrap_mode].}
{.deprecated: [gtk_text_view_set_editable: set_editable].}
{.deprecated: [gtk_text_view_get_editable: get_editable].}
{.deprecated: [gtk_text_view_set_overwrite: set_overwrite].}
{.deprecated: [gtk_text_view_get_overwrite: get_overwrite].}
{.deprecated: [gtk_text_view_set_accepts_tab: set_accepts_tab].}
{.deprecated: [gtk_text_view_get_accepts_tab: get_accepts_tab].}
{.deprecated: [gtk_text_view_set_pixels_above_lines: set_pixels_above_lines].}
{.deprecated: [gtk_text_view_get_pixels_above_lines: get_pixels_above_lines].}
{.deprecated: [gtk_text_view_set_pixels_below_lines: set_pixels_below_lines].}
{.deprecated: [gtk_text_view_get_pixels_below_lines: get_pixels_below_lines].}
{.deprecated: [gtk_text_view_set_pixels_inside_wrap: set_pixels_inside_wrap].}
{.deprecated: [gtk_text_view_get_pixels_inside_wrap: get_pixels_inside_wrap].}
{.deprecated: [gtk_text_view_set_justification: set_justification].}
{.deprecated: [gtk_text_view_get_justification: get_justification].}
{.deprecated: [gtk_text_view_set_left_margin: set_left_margin].}
{.deprecated: [gtk_text_view_get_left_margin: get_left_margin].}
{.deprecated: [gtk_text_view_set_right_margin: set_right_margin].}
{.deprecated: [gtk_text_view_get_right_margin: get_right_margin].}
{.deprecated: [gtk_text_view_set_indent: set_indent].}
{.deprecated: [gtk_text_view_get_indent: get_indent].}
{.deprecated: [gtk_text_view_set_tabs: set_tabs].}
{.deprecated: [gtk_text_view_get_tabs: get_tabs].}
{.deprecated: [gtk_text_view_get_default_attributes: get_default_attributes].}
{.deprecated: [gtk_text_view_set_input_purpose: set_input_purpose].}
{.deprecated: [gtk_text_view_get_input_purpose: get_input_purpose].}
{.deprecated: [gtk_text_view_set_input_hints: set_input_hints].}
{.deprecated: [gtk_text_view_get_input_hints: get_input_hints].}
{.deprecated: [gtk_text_view_set_monospace: set_monospace].}
{.deprecated: [gtk_text_view_get_monospace: get_monospace].}
{.deprecated: [gtk_toolbar_get_type: toolbar_get_type].}
{.deprecated: [gtk_toolbar_new: toolbar_new].}
{.deprecated: [gtk_toolbar_insert: insert].}
{.deprecated: [gtk_toolbar_get_item_index: get_item_index].}
{.deprecated: [gtk_toolbar_get_n_items: get_n_items].}
{.deprecated: [gtk_toolbar_get_nth_item: get_nth_item].}
{.deprecated: [gtk_toolbar_get_show_arrow: get_show_arrow].}
{.deprecated: [gtk_toolbar_set_show_arrow: set_show_arrow].}
{.deprecated: [gtk_toolbar_get_style: get_style].}
{.deprecated: [gtk_toolbar_set_style: set_style].}
{.deprecated: [gtk_toolbar_unset_style: unset_style].}
{.deprecated: [gtk_toolbar_get_icon_size: get_icon_size].}
{.deprecated: [gtk_toolbar_set_icon_size: set_icon_size].}
{.deprecated: [gtk_toolbar_unset_icon_size: unset_icon_size].}
{.deprecated: [gtk_toolbar_get_relief_style: get_relief_style].}
{.deprecated: [gtk_toolbar_get_drop_index: get_drop_index].}
{.deprecated: [gtk_toolbar_set_drop_highlight_item: set_drop_highlight_item].}
{.deprecated: [gtk_tool_item_group_get_type: tool_item_group_get_type].}
{.deprecated: [gtk_tool_item_group_new: tool_item_group_new].}
{.deprecated: [gtk_tool_item_group_set_label: set_label].}
{.deprecated: [gtk_tool_item_group_set_label_widget: set_label_widget].}
{.deprecated: [gtk_tool_item_group_set_collapsed: set_collapsed].}
{.deprecated: [gtk_tool_item_group_set_ellipsize: set_ellipsize].}
{.deprecated: [gtk_tool_item_group_set_header_relief: set_header_relief].}
{.deprecated: [gtk_tool_item_group_get_label: get_label].}
{.deprecated: [gtk_tool_item_group_get_label_widget: get_label_widget].}
{.deprecated: [gtk_tool_item_group_get_collapsed: get_collapsed].}
{.deprecated: [gtk_tool_item_group_get_ellipsize: get_ellipsize].}
{.deprecated: [gtk_tool_item_group_get_header_relief: get_header_relief].}
{.deprecated: [gtk_tool_item_group_insert: insert].}
{.deprecated: [gtk_tool_item_group_set_item_position: set_item_position].}
{.deprecated: [gtk_tool_item_group_get_item_position: get_item_position].}
{.deprecated: [gtk_tool_item_group_get_n_items: get_n_items].}
{.deprecated: [gtk_tool_item_group_get_nth_item: get_nth_item].}
{.deprecated: [gtk_tool_item_group_get_drop_item: get_drop_item].}
{.deprecated: [gtk_tool_palette_get_type: tool_palette_get_type].}
{.deprecated: [gtk_tool_palette_new: tool_palette_new].}
{.deprecated: [gtk_tool_palette_set_group_position: set_group_position].}
{.deprecated: [gtk_tool_palette_set_exclusive: set_exclusive].}
{.deprecated: [gtk_tool_palette_set_expand: set_expand].}
{.deprecated: [gtk_tool_palette_get_group_position: get_group_position].}
{.deprecated: [gtk_tool_palette_get_exclusive: get_exclusive].}
{.deprecated: [gtk_tool_palette_get_expand: get_expand].}
{.deprecated: [gtk_tool_palette_set_icon_size: set_icon_size].}
{.deprecated: [gtk_tool_palette_unset_icon_size: unset_icon_size].}
{.deprecated: [gtk_tool_palette_set_style: set_style].}
{.deprecated: [gtk_tool_palette_unset_style: unset_style].}
{.deprecated: [gtk_tool_palette_get_icon_size: get_icon_size].}
{.deprecated: [gtk_tool_palette_get_style: get_style].}
{.deprecated: [gtk_tool_palette_get_drop_item: get_drop_item].}
{.deprecated: [gtk_tool_palette_get_drop_group: get_drop_group].}
{.deprecated: [gtk_tool_palette_get_drag_item: get_drag_item].}
{.deprecated: [gtk_tool_palette_set_drag_source: set_drag_source].}
{.deprecated: [gtk_tool_palette_add_drag_dest: add_drag_dest].}
{.deprecated: [gtk_tool_palette_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_tool_palette_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_tool_palette_get_drag_target_item: tool_palette_get_drag_target_item].}
{.deprecated: [gtk_tool_palette_get_drag_target_group: tool_palette_get_drag_target_group].}
{.deprecated: [gtk_tool_shell_get_type: tool_shell_get_type].}
{.deprecated: [gtk_tool_shell_get_icon_size: get_icon_size].}
{.deprecated: [gtk_tool_shell_get_orientation: get_orientation].}
{.deprecated: [gtk_tool_shell_get_style: get_style].}
{.deprecated: [gtk_tool_shell_get_relief_style: get_relief_style].}
{.deprecated: [gtk_tool_shell_rebuild_menu: rebuild_menu].}
{.deprecated: [gtk_tool_shell_get_text_orientation: get_text_orientation].}
{.deprecated: [gtk_tool_shell_get_text_alignment: get_text_alignment].}
{.deprecated: [gtk_tool_shell_get_ellipsize_mode: get_ellipsize_mode].}
{.deprecated: [gtk_tool_shell_get_text_size_group: get_text_size_group].}
{.deprecated: [gtk_test_init: test_init].}
{.deprecated: [gtk_test_register_all_types: test_register_all_types].}
{.deprecated: [gtk_test_list_all_types: test_list_all_types].}
{.deprecated: [gtk_test_find_widget: test_find_widget].}
{.deprecated: [gtk_test_create_widget: test_create_widget].}
{.deprecated: [gtk_test_create_simple_window: test_create_simple_window].}
{.deprecated: [gtk_test_display_button_window: test_display_button_window].}
{.deprecated: [gtk_test_slider_set_perc: test_slider_set_perc].}
{.deprecated: [gtk_test_slider_get_value: test_slider_get_value].}
{.deprecated: [gtk_test_spin_button_click: test_spin_button_click].}
{.deprecated: [gtk_test_widget_wait_for_draw: test_widget_wait_for_draw].}
{.deprecated: [gtk_test_widget_click: test_widget_click].}
{.deprecated: [gtk_test_widget_send_key: test_widget_send_key].}
{.deprecated: [gtk_test_text_set: test_text_set].}
{.deprecated: [gtk_test_text_get: test_text_get].}
{.deprecated: [gtk_test_find_sibling: test_find_sibling].}
{.deprecated: [gtk_test_find_label: test_find_label].}
{.deprecated: [gtk_tree_drag_source_get_type: tree_drag_source_get_type].}
{.deprecated: [gtk_tree_drag_source_row_draggable: row_draggable].}
{.deprecated: [gtk_tree_drag_source_drag_data_delete: drag_data_delete].}
{.deprecated: [gtk_tree_drag_source_drag_data_get: drag_data_get].}
{.deprecated: [gtk_tree_drag_dest_get_type: tree_drag_dest_get_type].}
{.deprecated: [gtk_tree_drag_dest_drag_data_received: drag_data_received].}
{.deprecated: [gtk_tree_drag_dest_row_drop_possible: row_drop_possible].}
{.deprecated: [gtk_tree_set_row_drag_data: tree_set_row_drag_data].}
{.deprecated: [gtk_tree_get_row_drag_data: tree_get_row_drag_data].}
{.deprecated: [gtk_tree_model_sort_get_type: tree_model_sort_get_type].}
{.deprecated: [gtk_tree_model_sort_new_with_model: sort_new_with_model].}
{.deprecated: [gtk_tree_model_sort_get_model: get_model].}
{.deprecated: [gtk_tree_model_sort_convert_child_path_to_path: convert_child_path_to_path].}
{.deprecated: [gtk_tree_model_sort_convert_child_iter_to_iter: convert_child_iter_to_iter].}
{.deprecated: [gtk_tree_model_sort_convert_path_to_child_path: convert_path_to_child_path].}
{.deprecated: [gtk_tree_model_sort_convert_iter_to_child_iter: convert_iter_to_child_iter].}
{.deprecated: [gtk_tree_model_sort_reset_default_sort_func: reset_default_sort_func].}
{.deprecated: [gtk_tree_model_sort_clear_cache: clear_cache].}
{.deprecated: [gtk_tree_model_sort_iter_is_valid: iter_is_valid].}
{.deprecated: [gtk_tree_selection_get_type: tree_selection_get_type].}
{.deprecated: [gtk_tree_selection_set_mode: set_mode].}
{.deprecated: [gtk_tree_selection_get_mode: get_mode].}
{.deprecated: [gtk_tree_selection_set_select_function: set_select_function].}
{.deprecated: [gtk_tree_selection_get_user_data: get_user_data].}
{.deprecated: [gtk_tree_selection_get_tree_view: get_tree_view].}
{.deprecated: [gtk_tree_selection_get_select_function: get_select_function].}
{.deprecated: [gtk_tree_selection_get_selected: get_selected].}
{.deprecated: [gtk_tree_selection_get_selected_rows: get_selected_rows].}
{.deprecated: [gtk_tree_selection_count_selected_rows: count_selected_rows].}
{.deprecated: [gtk_tree_selection_selected_foreach: selected_foreach].}
{.deprecated: [gtk_tree_selection_select_path: select_path].}
{.deprecated: [gtk_tree_selection_unselect_path: unselect_path].}
{.deprecated: [gtk_tree_selection_select_iter: select_iter].}
{.deprecated: [gtk_tree_selection_unselect_iter: unselect_iter].}
{.deprecated: [gtk_tree_selection_path_is_selected: path_is_selected].}
{.deprecated: [gtk_tree_selection_iter_is_selected: iter_is_selected].}
{.deprecated: [gtk_tree_selection_select_all: select_all].}
{.deprecated: [gtk_tree_selection_unselect_all: unselect_all].}
{.deprecated: [gtk_tree_selection_select_range: select_range].}
{.deprecated: [gtk_tree_selection_unselect_range: unselect_range].}
{.deprecated: [gtk_tree_store_get_type: tree_store_get_type].}
{.deprecated: [gtk_tree_store_new: tree_store_new].}
{.deprecated: [gtk_tree_store_newv: tree_store_newv].}
{.deprecated: [gtk_tree_store_set_column_types: set_column_types].}
{.deprecated: [gtk_tree_store_set_value: set_value].}
{.deprecated: [gtk_tree_store_set: set].}
{.deprecated: [gtk_tree_store_set_valuesv: set_valuesv].}
{.deprecated: [gtk_tree_store_remove: remove].}
{.deprecated: [gtk_tree_store_insert: insert].}
{.deprecated: [gtk_tree_store_insert_before: insert_before].}
{.deprecated: [gtk_tree_store_insert_after: insert_after].}
{.deprecated: [gtk_tree_store_insert_with_values: insert_with_values].}
{.deprecated: [gtk_tree_store_insert_with_valuesv: insert_with_valuesv].}
{.deprecated: [gtk_tree_store_prepend: prepend].}
{.deprecated: [gtk_tree_store_append: append].}
{.deprecated: [gtk_tree_store_is_ancestor: is_ancestor].}
{.deprecated: [gtk_tree_store_iter_depth: iter_depth].}
{.deprecated: [gtk_tree_store_clear: clear].}
{.deprecated: [gtk_tree_store_iter_is_valid: iter_is_valid].}
{.deprecated: [gtk_tree_store_reorder: reorder].}
{.deprecated: [gtk_tree_store_swap: swap].}
{.deprecated: [gtk_tree_store_move_before: move_before].}
{.deprecated: [gtk_tree_store_move_after: move_after].}
{.deprecated: [gtk_license_get_type: license_get_type].}
{.deprecated: [gtk_accel_flags_get_type: accel_flags_get_type].}
{.deprecated: [gtk_application_inhibit_flags_get_type: application_inhibit_flags_get_type].}
{.deprecated: [gtk_assistant_page_type_get_type: assistant_page_type_get_type].}
{.deprecated: [gtk_button_box_style_get_type: button_box_style_get_type].}
{.deprecated: [gtk_builder_error_get_type: builder_error_get_type].}
{.deprecated: [gtk_calendar_display_options_get_type: calendar_display_options_get_type].}
{.deprecated: [gtk_cell_renderer_state_get_type: cell_renderer_state_get_type].}
{.deprecated: [gtk_cell_renderer_mode_get_type: cell_renderer_mode_get_type].}
{.deprecated: [gtk_cell_renderer_accel_mode_get_type: cell_renderer_accel_mode_get_type].}
{.deprecated: [gtk_resize_mode_get_type: resize_mode_get_type].}
{.deprecated: [gtk_css_provider_error_get_type: css_provider_error_get_type].}
{.deprecated: [gtk_css_section_type_get_type: css_section_type_get_type].}
{.deprecated: [gtk_debug_flag_get_type: debug_flag_get_type].}
{.deprecated: [gtk_dialog_flags_get_type: dialog_flags_get_type].}
{.deprecated: [gtk_response_type_get_type: response_type_get_type].}
{.deprecated: [gtk_dest_defaults_get_type: dest_defaults_get_type].}
{.deprecated: [gtk_target_flags_get_type: target_flags_get_type].}
{.deprecated: [gtk_entry_icon_position_get_type: entry_icon_position_get_type].}
{.deprecated: [gtk_align_get_type: align_get_type].}
{.deprecated: [gtk_arrow_type_get_type: arrow_type_get_type].}
{.deprecated: [gtk_baseline_position_get_type: baseline_position_get_type].}
{.deprecated: [gtk_delete_type_get_type: delete_type_get_type].}
{.deprecated: [gtk_direction_type_get_type: direction_type_get_type].}
{.deprecated: [gtk_icon_size_get_type: icon_size_get_type].}
{.deprecated: [gtk_sensitivity_type_get_type: sensitivity_type_get_type].}
{.deprecated: [gtk_text_direction_get_type: text_direction_get_type].}
{.deprecated: [gtk_justification_get_type: justification_get_type].}
{.deprecated: [gtk_menu_direction_type_get_type: menu_direction_type_get_type].}
{.deprecated: [gtk_message_type_get_type: message_type_get_type].}
{.deprecated: [gtk_movement_step_get_type: movement_step_get_type].}
{.deprecated: [gtk_scroll_step_get_type: scroll_step_get_type].}
{.deprecated: [gtk_orientation_get_type: orientation_get_type].}
{.deprecated: [gtk_pack_type_get_type: pack_type_get_type].}
{.deprecated: [gtk_position_type_get_type: position_type_get_type].}
{.deprecated: [gtk_relief_style_get_type: relief_style_get_type].}
{.deprecated: [gtk_scroll_type_get_type: scroll_type_get_type].}
{.deprecated: [gtk_selection_mode_get_type: selection_mode_get_type].}
{.deprecated: [gtk_shadow_type_get_type: shadow_type_get_type].}
{.deprecated: [gtk_state_type_get_type: state_type_get_type].}
{.deprecated: [gtk_toolbar_style_get_type: toolbar_style_get_type].}
{.deprecated: [gtk_wrap_mode_get_type: wrap_mode_get_type].}
{.deprecated: [gtk_sort_type_get_type: sort_type_get_type].}
{.deprecated: [gtk_im_preedit_style_get_type: im_preedit_style_get_type].}
{.deprecated: [gtk_im_status_style_get_type: im_status_style_get_type].}
{.deprecated: [gtk_pack_direction_get_type: pack_direction_get_type].}
{.deprecated: [gtk_print_pages_get_type: print_pages_get_type].}
{.deprecated: [gtk_page_set_get_type: page_set_get_type].}
{.deprecated: [gtk_number_up_layout_get_type: number_up_layout_get_type].}
{.deprecated: [gtk_page_orientation_get_type: page_orientation_get_type].}
{.deprecated: [gtk_print_quality_get_type: print_quality_get_type].}
{.deprecated: [gtk_print_duplex_get_type: print_duplex_get_type].}
{.deprecated: [gtk_unit_get_type: unit_get_type].}
{.deprecated: [gtk_tree_view_grid_lines_get_type: tree_view_grid_lines_get_type].}
{.deprecated: [gtk_drag_result_get_type: drag_result_get_type].}
{.deprecated: [gtk_size_group_mode_get_type: size_group_mode_get_type].}
{.deprecated: [gtk_size_request_mode_get_type: size_request_mode_get_type].}
{.deprecated: [gtk_scrollable_policy_get_type: scrollable_policy_get_type].}
{.deprecated: [gtk_state_flags_get_type: state_flags_get_type].}
{.deprecated: [gtk_region_flags_get_type: region_flags_get_type].}
{.deprecated: [gtk_junction_sides_get_type: junction_sides_get_type].}
{.deprecated: [gtk_border_style_get_type: border_style_get_type].}
{.deprecated: [gtk_level_bar_mode_get_type: level_bar_mode_get_type].}
{.deprecated: [gtk_input_purpose_get_type: input_purpose_get_type].}
{.deprecated: [gtk_input_hints_get_type: input_hints_get_type].}
{.deprecated: [gtk_propagation_phase_get_type: propagation_phase_get_type].}
{.deprecated: [gtk_event_sequence_state_get_type: event_sequence_state_get_type].}
{.deprecated: [gtk_pan_direction_get_type: pan_direction_get_type].}
{.deprecated: [gtk_file_chooser_action_get_type: file_chooser_action_get_type].}
{.deprecated: [gtk_file_chooser_confirmation_get_type: file_chooser_confirmation_get_type].}
{.deprecated: [gtk_file_chooser_error_get_type: file_chooser_error_get_type].}
{.deprecated: [gtk_file_filter_flags_get_type: file_filter_flags_get_type].}
{.deprecated: [gtk_icon_lookup_flags_get_type: icon_lookup_flags_get_type].}
{.deprecated: [gtk_icon_theme_error_get_type: icon_theme_error_get_type].}
{.deprecated: [gtk_icon_view_drop_position_get_type: icon_view_drop_position_get_type].}
{.deprecated: [gtk_image_type_get_type: image_type_get_type].}
{.deprecated: [gtk_arrow_placement_get_type: arrow_placement_get_type].}
{.deprecated: [gtk_buttons_type_get_type: buttons_type_get_type].}
{.deprecated: [gtk_button_role_get_type: button_role_get_type].}
{.deprecated: [gtk_notebook_tab_get_type: notebook_tab_get_type].}
{.deprecated: [gtk_places_open_flags_get_type: places_open_flags_get_type].}
{.deprecated: [gtk_print_status_get_type: print_status_get_type].}
{.deprecated: [gtk_print_operation_result_get_type: print_operation_result_get_type].}
{.deprecated: [gtk_print_operation_action_get_type: print_operation_action_get_type].}
{.deprecated: [gtk_print_error_get_type: print_error_get_type].}
{.deprecated: [gtk_recent_sort_type_get_type: recent_sort_type_get_type].}
{.deprecated: [gtk_recent_chooser_error_get_type: recent_chooser_error_get_type].}
{.deprecated: [gtk_recent_filter_flags_get_type: recent_filter_flags_get_type].}
{.deprecated: [gtk_recent_manager_error_get_type: recent_manager_error_get_type].}
{.deprecated: [gtk_revealer_transition_type_get_type: revealer_transition_type_get_type].}
{.deprecated: [gtk_corner_type_get_type: corner_type_get_type].}
{.deprecated: [gtk_policy_type_get_type: policy_type_get_type].}
{.deprecated: [gtk_spin_button_update_policy_get_type: spin_button_update_policy_get_type].}
{.deprecated: [gtk_spin_type_get_type: spin_type_get_type].}
{.deprecated: [gtk_stack_transition_type_get_type: stack_transition_type_get_type].}
{.deprecated: [gtk_text_buffer_target_info_get_type: text_buffer_target_info_get_type].}
{.deprecated: [gtk_text_search_flags_get_type: text_search_flags_get_type].}
{.deprecated: [gtk_text_window_type_get_type: text_window_type_get_type].}
{.deprecated: [gtk_text_view_layer_get_type: text_view_layer_get_type].}
{.deprecated: [gtk_text_extend_selection_get_type: text_extend_selection_get_type].}
{.deprecated: [gtk_toolbar_space_style_get_type: toolbar_space_style_get_type].}
{.deprecated: [gtk_tool_palette_drag_targets_get_type: tool_palette_drag_targets_get_type].}
{.deprecated: [gtk_tree_model_flags_get_type: tree_model_flags_get_type].}
{.deprecated: [gtk_tree_view_drop_position_get_type: tree_view_drop_position_get_type].}
{.deprecated: [gtk_tree_view_column_sizing_get_type: tree_view_column_sizing_get_type].}
{.deprecated: [gtk_widget_help_type_get_type: widget_help_type_get_type].}
{.deprecated: [gtk_window_type_get_type: window_type_get_type].}
{.deprecated: [gtk_window_position_get_type: window_position_get_type].}
{.deprecated: [gtk_rc_flags_get_type: rc_flags_get_type].}
{.deprecated: [gtk_rc_token_type_get_type: rc_token_type_get_type].}
{.deprecated: [gtk_path_priority_type_get_type: path_priority_type_get_type].}
{.deprecated: [gtk_path_type_get_type: path_type_get_type].}
{.deprecated: [gtk_expander_style_get_type: expander_style_get_type].}
{.deprecated: [gtk_attach_options_get_type: attach_options_get_type].}
{.deprecated: [gtk_ui_manager_item_type_get_type: ui_manager_item_type_get_type].}
{.deprecated: [gtk_viewport_get_type: viewport_get_type].}
{.deprecated: [gtk_viewport_new: viewport_new].}
{.deprecated: [gtk_viewport_get_hadjustment: get_hadjustment].}
{.deprecated: [gtk_viewport_get_vadjustment: get_vadjustment].}
{.deprecated: [gtk_viewport_set_hadjustment: set_hadjustment].}
{.deprecated: [gtk_viewport_set_vadjustment: set_vadjustment].}
{.deprecated: [gtk_viewport_set_shadow_type: set_shadow_type].}
{.deprecated: [gtk_viewport_get_shadow_type: get_shadow_type].}
{.deprecated: [gtk_viewport_get_bin_window: get_bin_window].}
{.deprecated: [gtk_viewport_get_view_window: get_view_window].}
{.deprecated: [gtk_volume_button_get_type: volume_button_get_type].}
{.deprecated: [gtk_volume_button_new: volume_button_new].}
{.deprecated: [gtk_widget_path_get_type: widget_path_get_type].}
{.deprecated: [gtk_widget_path_new: widget_path_new].}
{.deprecated: [gtk_widget_path_copy: copy].}
{.deprecated: [gtk_widget_path_ref: `ref`].}
{.deprecated: [gtk_widget_path_unref: unref].}
{.deprecated: [gtk_widget_path_free: free].}
{.deprecated: [gtk_widget_path_to_string: to_string].}
{.deprecated: [gtk_widget_path_length: length].}
{.deprecated: [gtk_widget_path_append_type: append_type].}
{.deprecated: [gtk_widget_path_prepend_type: prepend_type].}
{.deprecated: [gtk_widget_path_append_with_siblings: append_with_siblings].}
{.deprecated: [gtk_widget_path_append_for_widget: append_for_widget].}
{.deprecated: [gtk_widget_path_iter_get_object_type: iter_get_object_type].}
{.deprecated: [gtk_widget_path_iter_set_object_type: iter_set_object_type].}
{.deprecated: [gtk_widget_path_iter_get_siblings: iter_get_siblings].}
{.deprecated: [gtk_widget_path_iter_get_sibling_index: iter_get_sibling_index].}
{.deprecated: [gtk_widget_path_iter_get_name: iter_get_name].}
{.deprecated: [gtk_widget_path_iter_set_name: iter_set_name].}
{.deprecated: [gtk_widget_path_iter_has_name: iter_has_name].}
{.deprecated: [gtk_widget_path_iter_has_qname: iter_has_qname].}
{.deprecated: [gtk_widget_path_iter_get_state: iter_get_state].}
{.deprecated: [gtk_widget_path_iter_set_state: iter_set_state].}
{.deprecated: [gtk_widget_path_iter_add_class: iter_add_class].}
{.deprecated: [gtk_widget_path_iter_remove_class: iter_remove_class].}
{.deprecated: [gtk_widget_path_iter_clear_classes: iter_clear_classes].}
{.deprecated: [gtk_widget_path_iter_list_classes: iter_list_classes].}
{.deprecated: [gtk_widget_path_iter_has_class: iter_has_class].}
{.deprecated: [gtk_widget_path_iter_has_qclass: iter_has_qclass].}
{.deprecated: [gtk_widget_path_iter_add_region: iter_add_region].}
{.deprecated: [gtk_widget_path_iter_remove_region: iter_remove_region].}
{.deprecated: [gtk_widget_path_iter_clear_regions: iter_clear_regions].}
{.deprecated: [gtk_widget_path_iter_list_regions: iter_list_regions].}
{.deprecated: [gtk_widget_path_iter_has_region: iter_has_region].}
{.deprecated: [gtk_widget_path_iter_has_qregion: iter_has_qregion].}
{.deprecated: [gtk_widget_path_get_object_type: get_object_type].}
{.deprecated: [gtk_widget_path_is_type: is_type].}
{.deprecated: [gtk_widget_path_has_parent: has_parent].}
{.deprecated: [gtk_window_group_get_type: window_group_get_type].}
{.deprecated: [gtk_window_group_new: window_group_new].}
{.deprecated: [gtk_window_group_add_window: add_window].}
{.deprecated: [gtk_window_group_remove_window: remove_window].}
{.deprecated: [gtk_window_group_list_windows: list_windows].}
{.deprecated: [gtk_window_group_get_current_grab: get_current_grab].}
{.deprecated: [gtk_window_group_get_current_device_grab: get_current_device_grab].}
{.deprecated: [gtk_arrow_get_type: arrow_get_type].}
{.deprecated: [gtk_arrow_new: arrow_new].}
{.deprecated: [gtk_arrow_set: set].}
{.deprecated: [gtk_action_get_type: action_get_type].}
{.deprecated: [gtk_action_new: action_new].}
{.deprecated: [gtk_action_get_name: get_name].}
{.deprecated: [gtk_action_is_sensitive: is_sensitive].}
{.deprecated: [gtk_action_get_sensitive: get_sensitive].}
{.deprecated: [gtk_action_set_sensitive: set_sensitive].}
{.deprecated: [gtk_action_is_visible: is_visible].}
{.deprecated: [gtk_action_get_visible: get_visible].}
{.deprecated: [gtk_action_set_visible: set_visible].}
{.deprecated: [gtk_action_activate: activate].}
{.deprecated: [gtk_action_create_icon: create_icon].}
{.deprecated: [gtk_action_create_menu_item: create_menu_item].}
{.deprecated: [gtk_action_create_tool_item: create_tool_item].}
{.deprecated: [gtk_action_create_menu: create_menu].}
{.deprecated: [gtk_action_get_proxies: get_proxies].}
{.deprecated: [gtk_action_connect_accelerator: connect_accelerator].}
{.deprecated: [gtk_action_disconnect_accelerator: disconnect_accelerator].}
{.deprecated: [gtk_action_get_accel_path: get_accel_path].}
{.deprecated: [gtk_action_get_accel_closure: get_accel_closure].}
{.deprecated: [gtk_action_block_activate: block_activate].}
{.deprecated: [gtk_action_unblock_activate: unblock_activate].}
{.deprecated: [gtk_action_set_accel_path: set_accel_path].}
{.deprecated: [gtk_action_set_accel_group: set_accel_group].}
{.deprecated: [gtk_action_set_label: set_label].}
{.deprecated: [gtk_action_get_label: get_label].}
{.deprecated: [gtk_action_set_short_label: set_short_label].}
{.deprecated: [gtk_action_get_short_label: get_short_label].}
{.deprecated: [gtk_action_set_tooltip: set_tooltip].}
{.deprecated: [gtk_action_get_tooltip: get_tooltip].}
{.deprecated: [gtk_action_set_stock_id: set_stock_id].}
{.deprecated: [gtk_action_get_stock_id: get_stock_id].}
{.deprecated: [gtk_action_set_gicon: set_gicon].}
{.deprecated: [gtk_action_get_gicon: get_gicon].}
{.deprecated: [gtk_action_set_icon_name: set_icon_name].}
{.deprecated: [gtk_action_get_icon_name: get_icon_name].}
{.deprecated: [gtk_action_set_visible_horizontal: set_visible_horizontal].}
{.deprecated: [gtk_action_get_visible_horizontal: get_visible_horizontal].}
{.deprecated: [gtk_action_set_visible_vertical: set_visible_vertical].}
{.deprecated: [gtk_action_get_visible_vertical: get_visible_vertical].}
{.deprecated: [gtk_action_set_is_important: set_is_important].}
{.deprecated: [gtk_action_get_is_important: get_is_important].}
{.deprecated: [gtk_action_set_always_show_image: set_always_show_image].}
{.deprecated: [gtk_action_get_always_show_image: get_always_show_image].}
{.deprecated: [gtk_activatable_get_type: activatable_get_type].}
{.deprecated: [gtk_activatable_sync_action_properties: sync_action_properties].}
{.deprecated: [gtk_activatable_set_related_action: set_related_action].}
{.deprecated: [gtk_activatable_get_related_action: get_related_action].}
{.deprecated: [gtk_activatable_set_use_action_appearance: set_use_action_appearance].}
{.deprecated: [gtk_activatable_get_use_action_appearance: get_use_action_appearance].}
{.deprecated: [gtk_activatable_do_set_related_action: do_set_related_action].}
{.deprecated: [gtk_stock_add: stock_add].}
{.deprecated: [gtk_stock_add_static: stock_add_static].}
{.deprecated: [gtk_stock_lookup: stock_lookup].}
{.deprecated: [gtk_stock_list_ids: stock_list_ids].}
{.deprecated: [gtk_stock_item_copy: copy].}
{.deprecated: [gtk_stock_item_free: free].}
{.deprecated: [gtk_stock_set_translate_func: stock_set_translate_func].}
{.deprecated: [gtk_action_group_get_type: action_group_get_type].}
{.deprecated: [gtk_action_group_new: action_group_new].}
{.deprecated: [gtk_action_group_get_name: get_name].}
{.deprecated: [gtk_action_group_get_sensitive: get_sensitive].}
{.deprecated: [gtk_action_group_set_sensitive: set_sensitive].}
{.deprecated: [gtk_action_group_get_visible: get_visible].}
{.deprecated: [gtk_action_group_set_visible: set_visible].}
{.deprecated: [gtk_action_group_get_accel_group: get_accel_group].}
{.deprecated: [gtk_action_group_set_accel_group: set_accel_group].}
{.deprecated: [gtk_action_group_get_action: get_action].}
{.deprecated: [gtk_action_group_list_actions: list_actions].}
{.deprecated: [gtk_action_group_add_action: add_action].}
{.deprecated: [gtk_action_group_add_action_with_accel: add_action_with_accel].}
{.deprecated: [gtk_action_group_remove_action: remove_action].}
{.deprecated: [gtk_action_group_add_actions: add_actions].}
{.deprecated: [gtk_action_group_add_toggle_actions: add_toggle_actions].}
{.deprecated: [gtk_action_group_add_radio_actions: add_radio_actions].}
{.deprecated: [gtk_action_group_add_actions_full: add_actions_full].}
{.deprecated: [gtk_action_group_add_toggle_actions_full: add_toggle_actions_full].}
{.deprecated: [gtk_action_group_add_radio_actions_full: add_radio_actions_full].}
{.deprecated: [gtk_action_group_set_translate_func: set_translate_func].}
{.deprecated: [gtk_action_group_set_translation_domain: set_translation_domain].}
{.deprecated: [gtk_action_group_translate_string: translate_string].}
{.deprecated: [gtk_alignment_get_type: alignment_get_type].}
{.deprecated: [gtk_alignment_new: alignment_new].}
{.deprecated: [gtk_alignment_set: set].}
{.deprecated: [gtk_alignment_set_padding: set_padding].}
{.deprecated: [gtk_alignment_get_padding: get_padding].}
{.deprecated: [gtk_color_selection_get_type: color_selection_get_type].}
{.deprecated: [gtk_color_selection_new: color_selection_new].}
{.deprecated: [gtk_color_selection_get_has_opacity_control: get_has_opacity_control].}
{.deprecated: [gtk_color_selection_set_has_opacity_control: set_has_opacity_control].}
{.deprecated: [gtk_color_selection_get_has_palette: get_has_palette].}
{.deprecated: [gtk_color_selection_set_has_palette: set_has_palette].}
{.deprecated: [gtk_color_selection_set_current_alpha: set_current_alpha].}
{.deprecated: [gtk_color_selection_get_current_alpha: get_current_alpha].}
{.deprecated: [gtk_color_selection_set_previous_alpha: set_previous_alpha].}
{.deprecated: [gtk_color_selection_get_previous_alpha: get_previous_alpha].}
{.deprecated: [gtk_color_selection_set_current_rgba: set_current_rgba].}
{.deprecated: [gtk_color_selection_get_current_rgba: get_current_rgba].}
{.deprecated: [gtk_color_selection_set_previous_rgba: set_previous_rgba].}
{.deprecated: [gtk_color_selection_get_previous_rgba: get_previous_rgba].}
{.deprecated: [gtk_color_selection_is_adjusting: is_adjusting].}
{.deprecated: [gtk_color_selection_palette_from_string: color_selection_palette_from_string].}
{.deprecated: [gtk_color_selection_palette_to_string: color_selection_palette_to_string].}
{.deprecated: [gtk_color_selection_set_change_palette_with_screen_hook: color_selection_set_change_palette_with_screen_hook].}
{.deprecated: [gtk_color_selection_set_current_color: set_current_color].}
{.deprecated: [gtk_color_selection_get_current_color: get_current_color].}
{.deprecated: [gtk_color_selection_set_previous_color: set_previous_color].}
{.deprecated: [gtk_color_selection_get_previous_color: get_previous_color].}
{.deprecated: [gtk_color_selection_dialog_get_type: color_selection_dialog_get_type].}
{.deprecated: [gtk_color_selection_dialog_new: color_selection_dialog_new].}
{.deprecated: [gtk_color_selection_dialog_get_color_selection: get_color_selection].}
{.deprecated: [gtk_font_selection_get_type: font_selection_get_type].}
{.deprecated: [gtk_font_selection_new: font_selection_new].}
{.deprecated: [gtk_font_selection_get_family_list: get_family_list].}
{.deprecated: [gtk_font_selection_get_face_list: get_face_list].}
{.deprecated: [gtk_font_selection_get_size_entry: get_size_entry].}
{.deprecated: [gtk_font_selection_get_size_list: get_size_list].}
{.deprecated: [gtk_font_selection_get_preview_entry: get_preview_entry].}
{.deprecated: [gtk_font_selection_get_family: get_family].}
{.deprecated: [gtk_font_selection_get_face: get_face].}
{.deprecated: [gtk_font_selection_get_size: get_size].}
{.deprecated: [gtk_font_selection_get_font_name: get_font_name].}
{.deprecated: [gtk_font_selection_set_font_name: set_font_name].}
{.deprecated: [gtk_font_selection_get_preview_text: get_preview_text].}
{.deprecated: [gtk_font_selection_set_preview_text: set_preview_text].}
{.deprecated: [gtk_font_selection_dialog_get_type: font_selection_dialog_get_type].}
{.deprecated: [gtk_font_selection_dialog_new: font_selection_dialog_new].}
{.deprecated: [gtk_font_selection_dialog_get_ok_button: get_ok_button].}
{.deprecated: [gtk_font_selection_dialog_get_cancel_button: get_cancel_button].}
{.deprecated: [gtk_font_selection_dialog_get_font_selection: get_font_selection].}
{.deprecated: [gtk_font_selection_dialog_get_font_name: get_font_name].}
{.deprecated: [gtk_font_selection_dialog_set_font_name: set_font_name].}
{.deprecated: [gtk_font_selection_dialog_get_preview_text: get_preview_text].}
{.deprecated: [gtk_font_selection_dialog_set_preview_text: set_preview_text].}
{.deprecated: [gtk_symbolic_color_get_type: symbolic_color_get_type].}
{.deprecated: [gtk_symbolic_color_new_literal: symbolic_color_new_literal].}
{.deprecated: [gtk_symbolic_color_new_name: symbolic_color_new_name].}
{.deprecated: [gtk_symbolic_color_new_shade: new_shade].}
{.deprecated: [gtk_symbolic_color_new_alpha: new_alpha].}
{.deprecated: [gtk_symbolic_color_new_mix: new_mix].}
{.deprecated: [gtk_symbolic_color_new_win32: symbolic_color_new_win32].}
{.deprecated: [gtk_symbolic_color_ref: `ref`].}
{.deprecated: [gtk_symbolic_color_unref: unref].}
{.deprecated: [gtk_symbolic_color_to_string: to_string].}
{.deprecated: [gtk_symbolic_color_resolve: resolve].}
{.deprecated: [gtk_gradient_get_type: gradient_get_type].}
{.deprecated: [gtk_gradient_new_linear: gradient_new_linear].}
{.deprecated: [gtk_gradient_new_radial: gradient_new_radial].}
{.deprecated: [gtk_gradient_add_color_stop: add_color_stop].}
{.deprecated: [gtk_gradient_ref: `ref`].}
{.deprecated: [gtk_gradient_unref: unref].}
{.deprecated: [gtk_gradient_resolve: resolve].}
{.deprecated: [gtk_gradient_resolve_for_context: resolve_for_context].}
{.deprecated: [gtk_gradient_to_string: to_string].}
{.deprecated: [gtk_handle_box_get_type: handle_box_get_type].}
{.deprecated: [gtk_handle_box_new: handle_box_new].}
{.deprecated: [gtk_handle_box_set_shadow_type: set_shadow_type].}
{.deprecated: [gtk_handle_box_get_shadow_type: get_shadow_type].}
{.deprecated: [gtk_handle_box_set_handle_position: set_handle_position].}
{.deprecated: [gtk_handle_box_get_handle_position: get_handle_position].}
{.deprecated: [gtk_handle_box_set_snap_edge: set_snap_edge].}
{.deprecated: [gtk_handle_box_get_snap_edge: get_snap_edge].}
{.deprecated: [gtk_handle_box_get_child_detached: get_child_detached].}
{.deprecated: [gtk_hbutton_box_get_type: hbutton_box_get_type].}
{.deprecated: [gtk_hbutton_box_new: hbutton_box_new].}
{.deprecated: [gtk_hbox_get_type: hbox_get_type].}
{.deprecated: [gtk_hbox_new: hbox_new].}
{.deprecated: [gtk_hpaned_get_type: hpaned_get_type].}
{.deprecated: [gtk_hpaned_new: hpaned_new].}
{.deprecated: [gtk_hsv_get_type: hsv_get_type].}
{.deprecated: [gtk_hsv_new: hsv_new].}
{.deprecated: [gtk_hsv_set_color: set_color].}
{.deprecated: [gtk_hsv_get_color: get_color].}
{.deprecated: [gtk_hsv_set_metrics: set_metrics].}
{.deprecated: [gtk_hsv_get_metrics: get_metrics].}
{.deprecated: [gtk_hsv_is_adjusting: is_adjusting].}
{.deprecated: [gtk_hscale_get_type: hscale_get_type].}
{.deprecated: [gtk_hscale_new: hscale_new].}
{.deprecated: [gtk_hscale_new_with_range: hscale_new_with_range].}
{.deprecated: [gtk_hscrollbar_get_type: hscrollbar_get_type].}
{.deprecated: [gtk_hscrollbar_new: hscrollbar_new].}
{.deprecated: [gtk_hseparator_get_type: hseparator_get_type].}
{.deprecated: [gtk_hseparator_new: hseparator_new].}
{.deprecated: [gtk_image_menu_item_get_type: image_menu_item_get_type].}
{.deprecated: [gtk_image_menu_item_new: image_menu_item_new].}
{.deprecated: [gtk_image_menu_item_new_with_label: image_menu_item_new_with_label].}
{.deprecated: [gtk_image_menu_item_new_with_mnemonic: image_menu_item_new_with_mnemonic].}
{.deprecated: [gtk_image_menu_item_new_from_stock: image_menu_item_new_from_stock].}
{.deprecated: [gtk_image_menu_item_set_always_show_image: set_always_show_image].}
{.deprecated: [gtk_image_menu_item_get_always_show_image: get_always_show_image].}
{.deprecated: [gtk_image_menu_item_set_image: set_image].}
{.deprecated: [gtk_image_menu_item_get_image: get_image].}
{.deprecated: [gtk_image_menu_item_set_use_stock: set_use_stock].}
{.deprecated: [gtk_image_menu_item_get_use_stock: get_use_stock].}
{.deprecated: [gtk_image_menu_item_set_accel_group: set_accel_group].}
{.deprecated: [gtk_numerable_icon_get_type: numerable_icon_get_type].}
{.deprecated: [gtk_numerable_icon_new: numerable_icon_new].}
{.deprecated: [gtk_numerable_icon_new_with_style_context: numerable_icon_new_with_style_context].}
{.deprecated: [gtk_numerable_icon_get_style_context: get_style_context].}
{.deprecated: [gtk_numerable_icon_set_style_context: set_style_context].}
{.deprecated: [gtk_numerable_icon_get_count: get_count].}
{.deprecated: [gtk_numerable_icon_set_count: set_count].}
{.deprecated: [gtk_numerable_icon_get_label: get_label].}
{.deprecated: [gtk_numerable_icon_set_label: set_label].}
{.deprecated: [gtk_numerable_icon_set_background_gicon: set_background_gicon].}
{.deprecated: [gtk_numerable_icon_get_background_gicon: get_background_gicon].}
{.deprecated: [gtk_numerable_icon_set_background_icon_name: set_background_icon_name].}
{.deprecated: [gtk_numerable_icon_get_background_icon_name: get_background_icon_name].}
{.deprecated: [gtk_toggle_action_get_type: toggle_action_get_type].}
{.deprecated: [gtk_toggle_action_new: toggle_action_new].}
{.deprecated: [gtk_toggle_action_toggled: toggled].}
{.deprecated: [gtk_toggle_action_set_active: set_active].}
{.deprecated: [gtk_toggle_action_get_active: get_active].}
{.deprecated: [gtk_toggle_action_set_draw_as_radio: set_draw_as_radio].}
{.deprecated: [gtk_toggle_action_get_draw_as_radio: get_draw_as_radio].}
{.deprecated: [gtk_radio_action_get_type: radio_action_get_type].}
{.deprecated: [gtk_radio_action_new: radio_action_new].}
{.deprecated: [gtk_radio_action_get_group: get_group].}
{.deprecated: [gtk_radio_action_set_group: set_group].}
{.deprecated: [gtk_radio_action_join_group: join_group].}
{.deprecated: [gtk_radio_action_get_current_value: get_current_value].}
{.deprecated: [gtk_radio_action_set_current_value: set_current_value].}
{.deprecated: [gtk_rc_add_default_file: rc_add_default_file].}
{.deprecated: [gtk_rc_set_default_files: rc_set_default_files].}
{.deprecated: [gtk_rc_get_default_files: rc_get_default_files].}
{.deprecated: [gtk_rc_get_style: rc_get_style].}
{.deprecated: [gtk_rc_get_style_by_paths: rc_get_style_by_paths].}
{.deprecated: [gtk_rc_reparse_all_for_settings: rc_reparse_all_for_settings].}
{.deprecated: [gtk_rc_reset_styles: rc_reset_styles].}
{.deprecated: [gtk_rc_find_pixmap_in_path: rc_find_pixmap_in_path].}
{.deprecated: [gtk_rc_parse: rc_parse].}
{.deprecated: [gtk_rc_parse_string: rc_parse_string].}
{.deprecated: [gtk_rc_reparse_all: rc_reparse_all].}
{.deprecated: [gtk_rc_style_get_type: rc_style_get_type].}
{.deprecated: [gtk_rc_style_new: rc_style_new].}
{.deprecated: [gtk_rc_style_copy: copy].}
{.deprecated: [gtk_rc_find_module_in_path: rc_find_module_in_path].}
{.deprecated: [gtk_rc_get_theme_dir: rc_get_theme_dir].}
{.deprecated: [gtk_rc_get_module_dir: rc_get_module_dir].}
{.deprecated: [gtk_rc_get_im_module_path: rc_get_im_module_path].}
{.deprecated: [gtk_rc_get_im_module_file: rc_get_im_module_file].}
{.deprecated: [gtk_rc_scanner_new: rc_scanner_new].}
{.deprecated: [gtk_rc_parse_color: rc_parse_color].}
{.deprecated: [gtk_rc_parse_color_full: rc_parse_color_full].}
{.deprecated: [gtk_rc_parse_state: rc_parse_state].}
{.deprecated: [gtk_rc_parse_priority: rc_parse_priority].}
{.deprecated: [gtk_binding_set_add_path: add_path].}
{.deprecated: [gtk_recent_action_get_type: recent_action_get_type].}
{.deprecated: [gtk_recent_action_new: recent_action_new].}
{.deprecated: [gtk_recent_action_new_for_manager: recent_action_new_for_manager].}
{.deprecated: [gtk_recent_action_get_show_numbers: get_show_numbers].}
{.deprecated: [gtk_recent_action_set_show_numbers: set_show_numbers].}
{.deprecated: [gtk_status_icon_get_type: status_icon_get_type].}
{.deprecated: [gtk_status_icon_new: status_icon_new].}
{.deprecated: [gtk_status_icon_new_from_pixbuf: status_icon_new_from_pixbuf].}
{.deprecated: [gtk_status_icon_new_from_file: status_icon_new_from_file].}
{.deprecated: [gtk_status_icon_new_from_stock: status_icon_new_from_stock].}
{.deprecated: [gtk_status_icon_new_from_icon_name: status_icon_new_from_icon_name].}
{.deprecated: [gtk_status_icon_new_from_gicon: status_icon_new_from_gicon].}
{.deprecated: [gtk_status_icon_set_from_pixbuf: set_from_pixbuf].}
{.deprecated: [gtk_status_icon_set_from_file: set_from_file].}
{.deprecated: [gtk_status_icon_set_from_stock: set_from_stock].}
{.deprecated: [gtk_status_icon_set_from_icon_name: set_from_icon_name].}
{.deprecated: [gtk_status_icon_set_from_gicon: set_from_gicon].}
{.deprecated: [gtk_status_icon_get_storage_type: get_storage_type].}
{.deprecated: [gtk_status_icon_get_pixbuf: get_pixbuf].}
{.deprecated: [gtk_status_icon_get_stock: get_stock].}
{.deprecated: [gtk_status_icon_get_icon_name: get_icon_name].}
{.deprecated: [gtk_status_icon_get_gicon: get_gicon].}
{.deprecated: [gtk_status_icon_get_size: get_size].}
{.deprecated: [gtk_status_icon_set_screen: set_screen].}
{.deprecated: [gtk_status_icon_get_screen: get_screen].}
{.deprecated: [gtk_status_icon_set_has_tooltip: set_has_tooltip].}
{.deprecated: [gtk_status_icon_set_tooltip_text: set_tooltip_text].}
{.deprecated: [gtk_status_icon_set_tooltip_markup: set_tooltip_markup].}
{.deprecated: [gtk_status_icon_set_title: set_title].}
{.deprecated: [gtk_status_icon_get_title: get_title].}
{.deprecated: [gtk_status_icon_set_name: set_name].}
{.deprecated: [gtk_status_icon_set_visible: set_visible].}
{.deprecated: [gtk_status_icon_get_visible: get_visible].}
{.deprecated: [gtk_status_icon_is_embedded: is_embedded].}
{.deprecated: [gtk_status_icon_position_menu: status_icon_position_menu].}
{.deprecated: [gtk_status_icon_get_geometry: get_geometry].}
{.deprecated: [gtk_status_icon_get_has_tooltip: get_has_tooltip].}
{.deprecated: [gtk_status_icon_get_tooltip_text: get_tooltip_text].}
{.deprecated: [gtk_status_icon_get_tooltip_markup: get_tooltip_markup].}
{.deprecated: [gtk_status_icon_get_x11_window_id: get_x11_window_id].}
{.deprecated: [gtk_style_get_type: style_get_type].}
{.deprecated: [gtk_style_new: style_new].}
{.deprecated: [gtk_style_copy: copy].}
{.deprecated: [gtk_style_attach: attach].}
{.deprecated: [gtk_style_detach: detach].}
{.deprecated: [gtk_style_set_background: set_background].}
{.deprecated: [gtk_style_apply_default_background: apply_default_background].}
{.deprecated: [gtk_style_lookup_icon_set: lookup_icon_set].}
{.deprecated: [gtk_style_lookup_color: lookup_color].}
{.deprecated: [gtk_style_render_icon: render_icon].}
{.deprecated: [gtk_paint_hline: paint_hline].}
{.deprecated: [gtk_paint_vline: paint_vline].}
{.deprecated: [gtk_paint_shadow: paint_shadow].}
{.deprecated: [gtk_paint_arrow: paint_arrow].}
{.deprecated: [gtk_paint_diamond: paint_diamond].}
{.deprecated: [gtk_paint_box: paint_box].}
{.deprecated: [gtk_paint_flat_box: paint_flat_box].}
{.deprecated: [gtk_paint_check: paint_check].}
{.deprecated: [gtk_paint_option: paint_option].}
{.deprecated: [gtk_paint_tab: paint_tab].}
{.deprecated: [gtk_paint_shadow_gap: paint_shadow_gap].}
{.deprecated: [gtk_paint_box_gap: paint_box_gap].}
{.deprecated: [gtk_paint_extension: paint_extension].}
{.deprecated: [gtk_paint_focus: paint_focus].}
{.deprecated: [gtk_paint_slider: paint_slider].}
{.deprecated: [gtk_paint_handle: paint_handle].}
{.deprecated: [gtk_paint_expander: paint_expander].}
{.deprecated: [gtk_paint_layout: paint_layout].}
{.deprecated: [gtk_paint_resize_grip: paint_resize_grip].}
{.deprecated: [gtk_paint_spinner: paint_spinner].}
{.deprecated: [gtk_style_get_style_property: get_style_property].}
{.deprecated: [gtk_style_get: get].}
{.deprecated: [gtk_style_has_context: has_context].}
{.deprecated: [gtk_widget_style_attach: style_attach].}
{.deprecated: [gtk_widget_has_rc_style: has_rc_style].}
{.deprecated: [gtk_widget_set_style: set_style].}
{.deprecated: [gtk_widget_ensure_style: ensure_style].}
{.deprecated: [gtk_widget_get_style: get_style].}
{.deprecated: [gtk_widget_modify_style: modify_style].}
{.deprecated: [gtk_widget_get_modifier_style: get_modifier_style].}
{.deprecated: [gtk_widget_modify_fg: modify_fg].}
{.deprecated: [gtk_widget_modify_bg: modify_bg].}
{.deprecated: [gtk_widget_modify_text: modify_text].}
{.deprecated: [gtk_widget_modify_base: modify_base].}
{.deprecated: [gtk_widget_modify_cursor: modify_cursor].}
{.deprecated: [gtk_widget_modify_font: modify_font].}
{.deprecated: [gtk_widget_reset_rc_styles: reset_rc_styles].}
{.deprecated: [gtk_widget_get_default_style: widget_get_default_style].}
{.deprecated: [gtk_widget_path: path].}
{.deprecated: [gtk_widget_class_path: class_path].}
{.deprecated: [gtk_widget_render_icon: render_icon].}
{.deprecated: [gtk_table_get_type: table_get_type].}
{.deprecated: [gtk_table_new: table_new].}
{.deprecated: [gtk_table_resize: resize].}
{.deprecated: [gtk_table_attach: attach].}
{.deprecated: [gtk_table_attach_defaults: attach_defaults].}
{.deprecated: [gtk_table_set_row_spacing: set_row_spacing].}
{.deprecated: [gtk_table_get_row_spacing: get_row_spacing].}
{.deprecated: [gtk_table_set_col_spacing: set_col_spacing].}
{.deprecated: [gtk_table_get_col_spacing: get_col_spacing].}
{.deprecated: [gtk_table_set_row_spacings: set_row_spacings].}
{.deprecated: [gtk_table_get_default_row_spacing: get_default_row_spacing].}
{.deprecated: [gtk_table_set_col_spacings: set_col_spacings].}
{.deprecated: [gtk_table_get_default_col_spacing: get_default_col_spacing].}
{.deprecated: [gtk_table_set_homogeneous: set_homogeneous].}
{.deprecated: [gtk_table_get_homogeneous: get_homogeneous].}
{.deprecated: [gtk_table_get_size: get_size].}
{.deprecated: [gtk_tearoff_menu_item_get_type: tearoff_menu_item_get_type].}
{.deprecated: [gtk_tearoff_menu_item_new: tearoff_menu_item_new].}
{.deprecated: [gtk_theming_engine_get_type: theming_engine_get_type].}
{.deprecated: [gtk_theming_engine_register_property: theming_engine_register_property].}
{.deprecated: [gtk_theming_engine_get_property: get_property].}
{.deprecated: [gtk_theming_engine_get: get].}
{.deprecated: [gtk_theming_engine_get_style_property: get_style_property].}
{.deprecated: [gtk_theming_engine_get_style: get_style].}
{.deprecated: [gtk_theming_engine_lookup_color: lookup_color].}
{.deprecated: [gtk_theming_engine_get_path: get_path].}
{.deprecated: [gtk_theming_engine_has_class: has_class].}
{.deprecated: [gtk_theming_engine_has_region: has_region].}
{.deprecated: [gtk_theming_engine_get_state: get_state].}
{.deprecated: [gtk_theming_engine_state_is_running: state_is_running].}
{.deprecated: [gtk_theming_engine_get_direction: get_direction].}
{.deprecated: [gtk_theming_engine_get_junction_sides: get_junction_sides].}
{.deprecated: [gtk_theming_engine_get_color: get_color].}
{.deprecated: [gtk_theming_engine_get_background_color: get_background_color].}
{.deprecated: [gtk_theming_engine_get_border_color: get_border_color].}
{.deprecated: [gtk_theming_engine_get_border: get_border].}
{.deprecated: [gtk_theming_engine_get_padding: get_padding].}
{.deprecated: [gtk_theming_engine_get_margin: get_margin].}
{.deprecated: [gtk_theming_engine_get_font: get_font].}
{.deprecated: [gtk_theming_engine_load: theming_engine_load].}
{.deprecated: [gtk_theming_engine_get_screen: get_screen].}
{.deprecated: [gtk_ui_manager_get_type: ui_manager_get_type].}
{.deprecated: [gtk_ui_manager_new: ui_manager_new].}
{.deprecated: [gtk_ui_manager_set_add_tearoffs: set_add_tearoffs].}
{.deprecated: [gtk_ui_manager_get_add_tearoffs: get_add_tearoffs].}
{.deprecated: [gtk_ui_manager_insert_action_group: insert_action_group].}
{.deprecated: [gtk_ui_manager_remove_action_group: remove_action_group].}
{.deprecated: [gtk_ui_manager_get_action_groups: get_action_groups].}
{.deprecated: [gtk_ui_manager_get_accel_group: get_accel_group].}
{.deprecated: [gtk_ui_manager_get_widget: get_widget].}
{.deprecated: [gtk_ui_manager_get_toplevels: get_toplevels].}
{.deprecated: [gtk_ui_manager_get_action: get_action].}
{.deprecated: [gtk_ui_manager_add_ui_from_string: add_ui_from_string].}
{.deprecated: [gtk_ui_manager_add_ui_from_file: add_ui_from_file].}
{.deprecated: [gtk_ui_manager_add_ui_from_resource: add_ui_from_resource].}
{.deprecated: [gtk_ui_manager_add_ui: add_ui].}
{.deprecated: [gtk_ui_manager_remove_ui: remove_ui].}
{.deprecated: [gtk_ui_manager_get_ui: get_ui].}
{.deprecated: [gtk_ui_manager_ensure_update: ensure_update].}
{.deprecated: [gtk_ui_manager_new_merge_id: new_merge_id].}
{.deprecated: [gtk_vbutton_box_get_type: vbutton_box_get_type].}
{.deprecated: [gtk_vbutton_box_new: vbutton_box_new].}
{.deprecated: [gtk_vbox_get_type: vbox_get_type].}
{.deprecated: [gtk_vbox_new: vbox_new].}
{.deprecated: [gtk_vpaned_get_type: vpaned_get_type].}
{.deprecated: [gtk_vpaned_new: vpaned_new].}
{.deprecated: [gtk_vscale_get_type: vscale_get_type].}
{.deprecated: [gtk_vscale_new: vscale_new].}
{.deprecated: [gtk_vscale_new_with_range: vscale_new_with_range].}
{.deprecated: [gtk_vscrollbar_get_type: vscrollbar_get_type].}
{.deprecated: [gtk_vscrollbar_new: vscrollbar_new].}
{.deprecated: [gtk_vseparator_get_type: vseparator_get_type].}
{.deprecated: [gtk_vseparator_new: vseparator_new].}
{.deprecated: [gtk_page_setup_unix_dialog_get_type: page_setup_unix_dialog_get_type].}
{.deprecated: [gtk_page_setup_unix_dialog_new: page_setup_unix_dialog_new].}
{.deprecated: [gtk_page_setup_unix_dialog_set_page_setup: set_page_setup].}
{.deprecated: [gtk_page_setup_unix_dialog_get_page_setup: get_page_setup].}
{.deprecated: [gtk_page_setup_unix_dialog_set_print_settings: set_print_settings].}
{.deprecated: [gtk_page_setup_unix_dialog_get_print_settings: get_print_settings].}
{.deprecated: [gtk_print_capabilities_get_type: print_capabilities_get_type].}
{.deprecated: [gtk_printer_get_type: printer_get_type].}
{.deprecated: [gtk_printer_new: printer_new].}
{.deprecated: [gtk_printer_get_backend: get_backend].}
{.deprecated: [gtk_printer_get_name: get_name].}
{.deprecated: [gtk_printer_get_state_message: get_state_message].}
{.deprecated: [gtk_printer_get_description: get_description].}
{.deprecated: [gtk_printer_get_location: get_location].}
{.deprecated: [gtk_printer_get_icon_name: get_icon_name].}
{.deprecated: [gtk_printer_get_job_count: get_job_count].}
{.deprecated: [gtk_printer_is_active: is_active].}
{.deprecated: [gtk_printer_is_paused: is_paused].}
{.deprecated: [gtk_printer_is_accepting_jobs: is_accepting_jobs].}
{.deprecated: [gtk_printer_is_virtual: is_virtual].}
{.deprecated: [gtk_printer_is_default: is_default].}
{.deprecated: [gtk_printer_accepts_pdf: accepts_pdf].}
{.deprecated: [gtk_printer_accepts_ps: accepts_ps].}
{.deprecated: [gtk_printer_list_papers: list_papers].}
{.deprecated: [gtk_printer_get_default_page_size: get_default_page_size].}
{.deprecated: [gtk_printer_compare: compare].}
{.deprecated: [gtk_printer_has_details: has_details].}
{.deprecated: [gtk_printer_request_details: request_details].}
{.deprecated: [gtk_printer_get_capabilities: get_capabilities].}
{.deprecated: [gtk_printer_get_hard_margins: get_hard_margins].}
{.deprecated: [gtk_enumerate_printers: enumerate_printers].}
{.deprecated: [gtk_print_job_get_type: print_job_get_type].}
{.deprecated: [gtk_print_job_new: print_job_new].}
{.deprecated: [gtk_print_job_get_settings: get_settings].}
{.deprecated: [gtk_print_job_get_printer: get_printer].}
{.deprecated: [gtk_print_job_get_title: get_title].}
{.deprecated: [gtk_print_job_get_status: get_status].}
{.deprecated: [gtk_print_job_set_source_file: set_source_file].}
{.deprecated: [gtk_print_job_get_surface: get_surface].}
{.deprecated: [gtk_print_job_set_track_print_status: set_track_print_status].}
{.deprecated: [gtk_print_job_get_track_print_status: get_track_print_status].}
{.deprecated: [gtk_print_job_send: send].}
{.deprecated: [gtk_print_job_get_pages: get_pages].}
{.deprecated: [gtk_print_job_set_pages: set_pages].}
{.deprecated: [gtk_print_job_get_page_ranges: get_page_ranges].}
{.deprecated: [gtk_print_job_set_page_ranges: set_page_ranges].}
{.deprecated: [gtk_print_job_get_page_set: get_page_set].}
{.deprecated: [gtk_print_job_set_page_set: set_page_set].}
{.deprecated: [gtk_print_job_get_num_copies: get_num_copies].}
{.deprecated: [gtk_print_job_set_num_copies: set_num_copies].}
{.deprecated: [gtk_print_job_get_scale: get_scale].}
{.deprecated: [gtk_print_job_set_scale: set_scale].}
{.deprecated: [gtk_print_job_get_n_up: get_n_up].}
{.deprecated: [gtk_print_job_set_n_up: set_n_up].}
{.deprecated: [gtk_print_job_get_n_up_layout: get_n_up_layout].}
{.deprecated: [gtk_print_job_set_n_up_layout: set_n_up_layout].}
{.deprecated: [gtk_print_job_get_rotate: get_rotate].}
{.deprecated: [gtk_print_job_set_rotate: set_rotate].}
{.deprecated: [gtk_print_job_get_collate: get_collate].}
{.deprecated: [gtk_print_job_set_collate: set_collate].}
{.deprecated: [gtk_print_job_get_reverse: get_reverse].}
{.deprecated: [gtk_print_job_set_reverse: set_reverse].}
{.deprecated: [gtk_print_unix_dialog_get_type: print_unix_dialog_get_type].}
{.deprecated: [gtk_print_unix_dialog_new: print_unix_dialog_new].}
{.deprecated: [gtk_print_unix_dialog_set_page_setup: set_page_setup].}
{.deprecated: [gtk_print_unix_dialog_get_page_setup: get_page_setup].}
{.deprecated: [gtk_print_unix_dialog_set_current_page: set_current_page].}
{.deprecated: [gtk_print_unix_dialog_get_current_page: get_current_page].}
{.deprecated: [gtk_print_unix_dialog_set_settings: set_settings].}
{.deprecated: [gtk_print_unix_dialog_get_settings: get_settings].}
{.deprecated: [gtk_print_unix_dialog_get_selected_printer: get_selected_printer].}
{.deprecated: [gtk_print_unix_dialog_add_custom_tab: add_custom_tab].}
{.deprecated: [gtk_print_unix_dialog_set_manual_capabilities: set_manual_capabilities].}
{.deprecated: [gtk_print_unix_dialog_get_manual_capabilities: get_manual_capabilities].}
{.deprecated: [gtk_print_unix_dialog_set_support_selection: set_support_selection].}
{.deprecated: [gtk_print_unix_dialog_get_support_selection: get_support_selection].}
{.deprecated: [gtk_print_unix_dialog_set_has_selection: set_has_selection].}
{.deprecated: [gtk_print_unix_dialog_get_has_selection: get_has_selection].}
{.deprecated: [gtk_print_unix_dialog_set_embed_page_setup: set_embed_page_setup].}
{.deprecated: [gtk_print_unix_dialog_get_embed_page_setup: get_embed_page_setup].}
{.deprecated: [gtk_print_unix_dialog_get_page_setup_set: get_page_setup_set].}
{.deprecated: [gtk_widget_accessible_get_type: widget_accessible_get_type].}
{.deprecated: [gtk_arrow_accessible_get_type: arrow_accessible_get_type].}
{.deprecated: [gtk_cell_accessible_get_type: cell_accessible_get_type].}
{.deprecated: [gtk_renderer_cell_accessible_get_type: renderer_cell_accessible_get_type].}
{.deprecated: [gtk_renderer_cell_accessible_new: renderer_cell_accessible_new].}
{.deprecated: [gtk_boolean_cell_accessible_get_type: boolean_cell_accessible_get_type].}
{.deprecated: [gtk_container_accessible_get_type: container_accessible_get_type].}
{.deprecated: [gtk_button_accessible_get_type: button_accessible_get_type].}
{.deprecated: [gtk_cell_accessible_parent_get_type: cell_accessible_parent_get_type].}
{.deprecated: [gtk_cell_accessible_parent_get_cell_extents: get_cell_extents].}
{.deprecated: [gtk_cell_accessible_parent_get_cell_area: get_cell_area].}
{.deprecated: [gtk_cell_accessible_parent_grab_focus: grab_focus].}
{.deprecated: [gtk_cell_accessible_parent_get_child_index: get_child_index].}
{.deprecated: [gtk_cell_accessible_parent_get_renderer_state: get_renderer_state].}
{.deprecated: [gtk_cell_accessible_parent_expand_collapse: expand_collapse].}
{.deprecated: [gtk_cell_accessible_parent_activate: activate].}
{.deprecated: [gtk_cell_accessible_parent_edit: edit].}
{.deprecated: [gtk_cell_accessible_parent_update_relationset: update_relationset].}
{.deprecated: [gtk_menu_item_accessible_get_type: menu_item_accessible_get_type].}
{.deprecated: [gtk_check_menu_item_accessible_get_type: check_menu_item_accessible_get_type].}
{.deprecated: [gtk_combo_box_accessible_get_type: combo_box_accessible_get_type].}
{.deprecated: [gtk_container_cell_accessible_get_type: container_cell_accessible_get_type].}
{.deprecated: [gtk_container_cell_accessible_new: container_cell_accessible_new].}
{.deprecated: [gtk_container_cell_accessible_add_child: add_child].}
{.deprecated: [gtk_container_cell_accessible_remove_child: remove_child].}
{.deprecated: [gtk_container_cell_accessible_get_children: get_children].}
{.deprecated: [gtk_entry_accessible_get_type: entry_accessible_get_type].}
{.deprecated: [gtk_entry_icon_accessible_get_type: entry_icon_accessible_get_type].}
{.deprecated: [gtk_expander_accessible_get_type: expander_accessible_get_type].}
{.deprecated: [gtk_flow_box_accessible_get_type: flow_box_accessible_get_type].}
{.deprecated: [gtk_flow_box_child_accessible_get_type: flow_box_child_accessible_get_type].}
{.deprecated: [gtk_frame_accessible_get_type: frame_accessible_get_type].}
{.deprecated: [gtk_icon_view_accessible_get_type: icon_view_accessible_get_type].}
{.deprecated: [gtk_image_accessible_get_type: image_accessible_get_type].}
{.deprecated: [gtk_image_cell_accessible_get_type: image_cell_accessible_get_type].}
{.deprecated: [gtk_label_accessible_get_type: label_accessible_get_type].}
{.deprecated: [gtk_level_bar_accessible_get_type: level_bar_accessible_get_type].}
{.deprecated: [gtk_link_button_accessible_get_type: link_button_accessible_get_type].}
{.deprecated: [gtk_list_box_accessible_get_type: list_box_accessible_get_type].}
{.deprecated: [gtk_list_box_row_accessible_get_type: list_box_row_accessible_get_type].}
{.deprecated: [gtk_lock_button_accessible_get_type: lock_button_accessible_get_type].}
{.deprecated: [gtk_menu_shell_accessible_get_type: menu_shell_accessible_get_type].}
{.deprecated: [gtk_menu_accessible_get_type: menu_accessible_get_type].}
{.deprecated: [gtk_toggle_button_accessible_get_type: toggle_button_accessible_get_type].}
{.deprecated: [gtk_menu_button_accessible_get_type: menu_button_accessible_get_type].}
{.deprecated: [gtk_notebook_accessible_get_type: notebook_accessible_get_type].}
{.deprecated: [gtk_notebook_page_accessible_get_type: notebook_page_accessible_get_type].}
{.deprecated: [gtk_notebook_page_accessible_new: notebook_page_accessible_new].}
{.deprecated: [gtk_notebook_page_accessible_invalidate: invalidate].}
{.deprecated: [gtk_popover_accessible_get_type: popover_accessible_get_type].}
{.deprecated: [gtk_paned_accessible_get_type: paned_accessible_get_type].}
{.deprecated: [gtk_progress_bar_accessible_get_type: progress_bar_accessible_get_type].}
{.deprecated: [gtk_radio_button_accessible_get_type: radio_button_accessible_get_type].}
{.deprecated: [gtk_radio_menu_item_accessible_get_type: radio_menu_item_accessible_get_type].}
{.deprecated: [gtk_range_accessible_get_type: range_accessible_get_type].}
{.deprecated: [gtk_scale_accessible_get_type: scale_accessible_get_type].}
{.deprecated: [gtk_scale_button_accessible_get_type: scale_button_accessible_get_type].}
{.deprecated: [gtk_scrolled_window_accessible_get_type: scrolled_window_accessible_get_type].}
{.deprecated: [gtk_spin_button_accessible_get_type: spin_button_accessible_get_type].}
{.deprecated: [gtk_spinner_accessible_get_type: spinner_accessible_get_type].}
{.deprecated: [gtk_statusbar_accessible_get_type: statusbar_accessible_get_type].}
{.deprecated: [gtk_switch_accessible_get_type: switch_accessible_get_type].}
{.deprecated: [gtk_text_cell_accessible_get_type: text_cell_accessible_get_type].}
{.deprecated: [gtk_text_view_accessible_get_type: text_view_accessible_get_type].}
{.deprecated: [gtk_toplevel_accessible_get_type: toplevel_accessible_get_type].}
{.deprecated: [gtk_toplevel_accessible_get_children: get_children].}
{.deprecated: [gtk_tree_view_accessible_get_type: tree_view_accessible_get_type].}
{.deprecated: [gtk_window_accessible_get_type: window_accessible_get_type].}
